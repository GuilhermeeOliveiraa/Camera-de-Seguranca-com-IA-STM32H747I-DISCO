
STM32H747I-DISCO_GettingStarted_ObjectDetection_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00063000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00026f48  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .qspi_section 00000000  90000000  90000000  0010beb0  2**0
                  CONTENTS
  4 .InternalFlashSection 000a8e90  08100020  08100020  00063020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata       00023020  08036f48  08036f48  00036f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM          00000008  08059f68  08059f68  00059f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000004  08059f70  08059f70  00059f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08059f74  08059f74  00059f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000084b4  24000000  08059f78  0005a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .NN_OutputData_Buffer 00000004  240084c0  0806242c  000624c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .NN_InputImage_Buffer 00000004  240084e0  08062430  000624e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000016f8  240084e8  08062434  000624e8  2**3
                  ALLOC
 13 ._user_heap_stack 00005c00  20000000  20000000  0010c000  2**5
                  ALLOC
 14 .axisram_section 00041020  24009be0  24009be0  0010cbe0  2**5
                  ALLOC
 15 .sram_section 00000500  30000000  30000000  0010c000  2**2
                  ALLOC
 16 .sdram_section 00aa132c  d0000000  d0000000  0010c000  2**5
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0010beb0  2**0
                  CONTENTS, READONLY
 18 .debug_info   0004fcf5  00000000  00000000  0010bede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000094cc  00000000  00000000  0015bbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002a553  00000000  00000000  0016509f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000020a0  00000000  00000000  0018f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000443f  00000000  00000000  00191698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000504bf  00000000  00000000  00195ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0004df30  00000000  00000000  001e5f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001d46f0  00000000  00000000  00233ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000d6  00000000  00000000  004085b6  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000077d8  00000000  00000000  0040868c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 0000015e  00000000  00000000  0040fe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    00001ae9  00000000  00000000  0040ffc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 000004d8  00000000  00000000  00411aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	240084e8 	.word	0x240084e8
 801001c:	00000000 	.word	0x00000000
 8010020:	08036f30 	.word	0x08036f30

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	240084ec 	.word	0x240084ec
 801003c:	08036f30 	.word	0x08036f30

08010040 <memchr>:
 8010040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010044:	2a10      	cmp	r2, #16
 8010046:	db2b      	blt.n	80100a0 <memchr+0x60>
 8010048:	f010 0f07 	tst.w	r0, #7
 801004c:	d008      	beq.n	8010060 <memchr+0x20>
 801004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010052:	3a01      	subs	r2, #1
 8010054:	428b      	cmp	r3, r1
 8010056:	d02d      	beq.n	80100b4 <memchr+0x74>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	b342      	cbz	r2, 80100b0 <memchr+0x70>
 801005e:	d1f6      	bne.n	801004e <memchr+0xe>
 8010060:	b4f0      	push	{r4, r5, r6, r7}
 8010062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801006a:	f022 0407 	bic.w	r4, r2, #7
 801006e:	f07f 0700 	mvns.w	r7, #0
 8010072:	2300      	movs	r3, #0
 8010074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010078:	3c08      	subs	r4, #8
 801007a:	ea85 0501 	eor.w	r5, r5, r1
 801007e:	ea86 0601 	eor.w	r6, r6, r1
 8010082:	fa85 f547 	uadd8	r5, r5, r7
 8010086:	faa3 f587 	sel	r5, r3, r7
 801008a:	fa86 f647 	uadd8	r6, r6, r7
 801008e:	faa5 f687 	sel	r6, r5, r7
 8010092:	b98e      	cbnz	r6, 80100b8 <memchr+0x78>
 8010094:	d1ee      	bne.n	8010074 <memchr+0x34>
 8010096:	bcf0      	pop	{r4, r5, r6, r7}
 8010098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801009c:	f002 0207 	and.w	r2, r2, #7
 80100a0:	b132      	cbz	r2, 80100b0 <memchr+0x70>
 80100a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100a6:	3a01      	subs	r2, #1
 80100a8:	ea83 0301 	eor.w	r3, r3, r1
 80100ac:	b113      	cbz	r3, 80100b4 <memchr+0x74>
 80100ae:	d1f8      	bne.n	80100a2 <memchr+0x62>
 80100b0:	2000      	movs	r0, #0
 80100b2:	4770      	bx	lr
 80100b4:	3801      	subs	r0, #1
 80100b6:	4770      	bx	lr
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	bf06      	itte	eq
 80100bc:	4635      	moveq	r5, r6
 80100be:	3803      	subeq	r0, #3
 80100c0:	3807      	subne	r0, #7
 80100c2:	f015 0f01 	tst.w	r5, #1
 80100c6:	d107      	bne.n	80100d8 <memchr+0x98>
 80100c8:	3001      	adds	r0, #1
 80100ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80100ce:	bf02      	ittt	eq
 80100d0:	3001      	addeq	r0, #1
 80100d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80100d6:	3001      	addeq	r0, #1
 80100d8:	bcf0      	pop	{r4, r5, r6, r7}
 80100da:	3801      	subs	r0, #1
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <strlen>:
 80100e0:	4603      	mov	r3, r0
 80100e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e6:	2a00      	cmp	r2, #0
 80100e8:	d1fb      	bne.n	80100e2 <strlen+0x2>
 80100ea:	1a18      	subs	r0, r3, r0
 80100ec:	3801      	subs	r0, #1
 80100ee:	4770      	bx	lr

080100f0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80100f0:	b570      	push	{r4, r5, r6, lr}
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80100f2:	4eb1      	ldr	r6, [pc, #708]	@ (80103b8 <network_configure_weights+0x2c8>)
{
 80100f4:	460a      	mov	r2, r1
 80100f6:	4605      	mov	r5, r0
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80100f8:	2101      	movs	r1, #1
 80100fa:	4630      	mov	r0, r6
 80100fc:	f00e fdf4 	bl	801ece8 <ai_platform_get_weights_map>
 8010100:	4604      	mov	r4, r0
 8010102:	2800      	cmp	r0, #0
 8010104:	f000 84f6 	beq.w	8010af4 <network_configure_weights+0xa04>
    /* Updating weights (byte) offsets */
    
    conversion_163_const_array.format |= AI_FMT_FLAG_CONST;
 8010108:	49ac      	ldr	r1, [pc, #688]	@ (80103bc <network_configure_weights+0x2cc>)
    conversion_163_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
    conversion_163_const_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 801010a:	4aad      	ldr	r2, [pc, #692]	@ (80103c0 <network_configure_weights+0x2d0>)
    conversion_163_const_array.format |= AI_FMT_FLAG_CONST;
 801010c:	6808      	ldr	r0, [r1, #0]
    conversion_163_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
 801010e:	6833      	ldr	r3, [r6, #0]
    conversion_163_const_array.format |= AI_FMT_FLAG_CONST;
 8010110:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010114:	6008      	str	r0, [r1, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010116:	6810      	ldr	r0, [r2, #0]
 8010118:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801011c:	6010      	str	r0, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 109200);
 801011e:	48a9      	ldr	r0, [pc, #676]	@ (80103c4 <network_configure_weights+0x2d4>)
    conversion_163_const_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8010120:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 109200);
 8010124:	4418      	add	r0, r3
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109200);
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010126:	49a8      	ldr	r1, [pc, #672]	@ (80103c8 <network_configure_weights+0x2d8>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 109200);
 8010128:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 801012c:	6808      	ldr	r0, [r1, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 109416);
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109416);
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 801012e:	4aa7      	ldr	r2, [pc, #668]	@ (80103cc <network_configure_weights+0x2dc>)
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010130:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010134:	6008      	str	r0, [r1, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 109416);
 8010136:	48a6      	ldr	r0, [pc, #664]	@ (80103d0 <network_configure_weights+0x2e0>)
 8010138:	4418      	add	r0, r3
 801013a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 801013e:	6810      	ldr	r0, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 109448);
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109448);
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010140:	49a4      	ldr	r1, [pc, #656]	@ (80103d4 <network_configure_weights+0x2e4>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010142:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010146:	6010      	str	r0, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 109448);
 8010148:	48a3      	ldr	r0, [pc, #652]	@ (80103d8 <network_configure_weights+0x2e8>)
 801014a:	4418      	add	r0, r3
 801014c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010150:	6808      	ldr	r0, [r1, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 109520);
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109520);
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8010152:	4aa2      	ldr	r2, [pc, #648]	@ (80103dc <network_configure_weights+0x2ec>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010154:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010158:	6008      	str	r0, [r1, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 109520);
 801015a:	48a1      	ldr	r0, [pc, #644]	@ (80103e0 <network_configure_weights+0x2f0>)
 801015c:	4418      	add	r0, r3
 801015e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8010162:	6810      	ldr	r0, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 109552);
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109552);
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010164:	499f      	ldr	r1, [pc, #636]	@ (80103e4 <network_configure_weights+0x2f4>)
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8010166:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801016a:	6010      	str	r0, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 109552);
 801016c:	489e      	ldr	r0, [pc, #632]	@ (80103e8 <network_configure_weights+0x2f8>)
 801016e:	4418      	add	r0, r3
 8010170:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010174:	6808      	ldr	r0, [r1, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 109680);
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109680);
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8010176:	4a9d      	ldr	r2, [pc, #628]	@ (80103ec <network_configure_weights+0x2fc>)
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010178:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801017c:	6008      	str	r0, [r1, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 109680);
 801017e:	489c      	ldr	r0, [pc, #624]	@ (80103f0 <network_configure_weights+0x300>)
 8010180:	4418      	add	r0, r3
 8010182:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8010186:	6810      	ldr	r0, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 109744);
 8010188:	499a      	ldr	r1, [pc, #616]	@ (80103f4 <network_configure_weights+0x304>)
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 801018a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 109744);
 801018e:	4419      	add	r1, r3
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8010190:	6010      	str	r0, [r2, #0]
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109744);
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 109888);
 8010192:	4899      	ldr	r0, [pc, #612]	@ (80103f8 <network_configure_weights+0x308>)
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 109744);
 8010194:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 109888);
 8010198:	4418      	add	r0, r3
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 801019a:	4998      	ldr	r1, [pc, #608]	@ (80103fc <network_configure_weights+0x30c>)
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 109888);
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 801019c:	4a98      	ldr	r2, [pc, #608]	@ (8010400 <network_configure_weights+0x310>)
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 801019e:	680d      	ldr	r5, [r1, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 109888);
 80101a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80101a4:	6810      	ldr	r0, [r2, #0]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80101a6:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80101aa:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80101ae:	600d      	str	r5, [r1, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 109952);
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 109952);
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80101b0:	4994      	ldr	r1, [pc, #592]	@ (8010404 <network_configure_weights+0x314>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80101b2:	6010      	str	r0, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 109952);
 80101b4:	4894      	ldr	r0, [pc, #592]	@ (8010408 <network_configure_weights+0x318>)
 80101b6:	4418      	add	r0, r3
 80101b8:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80101bc:	6808      	ldr	r0, [r1, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 110464);
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 110464);
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80101be:	4a93      	ldr	r2, [pc, #588]	@ (801040c <network_configure_weights+0x31c>)
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80101c0:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80101c4:	6008      	str	r0, [r1, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 110464);
 80101c6:	4892      	ldr	r0, [pc, #584]	@ (8010410 <network_configure_weights+0x320>)
 80101c8:	4418      	add	r0, r3
 80101ca:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80101ce:	6810      	ldr	r0, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 110592);
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 110592);
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80101d0:	4990      	ldr	r1, [pc, #576]	@ (8010414 <network_configure_weights+0x324>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80101d2:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80101d6:	6010      	str	r0, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 110592);
 80101d8:	f503 30d8 	add.w	r0, r3, #110592	@ 0x1b000
 80101dc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80101e0:	6808      	ldr	r0, [r1, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 110880);
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 110880);
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80101e2:	4a8d      	ldr	r2, [pc, #564]	@ (8010418 <network_configure_weights+0x328>)
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80101e4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80101e8:	6008      	str	r0, [r1, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 110880);
 80101ea:	488c      	ldr	r0, [pc, #560]	@ (801041c <network_configure_weights+0x32c>)
 80101ec:	4418      	add	r0, r3
 80101ee:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80101f2:	6810      	ldr	r0, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 111008);
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 111008);
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80101f4:	498a      	ldr	r1, [pc, #552]	@ (8010420 <network_configure_weights+0x330>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80101f6:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80101fa:	6010      	str	r0, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 111008);
 80101fc:	4889      	ldr	r0, [pc, #548]	@ (8010424 <network_configure_weights+0x334>)
 80101fe:	4418      	add	r0, r3
 8010200:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8010204:	6808      	ldr	r0, [r1, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 112032);
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112032);
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8010206:	4a88      	ldr	r2, [pc, #544]	@ (8010428 <network_configure_weights+0x338>)
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8010208:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801020c:	6008      	str	r0, [r1, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 112032);
 801020e:	4887      	ldr	r0, [pc, #540]	@ (801042c <network_configure_weights+0x33c>)
 8010210:	4418      	add	r0, r3
 8010212:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8010216:	6810      	ldr	r0, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 112160);
 8010218:	4985      	ldr	r1, [pc, #532]	@ (8010430 <network_configure_weights+0x340>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 801021a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 112160);
 801021e:	4419      	add	r1, r3
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8010220:	6010      	str	r0, [r2, #0]
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 112160);
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 112448);
 8010222:	4884      	ldr	r0, [pc, #528]	@ (8010434 <network_configure_weights+0x344>)
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 112160);
 8010224:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 112448);
 8010228:	4418      	add	r0, r3
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 801022a:	4983      	ldr	r1, [pc, #524]	@ (8010438 <network_configure_weights+0x348>)
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112448);
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 801022c:	4a83      	ldr	r2, [pc, #524]	@ (801043c <network_configure_weights+0x34c>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 801022e:	680d      	ldr	r5, [r1, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 112448);
 8010230:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8010234:	6810      	ldr	r0, [r2, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8010236:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 801023a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 801023e:	600d      	str	r5, [r1, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 112576);
    conv2d_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 112576);
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8010240:	497f      	ldr	r1, [pc, #508]	@ (8010440 <network_configure_weights+0x350>)
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8010242:	6010      	str	r0, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 112576);
 8010244:	487f      	ldr	r0, [pc, #508]	@ (8010444 <network_configure_weights+0x354>)
 8010246:	4418      	add	r0, r3
 8010248:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 801024c:	6808      	ldr	r0, [r1, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 114624);
    conv2d_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 114624);
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 801024e:	4a7e      	ldr	r2, [pc, #504]	@ (8010448 <network_configure_weights+0x358>)
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8010250:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010254:	6008      	str	r0, [r1, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 114624);
 8010256:	487d      	ldr	r0, [pc, #500]	@ (801044c <network_configure_weights+0x35c>)
 8010258:	4418      	add	r0, r3
 801025a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 801025e:	6810      	ldr	r0, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 114880);
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 114880);
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8010260:	497b      	ldr	r1, [pc, #492]	@ (8010450 <network_configure_weights+0x360>)
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8010262:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010266:	6010      	str	r0, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 114880);
 8010268:	487a      	ldr	r0, [pc, #488]	@ (8010454 <network_configure_weights+0x364>)
 801026a:	4418      	add	r0, r3
 801026c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8010270:	6808      	ldr	r0, [r1, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 115456);
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 115456);
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8010272:	4a79      	ldr	r2, [pc, #484]	@ (8010458 <network_configure_weights+0x368>)
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8010274:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010278:	6008      	str	r0, [r1, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 115456);
 801027a:	4878      	ldr	r0, [pc, #480]	@ (801045c <network_configure_weights+0x36c>)
 801027c:	4418      	add	r0, r3
 801027e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8010282:	6810      	ldr	r0, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 115712);
    conv2d_13_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 115712);
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8010284:	4976      	ldr	r1, [pc, #472]	@ (8010460 <network_configure_weights+0x370>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8010286:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801028a:	6010      	str	r0, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 115712);
 801028c:	f503 30e2 	add.w	r0, r3, #115712	@ 0x1c400
 8010290:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8010294:	6808      	ldr	r0, [r1, #0]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 119808);
    conv2d_13_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 119808);
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8010296:	4a73      	ldr	r2, [pc, #460]	@ (8010464 <network_configure_weights+0x374>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8010298:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801029c:	6008      	str	r0, [r1, #0]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 119808);
 801029e:	f503 30ea 	add.w	r0, r3, #119808	@ 0x1d400
 80102a2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80102a6:	6810      	ldr	r0, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 120064);
 80102a8:	496f      	ldr	r1, [pc, #444]	@ (8010468 <network_configure_weights+0x378>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80102aa:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 120064);
 80102ae:	4419      	add	r1, r3
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80102b0:	6010      	str	r0, [r2, #0]
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 120064);
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 120640);
 80102b2:	486e      	ldr	r0, [pc, #440]	@ (801046c <network_configure_weights+0x37c>)
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 120064);
 80102b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 120640);
 80102b8:	4418      	add	r0, r3
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80102ba:	496d      	ldr	r1, [pc, #436]	@ (8010470 <network_configure_weights+0x380>)
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120640);
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80102bc:	4a6d      	ldr	r2, [pc, #436]	@ (8010474 <network_configure_weights+0x384>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80102be:	680d      	ldr	r5, [r1, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 120640);
 80102c0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80102c4:	6810      	ldr	r0, [r2, #0]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80102c6:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80102ca:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80102ce:	600d      	str	r5, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 120896);
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 120896);
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80102d0:	4969      	ldr	r1, [pc, #420]	@ (8010478 <network_configure_weights+0x388>)
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80102d2:	6010      	str	r0, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 120896);
 80102d4:	4869      	ldr	r0, [pc, #420]	@ (801047c <network_configure_weights+0x38c>)
 80102d6:	4418      	add	r0, r3
 80102d8:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80102dc:	6808      	ldr	r0, [r1, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 129088);
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 129088);
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80102de:	4a68      	ldr	r2, [pc, #416]	@ (8010480 <network_configure_weights+0x390>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80102e0:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80102e4:	6008      	str	r0, [r1, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 129088);
 80102e6:	4867      	ldr	r0, [pc, #412]	@ (8010484 <network_configure_weights+0x394>)
 80102e8:	4418      	add	r0, r3
 80102ea:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80102ee:	6810      	ldr	r0, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 129600);
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 129600);
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80102f0:	4965      	ldr	r1, [pc, #404]	@ (8010488 <network_configure_weights+0x398>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80102f2:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80102f6:	6010      	str	r0, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 129600);
 80102f8:	4864      	ldr	r0, [pc, #400]	@ (801048c <network_configure_weights+0x39c>)
 80102fa:	4418      	add	r0, r3
 80102fc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8010300:	6808      	ldr	r0, [r1, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 130752);
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 130752);
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8010302:	4a63      	ldr	r2, [pc, #396]	@ (8010490 <network_configure_weights+0x3a0>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8010304:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010308:	6008      	str	r0, [r1, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 130752);
 801030a:	4862      	ldr	r0, [pc, #392]	@ (8010494 <network_configure_weights+0x3a4>)
 801030c:	4418      	add	r0, r3
 801030e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8010312:	6810      	ldr	r0, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_network_weights_map[0] + 131264);
    conv2d_19_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 131264);
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8010314:	4960      	ldr	r1, [pc, #384]	@ (8010498 <network_configure_weights+0x3a8>)
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8010316:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801031a:	6010      	str	r0, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_network_weights_map[0] + 131264);
 801031c:	485f      	ldr	r0, [pc, #380]	@ (801049c <network_configure_weights+0x3ac>)
 801031e:	4418      	add	r0, r3
 8010320:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8010324:	6808      	ldr	r0, [r1, #0]
    conv2d_19_bias_array.data = AI_PTR(g_network_weights_map[0] + 147648);
    conv2d_19_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 147648);
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8010326:	4a5e      	ldr	r2, [pc, #376]	@ (80104a0 <network_configure_weights+0x3b0>)
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8010328:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801032c:	6008      	str	r0, [r1, #0]
    conv2d_19_bias_array.data = AI_PTR(g_network_weights_map[0] + 147648);
 801032e:	485d      	ldr	r0, [pc, #372]	@ (80104a4 <network_configure_weights+0x3b4>)
 8010330:	4418      	add	r0, r3
 8010332:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8010336:	6810      	ldr	r0, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 148160);
 8010338:	495b      	ldr	r1, [pc, #364]	@ (80104a8 <network_configure_weights+0x3b8>)
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 801033a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 148160);
 801033e:	4419      	add	r1, r3
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8010340:	6010      	str	r0, [r2, #0]
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 148160);
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 149312);
 8010342:	485a      	ldr	r0, [pc, #360]	@ (80104ac <network_configure_weights+0x3bc>)
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 148160);
 8010344:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 149312);
 8010348:	4418      	add	r0, r3
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 801034a:	4959      	ldr	r1, [pc, #356]	@ (80104b0 <network_configure_weights+0x3c0>)
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 149312);
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 801034c:	4a59      	ldr	r2, [pc, #356]	@ (80104b4 <network_configure_weights+0x3c4>)
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 801034e:	680d      	ldr	r5, [r1, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 149312);
 8010350:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8010354:	6810      	ldr	r0, [r2, #0]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8010356:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 801035a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 801035e:	600d      	str	r5, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 149824);
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 149824);
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8010360:	4955      	ldr	r1, [pc, #340]	@ (80104b8 <network_configure_weights+0x3c8>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8010362:	6010      	str	r0, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 149824);
 8010364:	4855      	ldr	r0, [pc, #340]	@ (80104bc <network_configure_weights+0x3cc>)
 8010366:	4418      	add	r0, r3
 8010368:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 801036c:	6808      	ldr	r0, [r1, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 166208);
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 166208);
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 801036e:	4a54      	ldr	r2, [pc, #336]	@ (80104c0 <network_configure_weights+0x3d0>)
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8010370:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010374:	6008      	str	r0, [r1, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 166208);
 8010376:	4853      	ldr	r0, [pc, #332]	@ (80104c4 <network_configure_weights+0x3d4>)
 8010378:	4418      	add	r0, r3
 801037a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 801037e:	6810      	ldr	r0, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 166720);
    conv2d_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 166720);
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8010380:	4951      	ldr	r1, [pc, #324]	@ (80104c8 <network_configure_weights+0x3d8>)
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8010382:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010386:	6010      	str	r0, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 166720);
 8010388:	4850      	ldr	r0, [pc, #320]	@ (80104cc <network_configure_weights+0x3dc>)
 801038a:	4418      	add	r0, r3
 801038c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8010390:	6808      	ldr	r0, [r1, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 167872);
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 167872);
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 8010392:	4a4f      	ldr	r2, [pc, #316]	@ (80104d0 <network_configure_weights+0x3e0>)
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8010394:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010398:	6008      	str	r0, [r1, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 167872);
 801039a:	484e      	ldr	r0, [pc, #312]	@ (80104d4 <network_configure_weights+0x3e4>)
 801039c:	4418      	add	r0, r3
 801039e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80103a2:	6810      	ldr	r0, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 168384);
    conv2d_23_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 168384);
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 80103a4:	494c      	ldr	r1, [pc, #304]	@ (80104d8 <network_configure_weights+0x3e8>)
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80103a6:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80103aa:	6010      	str	r0, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 168384);
 80103ac:	484b      	ldr	r0, [pc, #300]	@ (80104dc <network_configure_weights+0x3ec>)
 80103ae:	4418      	add	r0, r3
 80103b0:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 80103b4:	6808      	ldr	r0, [r1, #0]
 80103b6:	e093      	b.n	80104e0 <network_configure_weights+0x3f0>
 80103b8:	24008a88 	.word	0x24008a88
 80103bc:	24007ab0 	.word	0x24007ab0
 80103c0:	24007aa0 	.word	0x24007aa0
 80103c4:	0001aa90 	.word	0x0001aa90
 80103c8:	24007a90 	.word	0x24007a90
 80103cc:	24007a80 	.word	0x24007a80
 80103d0:	0001ab68 	.word	0x0001ab68
 80103d4:	24007a70 	.word	0x24007a70
 80103d8:	0001ab88 	.word	0x0001ab88
 80103dc:	24007a60 	.word	0x24007a60
 80103e0:	0001abd0 	.word	0x0001abd0
 80103e4:	24007a50 	.word	0x24007a50
 80103e8:	0001abf0 	.word	0x0001abf0
 80103ec:	24007a40 	.word	0x24007a40
 80103f0:	0001ac70 	.word	0x0001ac70
 80103f4:	0001acb0 	.word	0x0001acb0
 80103f8:	0001ad40 	.word	0x0001ad40
 80103fc:	24007a30 	.word	0x24007a30
 8010400:	24007a20 	.word	0x24007a20
 8010404:	24007a10 	.word	0x24007a10
 8010408:	0001ad80 	.word	0x0001ad80
 801040c:	24007a00 	.word	0x24007a00
 8010410:	0001af80 	.word	0x0001af80
 8010414:	240079f0 	.word	0x240079f0
 8010418:	240079e0 	.word	0x240079e0
 801041c:	0001b120 	.word	0x0001b120
 8010420:	240079d0 	.word	0x240079d0
 8010424:	0001b1a0 	.word	0x0001b1a0
 8010428:	240079c0 	.word	0x240079c0
 801042c:	0001b5a0 	.word	0x0001b5a0
 8010430:	0001b620 	.word	0x0001b620
 8010434:	0001b740 	.word	0x0001b740
 8010438:	240079b0 	.word	0x240079b0
 801043c:	240079a0 	.word	0x240079a0
 8010440:	24007990 	.word	0x24007990
 8010444:	0001b7c0 	.word	0x0001b7c0
 8010448:	24007980 	.word	0x24007980
 801044c:	0001bfc0 	.word	0x0001bfc0
 8010450:	24007970 	.word	0x24007970
 8010454:	0001c0c0 	.word	0x0001c0c0
 8010458:	24007960 	.word	0x24007960
 801045c:	0001c300 	.word	0x0001c300
 8010460:	24007950 	.word	0x24007950
 8010464:	24007940 	.word	0x24007940
 8010468:	0001d500 	.word	0x0001d500
 801046c:	0001d740 	.word	0x0001d740
 8010470:	24007930 	.word	0x24007930
 8010474:	24007920 	.word	0x24007920
 8010478:	24007910 	.word	0x24007910
 801047c:	0001d840 	.word	0x0001d840
 8010480:	24007900 	.word	0x24007900
 8010484:	0001f840 	.word	0x0001f840
 8010488:	240078f0 	.word	0x240078f0
 801048c:	0001fa40 	.word	0x0001fa40
 8010490:	240078e0 	.word	0x240078e0
 8010494:	0001fec0 	.word	0x0001fec0
 8010498:	240078d0 	.word	0x240078d0
 801049c:	000200c0 	.word	0x000200c0
 80104a0:	240078c0 	.word	0x240078c0
 80104a4:	000240c0 	.word	0x000240c0
 80104a8:	000242c0 	.word	0x000242c0
 80104ac:	00024740 	.word	0x00024740
 80104b0:	240078b0 	.word	0x240078b0
 80104b4:	240078a0 	.word	0x240078a0
 80104b8:	24007890 	.word	0x24007890
 80104bc:	00024940 	.word	0x00024940
 80104c0:	24007880 	.word	0x24007880
 80104c4:	00028940 	.word	0x00028940
 80104c8:	24007870 	.word	0x24007870
 80104cc:	00028b40 	.word	0x00028b40
 80104d0:	24007860 	.word	0x24007860
 80104d4:	00028fc0 	.word	0x00028fc0
 80104d8:	24007850 	.word	0x24007850
 80104dc:	000291c0 	.word	0x000291c0
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 184768);
    conv2d_23_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 184768);
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80104e0:	4aaf      	ldr	r2, [pc, #700]	@ (80107a0 <network_configure_weights+0x6b0>)
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 80104e2:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80104e6:	6008      	str	r0, [r1, #0]
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 184768);
 80104e8:	48ae      	ldr	r0, [pc, #696]	@ (80107a4 <network_configure_weights+0x6b4>)
 80104ea:	4418      	add	r0, r3
 80104ec:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80104f0:	6810      	ldr	r0, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 185280);
 80104f2:	49ad      	ldr	r1, [pc, #692]	@ (80107a8 <network_configure_weights+0x6b8>)
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80104f4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 185280);
 80104f8:	4419      	add	r1, r3
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80104fa:	6010      	str	r0, [r2, #0]
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 185280);
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 186432);
 80104fc:	48ab      	ldr	r0, [pc, #684]	@ (80107ac <network_configure_weights+0x6bc>)
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 185280);
 80104fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 186432);
 8010502:	4418      	add	r0, r3
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010504:	49aa      	ldr	r1, [pc, #680]	@ (80107b0 <network_configure_weights+0x6c0>)
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 186432);
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8010506:	4aab      	ldr	r2, [pc, #684]	@ (80107b4 <network_configure_weights+0x6c4>)
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010508:	680d      	ldr	r5, [r1, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 186432);
 801050a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 801050e:	6810      	ldr	r0, [r2, #0]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010510:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8010514:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8010518:	600d      	str	r5, [r1, #0]
    conv2d_25_weights_array.data = AI_PTR(g_network_weights_map[0] + 186944);
    conv2d_25_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 186944);
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 801051a:	49a7      	ldr	r1, [pc, #668]	@ (80107b8 <network_configure_weights+0x6c8>)
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 801051c:	6010      	str	r0, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_network_weights_map[0] + 186944);
 801051e:	48a7      	ldr	r0, [pc, #668]	@ (80107bc <network_configure_weights+0x6cc>)
 8010520:	4418      	add	r0, r3
 8010522:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8010526:	6808      	ldr	r0, [r1, #0]
    conv2d_25_bias_array.data = AI_PTR(g_network_weights_map[0] + 203328);
    conv2d_25_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 203328);
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8010528:	4aa5      	ldr	r2, [pc, #660]	@ (80107c0 <network_configure_weights+0x6d0>)
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 801052a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801052e:	6008      	str	r0, [r1, #0]
    conv2d_25_bias_array.data = AI_PTR(g_network_weights_map[0] + 203328);
 8010530:	48a4      	ldr	r0, [pc, #656]	@ (80107c4 <network_configure_weights+0x6d4>)
 8010532:	4418      	add	r0, r3
 8010534:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8010538:	6810      	ldr	r0, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 203840);
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 203840);
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 801053a:	49a3      	ldr	r1, [pc, #652]	@ (80107c8 <network_configure_weights+0x6d8>)
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 801053c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010540:	6010      	str	r0, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 203840);
 8010542:	48a2      	ldr	r0, [pc, #648]	@ (80107cc <network_configure_weights+0x6dc>)
 8010544:	4418      	add	r0, r3
 8010546:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 801054a:	6808      	ldr	r0, [r1, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 204992);
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 204992);
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 801054c:	4aa0      	ldr	r2, [pc, #640]	@ (80107d0 <network_configure_weights+0x6e0>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 801054e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010552:	6008      	str	r0, [r1, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 204992);
 8010554:	489f      	ldr	r0, [pc, #636]	@ (80107d4 <network_configure_weights+0x6e4>)
 8010556:	4418      	add	r0, r3
 8010558:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 801055c:	6810      	ldr	r0, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_network_weights_map[0] + 205504);
    conv2d_27_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 205504);
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 801055e:	499e      	ldr	r1, [pc, #632]	@ (80107d8 <network_configure_weights+0x6e8>)
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8010560:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010564:	6010      	str	r0, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_network_weights_map[0] + 205504);
 8010566:	489d      	ldr	r0, [pc, #628]	@ (80107dc <network_configure_weights+0x6ec>)
 8010568:	4418      	add	r0, r3
 801056a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 801056e:	6808      	ldr	r0, [r1, #0]
    conv2d_27_bias_array.data = AI_PTR(g_network_weights_map[0] + 221888);
    conv2d_27_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 221888);
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8010570:	4a9b      	ldr	r2, [pc, #620]	@ (80107e0 <network_configure_weights+0x6f0>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8010572:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010576:	6008      	str	r0, [r1, #0]
    conv2d_27_bias_array.data = AI_PTR(g_network_weights_map[0] + 221888);
 8010578:	489a      	ldr	r0, [pc, #616]	@ (80107e4 <network_configure_weights+0x6f4>)
 801057a:	4418      	add	r0, r3
 801057c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8010580:	6810      	ldr	r0, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 222400);
 8010582:	4999      	ldr	r1, [pc, #612]	@ (80107e8 <network_configure_weights+0x6f8>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8010584:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 222400);
 8010588:	4419      	add	r1, r3
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 801058a:	6010      	str	r0, [r2, #0]
    conv2d_30_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 222400);
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 223552);
 801058c:	4897      	ldr	r0, [pc, #604]	@ (80107ec <network_configure_weights+0x6fc>)
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 222400);
 801058e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 223552);
 8010592:	4418      	add	r0, r3
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8010594:	4996      	ldr	r1, [pc, #600]	@ (80107f0 <network_configure_weights+0x700>)
    conv2d_30_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 223552);
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 8010596:	4a97      	ldr	r2, [pc, #604]	@ (80107f4 <network_configure_weights+0x704>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8010598:	680d      	ldr	r5, [r1, #0]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 223552);
 801059a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 801059e:	6810      	ldr	r0, [r2, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80105a0:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 80105a4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80105a8:	600d      	str	r5, [r1, #0]
    conv2d_31_weights_array.data = AI_PTR(g_network_weights_map[0] + 224064);
    conv2d_31_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 224064);
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80105aa:	4993      	ldr	r1, [pc, #588]	@ (80107f8 <network_configure_weights+0x708>)
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 80105ac:	6010      	str	r0, [r2, #0]
    conv2d_31_weights_array.data = AI_PTR(g_network_weights_map[0] + 224064);
 80105ae:	4893      	ldr	r0, [pc, #588]	@ (80107fc <network_configure_weights+0x70c>)
 80105b0:	4418      	add	r0, r3
 80105b2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80105b6:	6808      	ldr	r0, [r1, #0]
    conv2d_31_bias_array.data = AI_PTR(g_network_weights_map[0] + 256832);
    conv2d_31_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 256832);
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80105b8:	4a91      	ldr	r2, [pc, #580]	@ (8010800 <network_configure_weights+0x710>)
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80105ba:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80105be:	6008      	str	r0, [r1, #0]
    conv2d_31_bias_array.data = AI_PTR(g_network_weights_map[0] + 256832);
 80105c0:	4890      	ldr	r0, [pc, #576]	@ (8010804 <network_configure_weights+0x714>)
 80105c2:	4418      	add	r0, r3
 80105c4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80105c8:	6810      	ldr	r0, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[0] + 257856);
    conv2d_32_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 257856);
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80105ca:	498f      	ldr	r1, [pc, #572]	@ (8010808 <network_configure_weights+0x718>)
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80105cc:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80105d0:	6010      	str	r0, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[0] + 257856);
 80105d2:	488e      	ldr	r0, [pc, #568]	@ (801080c <network_configure_weights+0x71c>)
 80105d4:	4418      	add	r0, r3
 80105d6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80105da:	6808      	ldr	r0, [r1, #0]
    conv2d_32_bias_array.data = AI_PTR(g_network_weights_map[0] + 260160);
    conv2d_32_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 260160);
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80105dc:	4a8c      	ldr	r2, [pc, #560]	@ (8010810 <network_configure_weights+0x720>)
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80105de:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80105e2:	6008      	str	r0, [r1, #0]
    conv2d_32_bias_array.data = AI_PTR(g_network_weights_map[0] + 260160);
 80105e4:	488b      	ldr	r0, [pc, #556]	@ (8010814 <network_configure_weights+0x724>)
 80105e6:	4418      	add	r0, r3
 80105e8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80105ec:	6810      	ldr	r0, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_network_weights_map[0] + 261184);
    conv2d_33_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 261184);
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80105ee:	498a      	ldr	r1, [pc, #552]	@ (8010818 <network_configure_weights+0x728>)
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80105f0:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80105f4:	6010      	str	r0, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_network_weights_map[0] + 261184);
 80105f6:	4889      	ldr	r0, [pc, #548]	@ (801081c <network_configure_weights+0x72c>)
 80105f8:	4418      	add	r0, r3
 80105fa:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80105fe:	6808      	ldr	r0, [r1, #0]
    conv2d_33_bias_array.data = AI_PTR(g_network_weights_map[0] + 326720);
    conv2d_33_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 326720);
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8010600:	4a87      	ldr	r2, [pc, #540]	@ (8010820 <network_configure_weights+0x730>)
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8010602:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010606:	6008      	str	r0, [r1, #0]
    conv2d_33_bias_array.data = AI_PTR(g_network_weights_map[0] + 326720);
 8010608:	4886      	ldr	r0, [pc, #536]	@ (8010824 <network_configure_weights+0x734>)
 801060a:	4418      	add	r0, r3
 801060c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8010610:	6810      	ldr	r0, [r2, #0]
    conv2d_35_weights_array.data = AI_PTR(g_network_weights_map[0] + 327744);
 8010612:	4985      	ldr	r1, [pc, #532]	@ (8010828 <network_configure_weights+0x738>)
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8010614:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_35_weights_array.data = AI_PTR(g_network_weights_map[0] + 327744);
 8010618:	4419      	add	r1, r3
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 801061a:	6010      	str	r0, [r2, #0]
    conv2d_35_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 327744);
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_35_bias_array.data = AI_PTR(g_network_weights_map[0] + 330048);
 801061c:	4883      	ldr	r0, [pc, #524]	@ (801082c <network_configure_weights+0x73c>)
    conv2d_35_weights_array.data = AI_PTR(g_network_weights_map[0] + 327744);
 801061e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_35_bias_array.data = AI_PTR(g_network_weights_map[0] + 330048);
 8010622:	4418      	add	r0, r3
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8010624:	4982      	ldr	r1, [pc, #520]	@ (8010830 <network_configure_weights+0x740>)
    conv2d_35_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 330048);
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8010626:	4a83      	ldr	r2, [pc, #524]	@ (8010834 <network_configure_weights+0x744>)
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8010628:	680d      	ldr	r5, [r1, #0]
    conv2d_35_bias_array.data = AI_PTR(g_network_weights_map[0] + 330048);
 801062a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 801062e:	6810      	ldr	r0, [r2, #0]
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8010630:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8010634:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8010638:	600d      	str	r5, [r1, #0]
    conv2d_36_weights_array.data = AI_PTR(g_network_weights_map[0] + 331072);
    conv2d_36_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 331072);
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 801063a:	497f      	ldr	r1, [pc, #508]	@ (8010838 <network_configure_weights+0x748>)
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 801063c:	6010      	str	r0, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_network_weights_map[0] + 331072);
 801063e:	487f      	ldr	r0, [pc, #508]	@ (801083c <network_configure_weights+0x74c>)
 8010640:	4418      	add	r0, r3
 8010642:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8010646:	6808      	ldr	r0, [r1, #0]
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[0] + 396608);
    conv2d_36_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 396608);
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8010648:	4a7d      	ldr	r2, [pc, #500]	@ (8010840 <network_configure_weights+0x750>)
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 801064a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801064e:	6008      	str	r0, [r1, #0]
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[0] + 396608);
 8010650:	487c      	ldr	r0, [pc, #496]	@ (8010844 <network_configure_weights+0x754>)
 8010652:	4418      	add	r0, r3
 8010654:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8010658:	6810      	ldr	r0, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_network_weights_map[0] + 397632);
    conv2d_37_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 397632);
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 801065a:	497b      	ldr	r1, [pc, #492]	@ (8010848 <network_configure_weights+0x758>)
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 801065c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010660:	6010      	str	r0, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_network_weights_map[0] + 397632);
 8010662:	487a      	ldr	r0, [pc, #488]	@ (801084c <network_configure_weights+0x75c>)
 8010664:	4418      	add	r0, r3
 8010666:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 801066a:	6808      	ldr	r0, [r1, #0]
    conv2d_37_bias_array.data = AI_PTR(g_network_weights_map[0] + 399936);
    conv2d_37_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 399936);
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 801066c:	4a78      	ldr	r2, [pc, #480]	@ (8010850 <network_configure_weights+0x760>)
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 801066e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010672:	6008      	str	r0, [r1, #0]
    conv2d_37_bias_array.data = AI_PTR(g_network_weights_map[0] + 399936);
 8010674:	4877      	ldr	r0, [pc, #476]	@ (8010854 <network_configure_weights+0x764>)
 8010676:	4418      	add	r0, r3
 8010678:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 801067c:	6810      	ldr	r0, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_network_weights_map[0] + 400960);
    conv2d_38_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 400960);
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 801067e:	4976      	ldr	r1, [pc, #472]	@ (8010858 <network_configure_weights+0x768>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8010680:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010684:	6010      	str	r0, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_network_weights_map[0] + 400960);
 8010686:	4875      	ldr	r0, [pc, #468]	@ (801085c <network_configure_weights+0x76c>)
 8010688:	4418      	add	r0, r3
 801068a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 801068e:	6808      	ldr	r0, [r1, #0]
    conv2d_38_bias_array.data = AI_PTR(g_network_weights_map[0] + 466496);
    conv2d_38_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 466496);
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8010690:	4a73      	ldr	r2, [pc, #460]	@ (8010860 <network_configure_weights+0x770>)
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8010692:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010696:	6008      	str	r0, [r1, #0]
    conv2d_38_bias_array.data = AI_PTR(g_network_weights_map[0] + 466496);
 8010698:	4872      	ldr	r0, [pc, #456]	@ (8010864 <network_configure_weights+0x774>)
 801069a:	4418      	add	r0, r3
 801069c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80106a0:	6810      	ldr	r0, [r2, #0]
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[0] + 467520);
 80106a2:	4971      	ldr	r1, [pc, #452]	@ (8010868 <network_configure_weights+0x778>)
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80106a4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[0] + 467520);
 80106a8:	4419      	add	r1, r3
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80106aa:	6010      	str	r0, [r2, #0]
    conv2d_40_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 467520);
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[0] + 469824);
 80106ac:	486f      	ldr	r0, [pc, #444]	@ (801086c <network_configure_weights+0x77c>)
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[0] + 467520);
 80106ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[0] + 469824);
 80106b2:	4418      	add	r0, r3
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80106b4:	496e      	ldr	r1, [pc, #440]	@ (8010870 <network_configure_weights+0x780>)
    conv2d_40_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 469824);
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80106b6:	4a6f      	ldr	r2, [pc, #444]	@ (8010874 <network_configure_weights+0x784>)
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80106b8:	680d      	ldr	r5, [r1, #0]
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[0] + 469824);
 80106ba:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80106be:	6810      	ldr	r0, [r2, #0]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80106c0:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80106c4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80106c8:	600d      	str	r5, [r1, #0]
    conv2d_41_weights_array.data = AI_PTR(g_network_weights_map[0] + 470848);
    conv2d_41_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 470848);
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80106ca:	496b      	ldr	r1, [pc, #428]	@ (8010878 <network_configure_weights+0x788>)
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80106cc:	6010      	str	r0, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_network_weights_map[0] + 470848);
 80106ce:	486b      	ldr	r0, [pc, #428]	@ (801087c <network_configure_weights+0x78c>)
 80106d0:	4418      	add	r0, r3
 80106d2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80106d6:	6808      	ldr	r0, [r1, #0]
    conv2d_41_bias_array.data = AI_PTR(g_network_weights_map[0] + 536384);
    conv2d_41_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 536384);
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80106d8:	4a69      	ldr	r2, [pc, #420]	@ (8010880 <network_configure_weights+0x790>)
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80106da:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80106de:	6008      	str	r0, [r1, #0]
    conv2d_41_bias_array.data = AI_PTR(g_network_weights_map[0] + 536384);
 80106e0:	4868      	ldr	r0, [pc, #416]	@ (8010884 <network_configure_weights+0x794>)
 80106e2:	4418      	add	r0, r3
 80106e4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80106e8:	6810      	ldr	r0, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_network_weights_map[0] + 537408);
    conv2d_42_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 537408);
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80106ea:	4967      	ldr	r1, [pc, #412]	@ (8010888 <network_configure_weights+0x798>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80106ec:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80106f0:	6010      	str	r0, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_network_weights_map[0] + 537408);
 80106f2:	4866      	ldr	r0, [pc, #408]	@ (801088c <network_configure_weights+0x79c>)
 80106f4:	4418      	add	r0, r3
 80106f6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80106fa:	6808      	ldr	r0, [r1, #0]
    conv2d_42_bias_array.data = AI_PTR(g_network_weights_map[0] + 539712);
    conv2d_42_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 539712);
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80106fc:	4a64      	ldr	r2, [pc, #400]	@ (8010890 <network_configure_weights+0x7a0>)
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80106fe:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010702:	6008      	str	r0, [r1, #0]
    conv2d_42_bias_array.data = AI_PTR(g_network_weights_map[0] + 539712);
 8010704:	4863      	ldr	r0, [pc, #396]	@ (8010894 <network_configure_weights+0x7a4>)
 8010706:	4418      	add	r0, r3
 8010708:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 801070c:	6810      	ldr	r0, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_network_weights_map[0] + 540736);
    conv2d_43_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 540736);
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 801070e:	4962      	ldr	r1, [pc, #392]	@ (8010898 <network_configure_weights+0x7a8>)
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8010710:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010714:	6010      	str	r0, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_network_weights_map[0] + 540736);
 8010716:	4861      	ldr	r0, [pc, #388]	@ (801089c <network_configure_weights+0x7ac>)
 8010718:	4418      	add	r0, r3
 801071a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 801071e:	6808      	ldr	r0, [r1, #0]
    conv2d_43_bias_array.data = AI_PTR(g_network_weights_map[0] + 606272);
    conv2d_43_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 606272);
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8010720:	4a5f      	ldr	r2, [pc, #380]	@ (80108a0 <network_configure_weights+0x7b0>)
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8010722:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010726:	6008      	str	r0, [r1, #0]
    conv2d_43_bias_array.data = AI_PTR(g_network_weights_map[0] + 606272);
 8010728:	485e      	ldr	r0, [pc, #376]	@ (80108a4 <network_configure_weights+0x7b4>)
 801072a:	4418      	add	r0, r3
 801072c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8010730:	6810      	ldr	r0, [r2, #0]
    conv2d_50_weights_array.data = AI_PTR(g_network_weights_map[0] + 607296);
 8010732:	495d      	ldr	r1, [pc, #372]	@ (80108a8 <network_configure_weights+0x7b8>)
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8010734:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_50_weights_array.data = AI_PTR(g_network_weights_map[0] + 607296);
 8010738:	4419      	add	r1, r3
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 801073a:	6010      	str	r0, [r2, #0]
    conv2d_50_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 607296);
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_50_bias_array.data = AI_PTR(g_network_weights_map[0] + 615488);
 801073c:	485b      	ldr	r0, [pc, #364]	@ (80108ac <network_configure_weights+0x7bc>)
    conv2d_50_weights_array.data = AI_PTR(g_network_weights_map[0] + 607296);
 801073e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_50_bias_array.data = AI_PTR(g_network_weights_map[0] + 615488);
 8010742:	4418      	add	r0, r3
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8010744:	495a      	ldr	r1, [pc, #360]	@ (80108b0 <network_configure_weights+0x7c0>)
    conv2d_50_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 615488);
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8010746:	4a5b      	ldr	r2, [pc, #364]	@ (80108b4 <network_configure_weights+0x7c4>)
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8010748:	680d      	ldr	r5, [r1, #0]
    conv2d_50_bias_array.data = AI_PTR(g_network_weights_map[0] + 615488);
 801074a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 801074e:	6810      	ldr	r0, [r2, #0]
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8010750:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8010754:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8010758:	600d      	str	r5, [r1, #0]
    conv2d_56_weights_array.data = AI_PTR(g_network_weights_map[0] + 615616);
    conv2d_56_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 615616);
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 801075a:	4957      	ldr	r1, [pc, #348]	@ (80108b8 <network_configure_weights+0x7c8>)
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 801075c:	6010      	str	r0, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(g_network_weights_map[0] + 615616);
 801075e:	4857      	ldr	r0, [pc, #348]	@ (80108bc <network_configure_weights+0x7cc>)
 8010760:	4418      	add	r0, r3
 8010762:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8010766:	6808      	ldr	r0, [r1, #0]
    conv2d_56_bias_array.data = AI_PTR(g_network_weights_map[0] + 616256);
    conv2d_56_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 616256);
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8010768:	4a55      	ldr	r2, [pc, #340]	@ (80108c0 <network_configure_weights+0x7d0>)
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 801076a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801076e:	6008      	str	r0, [r1, #0]
    conv2d_56_bias_array.data = AI_PTR(g_network_weights_map[0] + 616256);
 8010770:	4854      	ldr	r0, [pc, #336]	@ (80108c4 <network_configure_weights+0x7d4>)
 8010772:	4418      	add	r0, r3
 8010774:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8010778:	6810      	ldr	r0, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_network_weights_map[0] + 616336);
    conv2d_51_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 616336);
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 801077a:	4953      	ldr	r1, [pc, #332]	@ (80108c8 <network_configure_weights+0x7d8>)
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 801077c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010780:	6010      	str	r0, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_network_weights_map[0] + 616336);
 8010782:	4852      	ldr	r0, [pc, #328]	@ (80108cc <network_configure_weights+0x7dc>)
 8010784:	4418      	add	r0, r3
 8010786:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 801078a:	6808      	ldr	r0, [r1, #0]
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[0] + 616656);
    conv2d_51_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 616656);
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 801078c:	4a50      	ldr	r2, [pc, #320]	@ (80108d0 <network_configure_weights+0x7e0>)
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 801078e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010792:	6008      	str	r0, [r1, #0]
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[0] + 616656);
 8010794:	484f      	ldr	r0, [pc, #316]	@ (80108d4 <network_configure_weights+0x7e4>)
 8010796:	4418      	add	r0, r3
 8010798:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 801079c:	6810      	ldr	r0, [r2, #0]
 801079e:	e09b      	b.n	80108d8 <network_configure_weights+0x7e8>
 80107a0:	24007840 	.word	0x24007840
 80107a4:	0002d1c0 	.word	0x0002d1c0
 80107a8:	0002d3c0 	.word	0x0002d3c0
 80107ac:	0002d840 	.word	0x0002d840
 80107b0:	24007830 	.word	0x24007830
 80107b4:	24007820 	.word	0x24007820
 80107b8:	24007810 	.word	0x24007810
 80107bc:	0002da40 	.word	0x0002da40
 80107c0:	24007800 	.word	0x24007800
 80107c4:	00031a40 	.word	0x00031a40
 80107c8:	240077f0 	.word	0x240077f0
 80107cc:	00031c40 	.word	0x00031c40
 80107d0:	240077e0 	.word	0x240077e0
 80107d4:	000320c0 	.word	0x000320c0
 80107d8:	240077d0 	.word	0x240077d0
 80107dc:	000322c0 	.word	0x000322c0
 80107e0:	240077c0 	.word	0x240077c0
 80107e4:	000362c0 	.word	0x000362c0
 80107e8:	000364c0 	.word	0x000364c0
 80107ec:	00036940 	.word	0x00036940
 80107f0:	240077b0 	.word	0x240077b0
 80107f4:	240077a0 	.word	0x240077a0
 80107f8:	24007790 	.word	0x24007790
 80107fc:	00036b40 	.word	0x00036b40
 8010800:	24007780 	.word	0x24007780
 8010804:	0003eb40 	.word	0x0003eb40
 8010808:	24007770 	.word	0x24007770
 801080c:	0003ef40 	.word	0x0003ef40
 8010810:	24007760 	.word	0x24007760
 8010814:	0003f840 	.word	0x0003f840
 8010818:	24007750 	.word	0x24007750
 801081c:	0003fc40 	.word	0x0003fc40
 8010820:	24007740 	.word	0x24007740
 8010824:	0004fc40 	.word	0x0004fc40
 8010828:	00050040 	.word	0x00050040
 801082c:	00050940 	.word	0x00050940
 8010830:	24007730 	.word	0x24007730
 8010834:	24007720 	.word	0x24007720
 8010838:	24007710 	.word	0x24007710
 801083c:	00050d40 	.word	0x00050d40
 8010840:	24007700 	.word	0x24007700
 8010844:	00060d40 	.word	0x00060d40
 8010848:	240076f0 	.word	0x240076f0
 801084c:	00061140 	.word	0x00061140
 8010850:	240076e0 	.word	0x240076e0
 8010854:	00061a40 	.word	0x00061a40
 8010858:	240076d0 	.word	0x240076d0
 801085c:	00061e40 	.word	0x00061e40
 8010860:	240076c0 	.word	0x240076c0
 8010864:	00071e40 	.word	0x00071e40
 8010868:	00072240 	.word	0x00072240
 801086c:	00072b40 	.word	0x00072b40
 8010870:	240076b0 	.word	0x240076b0
 8010874:	240076a0 	.word	0x240076a0
 8010878:	24007690 	.word	0x24007690
 801087c:	00072f40 	.word	0x00072f40
 8010880:	24007680 	.word	0x24007680
 8010884:	00082f40 	.word	0x00082f40
 8010888:	24007670 	.word	0x24007670
 801088c:	00083340 	.word	0x00083340
 8010890:	24007660 	.word	0x24007660
 8010894:	00083c40 	.word	0x00083c40
 8010898:	24007650 	.word	0x24007650
 801089c:	00084040 	.word	0x00084040
 80108a0:	24007640 	.word	0x24007640
 80108a4:	00094040 	.word	0x00094040
 80108a8:	00094440 	.word	0x00094440
 80108ac:	00096440 	.word	0x00096440
 80108b0:	24007630 	.word	0x24007630
 80108b4:	24007620 	.word	0x24007620
 80108b8:	24007610 	.word	0x24007610
 80108bc:	000964c0 	.word	0x000964c0
 80108c0:	24007600 	.word	0x24007600
 80108c4:	00096740 	.word	0x00096740
 80108c8:	240075f0 	.word	0x240075f0
 80108cc:	00096790 	.word	0x00096790
 80108d0:	240075e0 	.word	0x240075e0
 80108d4:	000968d0 	.word	0x000968d0
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[0] + 616696);
    conv2d_44_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 616696);
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 80108d8:	498a      	ldr	r1, [pc, #552]	@ (8010b04 <network_configure_weights+0xa14>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 80108da:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80108de:	6010      	str	r0, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[0] + 616696);
 80108e0:	4889      	ldr	r0, [pc, #548]	@ (8010b08 <network_configure_weights+0xa18>)
 80108e2:	4418      	add	r0, r3
 80108e4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 80108e8:	6808      	ldr	r0, [r1, #0]
    conv2d_44_bias_array.data = AI_PTR(g_network_weights_map[0] + 624888);
    conv2d_44_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 624888);
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 80108ea:	4a88      	ldr	r2, [pc, #544]	@ (8010b0c <network_configure_weights+0xa1c>)
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 80108ec:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80108f0:	6008      	str	r0, [r1, #0]
    conv2d_44_bias_array.data = AI_PTR(g_network_weights_map[0] + 624888);
 80108f2:	4887      	ldr	r0, [pc, #540]	@ (8010b10 <network_configure_weights+0xa20>)
 80108f4:	4418      	add	r0, r3
 80108f6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 80108fa:	6810      	ldr	r0, [r2, #0]
    conv2d_69_weights_array.data = AI_PTR(g_network_weights_map[0] + 625016);
 80108fc:	4985      	ldr	r1, [pc, #532]	@ (8010b14 <network_configure_weights+0xa24>)
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 80108fe:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_69_weights_array.data = AI_PTR(g_network_weights_map[0] + 625016);
 8010902:	4419      	add	r1, r3
    conv2d_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8010904:	6010      	str	r0, [r2, #0]
    conv2d_69_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 625016);
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_69_bias_array.data = AI_PTR(g_network_weights_map[0] + 627896);
 8010906:	4884      	ldr	r0, [pc, #528]	@ (8010b18 <network_configure_weights+0xa28>)
    conv2d_69_weights_array.data = AI_PTR(g_network_weights_map[0] + 625016);
 8010908:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_69_bias_array.data = AI_PTR(g_network_weights_map[0] + 627896);
 801090c:	4418      	add	r0, r3
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 801090e:	4983      	ldr	r1, [pc, #524]	@ (8010b1c <network_configure_weights+0xa2c>)
    conv2d_69_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 627896);
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8010910:	4a83      	ldr	r2, [pc, #524]	@ (8010b20 <network_configure_weights+0xa30>)
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8010912:	680d      	ldr	r5, [r1, #0]
    conv2d_69_bias_array.data = AI_PTR(g_network_weights_map[0] + 627896);
 8010914:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8010918:	6810      	ldr	r0, [r2, #0]
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 801091a:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 801091e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8010922:	600d      	str	r5, [r1, #0]
    conv2d_74_weights_array.data = AI_PTR(g_network_weights_map[0] + 627936);
    conv2d_74_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 627936);
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8010924:	497f      	ldr	r1, [pc, #508]	@ (8010b24 <network_configure_weights+0xa34>)
    conv2d_74_weights_array.format |= AI_FMT_FLAG_CONST;
 8010926:	6010      	str	r0, [r2, #0]
    conv2d_74_weights_array.data = AI_PTR(g_network_weights_map[0] + 627936);
 8010928:	487f      	ldr	r0, [pc, #508]	@ (8010b28 <network_configure_weights+0xa38>)
 801092a:	4418      	add	r0, r3
 801092c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8010930:	6808      	ldr	r0, [r1, #0]
    conv2d_74_bias_array.data = AI_PTR(g_network_weights_map[0] + 633696);
    conv2d_74_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 633696);
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8010932:	4a7e      	ldr	r2, [pc, #504]	@ (8010b2c <network_configure_weights+0xa3c>)
    conv2d_74_bias_array.format |= AI_FMT_FLAG_CONST;
 8010934:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010938:	6008      	str	r0, [r1, #0]
    conv2d_74_bias_array.data = AI_PTR(g_network_weights_map[0] + 633696);
 801093a:	487d      	ldr	r0, [pc, #500]	@ (8010b30 <network_configure_weights+0xa40>)
 801093c:	4418      	add	r0, r3
 801093e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8010942:	6810      	ldr	r0, [r2, #0]
    conv2d_39_weights_array.data = AI_PTR(g_network_weights_map[0] + 633776);
    conv2d_39_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 633776);
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8010944:	497b      	ldr	r1, [pc, #492]	@ (8010b34 <network_configure_weights+0xa44>)
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8010946:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801094a:	6010      	str	r0, [r2, #0]
    conv2d_39_weights_array.data = AI_PTR(g_network_weights_map[0] + 633776);
 801094c:	487a      	ldr	r0, [pc, #488]	@ (8010b38 <network_configure_weights+0xa48>)
 801094e:	4418      	add	r0, r3
 8010950:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8010954:	6808      	ldr	r0, [r1, #0]
    conv2d_39_bias_array.data = AI_PTR(g_network_weights_map[0] + 641968);
    conv2d_39_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 641968);
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 8010956:	4a79      	ldr	r2, [pc, #484]	@ (8010b3c <network_configure_weights+0xa4c>)
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8010958:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801095c:	6008      	str	r0, [r1, #0]
    conv2d_39_bias_array.data = AI_PTR(g_network_weights_map[0] + 641968);
 801095e:	4878      	ldr	r0, [pc, #480]	@ (8010b40 <network_configure_weights+0xa50>)
 8010960:	4418      	add	r0, r3
 8010962:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 8010966:	6810      	ldr	r0, [r2, #0]
    conv2d_87_weights_array.data = AI_PTR(g_network_weights_map[0] + 642096);
    conv2d_87_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 642096);
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 8010968:	4976      	ldr	r1, [pc, #472]	@ (8010b44 <network_configure_weights+0xa54>)
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 801096a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 801096e:	6010      	str	r0, [r2, #0]
    conv2d_87_weights_array.data = AI_PTR(g_network_weights_map[0] + 642096);
 8010970:	4875      	ldr	r0, [pc, #468]	@ (8010b48 <network_configure_weights+0xa58>)
 8010972:	4418      	add	r0, r3
 8010974:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 8010978:	6808      	ldr	r0, [r1, #0]
    conv2d_87_bias_array.data = AI_PTR(g_network_weights_map[0] + 644976);
    conv2d_87_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 644976);
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 801097a:	4a74      	ldr	r2, [pc, #464]	@ (8010b4c <network_configure_weights+0xa5c>)
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 801097c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010980:	6008      	str	r0, [r1, #0]
    conv2d_87_bias_array.data = AI_PTR(g_network_weights_map[0] + 644976);
 8010982:	4873      	ldr	r0, [pc, #460]	@ (8010b50 <network_configure_weights+0xa60>)
 8010984:	4418      	add	r0, r3
 8010986:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 801098a:	6810      	ldr	r0, [r2, #0]
    conv2d_92_weights_array.data = AI_PTR(g_network_weights_map[0] + 645016);
 801098c:	4971      	ldr	r1, [pc, #452]	@ (8010b54 <network_configure_weights+0xa64>)
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 801098e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_92_weights_array.data = AI_PTR(g_network_weights_map[0] + 645016);
 8010992:	4419      	add	r1, r3
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 8010994:	6010      	str	r0, [r2, #0]
    conv2d_92_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 645016);
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_92_bias_array.data = AI_PTR(g_network_weights_map[0] + 650776);
 8010996:	4870      	ldr	r0, [pc, #448]	@ (8010b58 <network_configure_weights+0xa68>)
    conv2d_92_weights_array.data = AI_PTR(g_network_weights_map[0] + 645016);
 8010998:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_92_bias_array.data = AI_PTR(g_network_weights_map[0] + 650776);
 801099c:	4418      	add	r0, r3
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 801099e:	496f      	ldr	r1, [pc, #444]	@ (8010b5c <network_configure_weights+0xa6c>)
    conv2d_92_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 650776);
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80109a0:	4a6f      	ldr	r2, [pc, #444]	@ (8010b60 <network_configure_weights+0xa70>)
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 80109a2:	680d      	ldr	r5, [r1, #0]
    conv2d_92_bias_array.data = AI_PTR(g_network_weights_map[0] + 650776);
 80109a4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80109a8:	6810      	ldr	r0, [r2, #0]
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 80109aa:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80109ae:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 80109b2:	600d      	str	r5, [r1, #0]
    conv2d_34_weights_array.data = AI_PTR(g_network_weights_map[0] + 650856);
    conv2d_34_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 650856);
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80109b4:	496b      	ldr	r1, [pc, #428]	@ (8010b64 <network_configure_weights+0xa74>)
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80109b6:	6010      	str	r0, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_network_weights_map[0] + 650856);
 80109b8:	486b      	ldr	r0, [pc, #428]	@ (8010b68 <network_configure_weights+0xa78>)
 80109ba:	4418      	add	r0, r3
 80109bc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80109c0:	6808      	ldr	r0, [r1, #0]
    conv2d_34_bias_array.data = AI_PTR(g_network_weights_map[0] + 659048);
    conv2d_34_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 659048);
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 80109c2:	4a6a      	ldr	r2, [pc, #424]	@ (8010b6c <network_configure_weights+0xa7c>)
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80109c4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80109c8:	6008      	str	r0, [r1, #0]
    conv2d_34_bias_array.data = AI_PTR(g_network_weights_map[0] + 659048);
 80109ca:	4869      	ldr	r0, [pc, #420]	@ (8010b70 <network_configure_weights+0xa80>)
 80109cc:	4418      	add	r0, r3
 80109ce:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 80109d2:	6810      	ldr	r0, [r2, #0]
    conv2d_105_weights_array.data = AI_PTR(g_network_weights_map[0] + 659176);
    conv2d_105_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 659176);
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 80109d4:	4967      	ldr	r1, [pc, #412]	@ (8010b74 <network_configure_weights+0xa84>)
    conv2d_105_weights_array.format |= AI_FMT_FLAG_CONST;
 80109d6:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80109da:	6010      	str	r0, [r2, #0]
    conv2d_105_weights_array.data = AI_PTR(g_network_weights_map[0] + 659176);
 80109dc:	4866      	ldr	r0, [pc, #408]	@ (8010b78 <network_configure_weights+0xa88>)
 80109de:	4418      	add	r0, r3
 80109e0:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 80109e4:	6808      	ldr	r0, [r1, #0]
    conv2d_105_bias_array.data = AI_PTR(g_network_weights_map[0] + 662056);
    conv2d_105_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 662056);
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 80109e6:	4a65      	ldr	r2, [pc, #404]	@ (8010b7c <network_configure_weights+0xa8c>)
    conv2d_105_bias_array.format |= AI_FMT_FLAG_CONST;
 80109e8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80109ec:	6008      	str	r0, [r1, #0]
    conv2d_105_bias_array.data = AI_PTR(g_network_weights_map[0] + 662056);
 80109ee:	4864      	ldr	r0, [pc, #400]	@ (8010b80 <network_configure_weights+0xa90>)
 80109f0:	4418      	add	r0, r3
 80109f2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 80109f6:	6810      	ldr	r0, [r2, #0]
    conv2d_110_weights_array.data = AI_PTR(g_network_weights_map[0] + 662096);
    conv2d_110_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 662096);
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 80109f8:	4962      	ldr	r1, [pc, #392]	@ (8010b84 <network_configure_weights+0xa94>)
    conv2d_110_weights_array.format |= AI_FMT_FLAG_CONST;
 80109fa:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80109fe:	6010      	str	r0, [r2, #0]
    conv2d_110_weights_array.data = AI_PTR(g_network_weights_map[0] + 662096);
 8010a00:	4861      	ldr	r0, [pc, #388]	@ (8010b88 <network_configure_weights+0xa98>)
 8010a02:	4418      	add	r0, r3
 8010a04:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a08:	6808      	ldr	r0, [r1, #0]
    conv2d_110_bias_array.data = AI_PTR(g_network_weights_map[0] + 667856);
    conv2d_110_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 667856);
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a0a:	4a60      	ldr	r2, [pc, #384]	@ (8010b8c <network_configure_weights+0xa9c>)
    conv2d_110_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a0c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010a10:	6008      	str	r0, [r1, #0]
    conv2d_110_bias_array.data = AI_PTR(g_network_weights_map[0] + 667856);
 8010a12:	485f      	ldr	r0, [pc, #380]	@ (8010b90 <network_configure_weights+0xaa0>)
 8010a14:	4418      	add	r0, r3
 8010a16:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a1a:	6810      	ldr	r0, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 667936);
 8010a1c:	495d      	ldr	r1, [pc, #372]	@ (8010b94 <network_configure_weights+0xaa4>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a1e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 667936);
 8010a22:	4419      	add	r1, r3
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a24:	6010      	str	r0, [r2, #0]
    conv2d_28_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 667936);
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 672032);
 8010a26:	485c      	ldr	r0, [pc, #368]	@ (8010b98 <network_configure_weights+0xaa8>)
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 667936);
 8010a28:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 672032);
 8010a2c:	4418      	add	r0, r3
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a2e:	495b      	ldr	r1, [pc, #364]	@ (8010b9c <network_configure_weights+0xaac>)
    conv2d_28_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 672032);
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a30:	4a5b      	ldr	r2, [pc, #364]	@ (8010ba0 <network_configure_weights+0xab0>)
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a32:	680d      	ldr	r5, [r1, #0]
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 672032);
 8010a34:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a38:	6810      	ldr	r0, [r2, #0]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a3a:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a3e:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a42:	600d      	str	r5, [r1, #0]
    conv2d_123_weights_array.data = AI_PTR(g_network_weights_map[0] + 672160);
    conv2d_123_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 672160);
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a44:	4957      	ldr	r1, [pc, #348]	@ (8010ba4 <network_configure_weights+0xab4>)
    conv2d_123_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a46:	6010      	str	r0, [r2, #0]
    conv2d_123_weights_array.data = AI_PTR(g_network_weights_map[0] + 672160);
 8010a48:	4857      	ldr	r0, [pc, #348]	@ (8010ba8 <network_configure_weights+0xab8>)
 8010a4a:	4418      	add	r0, r3
 8010a4c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a50:	6808      	ldr	r0, [r1, #0]
    conv2d_123_bias_array.data = AI_PTR(g_network_weights_map[0] + 675040);
    conv2d_123_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 675040);
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a52:	4a56      	ldr	r2, [pc, #344]	@ (8010bac <network_configure_weights+0xabc>)
    conv2d_123_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a54:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010a58:	6008      	str	r0, [r1, #0]
    conv2d_123_bias_array.data = AI_PTR(g_network_weights_map[0] + 675040);
 8010a5a:	4855      	ldr	r0, [pc, #340]	@ (8010bb0 <network_configure_weights+0xac0>)
 8010a5c:	4418      	add	r0, r3
 8010a5e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a62:	6810      	ldr	r0, [r2, #0]
    conv2d_128_weights_array.data = AI_PTR(g_network_weights_map[0] + 675080);
    conv2d_128_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 675080);
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a64:	4953      	ldr	r1, [pc, #332]	@ (8010bb4 <network_configure_weights+0xac4>)
    conv2d_128_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a66:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010a6a:	6010      	str	r0, [r2, #0]
    conv2d_128_weights_array.data = AI_PTR(g_network_weights_map[0] + 675080);
 8010a6c:	4852      	ldr	r0, [pc, #328]	@ (8010bb8 <network_configure_weights+0xac8>)
 8010a6e:	4418      	add	r0, r3
 8010a70:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a74:	6808      	ldr	r0, [r1, #0]
    conv2d_128_bias_array.data = AI_PTR(g_network_weights_map[0] + 680840);
    conv2d_128_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 680840);
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a76:	4a51      	ldr	r2, [pc, #324]	@ (8010bbc <network_configure_weights+0xacc>)
    conv2d_128_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a78:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010a7c:	6008      	str	r0, [r1, #0]
    conv2d_128_bias_array.data = AI_PTR(g_network_weights_map[0] + 680840);
 8010a7e:	4850      	ldr	r0, [pc, #320]	@ (8010bc0 <network_configure_weights+0xad0>)
 8010a80:	4418      	add	r0, r3
 8010a82:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a86:	6810      	ldr	r0, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[0] + 680920);
    conv2d_14_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 680920);
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a88:	494e      	ldr	r1, [pc, #312]	@ (8010bc4 <network_configure_weights+0xad4>)
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a8a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010a8e:	6010      	str	r0, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[0] + 680920);
 8010a90:	484d      	ldr	r0, [pc, #308]	@ (8010bc8 <network_configure_weights+0xad8>)
 8010a92:	4418      	add	r0, r3
 8010a94:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a98:	6808      	ldr	r0, [r1, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 682968);
    conv2d_14_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 682968);
    conv2d_141_weights_array.format |= AI_FMT_FLAG_CONST;
 8010a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8010bcc <network_configure_weights+0xadc>)
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8010a9c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8010aa0:	6008      	str	r0, [r1, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 682968);
 8010aa2:	484b      	ldr	r0, [pc, #300]	@ (8010bd0 <network_configure_weights+0xae0>)
 8010aa4:	4418      	add	r0, r3
 8010aa6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_141_weights_array.format |= AI_FMT_FLAG_CONST;
 8010aaa:	6810      	ldr	r0, [r2, #0]
    conv2d_141_weights_array.data = AI_PTR(g_network_weights_map[0] + 683096);
 8010aac:	4949      	ldr	r1, [pc, #292]	@ (8010bd4 <network_configure_weights+0xae4>)
    conv2d_141_weights_array.format |= AI_FMT_FLAG_CONST;
 8010aae:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_141_weights_array.data = AI_PTR(g_network_weights_map[0] + 683096);
 8010ab2:	4419      	add	r1, r3
    conv2d_141_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ab4:	6010      	str	r0, [r2, #0]
    conv2d_141_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 683096);
    conv2d_141_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_141_bias_array.data = AI_PTR(g_network_weights_map[0] + 685976);
 8010ab6:	4848      	ldr	r0, [pc, #288]	@ (8010bd8 <network_configure_weights+0xae8>)
    conv2d_141_weights_array.data = AI_PTR(g_network_weights_map[0] + 683096);
 8010ab8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_141_bias_array.data = AI_PTR(g_network_weights_map[0] + 685976);
 8010abc:	4418      	add	r0, r3
    conv2d_141_bias_array.format |= AI_FMT_FLAG_CONST;
 8010abe:	4a47      	ldr	r2, [pc, #284]	@ (8010bdc <network_configure_weights+0xaec>)
    conv2d_141_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 685976);
    conv2d_149_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ac0:	4947      	ldr	r1, [pc, #284]	@ (8010be0 <network_configure_weights+0xaf0>)
    conv2d_141_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ac2:	6815      	ldr	r5, [r2, #0]
    conv2d_141_bias_array.data = AI_PTR(g_network_weights_map[0] + 685976);
 8010ac4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_149_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ac8:	6808      	ldr	r0, [r1, #0]
    conv2d_141_bias_array.format |= AI_FMT_FLAG_CONST;
 8010aca:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    conv2d_149_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ace:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_141_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ad2:	6015      	str	r5, [r2, #0]
    conv2d_149_weights_array.data = AI_PTR(g_network_weights_map[0] + 686016);
    conv2d_149_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 686016);
    conv2d_149_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ad4:	4a43      	ldr	r2, [pc, #268]	@ (8010be4 <network_configure_weights+0xaf4>)
    conv2d_149_weights_array.format |= AI_FMT_FLAG_CONST;
 8010ad6:	6008      	str	r0, [r1, #0]
    conv2d_149_weights_array.data = AI_PTR(g_network_weights_map[0] + 686016);
 8010ad8:	4843      	ldr	r0, [pc, #268]	@ (8010be8 <network_configure_weights+0xaf8>)
 8010ada:	4418      	add	r0, r3
 8010adc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_149_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ae0:	6810      	ldr	r0, [r2, #0]
    conv2d_149_bias_array.data = AI_PTR(g_network_weights_map[0] + 691776);
 8010ae2:	4942      	ldr	r1, [pc, #264]	@ (8010bec <network_configure_weights+0xafc>)
    conv2d_149_bias_array.format |= AI_FMT_FLAG_CONST;
 8010ae4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
    conv2d_149_bias_array.data = AI_PTR(g_network_weights_map[0] + 691776);
 8010ae8:	4419      	add	r1, r3
    conv2d_149_bias_array.format |= AI_FMT_FLAG_CONST;
 8010aea:	6010      	str	r0, [r2, #0]
    conv2d_149_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 691776);
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8010aec:	4620      	mov	r0, r4
    conv2d_149_bias_array.data = AI_PTR(g_network_weights_map[0] + 691776);
 8010aee:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8010af4:	2212      	movs	r2, #18
 8010af6:	2130      	movs	r1, #48	@ 0x30
 8010af8:	4628      	mov	r0, r5
 8010afa:	f00e f9cb 	bl	801ee94 <ai_platform_network_set_error>
}
 8010afe:	4620      	mov	r0, r4
 8010b00:	bd70      	pop	{r4, r5, r6, pc}
 8010b02:	bf00      	nop
 8010b04:	240075d0 	.word	0x240075d0
 8010b08:	000968f8 	.word	0x000968f8
 8010b0c:	240075c0 	.word	0x240075c0
 8010b10:	000988f8 	.word	0x000988f8
 8010b14:	00098978 	.word	0x00098978
 8010b18:	000994b8 	.word	0x000994b8
 8010b1c:	240075b0 	.word	0x240075b0
 8010b20:	240075a0 	.word	0x240075a0
 8010b24:	24007590 	.word	0x24007590
 8010b28:	000994e0 	.word	0x000994e0
 8010b2c:	24007580 	.word	0x24007580
 8010b30:	0009ab60 	.word	0x0009ab60
 8010b34:	24007570 	.word	0x24007570
 8010b38:	0009abb0 	.word	0x0009abb0
 8010b3c:	24007560 	.word	0x24007560
 8010b40:	0009cbb0 	.word	0x0009cbb0
 8010b44:	24007550 	.word	0x24007550
 8010b48:	0009cc30 	.word	0x0009cc30
 8010b4c:	24007540 	.word	0x24007540
 8010b50:	0009d770 	.word	0x0009d770
 8010b54:	0009d798 	.word	0x0009d798
 8010b58:	0009ee18 	.word	0x0009ee18
 8010b5c:	24007530 	.word	0x24007530
 8010b60:	24007520 	.word	0x24007520
 8010b64:	24007510 	.word	0x24007510
 8010b68:	0009ee68 	.word	0x0009ee68
 8010b6c:	24007500 	.word	0x24007500
 8010b70:	000a0e68 	.word	0x000a0e68
 8010b74:	240074f0 	.word	0x240074f0
 8010b78:	000a0ee8 	.word	0x000a0ee8
 8010b7c:	240074e0 	.word	0x240074e0
 8010b80:	000a1a28 	.word	0x000a1a28
 8010b84:	240074d0 	.word	0x240074d0
 8010b88:	000a1a50 	.word	0x000a1a50
 8010b8c:	240074c0 	.word	0x240074c0
 8010b90:	000a30d0 	.word	0x000a30d0
 8010b94:	000a3120 	.word	0x000a3120
 8010b98:	000a4120 	.word	0x000a4120
 8010b9c:	240074b0 	.word	0x240074b0
 8010ba0:	240074a0 	.word	0x240074a0
 8010ba4:	24007490 	.word	0x24007490
 8010ba8:	000a41a0 	.word	0x000a41a0
 8010bac:	24007480 	.word	0x24007480
 8010bb0:	000a4ce0 	.word	0x000a4ce0
 8010bb4:	24007470 	.word	0x24007470
 8010bb8:	000a4d08 	.word	0x000a4d08
 8010bbc:	24007460 	.word	0x24007460
 8010bc0:	000a6388 	.word	0x000a6388
 8010bc4:	24007450 	.word	0x24007450
 8010bc8:	000a63d8 	.word	0x000a63d8
 8010bcc:	24007440 	.word	0x24007440
 8010bd0:	000a6bd8 	.word	0x000a6bd8
 8010bd4:	000a6c58 	.word	0x000a6c58
 8010bd8:	000a7798 	.word	0x000a7798
 8010bdc:	24007430 	.word	0x24007430
 8010be0:	24007420 	.word	0x24007420
 8010be4:	24007410 	.word	0x24007410
 8010be8:	000a77c0 	.word	0x000a77c0
 8010bec:	000a8e40 	.word	0x000a8e40

08010bf0 <network_configure_activations>:
{
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	b089      	sub	sp, #36	@ 0x24
 8010bf6:	460a      	mov	r2, r1
 8010bf8:	4604      	mov	r4, r0
  if (ai_platform_get_activations_map(g_network_activations_map, 3, params)) {
 8010bfa:	2103      	movs	r1, #3
 8010bfc:	48cf      	ldr	r0, [pc, #828]	@ (8010f3c <network_configure_activations+0x34c>)
 8010bfe:	f00e f8cb 	bl	801ed98 <ai_platform_get_activations_map>
 8010c02:	9001      	str	r0, [sp, #4]
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f000 8338 	beq.w	801127a <network_configure_activations+0x68a>
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c0a:	4dcc      	ldr	r5, [pc, #816]	@ (8010f3c <network_configure_activations+0x34c>)
    conv2d_7_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 57216);
 8010c0c:	f64d 7a80 	movw	sl, #57216	@ 0xdf80
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c10:	49cb      	ldr	r1, [pc, #812]	@ (8010f40 <network_configure_activations+0x350>)
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 55168);
 8010c12:	f24d 7980 	movw	r9, #55168	@ 0xd780
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c16:	682b      	ldr	r3, [r5, #0]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[1] + 53120);
 8010c18:	f64c 7880 	movw	r8, #53120	@ 0xcf80
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c1c:	4ac9      	ldr	r2, [pc, #804]	@ (8010f44 <network_configure_activations+0x354>)
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 48992);
 8010c1e:	f64b 7e60 	movw	lr, #48992	@ 0xbf60
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1840);
 8010c22:	f503 64e6 	add.w	r4, r3, #1840	@ 0x730
 8010c26:	48c8      	ldr	r0, [pc, #800]	@ (8010f48 <network_configure_activations+0x358>)
    conv2d_141_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 90880);
 8010c28:	f8df b440 	ldr.w	fp, [pc, #1088]	@ 801106c <network_configure_activations+0x47c>
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c2c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c30:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 460);
 8010c34:	4ac5      	ldr	r2, [pc, #788]	@ (8010f4c <network_configure_activations+0x35c>)
 8010c36:	f503 71e6 	add.w	r1, r3, #460	@ 0x1cc
 8010c3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c3e:	49c4      	ldr	r1, [pc, #784]	@ (8010f50 <network_configure_activations+0x360>)
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c40:	4ac4      	ldr	r2, [pc, #784]	@ (8010f54 <network_configure_activations+0x364>)
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1840);
 8010c42:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c46:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c4a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 652);
 8010c4e:	4ac2      	ldr	r2, [pc, #776]	@ (8010f58 <network_configure_activations+0x368>)
 8010c50:	f503 7123 	add.w	r1, r3, #652	@ 0x28c
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c54:	48c1      	ldr	r0, [pc, #772]	@ (8010f5c <network_configure_activations+0x36c>)
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 8010c56:	4cc2      	ldr	r4, [pc, #776]	@ (8010f60 <network_configure_activations+0x370>)
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c58:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 652);
 8010c5c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c60:	48c0      	ldr	r0, [pc, #768]	@ (8010f64 <network_configure_activations+0x374>)
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c62:	49c1      	ldr	r1, [pc, #772]	@ (8010f68 <network_configure_activations+0x378>)
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c64:	4ac1      	ldr	r2, [pc, #772]	@ (8010f6c <network_configure_activations+0x37c>)
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c66:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c6a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c6e:	48c0      	ldr	r0, [pc, #768]	@ (8010f70 <network_configure_activations+0x380>)
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 4212);
 8010c70:	f241 0174 	movw	r1, #4212	@ 0x1074
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c74:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 4212);
 8010c78:	4419      	add	r1, r3
 8010c7a:	48be      	ldr	r0, [pc, #760]	@ (8010f74 <network_configure_activations+0x384>)
 8010c7c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_19_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c80:	49bd      	ldr	r1, [pc, #756]	@ (8010f78 <network_configure_activations+0x388>)
    nl_147_output_array.data = AI_PTR(g_network_activations_map[1] + 38996);
 8010c82:	f649 0054 	movw	r0, #38996	@ 0x9854
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c86:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_19_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c8a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_11_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c8e:	4abb      	ldr	r2, [pc, #748]	@ (8010f7c <network_configure_activations+0x38c>)
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c90:	49bb      	ldr	r1, [pc, #748]	@ (8010f80 <network_configure_activations+0x390>)
    conv2d_11_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c92:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c96:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010c9a:	49ba      	ldr	r1, [pc, #744]	@ (8010f84 <network_configure_activations+0x394>)
    conv2d_32_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8952);
 8010c9c:	f242 22f8 	movw	r2, #8952	@ 0x22f8
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ca0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ca4:	49b8      	ldr	r1, [pc, #736]	@ (8010f88 <network_configure_activations+0x398>)
    conv2d_32_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8952);
 8010ca6:	441a      	add	r2, r3
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ca8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_23_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cac:	49b7      	ldr	r1, [pc, #732]	@ (8010f8c <network_configure_activations+0x39c>)
 8010cae:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cb2:	49b7      	ldr	r1, [pc, #732]	@ (8010f90 <network_configure_activations+0x3a0>)
 8010cb4:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_25_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cb8:	49b6      	ldr	r1, [pc, #728]	@ (8010f94 <network_configure_activations+0x3a4>)
 8010cba:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cbe:	49b6      	ldr	r1, [pc, #728]	@ (8010f98 <network_configure_activations+0x3a8>)
 8010cc0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_27_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cc4:	49b5      	ldr	r1, [pc, #724]	@ (8010f9c <network_configure_activations+0x3ac>)
 8010cc6:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_30_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cca:	49b5      	ldr	r1, [pc, #724]	@ (8010fa0 <network_configure_activations+0x3b0>)
 8010ccc:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_31_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cd0:	49b4      	ldr	r1, [pc, #720]	@ (8010fa4 <network_configure_activations+0x3b4>)
 8010cd2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_32_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8952);
 8010cd6:	49b4      	ldr	r1, [pc, #720]	@ (8010fa8 <network_configure_activations+0x3b8>)
 8010cd8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cdc:	49b3      	ldr	r1, [pc, #716]	@ (8010fac <network_configure_activations+0x3bc>)
    conv2d_35_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cde:	4ab4      	ldr	r2, [pc, #720]	@ (8010fb0 <network_configure_activations+0x3c0>)
    conv2d_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ce0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_35_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ce4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_36_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010ce8:	49b2      	ldr	r1, [pc, #712]	@ (8010fb4 <network_configure_activations+0x3c4>)
    conv2d_37_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cea:	4ab3      	ldr	r2, [pc, #716]	@ (8010fb8 <network_configure_activations+0x3c8>)
    conv2d_36_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cec:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_37_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cf0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_38_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cf4:	49b1      	ldr	r1, [pc, #708]	@ (8010fbc <network_configure_activations+0x3cc>)
    conv2d_40_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cf6:	4ab2      	ldr	r2, [pc, #712]	@ (8010fc0 <network_configure_activations+0x3d0>)
    conv2d_38_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cf8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_40_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010cfc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_41_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d00:	49b0      	ldr	r1, [pc, #704]	@ (8010fc4 <network_configure_activations+0x3d4>)
    conv2d_42_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d02:	4ab1      	ldr	r2, [pc, #708]	@ (8010fc8 <network_configure_activations+0x3d8>)
    conv2d_41_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d04:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_42_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d08:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_43_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d0c:	49af      	ldr	r1, [pc, #700]	@ (8010fcc <network_configure_activations+0x3dc>)
    conv2d_50_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d0e:	4ab0      	ldr	r2, [pc, #704]	@ (8010fd0 <network_configure_activations+0x3e0>)
    conv2d_43_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d10:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_50_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d14:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_56_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d18:	49ae      	ldr	r1, [pc, #696]	@ (8010fd4 <network_configure_activations+0x3e4>)
    conv2d_51_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d1a:	4aaf      	ldr	r2, [pc, #700]	@ (8010fd8 <network_configure_activations+0x3e8>)
    conv2d_56_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d1c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_51_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d20:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d24:	49ad      	ldr	r1, [pc, #692]	@ (8010fdc <network_configure_activations+0x3ec>)
    conv2d_69_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d26:	4aae      	ldr	r2, [pc, #696]	@ (8010fe0 <network_configure_activations+0x3f0>)
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d28:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_69_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d2c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_74_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d30:	49ac      	ldr	r1, [pc, #688]	@ (8010fe4 <network_configure_activations+0x3f4>)
    conv2d_39_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d32:	4aad      	ldr	r2, [pc, #692]	@ (8010fe8 <network_configure_activations+0x3f8>)
    conv2d_74_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d34:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_39_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d38:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_87_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d3c:	49ab      	ldr	r1, [pc, #684]	@ (8010fec <network_configure_activations+0x3fc>)
    conv2d_92_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d3e:	4aac      	ldr	r2, [pc, #688]	@ (8010ff0 <network_configure_activations+0x400>)
    conv2d_87_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d40:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_92_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d44:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_34_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d48:	49aa      	ldr	r1, [pc, #680]	@ (8010ff4 <network_configure_activations+0x404>)
    conv2d_105_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d4a:	4aab      	ldr	r2, [pc, #684]	@ (8010ff8 <network_configure_activations+0x408>)
    conv2d_34_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d4c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_105_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d50:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_110_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d54:	49a9      	ldr	r1, [pc, #676]	@ (8010ffc <network_configure_activations+0x40c>)
    conv2d_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d56:	4aaa      	ldr	r2, [pc, #680]	@ (8011000 <network_configure_activations+0x410>)
    conv2d_110_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d58:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d5c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_123_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d60:	49a8      	ldr	r1, [pc, #672]	@ (8011004 <network_configure_activations+0x414>)
    conv2d_128_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d62:	4aa9      	ldr	r2, [pc, #676]	@ (8011008 <network_configure_activations+0x418>)
    conv2d_123_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d64:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_128_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d68:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d6c:	49a7      	ldr	r1, [pc, #668]	@ (801100c <network_configure_activations+0x41c>)
    conv2d_141_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d6e:	4aa8      	ldr	r2, [pc, #672]	@ (8011010 <network_configure_activations+0x420>)
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d70:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_141_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d74:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_147_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d78:	49a6      	ldr	r1, [pc, #664]	@ (8011014 <network_configure_activations+0x424>)
    conv2d_149_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d7a:	4aa7      	ldr	r2, [pc, #668]	@ (8011018 <network_configure_activations+0x428>)
    nl_147_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d7c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_149_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8010d80:	e9c2 3302 	strd	r3, r3, [r2, #8]
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 6188);
 8010d84:	686b      	ldr	r3, [r5, #4]
 8010d86:	f641 022c 	movw	r2, #6188	@ 0x182c
 8010d8a:	49a4      	ldr	r1, [pc, #656]	@ (801101c <network_configure_activations+0x42c>)
 8010d8c:	441a      	add	r2, r3
    nl_147_output_array.data = AI_PTR(g_network_activations_map[1] + 38996);
 8010d8e:	1818      	adds	r0, r3, r0
    conv2d_16_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010d90:	f503 3700 	add.w	r7, r3, #131072	@ 0x20000
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[1] + 65536);
 8010d94:	f503 3c80 	add.w	ip, r3, #65536	@ 0x10000
    nl_147_output_array.data = AI_PTR(g_network_activations_map[1] + 38996);
 8010d98:	9006      	str	r0, [sp, #24]
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 8010d9a:	191c      	adds	r4, r3, r4
    conv2d_16_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010d9c:	4638      	mov	r0, r7
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[1] + 16384);
 8010d9e:	f503 4780 	add.w	r7, r3, #16384	@ 0x4000
    conv2d_69_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8010da2:	f503 76d0 	add.w	r6, r3, #416	@ 0x1a0
    conv2d_7_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 57216);
 8010da6:	449a      	add	sl, r3
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 8010da8:	9407      	str	r4, [sp, #28]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 55168);
 8010daa:	4499      	add	r9, r3
    conv2d_69_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8010dac:	9605      	str	r6, [sp, #20]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[1] + 53120);
 8010dae:	4498      	add	r8, r3
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 48992);
 8010db0:	449e      	add	lr, r3
    conv2d_44_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 8010db2:	f103 05a0 	add.w	r5, r3, #160	@ 0xa0
    resize_103_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 8010db6:	f503 6418 	add.w	r4, r3, #2432	@ 0x980
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8010dba:	f503 46c6 	add.w	r6, r3, #25344	@ 0x6300
    conv2d_141_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 90880);
 8010dbe:	449b      	add	fp, r3
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[1] + 6188);
 8010dc0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conversion_163_const_to_output_copy_output_array.data = AI_PTR(g_network_activations_map[1] + 202796);
 8010dc4:	4a96      	ldr	r2, [pc, #600]	@ (8011020 <network_configure_activations+0x430>)
 8010dc6:	4997      	ldr	r1, [pc, #604]	@ (8011024 <network_configure_activations+0x434>)
 8010dc8:	441a      	add	r2, r3
 8010dca:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[1] + 6184);
 8010dce:	f641 0228 	movw	r2, #6184	@ 0x1828
 8010dd2:	4995      	ldr	r1, [pc, #596]	@ (8011028 <network_configure_activations+0x438>)
 8010dd4:	441a      	add	r2, r3
 8010dd6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[1] + 5152);
 8010dda:	f503 51a1 	add.w	r1, r3, #5152	@ 0x1420
 8010dde:	4a93      	ldr	r2, [pc, #588]	@ (801102c <network_configure_activations+0x43c>)
 8010de0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 1024);
 8010de4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8010de8:	4611      	mov	r1, r2
 8010dea:	4a91      	ldr	r2, [pc, #580]	@ (8011030 <network_configure_activations+0x440>)
 8010dec:	6091      	str	r1, [r2, #8]
 8010dee:	60d1      	str	r1, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010df0:	4a90      	ldr	r2, [pc, #576]	@ (8011034 <network_configure_activations+0x444>)
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 1024);
 8010df2:	9104      	str	r1, [sp, #16]
    conv2d_11_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010df4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010df8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8011038 <network_configure_activations+0x448>)
 8010dfe:	e9c2 3302 	strd	r3, r3, [r2, #8]
    resize_121_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 8010e02:	f503 521a 	add.w	r2, r3, #9856	@ 0x2680
 8010e06:	9200      	str	r2, [sp, #0]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[1] + 16384);
 8010e08:	463a      	mov	r2, r7
    conv2d_31_output_array.data = AI_PTR(g_network_activations_map[1] + 8192);
 8010e0a:	f503 5700 	add.w	r7, r3, #8192	@ 0x2000
 8010e0e:	9703      	str	r7, [sp, #12]
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 4096);
 8010e10:	f503 5780 	add.w	r7, r3, #4096	@ 0x1000
 8010e14:	9702      	str	r7, [sp, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[1] + 65536);
 8010e16:	4f89      	ldr	r7, [pc, #548]	@ (801103c <network_configure_activations+0x44c>)
 8010e18:	e9c7 cc02 	strd	ip, ip, [r7, #8]
    conv2d_7_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 57216);
 8010e1c:	4f88      	ldr	r7, [pc, #544]	@ (8011040 <network_configure_activations+0x450>)
 8010e1e:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[1] + 55168);
 8010e22:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 8011070 <network_configure_activations+0x480>
 8010e26:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[1] + 53120);
 8010e2a:	f8df 9248 	ldr.w	r9, [pc, #584]	@ 8011074 <network_configure_activations+0x484>
 8010e2e:	e9c9 8802 	strd	r8, r8, [r9, #8]
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 48992);
 8010e32:	f8df 8244 	ldr.w	r8, [pc, #580]	@ 8011078 <network_configure_activations+0x488>
 8010e36:	e9c8 ee02 	strd	lr, lr, [r8, #8]
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e3a:	f8df e240 	ldr.w	lr, [pc, #576]	@ 801107c <network_configure_activations+0x48c>
    conv2d_12_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 98304);
 8010e3e:	f503 38c0 	add.w	r8, r3, #98304	@ 0x18000
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e42:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_11_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010e46:	f8df e238 	ldr.w	lr, [pc, #568]	@ 8011080 <network_configure_activations+0x490>
 8010e4a:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv2d_12_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 98304);
 8010e4e:	f8df e234 	ldr.w	lr, [pc, #564]	@ 8011084 <network_configure_activations+0x494>
 8010e52:	e9ce 8802 	strd	r8, r8, [lr, #8]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e56:	f8df e230 	ldr.w	lr, [pc, #560]	@ 8011088 <network_configure_activations+0x498>
 8010e5a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[1] + 65536);
 8010e5e:	f8df e22c 	ldr.w	lr, [pc, #556]	@ 801108c <network_configure_activations+0x49c>
 8010e62:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_16_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010e66:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8011090 <network_configure_activations+0x4a0>
 8010e6a:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e6e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8011094 <network_configure_activations+0x4a4>
 8010e72:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[1] + 16384);
 8010e76:	f8df c220 	ldr.w	ip, [pc, #544]	@ 8011098 <network_configure_activations+0x4a8>
 8010e7a:	e9cc 2202 	strd	r2, r2, [ip, #8]
    conv2d_18_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010e7e:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 801109c <network_configure_activations+0x4ac>
 8010e82:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e86:	f8df c218 	ldr.w	ip, [pc, #536]	@ 80110a0 <network_configure_activations+0x4b0>
 8010e8a:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_19_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010e8e:	f8df c214 	ldr.w	ip, [pc, #532]	@ 80110a4 <network_configure_activations+0x4b4>
 8010e92:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_20_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010e96:	f8df c210 	ldr.w	ip, [pc, #528]	@ 80110a8 <network_configure_activations+0x4b8>
 8010e9a:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010e9e:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 80110ac <network_configure_activations+0x4bc>
    conv2d_31_output_array.data = AI_PTR(g_network_activations_map[1] + 8192);
 8010ea2:	9f03      	ldr	r7, [sp, #12]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010ea4:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010ea8:	f8df c204 	ldr.w	ip, [pc, #516]	@ 80110b0 <network_configure_activations+0x4c0>
 8010eac:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_22_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010eb0:	f8df c200 	ldr.w	ip, [pc, #512]	@ 80110b4 <network_configure_activations+0x4c4>
 8010eb4:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_22_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010eb8:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 80110b8 <network_configure_activations+0x4c8>
 8010ebc:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_23_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010ec0:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 80110bc <network_configure_activations+0x4cc>
 8010ec4:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_24_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010ec8:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 80110c0 <network_configure_activations+0x4d0>
 8010ecc:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010ed0:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 80110c4 <network_configure_activations+0x4d4>
 8010ed4:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_25_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010ed8:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 80110c8 <network_configure_activations+0x4d8>
 8010edc:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_26_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010ee0:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 80110cc <network_configure_activations+0x4dc>
 8010ee4:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010ee8:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80110d0 <network_configure_activations+0x4e0>
 8010eec:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_27_output_array.data = AI_PTR(g_network_activations_map[1] + 32768);
 8010ef0:	f8df c1e0 	ldr.w	ip, [pc, #480]	@ 80110d4 <network_configure_activations+0x4e4>
 8010ef4:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_30_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010ef8:	4952      	ldr	r1, [pc, #328]	@ (8011044 <network_configure_activations+0x454>)
    conv2d_50_output_array.data = AI_PTR(g_network_activations_map[1] + 256);
 8010efa:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
    conv2d_30_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010efe:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010f02:	4951      	ldr	r1, [pc, #324]	@ (8011048 <network_configure_activations+0x458>)
 8010f04:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_31_output_array.data = AI_PTR(g_network_activations_map[1] + 8192);
 8010f08:	4950      	ldr	r1, [pc, #320]	@ (801104c <network_configure_activations+0x45c>)
 8010f0a:	e9c1 7702 	strd	r7, r7, [r1, #8]
    conv2d_32_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010f0e:	4950      	ldr	r1, [pc, #320]	@ (8011050 <network_configure_activations+0x460>)
 8010f10:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010f14:	494f      	ldr	r1, [pc, #316]	@ (8011054 <network_configure_activations+0x464>)
 8010f16:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_33_output_array.data = AI_PTR(g_network_activations_map[1] + 16384);
 8010f1a:	494f      	ldr	r1, [pc, #316]	@ (8011058 <network_configure_activations+0x468>)
 8010f1c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_35_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010f20:	494e      	ldr	r1, [pc, #312]	@ (801105c <network_configure_activations+0x46c>)
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 4096);
 8010f22:	9a02      	ldr	r2, [sp, #8]
    conv2d_35_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010f24:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_35_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8010f28:	494d      	ldr	r1, [pc, #308]	@ (8011060 <network_configure_activations+0x470>)
 8010f2a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[1] + 4096);
 8010f2e:	494d      	ldr	r1, [pc, #308]	@ (8011064 <network_configure_activations+0x474>)
 8010f30:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_37_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8010f34:	494c      	ldr	r1, [pc, #304]	@ (8011068 <network_configure_activations+0x478>)
 8010f36:	e9c1 0002 	strd	r0, r0, [r1, #8]
 8010f3a:	e0cd      	b.n	80110d8 <network_configure_activations+0x4e8>
 8010f3c:	24008a8c 	.word	0x24008a8c
 8010f40:	24007400 	.word	0x24007400
 8010f44:	240073f0 	.word	0x240073f0
 8010f48:	24007370 	.word	0x24007370
 8010f4c:	240073e0 	.word	0x240073e0
 8010f50:	240073d0 	.word	0x240073d0
 8010f54:	240073c0 	.word	0x240073c0
 8010f58:	240073b0 	.word	0x240073b0
 8010f5c:	24007360 	.word	0x24007360
 8010f60:	000242e4 	.word	0x000242e4
 8010f64:	24007350 	.word	0x24007350
 8010f68:	240073a0 	.word	0x240073a0
 8010f6c:	24007390 	.word	0x24007390
 8010f70:	24007340 	.word	0x24007340
 8010f74:	24007330 	.word	0x24007330
 8010f78:	24007320 	.word	0x24007320
 8010f7c:	24007380 	.word	0x24007380
 8010f80:	24007310 	.word	0x24007310
 8010f84:	24007300 	.word	0x24007300
 8010f88:	240072f0 	.word	0x240072f0
 8010f8c:	240072e0 	.word	0x240072e0
 8010f90:	240072d0 	.word	0x240072d0
 8010f94:	240072c0 	.word	0x240072c0
 8010f98:	240072b0 	.word	0x240072b0
 8010f9c:	240072a0 	.word	0x240072a0
 8010fa0:	24007290 	.word	0x24007290
 8010fa4:	24007280 	.word	0x24007280
 8010fa8:	24007270 	.word	0x24007270
 8010fac:	24007260 	.word	0x24007260
 8010fb0:	24007250 	.word	0x24007250
 8010fb4:	24007240 	.word	0x24007240
 8010fb8:	24007230 	.word	0x24007230
 8010fbc:	24007220 	.word	0x24007220
 8010fc0:	24007210 	.word	0x24007210
 8010fc4:	24007200 	.word	0x24007200
 8010fc8:	240071f0 	.word	0x240071f0
 8010fcc:	240071e0 	.word	0x240071e0
 8010fd0:	240071d0 	.word	0x240071d0
 8010fd4:	240071c0 	.word	0x240071c0
 8010fd8:	240071b0 	.word	0x240071b0
 8010fdc:	240071a0 	.word	0x240071a0
 8010fe0:	24007190 	.word	0x24007190
 8010fe4:	24007180 	.word	0x24007180
 8010fe8:	24007170 	.word	0x24007170
 8010fec:	24007160 	.word	0x24007160
 8010ff0:	24007150 	.word	0x24007150
 8010ff4:	24007140 	.word	0x24007140
 8010ff8:	24007130 	.word	0x24007130
 8010ffc:	24007120 	.word	0x24007120
 8011000:	24007110 	.word	0x24007110
 8011004:	24007100 	.word	0x24007100
 8011008:	240070f0 	.word	0x240070f0
 801100c:	240070e0 	.word	0x240070e0
 8011010:	240070d0 	.word	0x240070d0
 8011014:	240070c0 	.word	0x240070c0
 8011018:	240070b0 	.word	0x240070b0
 801101c:	240080d0 	.word	0x240080d0
 8011020:	0003182c 	.word	0x0003182c
 8011024:	240080e0 	.word	0x240080e0
 8011028:	240080c0 	.word	0x240080c0
 801102c:	240080b0 	.word	0x240080b0
 8011030:	240080a0 	.word	0x240080a0
 8011034:	24008090 	.word	0x24008090
 8011038:	24008060 	.word	0x24008060
 801103c:	24008050 	.word	0x24008050
 8011040:	24008040 	.word	0x24008040
 8011044:	24007e90 	.word	0x24007e90
 8011048:	24007e80 	.word	0x24007e80
 801104c:	24007e70 	.word	0x24007e70
 8011050:	24007e60 	.word	0x24007e60
 8011054:	24007e50 	.word	0x24007e50
 8011058:	24007e40 	.word	0x24007e40
 801105c:	24007e30 	.word	0x24007e30
 8011060:	24007e20 	.word	0x24007e20
 8011064:	24007e10 	.word	0x24007e10
 8011068:	24007e00 	.word	0x24007e00
 801106c:	00016300 	.word	0x00016300
 8011070:	24008030 	.word	0x24008030
 8011074:	24008020 	.word	0x24008020
 8011078:	24008010 	.word	0x24008010
 801107c:	24008000 	.word	0x24008000
 8011080:	24007ff0 	.word	0x24007ff0
 8011084:	24007fe0 	.word	0x24007fe0
 8011088:	24007fd0 	.word	0x24007fd0
 801108c:	24007fc0 	.word	0x24007fc0
 8011090:	24007fb0 	.word	0x24007fb0
 8011094:	24007fa0 	.word	0x24007fa0
 8011098:	24007f90 	.word	0x24007f90
 801109c:	24007f80 	.word	0x24007f80
 80110a0:	24007f70 	.word	0x24007f70
 80110a4:	24007f60 	.word	0x24007f60
 80110a8:	24007f50 	.word	0x24007f50
 80110ac:	24007f40 	.word	0x24007f40
 80110b0:	24007f30 	.word	0x24007f30
 80110b4:	24007f20 	.word	0x24007f20
 80110b8:	24007f10 	.word	0x24007f10
 80110bc:	24007f00 	.word	0x24007f00
 80110c0:	24007ef0 	.word	0x24007ef0
 80110c4:	24007ee0 	.word	0x24007ee0
 80110c8:	24007ed0 	.word	0x24007ed0
 80110cc:	24007ec0 	.word	0x24007ec0
 80110d0:	24007eb0 	.word	0x24007eb0
 80110d4:	24007ea0 	.word	0x24007ea0
    conv2d_37_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80110d8:	496c      	ldr	r1, [pc, #432]	@ (801128c <network_configure_activations+0x69c>)
 80110da:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_38_output_array.data = AI_PTR(g_network_activations_map[1] + 4096);
 80110de:	496c      	ldr	r1, [pc, #432]	@ (8011290 <network_configure_activations+0x6a0>)
 80110e0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_40_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 80110e4:	496b      	ldr	r1, [pc, #428]	@ (8011294 <network_configure_activations+0x6a4>)
    conv2d_41_output_array.data = AI_PTR(g_network_activations_map[1] + 1024);
 80110e6:	9a04      	ldr	r2, [sp, #16]
    conv2d_40_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 80110e8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_40_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80110ec:	496a      	ldr	r1, [pc, #424]	@ (8011298 <network_configure_activations+0x6a8>)
 80110ee:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_41_output_array.data = AI_PTR(g_network_activations_map[1] + 1024);
 80110f2:	496a      	ldr	r1, [pc, #424]	@ (801129c <network_configure_activations+0x6ac>)
 80110f4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_42_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 8192);
 80110f8:	4969      	ldr	r1, [pc, #420]	@ (80112a0 <network_configure_activations+0x6b0>)
 80110fa:	e9c1 7702 	strd	r7, r7, [r1, #8]
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 80110fe:	4969      	ldr	r1, [pc, #420]	@ (80112a4 <network_configure_activations+0x6b4>)
 8011100:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[1] + 1024);
 8011104:	4968      	ldr	r1, [pc, #416]	@ (80112a8 <network_configure_activations+0x6b8>)
 8011106:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_45_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 801110a:	4968      	ldr	r1, [pc, #416]	@ (80112ac <network_configure_activations+0x6bc>)
 801110c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_50_output_array.data = AI_PTR(g_network_activations_map[1] + 256);
 8011110:	4967      	ldr	r1, [pc, #412]	@ (80112b0 <network_configure_activations+0x6c0>)
 8011112:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    tile_67_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8011116:	4967      	ldr	r1, [pc, #412]	@ (80112b4 <network_configure_activations+0x6c4>)
    conv2d_56_output_array.data = AI_PTR(g_network_activations_map[1] + 128);
 8011118:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
    tile_67_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 801111c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_56_output_array.data = AI_PTR(g_network_activations_map[1] + 128);
 8011120:	4965      	ldr	r1, [pc, #404]	@ (80112b8 <network_configure_activations+0x6c8>)
    conv2d_69_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8011122:	9a05      	ldr	r2, [sp, #20]
    conv2d_56_output_array.data = AI_PTR(g_network_activations_map[1] + 128);
 8011124:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_51_output_array.data = AI_PTR(g_network_activations_map[1] + 148);
 8011128:	f103 0c94 	add.w	ip, r3, #148	@ 0x94
 801112c:	4963      	ldr	r1, [pc, #396]	@ (80112bc <network_configure_activations+0x6cc>)
 801112e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_44_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 8011132:	4963      	ldr	r1, [pc, #396]	@ (80112c0 <network_configure_activations+0x6d0>)
    eltwise_68_output_array.data = AI_PTR(g_network_activations_map[1] + 288);
 8011134:	f503 7c90 	add.w	ip, r3, #288	@ 0x120
    conv2d_44_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 8011138:	e9c1 5502 	strd	r5, r5, [r1, #8]
    eltwise_68_output_array.data = AI_PTR(g_network_activations_map[1] + 288);
 801113c:	4961      	ldr	r1, [pc, #388]	@ (80112c4 <network_configure_activations+0x6d4>)
 801113e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_69_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8011142:	4961      	ldr	r1, [pc, #388]	@ (80112c8 <network_configure_activations+0x6d8>)
    conv2d_74_output_array.data = AI_PTR(g_network_activations_map[1] + 40);
 8011144:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
    conv2d_69_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8011148:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_69_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 801114c:	495f      	ldr	r1, [pc, #380]	@ (80112cc <network_configure_activations+0x6dc>)
 801114e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_74_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8011152:	495f      	ldr	r1, [pc, #380]	@ (80112d0 <network_configure_activations+0x6e0>)
 8011154:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_74_output_array.data = AI_PTR(g_network_activations_map[1] + 40);
 8011158:	495e      	ldr	r1, [pc, #376]	@ (80112d4 <network_configure_activations+0x6e4>)
 801115a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    resize_85_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 801115e:	495e      	ldr	r1, [pc, #376]	@ (80112d8 <network_configure_activations+0x6e8>)
    conv2d_39_output_array.data = AI_PTR(g_network_activations_map[1] + 928);
 8011160:	f503 7c68 	add.w	ip, r3, #928	@ 0x3a0
    resize_85_output_array.data = AI_PTR(g_network_activations_map[1] + 416);
 8011164:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_39_output_array.data = AI_PTR(g_network_activations_map[1] + 928);
 8011168:	495c      	ldr	r1, [pc, #368]	@ (80112dc <network_configure_activations+0x6ec>)
 801116a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    eltwise_86_output_array.data = AI_PTR(g_network_activations_map[1] + 1440);
 801116e:	f503 6cb4 	add.w	ip, r3, #1440	@ 0x5a0
 8011172:	495b      	ldr	r1, [pc, #364]	@ (80112e0 <network_configure_activations+0x6f0>)
 8011174:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_87_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 8011178:	495a      	ldr	r1, [pc, #360]	@ (80112e4 <network_configure_activations+0x6f4>)
    conv2d_87_output_array.data = AI_PTR(g_network_activations_map[1] + 1952);
 801117a:	f503 6cf4 	add.w	ip, r3, #1952	@ 0x7a0
    conv2d_87_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 801117e:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_87_output_array.data = AI_PTR(g_network_activations_map[1] + 1952);
 8011182:	4959      	ldr	r1, [pc, #356]	@ (80112e8 <network_configure_activations+0x6f8>)
 8011184:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_92_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 8011188:	4958      	ldr	r1, [pc, #352]	@ (80112ec <network_configure_activations+0x6fc>)
    conv2d_92_output_array.data = AI_PTR(g_network_activations_map[1] + 2112);
 801118a:	f503 6c04 	add.w	ip, r3, #2112	@ 0x840
    conv2d_92_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 801118e:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_92_output_array.data = AI_PTR(g_network_activations_map[1] + 2112);
 8011192:	4957      	ldr	r1, [pc, #348]	@ (80112f0 <network_configure_activations+0x700>)
 8011194:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    resize_103_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 8011198:	4956      	ldr	r1, [pc, #344]	@ (80112f4 <network_configure_activations+0x704>)
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[1] + 4480);
 801119a:	f503 5c8c 	add.w	ip, r3, #4480	@ 0x1180
    resize_103_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 801119e:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[1] + 4480);
 80111a2:	4955      	ldr	r1, [pc, #340]	@ (80112f8 <network_configure_activations+0x708>)
    resize_121_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111a4:	9a00      	ldr	r2, [sp, #0]
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[1] + 4480);
 80111a6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    eltwise_104_output_array.data = AI_PTR(g_network_activations_map[1] + 6528);
 80111aa:	f503 5ccc 	add.w	ip, r3, #6528	@ 0x1980
 80111ae:	4953      	ldr	r1, [pc, #332]	@ (80112fc <network_configure_activations+0x70c>)
 80111b0:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_105_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 80111b4:	4952      	ldr	r1, [pc, #328]	@ (8011300 <network_configure_activations+0x710>)
 80111b6:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_105_output_array.data = AI_PTR(g_network_activations_map[1] + 160);
 80111ba:	4952      	ldr	r1, [pc, #328]	@ (8011304 <network_configure_activations+0x714>)
 80111bc:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_110_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 80111c0:	4951      	ldr	r1, [pc, #324]	@ (8011308 <network_configure_activations+0x718>)
    conv2d_110_output_array.data = AI_PTR(g_network_activations_map[1] + 8576);
 80111c2:	f503 5506 	add.w	r5, r3, #8576	@ 0x2180
    conv2d_110_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 80111c6:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_110_output_array.data = AI_PTR(g_network_activations_map[1] + 8576);
 80111ca:	4950      	ldr	r1, [pc, #320]	@ (801130c <network_configure_activations+0x71c>)
 80111cc:	e9c1 5502 	strd	r5, r5, [r1, #8]
    resize_121_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111d0:	494f      	ldr	r1, [pc, #316]	@ (8011310 <network_configure_activations+0x720>)
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 18048);
 80111d2:	f503 458d 	add.w	r5, r3, #18048	@ 0x4680
    resize_121_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111d6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[1] + 18048);
 80111da:	494e      	ldr	r1, [pc, #312]	@ (8011314 <network_configure_activations+0x724>)
 80111dc:	e9c1 5502 	strd	r5, r5, [r1, #8]
    eltwise_122_output_array.data = AI_PTR(g_network_activations_map[1] + 26240);
 80111e0:	f503 45cd 	add.w	r5, r3, #26240	@ 0x6680
 80111e4:	494c      	ldr	r1, [pc, #304]	@ (8011318 <network_configure_activations+0x728>)
 80111e6:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_123_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111ea:	494c      	ldr	r1, [pc, #304]	@ (801131c <network_configure_activations+0x72c>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[2] + 4112);
 80111ec:	4d4c      	ldr	r5, [pc, #304]	@ (8011320 <network_configure_activations+0x730>)
    conv2d_123_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111ee:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_123_output_array.data = AI_PTR(g_network_activations_map[1] + 2432);
 80111f2:	494c      	ldr	r1, [pc, #304]	@ (8011324 <network_configure_activations+0x734>)
 80111f4:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_128_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111f8:	494b      	ldr	r1, [pc, #300]	@ (8011328 <network_configure_activations+0x738>)
    conv2d_128_output_array.data = AI_PTR(g_network_activations_map[1] + 20224);
 80111fa:	f503 449e 	add.w	r4, r3, #20224	@ 0x4f00
    conv2d_128_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 80111fe:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_128_output_array.data = AI_PTR(g_network_activations_map[1] + 20224);
 8011202:	494a      	ldr	r1, [pc, #296]	@ (801132c <network_configure_activations+0x73c>)
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8011204:	4a4a      	ldr	r2, [pc, #296]	@ (8011330 <network_configure_activations+0x740>)
    conv2d_128_output_array.data = AI_PTR(g_network_activations_map[1] + 20224);
 8011206:	e9c1 4402 	strd	r4, r4, [r1, #8]
    resize_139_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 801120a:	494a      	ldr	r1, [pc, #296]	@ (8011334 <network_configure_activations+0x744>)
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 801120c:	e9c2 6602 	strd	r6, r6, [r2, #8]
    resize_139_output_array.data = AI_PTR(g_network_activations_map[1] + 131072);
 8011210:	e9c1 0002 	strd	r0, r0, [r1, #8]
    eltwise_140_output_array.data = AI_PTR(g_network_activations_map[1] + 58112);
 8011214:	4a48      	ldr	r2, [pc, #288]	@ (8011338 <network_configure_activations+0x748>)
 8011216:	f503 4163 	add.w	r1, r3, #58112	@ 0xe300
 801121a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_141_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 90880);
 801121e:	4a47      	ldr	r2, [pc, #284]	@ (801133c <network_configure_activations+0x74c>)
    conv2d_141_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 8011220:	9900      	ldr	r1, [sp, #0]
    nl_147_output_array.data = AI_PTR(g_network_activations_map[1] + 38996);
 8011222:	9806      	ldr	r0, [sp, #24]
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 8011224:	9c07      	ldr	r4, [sp, #28]
    conv2d_141_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 90880);
 8011226:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_141_output_array.data = AI_PTR(g_network_activations_map[1] + 9856);
 801122a:	4a45      	ldr	r2, [pc, #276]	@ (8011340 <network_configure_activations+0x750>)
 801122c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    concat_146_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8011230:	4a44      	ldr	r2, [pc, #272]	@ (8011344 <network_configure_activations+0x754>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[2] + 4112);
 8011232:	68a9      	ldr	r1, [r5, #8]
    concat_146_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 8011234:	e9c2 6602 	strd	r6, r6, [r2, #8]
    nl_147_output_array.data = AI_PTR(g_network_activations_map[1] + 38996);
 8011238:	4a43      	ldr	r2, [pc, #268]	@ (8011348 <network_configure_activations+0x758>)
 801123a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 801123e:	4a43      	ldr	r2, [pc, #268]	@ (801134c <network_configure_activations+0x75c>)
    concat_154_output_array.data = AI_PTR(g_network_activations_map[1] + 120896);
 8011240:	4843      	ldr	r0, [pc, #268]	@ (8011350 <network_configure_activations+0x760>)
    conversion_148_output_array.data = AI_PTR(g_network_activations_map[1] + 148196);
 8011242:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_149_pad_before_output_array.data = AI_PTR(g_network_activations_map[1] + 90880);
 8011246:	4a43      	ldr	r2, [pc, #268]	@ (8011354 <network_configure_activations+0x764>)
 8011248:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_149_output_array.data = AI_PTR(g_network_activations_map[1] + 25344);
 801124c:	4a42      	ldr	r2, [pc, #264]	@ (8011358 <network_configure_activations+0x768>)
 801124e:	e9c2 6602 	strd	r6, r6, [r2, #8]
    concat_154_output_array.data = AI_PTR(g_network_activations_map[1] + 120896);
 8011252:	4a42      	ldr	r2, [pc, #264]	@ (801135c <network_configure_activations+0x76c>)
 8011254:	441a      	add	r2, r3
 8011256:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conversion_155_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 801125a:	4841      	ldr	r0, [pc, #260]	@ (8011360 <network_configure_activations+0x770>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[2] + 4112);
 801125c:	f241 0210 	movw	r2, #4112	@ 0x1010
    conversion_155_output_array.data = AI_PTR(g_network_activations_map[1] + 0);
 8011260:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[2] + 4112);
 8011264:	440a      	add	r2, r1
 8011266:	483f      	ldr	r0, [pc, #252]	@ (8011364 <network_configure_activations+0x774>)
    conv2d_5_pad_before_output_array.data = AI_PTR(g_network_activations_map[2] + 0);
 8011268:	4b3f      	ldr	r3, [pc, #252]	@ (8011368 <network_configure_activations+0x778>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[2] + 4112);
 801126a:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 801126e:	9801      	ldr	r0, [sp, #4]
    conv2d_5_pad_before_output_array.data = AI_PTR(g_network_activations_map[2] + 0);
 8011270:	e9c3 1102 	strd	r1, r1, [r3, #8]
}
 8011274:	b009      	add	sp, #36	@ 0x24
 8011276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801127a:	2213      	movs	r2, #19
 801127c:	2130      	movs	r1, #48	@ 0x30
 801127e:	4620      	mov	r0, r4
 8011280:	f00d fe08 	bl	801ee94 <ai_platform_network_set_error>
}
 8011284:	9801      	ldr	r0, [sp, #4]
 8011286:	b009      	add	sp, #36	@ 0x24
 8011288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128c:	24007df0 	.word	0x24007df0
 8011290:	24007de0 	.word	0x24007de0
 8011294:	24007dd0 	.word	0x24007dd0
 8011298:	24007dc0 	.word	0x24007dc0
 801129c:	24007db0 	.word	0x24007db0
 80112a0:	24007da0 	.word	0x24007da0
 80112a4:	24007d90 	.word	0x24007d90
 80112a8:	24007d80 	.word	0x24007d80
 80112ac:	24007d70 	.word	0x24007d70
 80112b0:	24007d60 	.word	0x24007d60
 80112b4:	24007d50 	.word	0x24007d50
 80112b8:	24007d40 	.word	0x24007d40
 80112bc:	24007d30 	.word	0x24007d30
 80112c0:	24007d20 	.word	0x24007d20
 80112c4:	24007d10 	.word	0x24007d10
 80112c8:	24007d00 	.word	0x24007d00
 80112cc:	24007cf0 	.word	0x24007cf0
 80112d0:	24007ce0 	.word	0x24007ce0
 80112d4:	24007cd0 	.word	0x24007cd0
 80112d8:	24007cc0 	.word	0x24007cc0
 80112dc:	24007cb0 	.word	0x24007cb0
 80112e0:	24007ca0 	.word	0x24007ca0
 80112e4:	24007c90 	.word	0x24007c90
 80112e8:	24007c80 	.word	0x24007c80
 80112ec:	24007c70 	.word	0x24007c70
 80112f0:	24007c60 	.word	0x24007c60
 80112f4:	24007c50 	.word	0x24007c50
 80112f8:	24007c40 	.word	0x24007c40
 80112fc:	24007c30 	.word	0x24007c30
 8011300:	24007c20 	.word	0x24007c20
 8011304:	24007c10 	.word	0x24007c10
 8011308:	24007c00 	.word	0x24007c00
 801130c:	24007bf0 	.word	0x24007bf0
 8011310:	24007be0 	.word	0x24007be0
 8011314:	24007bd0 	.word	0x24007bd0
 8011318:	24007bc0 	.word	0x24007bc0
 801131c:	24007bb0 	.word	0x24007bb0
 8011320:	24008a8c 	.word	0x24008a8c
 8011324:	24007ba0 	.word	0x24007ba0
 8011328:	24007b90 	.word	0x24007b90
 801132c:	24007b80 	.word	0x24007b80
 8011330:	24007b60 	.word	0x24007b60
 8011334:	24007b70 	.word	0x24007b70
 8011338:	24007b50 	.word	0x24007b50
 801133c:	24007b40 	.word	0x24007b40
 8011340:	24007b30 	.word	0x24007b30
 8011344:	24007b20 	.word	0x24007b20
 8011348:	24007b10 	.word	0x24007b10
 801134c:	24007b00 	.word	0x24007b00
 8011350:	24007ad0 	.word	0x24007ad0
 8011354:	24007af0 	.word	0x24007af0
 8011358:	24007ae0 	.word	0x24007ae0
 801135c:	0001d840 	.word	0x0001d840
 8011360:	24007ac0 	.word	0x24007ac0
 8011364:	24008080 	.word	0x24008080
 8011368:	24008070 	.word	0x24008070

0801136c <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801136c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 8011370:	2300      	movs	r3, #0
{
 8011372:	b091      	sub	sp, #68	@ 0x44
  return ai_platform_network_create(
 8011374:	2405      	movs	r4, #5
{
 8011376:	4689      	mov	r9, r1
 8011378:	4616      	mov	r6, r2
  return ai_platform_network_create(
 801137a:	4619      	mov	r1, r3
 801137c:	4a30      	ldr	r2, [pc, #192]	@ (8011440 <ai_network_create_and_init+0xd4>)
{
 801137e:	4607      	mov	r7, r0
  return ai_platform_network_create(
 8011380:	e9cd 4300 	strd	r4, r3, [sp]
 8011384:	2301      	movs	r3, #1
 8011386:	f00d fe79 	bl	801f07c <ai_platform_network_create>
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
  if (err.type != AI_ERROR_NONE) {
 801138a:	f010 08ff 	ands.w	r8, r0, #255	@ 0xff
  return ai_platform_network_create(
 801138e:	4605      	mov	r5, r0
  if (err.type != AI_ERROR_NONE) {
 8011390:	d003      	beq.n	801139a <ai_network_create_and_init+0x2e>
#endif
  if (ai_network_init(*network, &params) != true) {
    err = ai_network_get_error(*network);
  }
  return err;
}
 8011392:	4628      	mov	r0, r5
 8011394:	b011      	add	sp, #68	@ 0x44
 8011396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 801139a:	a802      	add	r0, sp, #8
 801139c:	f000 f870 	bl	8011480 <ai_network_data_params_get>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d047      	beq.n	8011434 <ai_network_create_and_init+0xc8>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80113a4:	f1b9 0f00 	cmp.w	r9, #0
 80113a8:	d00f      	beq.n	80113ca <ai_network_create_and_init+0x5e>
 80113aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80113ae:	b163      	cbz	r3, 80113ca <ai_network_create_and_init+0x5e>
 80113b0:	4644      	mov	r4, r8
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80113b2:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80113b4:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80113b6:	a805      	add	r0, sp, #20
 80113b8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80113bc:	f00d fc84 	bl	801ecc8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80113c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80113c4:	b2a3      	uxth	r3, r4
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d8f3      	bhi.n	80113b2 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80113ca:	b17e      	cbz	r6, 80113ec <ai_network_create_and_init+0x80>
 80113cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80113d0:	b163      	cbz	r3, 80113ec <ai_network_create_and_init+0x80>
 80113d2:	2400      	movs	r4, #0
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80113d4:	b2a1      	uxth	r1, r4
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80113d6:	3401      	adds	r4, #1
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80113d8:	a803      	add	r0, sp, #12
 80113da:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80113de:	f00d fc73 	bl	801ecc8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80113e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80113e6:	b2a3      	uxth	r3, r4
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d8f3      	bhi.n	80113d4 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 80113ec:	f8d7 9000 	ldr.w	r9, [r7]

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80113f0:	a902      	add	r1, sp, #8
 80113f2:	4648      	mov	r0, r9
 80113f4:	f00d fe84 	bl	801f100 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80113f8:	4606      	mov	r6, r0
 80113fa:	b1a0      	cbz	r0, 8011426 <ai_network_create_and_init+0xba>
  ok &= network_configure_weights(net_ctx, params);
 80113fc:	a902      	add	r1, sp, #8
 80113fe:	f7fe fe77 	bl	80100f0 <network_configure_weights>
 8011402:	4604      	mov	r4, r0
  ok &= network_configure_activations(net_ctx, params);
 8011404:	a902      	add	r1, sp, #8
 8011406:	4630      	mov	r0, r6
 8011408:	f7ff fbf2 	bl	8010bf0 <network_configure_activations>
 801140c:	4004      	ands	r4, r0

  ok &= ai_platform_network_post_init(network);
 801140e:	4648      	mov	r0, r9
 8011410:	b2e4      	uxtb	r4, r4
 8011412:	f00d ff35 	bl	801f280 <ai_platform_network_post_init>
  if (ai_network_init(*network, &params) != true) {
 8011416:	b134      	cbz	r4, 8011426 <ai_network_create_and_init+0xba>
 8011418:	b128      	cbz	r0, 8011426 <ai_network_create_and_init+0xba>
  return err;
 801141a:	f368 0507 	bfi	r5, r8, #0, #8
}
 801141e:	4628      	mov	r0, r5
 8011420:	b011      	add	sp, #68	@ 0x44
 8011422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8011426:	6838      	ldr	r0, [r7, #0]
 8011428:	f00d fd28 	bl	801ee7c <ai_platform_network_get_error>
 801142c:	4605      	mov	r5, r0
 801142e:	fa5f f880 	uxtb.w	r8, r0
 8011432:	e7f2      	b.n	801141a <ai_network_create_and_init+0xae>
 8011434:	6838      	ldr	r0, [r7, #0]
 8011436:	f00d fd21 	bl	801ee7c <ai_platform_network_get_error>
 801143a:	4605      	mov	r5, r0
    return err;
 801143c:	e7a9      	b.n	8011392 <ai_network_create_and_init+0x26>
 801143e:	bf00      	nop
 8011440:	24000000 	.word	0x24000000

08011444 <ai_network_inputs_get>:
  if (network == AI_HANDLE_NULL) {
 8011444:	b108      	cbz	r0, 801144a <ai_network_inputs_get+0x6>
  return ai_platform_inputs_get(network, n_buffer);
 8011446:	f00d bd2b 	b.w	801eea0 <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801144a:	4b03      	ldr	r3, [pc, #12]	@ (8011458 <ai_network_inputs_get+0x14>)
 801144c:	4a03      	ldr	r2, [pc, #12]	@ (801145c <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801144e:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011450:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8011452:	f00d bd25 	b.w	801eea0 <ai_platform_inputs_get>
 8011456:	bf00      	nop
 8011458:	24000000 	.word	0x24000000
 801145c:	a1c00100 	.word	0xa1c00100

08011460 <ai_network_outputs_get>:
  if (network == AI_HANDLE_NULL) {
 8011460:	b108      	cbz	r0, 8011466 <ai_network_outputs_get+0x6>
  return ai_platform_outputs_get(network, n_buffer);
 8011462:	f00d bd95 	b.w	801ef90 <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011466:	4b03      	ldr	r3, [pc, #12]	@ (8011474 <ai_network_outputs_get+0x14>)
 8011468:	4a03      	ldr	r2, [pc, #12]	@ (8011478 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801146a:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801146c:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 801146e:	f00d bd8f 	b.w	801ef90 <ai_platform_outputs_get>
 8011472:	bf00      	nop
 8011474:	24000000 	.word	0x24000000
 8011478:	a1c00100 	.word	0xa1c00100

0801147c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 801147c:	f00d bf30 	b.w	801f2e0 <ai_platform_network_process>

08011480 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8011480:	4603      	mov	r3, r0
 8011482:	b1a0      	cbz	r0, 80114ae <ai_network_data_params_get+0x2e>
{
 8011484:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 8011486:	4c0a      	ldr	r4, [pc, #40]	@ (80114b0 <ai_network_data_params_get+0x30>)
{
 8011488:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 801148a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801148e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8011490:	3408      	adds	r4, #8
 8011492:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 8011496:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 801149a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801149e:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80114a2:	4661      	mov	r1, ip
 80114a4:	4618      	mov	r0, r3
 80114a6:	f00d fccf 	bl	801ee48 <ai_platform_bind_network_params>
}
 80114aa:	b004      	add	sp, #16
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	4770      	bx	lr
 80114b0:	08036f48 	.word	0x08036f48

080114b4 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 80114b4:	e7fe      	b.n	80114b4 <Reset_Handler_m4>
	...

080114b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80114b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80114f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80114bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80114be:	e003      	b.n	80114c8 <LoopCopyDataInit>

080114c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80114c0:	4b0c      	ldr	r3, [pc, #48]	@ (80114f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80114c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80114c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80114c6:	3104      	adds	r1, #4

080114c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80114c8:	480b      	ldr	r0, [pc, #44]	@ (80114f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80114ca:	4b0c      	ldr	r3, [pc, #48]	@ (80114fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80114cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80114ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80114d0:	d3f6      	bcc.n	80114c0 <CopyDataInit>
  ldr  r2, =_sbss
 80114d2:	4a0b      	ldr	r2, [pc, #44]	@ (8011500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80114d4:	e002      	b.n	80114dc <LoopFillZerobss>

080114d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80114d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80114d8:	f842 3b04 	str.w	r3, [r2], #4

080114dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80114dc:	4b09      	ldr	r3, [pc, #36]	@ (8011504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80114de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80114e0:	d3f9      	bcc.n	80114d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80114e2:	f001 f857 	bl	8012594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80114e6:	f023 fc0f 	bl	8034d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80114ea:	f000 febd 	bl	8012268 <main>
  bx  lr    
 80114ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80114f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80114f4:	08059f78 	.word	0x08059f78
  ldr  r0, =_sdata
 80114f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80114fc:	240084b4 	.word	0x240084b4
  ldr  r2, =_sbss
 8011500:	240084e8 	.word	0x240084e8
  ldr  r3, = _ebss
 8011504:	24009bc8 	.word	0x24009bc8

08011508 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011508:	e7fe      	b.n	8011508 <ADC3_IRQHandler>
	...

0801150c <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 801150c:	4b02      	ldr	r3, [pc, #8]	@ (8011518 <ai_get_output_format+0xc>)
 801150e:	681b      	ldr	r3, [r3, #0]
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 8011510:	6818      	ldr	r0, [r3, #0]
}
 8011512:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8011516:	4770      	bx	lr
 8011518:	24008a98 	.word	0x24008a98

0801151c <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 801151c:	4b0e      	ldr	r3, [pc, #56]	@ (8011558 <ai_get_output_quantization_scheme+0x3c>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	6893      	ldr	r3, [r2, #8]
 8011522:	b1bb      	cbz	r3, 8011554 <ai_get_output_quantization_scheme+0x38>
 8011524:	6818      	ldr	r0, [r3, #0]
 8011526:	f010 0001 	ands.w	r0, r0, #1
 801152a:	d014      	beq.n	8011556 <ai_get_output_quantization_scheme+0x3a>
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	b18b      	cbz	r3, 8011554 <ai_get_output_quantization_scheme+0x38>
 8011530:	6859      	ldr	r1, [r3, #4]
  ai_buffer_format fmt=AI_BUFFER_FORMAT(&ai_output[0]);
 8011532:	6812      	ldr	r2, [r2, #0]
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8011534:	b149      	cbz	r1, 801154a <ai_get_output_quantization_scheme+0x2e>
 8011536:	885b      	ldrh	r3, [r3, #2]
 8011538:	b13b      	cbz	r3, 801154a <ai_get_output_quantization_scheme+0x2e>
 801153a:	680b      	ldr	r3, [r1, #0]
  if(scale==0)
 801153c:	edd3 7a00 	vldr	s15, [r3]
 8011540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011548:	d004      	beq.n	8011554 <ai_get_output_quantization_scheme+0x38>
      return AI_SINT_Q;
 801154a:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 801154e:	bf18      	it	ne
 8011550:	2002      	movne	r0, #2
 8011552:	4770      	bx	lr
    return AI_FXP_Q;
 8011554:	2000      	movs	r0, #0
}
 8011556:	4770      	bx	lr
 8011558:	24008a98 	.word	0x24008a98

0801155c <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 801155c:	4a08      	ldr	r2, [pc, #32]	@ (8011580 <ai_get_output_fxp_scale+0x24>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 801155e:	2301      	movs	r3, #1
 8011560:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 8011564:	6812      	ldr	r2, [r2, #0]
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 8011566:	6812      	ldr	r2, [r2, #0]
 8011568:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801156c:	3a40      	subs	r2, #64	@ 0x40
 801156e:	4093      	lsls	r3, r2
 8011570:	ee00 3a10 	vmov	s0, r3
 8011574:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8011578:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	24008a98 	.word	0x24008a98

08011584 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8011584:	4b0b      	ldr	r3, [pc, #44]	@ (80115b4 <ai_get_output_scale+0x30>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	b163      	cbz	r3, 80115a6 <ai_get_output_scale+0x22>
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	07d2      	lsls	r2, r2, #31
 8011590:	d509      	bpl.n	80115a6 <ai_get_output_scale+0x22>
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	b13b      	cbz	r3, 80115a6 <ai_get_output_scale+0x22>
 8011596:	685a      	ldr	r2, [r3, #4]
 8011598:	b142      	cbz	r2, 80115ac <ai_get_output_scale+0x28>
 801159a:	885b      	ldrh	r3, [r3, #2]
 801159c:	b133      	cbz	r3, 80115ac <ai_get_output_scale+0x28>
 801159e:	6813      	ldr	r3, [r2, #0]
 80115a0:	ed93 0a00 	vldr	s0, [r3]
 80115a4:	4770      	bx	lr
 80115a6:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80115b8 <ai_get_output_scale+0x34>
 80115aa:	4770      	bx	lr
 80115ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
}
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	24008a98 	.word	0x24008a98
 80115b8:	00000000 	.word	0x00000000

080115bc <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80115bc:	4b10      	ldr	r3, [pc, #64]	@ (8011600 <ai_get_output_zero_point+0x44>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	689a      	ldr	r2, [r3, #8]
 80115c2:	b18a      	cbz	r2, 80115e8 <ai_get_output_zero_point+0x2c>
 80115c4:	6813      	ldr	r3, [r2, #0]
 80115c6:	f013 0001 	ands.w	r0, r3, #1
 80115ca:	d00c      	beq.n	80115e6 <ai_get_output_zero_point+0x2a>
 80115cc:	6850      	ldr	r0, [r2, #4]
 80115ce:	b150      	cbz	r0, 80115e6 <ai_get_output_zero_point+0x2a>
 80115d0:	8802      	ldrh	r2, [r0, #0]
 80115d2:	6843      	ldr	r3, [r0, #4]
 80115d4:	0792      	lsls	r2, r2, #30
 80115d6:	d509      	bpl.n	80115ec <ai_get_output_zero_point+0x30>
 80115d8:	b123      	cbz	r3, 80115e4 <ai_get_output_zero_point+0x28>
 80115da:	8840      	ldrh	r0, [r0, #2]
 80115dc:	b118      	cbz	r0, 80115e6 <ai_get_output_zero_point+0x2a>
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	7818      	ldrb	r0, [r3, #0]
 80115e2:	4770      	bx	lr
 80115e4:	4618      	mov	r0, r3
}
 80115e6:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80115e8:	4610      	mov	r0, r2
 80115ea:	4770      	bx	lr
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d0f9      	beq.n	80115e4 <ai_get_output_zero_point+0x28>
 80115f0:	8840      	ldrh	r0, [r0, #2]
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d0f7      	beq.n	80115e6 <ai_get_output_zero_point+0x2a>
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	f993 0000 	ldrsb.w	r0, [r3]
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop
 8011600:	24008a98 	.word	0x24008a98

08011604 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
void ai_init(void** activation_buffer, ai_handle* inputs_buff_Ptr, ai_handle* outputs_buff_Ptr)
{
 8011604:	b5f0      	push	{r4, r5, r6, r7, lr}
#if AI_NETWORK_DATA_ACTIVATIONS_COUNT == 1
  const ai_handle acts[] = { activation_buffer[0] };
#elif AI_NETWORK_DATA_ACTIVATIONS_COUNT == 2
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1] };
#elif AI_NETWORK_DATA_ACTIVATIONS_COUNT == 3
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8011606:	6843      	ldr	r3, [r0, #4]
{
 8011608:	b085      	sub	sp, #20
  network_handle = AI_HANDLE_NULL;
 801160a:	4d15      	ldr	r5, [pc, #84]	@ (8011660 <ai_init+0x5c>)
 801160c:	2600      	movs	r6, #0
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 801160e:	9302      	str	r3, [sp, #8]
{
 8011610:	4614      	mov	r4, r2
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8011612:	6883      	ldr	r3, [r0, #8]
#endif
  ai_network_create_and_init(&network_handle, acts, NULL);
 8011614:	4632      	mov	r2, r6
  network_handle = AI_HANDLE_NULL;
 8011616:	602e      	str	r6, [r5, #0]
{
 8011618:	460f      	mov	r7, r1
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 801161a:	9303      	str	r3, [sp, #12]
  ai_network_create_and_init(&network_handle, acts, NULL);
 801161c:	a901      	add	r1, sp, #4
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 801161e:	6803      	ldr	r3, [r0, #0]
  ai_network_create_and_init(&network_handle, acts, NULL);
 8011620:	4628      	mov	r0, r5
  const ai_handle acts[] = { activation_buffer[0], activation_buffer[1], activation_buffer[2] };
 8011622:	9301      	str	r3, [sp, #4]
  ai_network_create_and_init(&network_handle, acts, NULL);
 8011624:	f7ff fea2 	bl	801136c <ai_network_create_and_init>
  uint16_t size_output = 0;
  
  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network_handle, NULL);
 8011628:	4631      	mov	r1, r6
 801162a:	6828      	ldr	r0, [r5, #0]
  uint16_t size_output = 0;
 801162c:	f8ad 6002 	strh.w	r6, [sp, #2]
  ai_input = ai_network_inputs_get(network_handle, NULL);
 8011630:	f7ff ff08 	bl	8011444 <ai_network_inputs_get>
 8011634:	4e0b      	ldr	r6, [pc, #44]	@ (8011664 <ai_init+0x60>)
 8011636:	4603      	mov	r3, r0
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8011638:	f10d 0102 	add.w	r1, sp, #2
 801163c:	6828      	ldr	r0, [r5, #0]
  ai_input = ai_network_inputs_get(network_handle, NULL);
 801163e:	6033      	str	r3, [r6, #0]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8011640:	f7ff ff0e 	bl	8011460 <ai_network_outputs_get>

  /*Initialize the input and output buffer pointers*/
  *inputs_buff_Ptr=ai_input[0].data;  
 8011644:	6833      	ldr	r3, [r6, #0]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 8011646:	4a08      	ldr	r2, [pc, #32]	@ (8011668 <ai_init+0x64>)
  *inputs_buff_Ptr=ai_input[0].data;  
 8011648:	685b      	ldr	r3, [r3, #4]
  ai_output = ai_network_outputs_get(network_handle, &size_output);
 801164a:	6010      	str	r0, [r2, #0]
  *inputs_buff_Ptr=ai_input[0].data;  
 801164c:	603b      	str	r3, [r7, #0]
  for (uint8_t i = 0; i < AI_NETWORK_OUT_NUM; i++)
  {
    outputs_buff_Ptr[i]=ai_output[i].data;
 801164e:	6843      	ldr	r3, [r0, #4]
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	6a03      	ldr	r3, [r0, #32]
 8011654:	6063      	str	r3, [r4, #4]
 8011656:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011658:	60a3      	str	r3, [r4, #8]
  }
}
 801165a:	b005      	add	sp, #20
 801165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801165e:	bf00      	nop
 8011660:	24008aa0 	.word	0x24008aa0
 8011664:	24008a9c 	.word	0x24008a9c
 8011668:	24008a98 	.word	0x24008a98

0801166c <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void** output)
{
 801166c:	b510      	push	{r4, lr}
  ai_i32 nbatch;
  ai_input[0].data = AI_HANDLE_PTR(input);
 801166e:	4c0a      	ldr	r4, [pc, #40]	@ (8011698 <ai_run+0x2c>)
{
 8011670:	460b      	mov	r3, r1
  for (uint8_t i = 0; i < AI_NETWORK_OUT_NUM; i++)
  {
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8011672:	4a0a      	ldr	r2, [pc, #40]	@ (801169c <ai_run+0x30>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 8011674:	6821      	ldr	r1, [r4, #0]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8011676:	6812      	ldr	r2, [r2, #0]
  ai_input[0].data = AI_HANDLE_PTR(input);
 8011678:	6048      	str	r0, [r1, #4]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 801167a:	681c      	ldr	r4, [r3, #0]
  }
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 801167c:	4808      	ldr	r0, [pc, #32]	@ (80116a0 <ai_run+0x34>)
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 801167e:	6054      	str	r4, [r2, #4]
 8011680:	685c      	ldr	r4, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8011682:	6800      	ldr	r0, [r0, #0]
    ai_output[i].data = AI_HANDLE_PTR(output[i]);
 8011684:	6214      	str	r4, [r2, #32]
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	63d3      	str	r3, [r2, #60]	@ 0x3c
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 801168a:	f7ff fef7 	bl	801147c <ai_network_run>
  
  if (nbatch != 1) {
 801168e:	2801      	cmp	r0, #1
 8011690:	d000      	beq.n	8011694 <ai_run+0x28>
        while(1);
 8011692:	e7fe      	b.n	8011692 <ai_run+0x26>
  }
}
 8011694:	bd10      	pop	{r4, pc}
 8011696:	bf00      	nop
 8011698:	24008a9c 	.word	0x24008a9c
 801169c:	24008a98 	.word	0x24008a98
 80116a0:	24008aa0 	.word	0x24008aa0

080116a4 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80116a4:	6802      	ldr	r2, [r0, #0]
 80116a6:	68d3      	ldr	r3, [r2, #12]
 80116a8:	f023 0301 	bic.w	r3, r3, #1
 80116ac:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 80116ae:	f000 bdc9 	b.w	8012244 <Error_Handler>
 80116b2:	bf00      	nop

080116b4 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80116b4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80116b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80116b8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80116ba:	2a02      	cmp	r2, #2
 80116bc:	d006      	beq.n	80116cc <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 80116be:	2201      	movs	r2, #1
 80116c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80116c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80116c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80116ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  Error_Handler();
 80116cc:	f000 bdba 	b.w	8012244 <Error_Handler>

080116d0 <DCMI_DMALineXferCplt>:
{
 80116d0:	4603      	mov	r3, r0
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80116d2:	490b      	ldr	r1, [pc, #44]	@ (8011700 <DCMI_DMALineXferCplt+0x30>)
 80116d4:	480b      	ldr	r0, [pc, #44]	@ (8011704 <DCMI_DMALineXferCplt+0x34>)
{
 80116d6:	b570      	push	{r4, r5, r6, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80116d8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
{
 80116da:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80116dc:	2601      	movs	r6, #1
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80116de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 80116e0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80116e2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80116e4:	009b      	lsls	r3, r3, #2
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80116e6:	9600      	str	r6, [sp, #0]
 80116e8:	fb03 2205 	mla	r2, r3, r5, r2
 80116ec:	f009 fd28 	bl	801b140 <HAL_MDMA_Start_IT>
 80116f0:	b908      	cbnz	r0, 80116f6 <DCMI_DMALineXferCplt+0x26>
}
 80116f2:	b002      	add	sp, #8
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	b002      	add	sp, #8
 80116f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80116fc:	f000 bda2 	b.w	8012244 <Error_Handler>
 8011700:	30000000 	.word	0x30000000
 8011704:	24008aa8 	.word	0x24008aa8

08011708 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 8011708:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 801170a:	4b0e      	ldr	r3, [pc, #56]	@ (8011744 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 801170c:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 801170e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  __HAL_MDMA_DISABLE(hmdma);
 8011710:	f022 0201 	bic.w	r2, r2, #1
 8011714:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 8011716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011718:	3201      	adds	r2, #1
 801171a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 801171c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801171e:	4282      	cmp	r2, r0
 8011720:	d000      	beq.n	8011724 <DCMI_MDMAFrameXferCplt+0x1c>
}
 8011722:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	68d1      	ldr	r1, [r2, #12]
 8011728:	f041 0101 	orr.w	r1, r1, #1
 801172c:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 801172e:	6812      	ldr	r2, [r2, #0]
 8011730:	f012 0202 	ands.w	r2, r2, #2
 8011734:	d003      	beq.n	801173e <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8011736:	2201      	movs	r2, #1
 8011738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801173c:	4770      	bx	lr
      hdcmi->XferCount = 0;
 801173e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	240097c0 	.word	0x240097c0

08011748 <Camera_GetNextReadyFrame>:
  while(App_Config_Ptr->new_frame_ready == 0);
 8011748:	7b03      	ldrb	r3, [r0, #12]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d0fc      	beq.n	8011748 <Camera_GetNextReadyFrame>
}
 801174e:	4770      	bx	lr

08011750 <Camera_StartNewFrameAcquisition>:
  App_Config_Ptr->new_frame_ready = 0;
 8011750:	2200      	movs	r2, #0
{ 
 8011752:	4603      	mov	r3, r0
  BSP_CAMERA_Resume(0);
 8011754:	4610      	mov	r0, r2
  App_Config_Ptr->new_frame_ready = 0;
 8011756:	731a      	strb	r2, [r3, #12]
  BSP_CAMERA_Resume(0);
 8011758:	f004 bf90 	b.w	801667c <BSP_CAMERA_Resume>

0801175c <Camera_Init>:
  __HAL_RCC_MDMA_CLK_ENABLE();
 801175c:	4a60      	ldr	r2, [pc, #384]	@ (80118e0 <Camera_Init+0x184>)
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 801175e:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8011760:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
{
 8011764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_MDMA_CLK_ENABLE();
 8011768:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Instance = MDMA_Channel0;
 801176c:	4c5d      	ldr	r4, [pc, #372]	@ (80118e4 <Camera_Init+0x188>)
{
 801176e:	b082      	sub	sp, #8
  uint8_t *camera_capture_buffer = App_Config_Ptr->camera_capture_buffer;
 8011770:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8011774:	6123      	str	r3, [r4, #16]
{
 8011776:	4605      	mov	r5, r0
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8011778:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 801177a:	4620      	mov	r0, r4
  hmdma.Init.SourceBlockAddressOffset = 0;
 801177c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 8011780:	f8c2 10d4 	str.w	r1, [r2, #212]	@ 0xd4
 8011784:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
  hmdma.Instance = MDMA_Channel0;
 8011788:	4a57      	ldr	r2, [pc, #348]	@ (80118e8 <Camera_Init+0x18c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
 801178a:	f003 0301 	and.w	r3, r3, #1
  hmdma.Instance = MDMA_Channel0;
 801178e:	6022      	str	r2, [r4, #0]
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8011790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 8011794:	9301      	str	r3, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8011796:	2380      	movs	r3, #128	@ 0x80
  __HAL_RCC_MDMA_CLK_ENABLE();
 8011798:	9901      	ldr	r1, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 801179a:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 801179c:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 801179e:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80117a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80117a4:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80117a8:	f240 2202 	movw	r2, #514	@ 0x202
 80117ac:	f640 0308 	movw	r3, #2056	@ 0x808
 80117b0:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80117b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80117b8:	2220      	movs	r2, #32
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80117ba:	6263      	str	r3, [r4, #36]	@ 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80117bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80117c0:	61e2      	str	r2, [r4, #28]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80117c2:	6323      	str	r3, [r4, #48]	@ 0x30
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 80117c4:	f009 fc42 	bl	801b04c <HAL_MDMA_Init>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	f040 8081 	bne.w	80118d0 <Camera_Init+0x174>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 80117ce:	2200      	movs	r2, #0
 80117d0:	210f      	movs	r1, #15
 80117d2:	207a      	movs	r0, #122	@ 0x7a
 80117d4:	f006 f850 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80117d8:	207a      	movs	r0, #122	@ 0x7a
 80117da:	f006 f889 	bl	80178f0 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 80117de:	2000      	movs	r0, #0
 80117e0:	f004 ff82 	bl	80166e8 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 80117e4:	20c8      	movs	r0, #200	@ 0xc8
 80117e6:	f006 f815 	bl	8017814 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE)
 80117ea:	2200      	movs	r2, #0
 80117ec:	2103      	movs	r1, #3
 80117ee:	4610      	mov	r0, r2
 80117f0:	f004 fd22 	bl	8016238 <BSP_CAMERA_Init>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d168      	bne.n	80118ca <Camera_Init+0x16e>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 80117f8:	4a3c      	ldr	r2, [pc, #240]	@ (80118ec <Camera_Init+0x190>)
 80117fa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80117fc:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8011800:	6593      	str	r3, [r2, #88]	@ 0x58
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 8011802:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8011804:	f023 73c0 	bic.w	r3, r3, #25165824	@ 0x1800000
 8011808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801180c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 801180e:	f245 6340 	movw	r3, #22080	@ 0x5640
 8011812:	4a37      	ldr	r2, [pc, #220]	@ (80118f0 <Camera_Init+0x194>)
 8011814:	6812      	ldr	r2, [r2, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d047      	beq.n	80118aa <Camera_Init+0x14e>
  if (BSP_CAMERA_SetMirrorFlip(0, MirrorFlip) != BSP_ERROR_NONE)
 801181a:	6929      	ldr	r1, [r5, #16]
 801181c:	2000      	movs	r0, #0
 801181e:	f004 ff3d 	bl	801669c <BSP_CAMERA_SetMirrorFlip>
 8011822:	4607      	mov	r7, r0
 8011824:	2800      	cmp	r0, #0
 8011826:	d13f      	bne.n	80118a8 <Camera_Init+0x14c>
  __HAL_LOCK(hdcmi);
 8011828:	4d32      	ldr	r5, [pc, #200]	@ (80118f4 <Camera_Init+0x198>)
  HAL_Delay(100);
 801182a:	2064      	movs	r0, #100	@ 0x64
 801182c:	f005 fff2 	bl	8017814 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 8011830:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
 8011834:	2b01      	cmp	r3, #1
 8011836:	d052      	beq.n	80118de <Camera_Init+0x182>
  __HAL_DCMI_ENABLE(hdcmi);
 8011838:	6829      	ldr	r1, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 801183a:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 801183c:	f04f 0801 	mov.w	r8, #1
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8011840:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8011842:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8011846:	f885 8034 	strb.w	r8, [r5, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 801184a:	680b      	ldr	r3, [r1, #0]
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 801184c:	4a2a      	ldr	r2, [pc, #168]	@ (80118f8 <Camera_Init+0x19c>)
  __HAL_DCMI_ENABLE(hdcmi);
 801184e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011852:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8011854:	680b      	ldr	r3, [r1, #0]
 8011856:	f023 0302 	bic.w	r3, r3, #2
 801185a:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 801185c:	680b      	ldr	r3, [r1, #0]
 801185e:	f841 3b28 	str.w	r3, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8011862:	4b26      	ldr	r3, [pc, #152]	@ (80118fc <Camera_Init+0x1a0>)
  hdcmi->XferCount = 0;
 8011864:	63af      	str	r7, [r5, #56]	@ 0x38
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8011866:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdcmi->XferSize = line_size / 4U;
 8011868:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 801186c:	6462      	str	r2, [r4, #68]	@ 0x44
  hdcmi->XferSize = line_size / 4U;
 801186e:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8011870:	4a23      	ldr	r2, [pc, #140]	@ (8011900 <Camera_Init+0x1a4>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8011872:	4b24      	ldr	r3, [pc, #144]	@ (8011904 <Camera_Init+0x1a8>)
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8011874:	6507      	str	r7, [r0, #80]	@ 0x50
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8011876:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8011878:	6562      	str	r2, [r4, #84]	@ 0x54
  hdcmi->XferTransferNumber = num_lines;
 801187a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 801187e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8011880:	642a      	str	r2, [r5, #64]	@ 0x40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8011882:	4a21      	ldr	r2, [pc, #132]	@ (8011908 <Camera_Init+0x1ac>)
  hdcmi->pBuffPtr = (uint32_t) pData;
 8011884:	646e      	str	r6, [r5, #68]	@ 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8011886:	f006 fd65 	bl	8018354 <HAL_DMA_Start_IT>
 801188a:	4603      	mov	r3, r0
 801188c:	bb18      	cbnz	r0, 80118d6 <Camera_Init+0x17a>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 801188e:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8011890:	20c8      	movs	r0, #200	@ 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8011892:	680a      	ldr	r2, [r1, #0]
 8011894:	f042 0201 	orr.w	r2, r2, #1
 8011898:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 801189a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
}
 801189e:	b002      	add	sp, #8
 80118a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Delay(200);
 80118a4:	f005 bfb6 	b.w	8017814 <HAL_Delay>
    while(1);
 80118a8:	e7fe      	b.n	80118a8 <Camera_Init+0x14c>
    OV5640_Object_t *pObj = Camera_CompObj;
 80118aa:	4a18      	ldr	r2, [pc, #96]	@ (801190c <Camera_Init+0x1b0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80118ac:	23c0      	movs	r3, #192	@ 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80118ae:	f243 0136 	movw	r1, #12342	@ 0x3036
    OV5640_Object_t *pObj = Camera_CompObj;
 80118b2:	6810      	ldr	r0, [r2, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80118b4:	f10d 0203 	add.w	r2, sp, #3
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80118b8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80118bc:	2301      	movs	r3, #1
 80118be:	3018      	adds	r0, #24
 80118c0:	f003 fb4a 	bl	8014f58 <ov5640_write_reg>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d0a8      	beq.n	801181a <Camera_Init+0xbe>
      while(1);
 80118c8:	e7fe      	b.n	80118c8 <Camera_Init+0x16c>
    Error_Handler();
 80118ca:	f000 fcbb 	bl	8012244 <Error_Handler>
 80118ce:	e793      	b.n	80117f8 <Camera_Init+0x9c>
    Error_Handler();
 80118d0:	f000 fcb8 	bl	8012244 <Error_Handler>
 80118d4:	e77b      	b.n	80117ce <Camera_Init+0x72>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80118d6:	2340      	movs	r3, #64	@ 0x40
 80118d8:	64eb      	str	r3, [r5, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 80118da:	f885 8035 	strb.w	r8, [r5, #53]	@ 0x35
    while(1);
 80118de:	e7fe      	b.n	80118de <Camera_Init+0x182>
 80118e0:	58024400 	.word	0x58024400
 80118e4:	24008aa8 	.word	0x24008aa8
 80118e8:	52000040 	.word	0x52000040
 80118ec:	40020400 	.word	0x40020400
 80118f0:	2400978c 	.word	0x2400978c
 80118f4:	240097c0 	.word	0x240097c0
 80118f8:	08011709 	.word	0x08011709
 80118fc:	080116d1 	.word	0x080116d1
 8011900:	080116a5 	.word	0x080116a5
 8011904:	080116b5 	.word	0x080116b5
 8011908:	30000000 	.word	0x30000000
 801190c:	24009810 	.word	0x24009810

08011910 <BSP_CAMERA_FrameEventCallback>:
{
 8011910:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011912:	b672      	cpsid	i
  App_Config.new_frame_ready = 1;
 8011914:	4b03      	ldr	r3, [pc, #12]	@ (8011924 <BSP_CAMERA_FrameEventCallback+0x14>)
 8011916:	2201      	movs	r2, #1
  BSP_CAMERA_Suspend(0);
 8011918:	2000      	movs	r0, #0
  App_Config.new_frame_ready = 1;
 801191a:	731a      	strb	r2, [r3, #12]
  BSP_CAMERA_Suspend(0);
 801191c:	f004 fe9e 	bl	801665c <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 8011920:	b662      	cpsie	i
}
 8011922:	bd08      	pop	{r3, pc}
 8011924:	d0aa1298 	.word	0xd0aa1298

08011928 <BSP_CAMERA_VsyncEventCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8011928:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 801192a:	b662      	cpsie	i
}
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop

08011930 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8011930:	f000 bc88 	b.w	8012244 <Error_Handler>

08011934 <Display_Init>:

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8011934:	4a1f      	ldr	r2, [pc, #124]	@ (80119b4 <Display_Init+0x80>)

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8011936:	2101      	movs	r1, #1
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8011938:	6813      	ldr	r3, [r2, #0]
 801193a:	f023 0301 	bic.w	r3, r3, #1
{
 801193e:	b530      	push	{r4, r5, lr}
 8011940:	4604      	mov	r4, r0
 8011942:	b087      	sub	sp, #28
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8011944:	2000      	movs	r0, #0
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8011946:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8011948:	f005 fcc6 	bl	80172d8 <BSP_LCD_Init>

  config.X0          = 0;
 801194c:	2000      	movs	r0, #0
 801194e:	f44f 7148 	mov.w	r1, #800	@ 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8011952:	2500      	movs	r5, #0
  config.Address     = (uint32_t)App_Config_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8011954:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8011958:	466a      	mov	r2, sp
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 801195a:	9504      	str	r5, [sp, #16]
  config.Address     = (uint32_t)App_Config_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 801195c:	9305      	str	r3, [sp, #20]
  config.X0          = 0;
 801195e:	e9cd 0100 	strd	r0, r1, [sp]
 8011962:	2000      	movs	r0, #0
 8011964:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011968:	e9cd 0102 	strd	r0, r1, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 801196c:	4629      	mov	r1, r5
 801196e:	4628      	mov	r0, r5
 8011970:	f005 fcbe 	bl	80172f0 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8011974:	4810      	ldr	r0, [pc, #64]	@ (80119b8 <Display_Init+0x84>)
 8011976:	f00c feef 	bl	801e758 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 801197a:	4628      	mov	r0, r5
 801197c:	f00c ff1c 	bl	801e7b8 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8011980:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011984:	f00c ff30 	bl	801e7e8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011988:	f04f 30ff 	mov.w	r0, #4294967295
 801198c:	f00c ff24 	bl	801e7d8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8011990:	480a      	ldr	r0, [pc, #40]	@ (80119bc <Display_Init+0x88>)
 8011992:	f00c ff31 	bl	801e7f8 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)App_Config_Ptr->lcd_frame_write_buff;
 8011996:	4b0a      	ldr	r3, [pc, #40]	@ (80119c0 <Display_Init+0x8c>)
 8011998:	480a      	ldr	r0, [pc, #40]	@ (80119c4 <Display_Init+0x90>)
 801199a:	2534      	movs	r5, #52	@ 0x34
 801199c:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 801199e:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)App_Config_Ptr->lcd_frame_write_buff;
 80119a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80119a4:	fb05 0303 	mla	r3, r5, r3, r0
 80119a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80119aa:	f009 fb33 	bl	801b014 <HAL_LTDC_Reload>
}
 80119ae:	b007      	add	sp, #28
 80119b0:	bd30      	pop	{r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	52004000 	.word	0x52004000
 80119b8:	08057e68 	.word	0x08057e68
 80119bc:	240082e4 	.word	0x240082e4
 80119c0:	24009858 	.word	0x24009858
 80119c4:	24009874 	.word	0x24009874

080119c8 <Display_WelcomeScreen>:
 *
 * @param App_Config_Ptr pointer to application context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
void Display_WelcomeScreen(AppConfig_TypeDef *App_Config_Ptr)
{
 80119c8:	b510      	push	{r4, lr}
 80119ca:	4604      	mov	r4, r0
 80119cc:	b088      	sub	sp, #32
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80119ce:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80119d2:	f00c ff75 	bl	801e8c0 <UTIL_LCD_Clear>
  
  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 80119d6:	4b42      	ldr	r3, [pc, #264]	@ (8011ae0 <Display_WelcomeScreen+0x118>)
 80119d8:	224d      	movs	r2, #77	@ 0x4d
 80119da:	2132      	movs	r1, #50	@ 0x32
 80119dc:	2000      	movs	r0, #0
 80119de:	f004 ff97 	bl	8016910 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 80119e2:	4b40      	ldr	r3, [pc, #256]	@ (8011ae4 <Display_WelcomeScreen+0x11c>)
 80119e4:	2255      	movs	r2, #85	@ 0x55
 80119e6:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 80119ea:	2000      	movs	r0, #0
 80119ec:	f004 ff90 	bl	8016910 <BSP_LCD_DrawBitmap>
  
  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"OBJECT DETECTION", CENTER_MODE);
 80119f0:	f00c ff0a 	bl	801e808 <UTIL_LCD_GetFont>
 80119f4:	4601      	mov	r1, r0
 80119f6:	2301      	movs	r3, #1
 80119f8:	4a3b      	ldr	r2, [pc, #236]	@ (8011ae8 <Display_WelcomeScreen+0x120>)
 80119fa:	88c9      	ldrh	r1, [r1, #6]
 80119fc:	2000      	movs	r0, #0
 80119fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011a02:	f00d f847 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)" GETTING STARTED", CENTER_MODE);
 8011a06:	f00c feff 	bl	801e808 <UTIL_LCD_GetFont>
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	4a37      	ldr	r2, [pc, #220]	@ (8011aec <Display_WelcomeScreen+0x124>)
 8011a10:	88c9      	ldrh	r1, [r1, #6]
 8011a12:	2000      	movs	r0, #0
 8011a14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011a18:	4099      	lsls	r1, r3
 8011a1a:	f00d f83b 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 8011a1e:	f00c fef3 	bl	801e808 <UTIL_LCD_GetFont>
 8011a22:	4601      	mov	r1, r0
 8011a24:	2301      	movs	r3, #1
 8011a26:	4a32      	ldr	r2, [pc, #200]	@ (8011af0 <Display_WelcomeScreen+0x128>)
 8011a28:	88c9      	ldrh	r1, [r1, #6]
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011a30:	4099      	lsls	r1, r3
 8011a32:	f00d f82f 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8011a36:	f00c fee7 	bl	801e808 <UTIL_LCD_GetFont>
 8011a3a:	88c1      	ldrh	r1, [r0, #6]
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8011af4 <Display_WelcomeScreen+0x12c>)
 8011a40:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011a44:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f00d f823 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8011a4e:	f00c fedb 	bl	801e808 <UTIL_LCD_GetFont>
 8011a52:	4601      	mov	r1, r0
 8011a54:	2301      	movs	r3, #1
 8011a56:	4a28      	ldr	r2, [pc, #160]	@ (8011af8 <Display_WelcomeScreen+0x130>)
 8011a58:	88c9      	ldrh	r1, [r1, #6]
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011a60:	4099      	lsls	r1, r3
 8011a62:	f00d f817 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8011a66:	f00c fecf 	bl	801e808 <UTIL_LCD_GetFont>
 8011a6a:	4601      	mov	r1, r0
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	4a23      	ldr	r2, [pc, #140]	@ (8011afc <Display_WelcomeScreen+0x134>)
 8011a70:	88c9      	ldrh	r1, [r1, #6]
 8011a72:	2000      	movs	r0, #0
 8011a74:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8011a78:	f00d f80c 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(16), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8011a7c:	f00c fec4 	bl	801e808 <UTIL_LCD_GetFont>
 8011a80:	4601      	mov	r1, r0
 8011a82:	2301      	movs	r3, #1
 8011a84:	4a1e      	ldr	r2, [pc, #120]	@ (8011b00 <Display_WelcomeScreen+0x138>)
 8011a86:	88c9      	ldrh	r1, [r1, #6]
 8011a88:	2000      	movs	r0, #0
 8011a8a:	0109      	lsls	r1, r1, #4
 8011a8c:	f00d f802 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
 */
static void Display_Refresh(AppConfig_TypeDef *App_Config_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  App_Config_Ptr->lcd_sync =0;
 8011a90:	2300      	movs	r3, #0
 8011a92:	6223      	str	r3, [r4, #32]
  while(App_Config_Ptr->lcd_sync==0);
 8011a94:	6a23      	ldr	r3, [r4, #32]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d0fc      	beq.n	8011a94 <Display_WelcomeScreen+0xcc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  Utility_DCache_Coherency_Maintenance((void *)App_Config_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8011a9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	4918      	ldr	r1, [pc, #96]	@ (8011b04 <Display_WelcomeScreen+0x13c>)
 8011aa2:	f000 fb99 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
  
  Utility_Dma2d_Memcpy((uint32_t *)(App_Config_Ptr->lcd_frame_write_buff), (uint32_t *)(App_Config_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8011aac:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	9100      	str	r1, [sp, #0]
 8011ab4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011ab8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011abc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8011ac0:	e9d4 1023 	ldrd	r1, r0, [r4, #140]	@ 0x8c
 8011ac4:	f000 fb2a 	bl	801211c <Utility_Dma2d_Memcpy>
  HAL_Delay(4000);
 8011ac8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8011acc:	f005 fea2 	bl	8017814 <HAL_Delay>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8011ad0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
}
 8011ad4:	b008      	add	sp, #32
 8011ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8011ada:	f00c bef1 	b.w	801e8c0 <UTIL_LCD_Clear>
 8011ade:	bf00      	nop
 8011ae0:	0804f360 	.word	0x0804f360
 8011ae4:	0803e85c 	.word	0x0803e85c
 8011ae8:	0803e688 	.word	0x0803e688
 8011aec:	0803e69c 	.word	0x0803e69c
 8011af0:	0803e6b0 	.word	0x0803e6b0
 8011af4:	0803e6d4 	.word	0x0803e6d4
 8011af8:	0803e700 	.word	0x0803e700
 8011afc:	0803e72c 	.word	0x0803e72c
 8011b00:	0803e748 	.word	0x0803e748
 8011b04:	00177000 	.word	0x00177000

08011b08 <Display_CameraPreview>:
{
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t *camera_capture_buffer = App_Config_Ptr->camera_capture_buffer;
 8011b0c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
  Utility_DCache_Coherency_Maintenance((void*)camera_capture_buffer,
 8011b10:	2201      	movs	r2, #1
 8011b12:	f44f 2116 	mov.w	r1, #614400	@ 0x96000
{
 8011b16:	4605      	mov	r5, r0
  Utility_DCache_Coherency_Maintenance((void*)camera_capture_buffer,
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 fb5d 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8011b1e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011b22:	f00c fecd 	bl	801e8c0 <UTIL_LCD_Clear>
  uint32_t *lcd_buffer = (uint32_t *) App_Config_Ptr->lcd_frame_write_buff;
 8011b26:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 8011b2a:	f8df e058 	ldr.w	lr, [pc, #88]	@ 8011b84 <Display_CameraPreview+0x7c>
 8011b2e:	1f18      	subs	r0, r3, #4
 8011b30:	449e      	add	lr, r3
{
 8011b32:	4622      	mov	r2, r4
 8011b34:	4684      	mov	ip, r0
 8011b36:	f504 65a0 	add.w	r5, r4, #1280	@ 0x500
      uint16_t pixel = *cam_buffer++;
 8011b3a:	f832 3b02 	ldrh.w	r3, [r2], #2
      uint32_t green = ((pixel & 0x07e0u) >>  5);
 8011b3e:	f3c3 1845 	ubfx	r8, r3, #5, #6
      uint32_t blue  = ((pixel & 0x001fu) >>  0);
 8011b42:	f003 071f 	and.w	r7, r3, #31
      green = (green << 2) | (green >> 4);
 8011b46:	f3c3 2441 	ubfx	r4, r3, #9, #2
      blue  = (blue  << 3) | (blue  >> 2);
 8011b4a:	f3c3 0182 	ubfx	r1, r3, #2, #3
      uint32_t red   = ((pixel & 0xf800u) >> 11);
 8011b4e:	0ade      	lsrs	r6, r3, #11
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8011b50:	42aa      	cmp	r2, r5
      red   = (red   << 3) | (red   >> 2);
 8011b52:	ea4f 3353 	mov.w	r3, r3, lsr #13
      green = (green << 2) | (green >> 4);
 8011b56:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
      blue  = (blue  << 3) | (blue  >> 2);
 8011b5a:	ea41 01c7 	orr.w	r1, r1, r7, lsl #3
      red   = (red   << 3) | (red   >> 2);
 8011b5e:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 8011b62:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8011b66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
      lcd_buffer[rowlcd * LCD_RES_WIDTH + collcd] = argb_pix;
 8011b6e:	f84c 3f04 	str.w	r3, [ip, #4]!
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8011b72:	d1e2      	bne.n	8011b3a <Display_CameraPreview+0x32>
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 8011b74:	f500 6048 	add.w	r0, r0, #3200	@ 0xc80
 8011b78:	4614      	mov	r4, r2
 8011b7a:	4586      	cmp	lr, r0
 8011b7c:	d1d9      	bne.n	8011b32 <Display_CameraPreview+0x2a>
}
 8011b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b82:	bf00      	nop
 8011b84:	00176ffc 	.word	0x00176ffc

08011b88 <Display_NetworkOutput>:
{
 8011b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  postprocess_outBuffer_t *pOutBuff = App_Config_Ptr->output.pOutBuff;
 8011b8c:	e9d0 5318 	ldrd	r5, r3, [r0, #96]	@ 0x60
{
 8011b90:	ed2d 8b04 	vpush	{d8-d9}
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8011b94:	2b00      	cmp	r3, #0
{
 8011b96:	b0a1      	sub	sp, #132	@ 0x84
 8011b98:	4682      	mov	sl, r0
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8011b9a:	f340 8124 	ble.w	8011de6 <Display_NetworkOutput+0x25e>
 8011b9e:	ab0e      	add	r3, sp, #56	@ 0x38
 8011ba0:	3518      	adds	r5, #24
  int32_t nb_objects = 0;
 8011ba2:	f04f 0b00 	mov.w	fp, #0
  uint32_t box_w = (uint32_t) (width * res_display_width) ;
  uint32_t box_h = (uint32_t) (height * res_display_width) ;
  uint32_t box_x = box_center_x - (box_w / 2) ;
  uint32_t box_y = box_center_y - (box_h / 2) ;
#else
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 8011ba6:	ed9f 9a9d 	vldr	s18, [pc, #628]	@ 8011e1c <Display_NetworkOutput+0x294>
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8011baa:	eddf 8a9d 	vldr	s17, [pc, #628]	@ 8011e20 <Display_NetworkOutput+0x298>
 8011bae:	930d      	str	r3, [sp, #52]	@ 0x34
 8011bb0:	e055      	b.n	8011c5e <Display_NetworkOutput+0xd6>
                       App_Config_Ptr->nn_output_labels[pOutBuff->class_index], colors_table[pOutBuff->class_index]);
 8011bb2:	489c      	ldr	r0, [pc, #624]	@ (8011e24 <Display_NetworkOutput+0x29c>)
 8011bb4:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   uint32_t box_x = box_center_x - (box_w / 2) ;
   uint32_t box_y = box_center_y - (box_h / 2) ;
#endif

   /* Draw box */
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, color);
 8011bb8:	4639      	mov	r1, r7
 8011bba:	4640      	mov	r0, r8
 8011bbc:	9600      	str	r6, [sp, #0]
 8011bbe:	f00c ffc1 	bl	801eb44 <UTIL_LCD_DrawRect>

   /* Draw box center */
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8011bc2:	4633      	mov	r3, r6
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011bc8:	220a      	movs	r2, #10
 8011bca:	f00c fe25 	bl	801e818 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8011bce:	4633      	mov	r3, r6
 8011bd0:	220a      	movs	r2, #10
 8011bd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011bd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bd6:	f00c fe49 	bl	801e86c <UTIL_LCD_DrawVLine>
  UTIL_LCD_SetBackColor(color);
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f00c fe04 	bl	801e7e8 <UTIL_LCD_SetBackColor>

  uint8_t red = (color & 0x00FF0000) >> 16;
  uint8_t green = (color & 0x0000FF00) >> 8;
  uint8_t blue = color & 0x000000FF;
  uint32_t brightness = red + green + blue;
 8011be0:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8011be4:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8011be8:	4413      	add	r3, r2
 8011bea:	fa53 f686 	uxtab	r6, r3, r6

  /* Increase lisibility by setting black for dark colors, white otherwise. */
  if (brightness < 0x17E) /* lower than mid value */ 
 8011bee:	f5b6 7fbf 	cmp.w	r6, #382	@ 0x17e
 8011bf2:	f280 8083 	bge.w	8011cfc <Display_NetworkOutput+0x174>
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfa:	f00c fded 	bl	801e7d8 <UTIL_LCD_SetTextColor>
  else
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
  }
  char confidence_as_char[5];
  snprintf(confidence_as_char, sizeof(confidence_as_char), "%0.2f", confidence);
 8011bfe:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8011c02:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8011c04:	4a88      	ldr	r2, [pc, #544]	@ (8011e28 <Display_NetworkOutput+0x2a0>)
 8011c06:	2105      	movs	r1, #5
 8011c08:	4630      	mov	r0, r6
    nb_objects++;
 8011c0a:	f10b 0b01 	add.w	fp, fp, #1
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8011c0e:	3518      	adds	r5, #24
  snprintf(confidence_as_char, sizeof(confidence_as_char), "%0.2f", confidence);
 8011c10:	ed8d 7b00 	vstr	d7, [sp]
 8011c14:	f022 ff60 	bl	8034ad8 <sniprintf>
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 8011c18:	f00c fdf6 	bl	801e808 <UTIL_LCD_GetFont>
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 8011c1c:	2303      	movs	r3, #3
 8011c1e:	464a      	mov	r2, r9
 8011c20:	4639      	mov	r1, r7
  sFONT *tmpFontSize = UTIL_LCD_GetFont();
 8011c22:	4604      	mov	r4, r0
  UTIL_LCD_DisplayStringAt(box_x, box_y, (uint8_t*)class_name, LEFT_MODE);
 8011c24:	4640      	mov	r0, r8
 8011c26:	f00c ff35 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(box_x + strlen(class_name)*tmpFontSize->Width+1, box_y, (unsigned char *)confidence_as_char, LEFT_MODE);
 8011c2a:	4648      	mov	r0, r9
 8011c2c:	f7fe fa58 	bl	80100e0 <strlen>
 8011c30:	4632      	mov	r2, r6
 8011c32:	88a4      	ldrh	r4, [r4, #4]
 8011c34:	2303      	movs	r3, #3
 8011c36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011c38:	4639      	mov	r1, r7
 8011c3a:	fb00 6004 	mla	r0, r0, r4, r6
 8011c3e:	f00c ff29 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8011c42:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011c46:	f00c fdcf 	bl	801e7e8 <UTIL_LCD_SetBackColor>
    BSP_LED_Off(LED_RED);
 8011c4a:	2002      	movs	r0, #2
 8011c4c:	f003 fe20 	bl	8015890 <BSP_LED_Off>
    BSP_LED_On(LED_GREEN);
 8011c50:	2000      	movs	r0, #0
 8011c52:	f003 fe0d 	bl	8015870 <BSP_LED_On>
  for (int32_t i = 0; i < App_Config_Ptr->output.nb_detect; ++i)
 8011c56:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
 8011c5a:	455b      	cmp	r3, fp
 8011c5c:	dd53      	ble.n	8011d06 <Display_NetworkOutput+0x17e>
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 8011c5e:	ed15 6a06 	vldr	s12, [r5, #-24]	@ 0xffffffe8
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 8011c62:	ed55 7a04 	vldr	s15, [r5, #-16]
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 8011c66:	ee26 6a09 	vmul.f32	s12, s12, s18
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8011c6a:	ed55 6a05 	vldr	s13, [r5, #-20]	@ 0xffffffec
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 8011c6e:	ee67 7a89 	vmul.f32	s15, s15, s18
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 8011c72:	f855 1c04 	ldr.w	r1, [r5, #-4]
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 8011c76:	f8da 0040 	ldr.w	r0, [sl, #64]	@ 0x40
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8011c7a:	ee66 6aa8 	vmul.f32	s13, s13, s17
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 8011c7e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8011c82:	ed15 7a03 	vldr	s14, [r5, #-12]
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 8011c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 8011c8a:	f850 9021 	ldr.w	r9, [r0, r1, lsl #2]
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8011c8e:	ee27 7a28 	vmul.f32	s14, s14, s17
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 8011c92:	2923      	cmp	r1, #35	@ 0x23
   uint32_t box_x = box_center_x - (box_w / 2) ;
 8011c94:	ee16 0a10 	vmov	r0, s12
      Display_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height, pOutBuff->conf,
 8011c98:	ed15 8a02 	vldr	s16, [r5, #-8]
   uint32_t box_w = (uint32_t) (width * res_display_width) ;
 8011c9c:	ee17 2a90 	vmov	r2, s15
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8011ca0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
   uint32_t box_center_x = (uint32_t) (x_center * res_display_width);
 8011ca4:	ed8d 6a09 	vstr	s12, [sp, #36]	@ 0x24
   uint32_t box_x = box_center_x - (box_w / 2) ;
 8011ca8:	eba0 0852 	sub.w	r8, r0, r2, lsr #1
   uint32_t box_center_y = (uint32_t) (y_center * res_display_height);
 8011cac:	ee17 4a90 	vmov	r4, s15
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8011cb0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011cb4:	f108 0601 	add.w	r6, r8, #1
 8011cb8:	960a      	str	r6, [sp, #40]	@ 0x28
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8011cba:	f1a0 0605 	sub.w	r6, r0, #5
   uint32_t box_h = (uint32_t) (height * res_display_height) ;
 8011cbe:	ee17 3a90 	vmov	r3, s15
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8011cc2:	960b      	str	r6, [sp, #44]	@ 0x2c
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8011cc4:	f1a4 0605 	sub.w	r6, r4, #5
   uint32_t box_y = box_center_y - (box_h / 2) ;
 8011cc8:	eba4 0753 	sub.w	r7, r4, r3, lsr #1
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8011ccc:	960c      	str	r6, [sp, #48]	@ 0x30
    if (pOutBuff->class_index < AVAILABLE_LABELS)
 8011cce:	f77f af70 	ble.w	8011bb2 <Display_NetworkOutput+0x2a>
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, color);
 8011cd2:	4956      	ldr	r1, [pc, #344]	@ (8011e2c <Display_NetworkOutput+0x2a4>)
 8011cd4:	4640      	mov	r0, r8
 8011cd6:	9100      	str	r1, [sp, #0]
 8011cd8:	4639      	mov	r1, r7
 8011cda:	f00c ff33 	bl	801eb44 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, color);
 8011cde:	4621      	mov	r1, r4
 8011ce0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011ce2:	220a      	movs	r2, #10
 8011ce4:	4b51      	ldr	r3, [pc, #324]	@ (8011e2c <Display_NetworkOutput+0x2a4>)
 8011ce6:	f00c fd97 	bl	801e818 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, color);
 8011cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cec:	4b4f      	ldr	r3, [pc, #316]	@ (8011e2c <Display_NetworkOutput+0x2a4>)
 8011cee:	220a      	movs	r2, #10
 8011cf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011cf2:	f00c fdbb 	bl	801e86c <UTIL_LCD_DrawVLine>
  UTIL_LCD_SetBackColor(color);
 8011cf6:	484d      	ldr	r0, [pc, #308]	@ (8011e2c <Display_NetworkOutput+0x2a4>)
 8011cf8:	f00c fd76 	bl	801e7e8 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8011cfc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011d00:	f00c fd6a 	bl	801e7d8 <UTIL_LCD_SetTextColor>
 8011d04:	e77b      	b.n	8011bfe <Display_NetworkOutput+0x76>
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8011d06:	2400      	movs	r4, #0
 8011d08:	4b49      	ldr	r3, [pc, #292]	@ (8011e30 <Display_NetworkOutput+0x2a8>)
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8011d0a:	220f      	movs	r2, #15
 8011d0c:	f44f 7120 	mov.w	r1, #640	@ 0x280
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8011d10:	659c      	str	r4, [r3, #88]	@ 0x58
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8011d12:	4620      	mov	r0, r4
 8011d14:	4b47      	ldr	r3, [pc, #284]	@ (8011e34 <Display_NetworkOutput+0x2ac>)
 8011d16:	f004 fdfb 	bl	8016910 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 640, 200, (uint8_t *)cubeai_logo);
 8011d1a:	4b47      	ldr	r3, [pc, #284]	@ (8011e38 <Display_NetworkOutput+0x2b0>)
 8011d1c:	22c8      	movs	r2, #200	@ 0xc8
 8011d1e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011d22:	4620      	mov	r0, r4
 8011d24:	f004 fdf4 	bl	8016910 <BSP_LCD_DrawBitmap>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011d28:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2c:	f00c fd54 	bl	801e7d8 <UTIL_LCD_SetTextColor>
  if (nb_objects > 1)
 8011d30:	f1bb 0f01 	cmp.w	fp, #1
 8011d34:	d06f      	beq.n	8011e16 <Display_NetworkOutput+0x28e>
    sprintf(msg, "%ld objects", nb_objects);
 8011d36:	465a      	mov	r2, fp
 8011d38:	4940      	ldr	r1, [pc, #256]	@ (8011e3c <Display_NetworkOutput+0x2b4>)
    sprintf(msg, "%ld object", nb_objects);
 8011d3a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f022 ff01 	bl	8034b44 <siprintf>
    UTIL_LCD_DisplayStringAt(320, LINE(16), (uint8_t *)msg, CENTER_MODE);
 8011d42:	f00c fd61 	bl	801e808 <UTIL_LCD_GetFont>
 8011d46:	88c1      	ldrh	r1, [r0, #6]
 8011d48:	4622      	mov	r2, r4
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	0109      	lsls	r1, r1, #4
 8011d4e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8011d52:	f00c fe9f 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011d56:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5a:	f00c fd3d 	bl	801e7d8 <UTIL_LCD_SetTextColor>
  sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Config_Ptr->Tfps_stop - App_Config_Ptr->Tfps_start));
 8011d5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011e40 <Display_NetworkOutput+0x2b8>
 8011d62:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8011d64:	4937      	ldr	r1, [pc, #220]	@ (8011e44 <Display_NetworkOutput+0x2bc>)
 8011d66:	4620      	mov	r0, r4
 8011d68:	e9da 230b 	ldrd	r2, r3, [sl, #44]	@ 0x2c
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	ee07 3a90 	vmov	s15, r3
 8011d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011d7a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8011d7e:	ec53 2b17 	vmov	r2, r3, d7
 8011d82:	f022 fedf 	bl	8034b44 <siprintf>
  UTIL_LCD_DisplayStringAt(320, LINE(18), (uint8_t *)msg, CENTER_MODE);
 8011d86:	f00c fd3f 	bl	801e808 <UTIL_LCD_GetFont>
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	4622      	mov	r2, r4
 8011d90:	88c9      	ldrh	r1, [r1, #6]
 8011d92:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8011d96:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011d9a:	4099      	lsls	r1, r3
 8011d9c:	f00c fe7a 	bl	801ea94 <UTIL_LCD_DisplayStringAt>
  App_Config_Ptr->lcd_sync =0;
 8011da0:	2300      	movs	r3, #0
 8011da2:	f8ca 3020 	str.w	r3, [sl, #32]
  while(App_Config_Ptr->lcd_sync==0);
 8011da6:	f8da 3020 	ldr.w	r3, [sl, #32]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d0fb      	beq.n	8011da6 <Display_NetworkOutput+0x21e>
  Utility_DCache_Coherency_Maintenance((void *)App_Config_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8011dae:	f8da 0090 	ldr.w	r0, [sl, #144]	@ 0x90
 8011db2:	2202      	movs	r2, #2
 8011db4:	4924      	ldr	r1, [pc, #144]	@ (8011e48 <Display_NetworkOutput+0x2c0>)
 8011db6:	f000 fa0f 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
  Utility_Dma2d_Memcpy((uint32_t *)(App_Config_Ptr->lcd_frame_write_buff), (uint32_t *)(App_Config_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8011dc0:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	9100      	str	r1, [sp, #0]
 8011dc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011dcc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011dd0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8011dd4:	e9da 1023 	ldrd	r1, r0, [sl, #140]	@ 0x8c
 8011dd8:	f000 f9a0 	bl	801211c <Utility_Dma2d_Memcpy>
}
 8011ddc:	b021      	add	sp, #132	@ 0x84
 8011dde:	ecbd 8b04 	vpop	{d8-d9}
 8011de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8011de6:	2400      	movs	r4, #0
 8011de8:	4911      	ldr	r1, [pc, #68]	@ (8011e30 <Display_NetworkOutput+0x2a8>)
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8011dea:	4b12      	ldr	r3, [pc, #72]	@ (8011e34 <Display_NetworkOutput+0x2ac>)
 8011dec:	220f      	movs	r2, #15
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8011dee:	658c      	str	r4, [r1, #88]	@ 0x58
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8011df0:	4620      	mov	r0, r4
 8011df2:	f44f 7120 	mov.w	r1, #640	@ 0x280
  int32_t nb_objects = 0;
 8011df6:	46a3      	mov	fp, r4
  BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8011df8:	f004 fd8a 	bl	8016910 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 640, 200, (uint8_t *)cubeai_logo);
 8011dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8011e38 <Display_NetworkOutput+0x2b0>)
 8011dfe:	22c8      	movs	r2, #200	@ 0xc8
 8011e00:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011e04:	4620      	mov	r0, r4
 8011e06:	f004 fd83 	bl	8016910 <BSP_LCD_DrawBitmap>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0e:	f00c fce3 	bl	801e7d8 <UTIL_LCD_SetTextColor>
  if (nb_objects > 1)
 8011e12:	ab0e      	add	r3, sp, #56	@ 0x38
 8011e14:	930d      	str	r3, [sp, #52]	@ 0x34
    sprintf(msg, "%ld object", nb_objects);
 8011e16:	465a      	mov	r2, fp
 8011e18:	490c      	ldr	r1, [pc, #48]	@ (8011e4c <Display_NetworkOutput+0x2c4>)
 8011e1a:	e78e      	b.n	8011d3a <Display_NetworkOutput+0x1b2>
 8011e1c:	44200000 	.word	0x44200000
 8011e20:	43f00000 	.word	0x43f00000
 8011e24:	0803e7cc 	.word	0x0803e7cc
 8011e28:	0803e764 	.word	0x0803e764
 8011e2c:	ffffa500 	.word	0xffffa500
 8011e30:	2400991c 	.word	0x2400991c
 8011e34:	0804f360 	.word	0x0804f360
 8011e38:	08043394 	.word	0x08043394
 8011e3c:	0803e76c 	.word	0x0803e76c
 8011e40:	447a0000 	.word	0x447a0000
 8011e44:	0803e784 	.word	0x0803e784
 8011e48:	00177000 	.word	0x00177000
 8011e4c:	0803e778 	.word	0x0803e778

08011e50 <HAL_LTDC_ReloadEventCallback>:
  App_Config.lcd_sync=1;
 8011e50:	4b02      	ldr	r3, [pc, #8]	@ (8011e5c <HAL_LTDC_ReloadEventCallback+0xc>)
 8011e52:	2201      	movs	r2, #1
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8011e54:	2102      	movs	r1, #2
  App_Config.lcd_sync=1;
 8011e56:	621a      	str	r2, [r3, #32]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8011e58:	f009 b8dc 	b.w	801b014 <HAL_LTDC_Reload>
 8011e5c:	d0aa1298 	.word	0xd0aa1298

08011e60 <Network_Preprocess>:
/**
 * @brief Run preprocessing stages on captured frame
 * @param App_Config_Ptr pointer to application context
 */
void Network_Preprocess(AppConfig_TypeDef *App_Config_Ptr)
{ 
 8011e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e64:	4604      	mov	r4, r0
 8011e66:	b090      	sub	sp, #64	@ 0x40
  image_t src_img;
  image_t dst_img;
  
  App_Config_Ptr->Tfps_start =Utility_GetTimeStamp();
 8011e68:	f000 f956 	bl	8012118 <Utility_GetTimeStamp>
  src_img.h=CAM_RES_WITH_BORDERS;
#else
  src_img.w=CAM_RES_WIDTH;
  src_img.h=CAM_RES_HEIGHT;
#endif
  src_img.bpp=IMAGE_BPP_RGB565;
 8011e6c:	f04f 0802 	mov.w	r8, #2
  src_img.data=App_Config_Ptr->camera_capture_buffer;
 8011e70:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
  dst_img.w=AI_NETWORK_WIDTH;
 8011e74:	f44f 7680 	mov.w	r6, #256	@ 0x100
 8011e78:	f44f 7780 	mov.w	r7, #256	@ 0x100
  App_Config_Ptr->Tfps_start =Utility_GetTimeStamp();
 8011e7c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  src_img.data=App_Config_Ptr->camera_capture_buffer;
 8011e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 * @param src Pointer to source image
 * @param dst Pointer to destination image
 */
static void ImageResize(image_t *src, image_t *dst)
{
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8011e80:	2200      	movs	r2, #0
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011e82:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8011e86:	a90c      	add	r1, sp, #48	@ 0x30
 8011e88:	a808      	add	r0, sp, #32
  src_img.bpp=IMAGE_BPP_RGB565;
 8011e8a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  dst_img.bpp=IMAGE_BPP_RGB565;
 8011e8e:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  dst_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011e92:	930f      	str	r3, [sp, #60]	@ 0x3c
  src_img.w=CAM_RES_WIDTH;
 8011e94:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8011f88 <Network_Preprocess+0x128>
  dst_img.w=AI_NETWORK_WIDTH;
 8011e98:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  src_img.w=CAM_RES_WIDTH;
 8011e9c:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (STM32Ipl_Downscale(src, dst, 0) != stm32ipl_err_Ok)
 8011ea0:	f00c fa7e 	bl	801e3a0 <STM32Ipl_Downscale>
 8011ea4:	bb48      	cbnz	r0, 8011efa <Network_Preprocess+0x9a>
  if(App_Config_Ptr->PixelFormatConv == HW_PFC)
 8011ea6:	69e3      	ldr	r3, [r4, #28]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d028      	beq.n	8011efe <Network_Preprocess+0x9e>
  dst_img.bpp = IMAGE_BPP_RGB888;
 8011eac:	2204      	movs	r2, #4
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011eae:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8011eb2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  dst_img.bpp = IMAGE_BPP_RGB888;
 8011eb4:	920e      	str	r2, [sp, #56]	@ 0x38
 */
static void PixelFormatConversion(AppConfig_TypeDef *App_Config_Ptr, image_t *src, image_t *dst)
{
  image_t *src_img = src;
  image_t *dst_img = dst;
  uint32_t rb_swap = App_Config_Ptr->red_blue_swap;
 8011eb6:	69a2      	ldr	r2, [r4, #24]
  src_img.bpp=IMAGE_BPP_RGB565;
 8011eb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011ebc:	900b      	str	r0, [sp, #44]	@ 0x2c
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8011ebe:	910f      	str	r1, [sp, #60]	@ 0x3c
  src_img.w=AI_NETWORK_WIDTH;
 8011ec0:	e9cd 6708 	strd	r6, r7, [sp, #32]
  dst_img.w=AI_NETWORK_WIDTH;
 8011ec4:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  
  switch (App_Config_Ptr->PixelFormatConv)
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	d117      	bne.n	8011efc <Network_Preprocess+0x9c>
    
    break;
    
  case SW_PFC: /* Use SW routine to perform pixel format convertion from RGB565 to grayscale */
   
    if (rb_swap != 0)
 8011ecc:	b172      	cbz	r2, 8011eec <Network_Preprocess+0x8c>
 8011ece:	4a30      	ldr	r2, [pc, #192]	@ (8011f90 <Network_Preprocess+0x130>)
 8011ed0:	188b      	adds	r3, r1, r2
 8011ed2:	4402      	add	r2, r0
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
  {
    tmp_r=pivot[i].r;
 8011ed4:	7815      	ldrb	r5, [r2, #0]
  for (int i = pixels-1; i >= 0; i--)
 8011ed6:	4282      	cmp	r2, r0
    
    dest[i].r = pivot[i].b;
 8011ed8:	7891      	ldrb	r1, [r2, #2]
  for (int i = pixels-1; i >= 0; i--)
 8011eda:	f1a3 0303 	sub.w	r3, r3, #3
    dest[i].b = tmp_r;
 8011ede:	715d      	strb	r5, [r3, #5]
  for (int i = pixels-1; i >= 0; i--)
 8011ee0:	f1a2 0203 	sub.w	r2, r2, #3
    dest[i].r = pivot[i].b;
 8011ee4:	70d9      	strb	r1, [r3, #3]
    dest[i].g = pivot[i].g;
 8011ee6:	7915      	ldrb	r5, [r2, #4]
 8011ee8:	711d      	strb	r5, [r3, #4]
  for (int i = pixels-1; i >= 0; i--)
 8011eea:	d1f3      	bne.n	8011ed4 <Network_Preprocess+0x74>
    if (STM32Ipl_ConvertRev(src_img, dst_img, 0) != stm32ipl_err_Ok)
 8011eec:	2200      	movs	r2, #0
 8011eee:	a90c      	add	r1, sp, #48	@ 0x30
 8011ef0:	a808      	add	r0, sp, #32
 8011ef2:	f00b fc61 	bl	801d7b8 <STM32Ipl_ConvertRev>
 8011ef6:	b348      	cbz	r0, 8011f4c <Network_Preprocess+0xec>
      while (1);
 8011ef8:	e7fe      	b.n	8011ef8 <Network_Preprocess+0x98>
    while (1);
 8011efa:	e7fe      	b.n	8011efa <Network_Preprocess+0x9a>
    while(1);
 8011efc:	e7fe      	b.n	8011efc <Network_Preprocess+0x9c>
    Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->rescaled_image_buffer), RESCALED_FRAME_BUFFER_SIZE, CLEAN);
 8011efe:	4642      	mov	r2, r8
 8011f00:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8011f04:	4605      	mov	r5, r0
 8011f06:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8011f0a:	f000 f965 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
  dst_img.bpp = IMAGE_BPP_RGB888;
 8011f0e:	2304      	movs	r3, #4
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011f10:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  dst_img.bpp = IMAGE_BPP_RGB888;
 8011f14:	930e      	str	r3, [sp, #56]	@ 0x38
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8011f16:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  src_img.bpp=IMAGE_BPP_RGB565;
 8011f18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  src_img.data=App_Config_Ptr->rescaled_image_buffer;
 8011f1c:	900b      	str	r0, [sp, #44]	@ 0x2c
  dst_img.data=App_Config_Ptr->nn_input_buffer;
 8011f1e:	910f      	str	r1, [sp, #60]	@ 0x3c
  uint32_t rb_swap = App_Config_Ptr->red_blue_swap;
 8011f20:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  src_img.w=AI_NETWORK_WIDTH;
 8011f24:	e9cd 6708 	strd	r6, r7, [sp, #32]
  switch (App_Config_Ptr->PixelFormatConv)
 8011f28:	2b01      	cmp	r3, #1
  dst_img.w=AI_NETWORK_WIDTH;
 8011f2a:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
  switch (App_Config_Ptr->PixelFormatConv)
 8011f2e:	d1cb      	bne.n	8011ec8 <Network_Preprocess+0x68>
      Utility_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8011f30:	9206      	str	r2, [sp, #24]
 8011f32:	462a      	mov	r2, r5
 8011f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f38:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f40:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	462b      	mov	r3, r5
 8011f48:	f000 f8e8 	bl	801211c <Utility_Dma2d_Memcpy>
  if(App_Config_Ptr->PixelFormatConv == HW_PFC)
 8011f4c:	69e2      	ldr	r2, [r4, #28]
 8011f4e:	2a01      	cmp	r2, #1
 8011f50:	d012      	beq.n	8011f78 <Network_Preprocess+0x118>
* @retval None
*/
void PixelValueConversion(AppConfig_TypeDef *App_Config_Ptr, void *pSrc)
{
  /**Check data format expected by the model input and perform the right conversion**/
  if(App_Config_Ptr->nn_input_type == UINT8_FORMAT)
 8011f52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	d00c      	beq.n	8011f72 <Network_Preprocess+0x112>
  {
	  /*Nothing to do*/
  }
  else if(App_Config_Ptr->nn_input_type == INT8_FORMAT)
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d000      	beq.n	8011f5e <Network_Preprocess+0xfe>
		destination[i]= signed_input_value;
	}
  }
  else
  {
	  while(1);
 8011f5c:	e7fe      	b.n	8011f5c <Network_Preprocess+0xfc>
 8011f5e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011f60:	f503 3140 	add.w	r1, r3, #196608	@ 0x30000
		unsigned_input_value= (uint8_t)source[i];
 8011f64:	681a      	ldr	r2, [r3, #0]
		signed_input_value= ((int16_t)unsigned_input_value)-128;
 8011f66:	f082 3280 	eor.w	r2, r2, #2155905152	@ 0x80808080
		destination[i]= signed_input_value;
 8011f6a:	f843 2b04 	str.w	r2, [r3], #4
	for (int32_t i = 0; i < nb_pixels; i++)
 8011f6e:	4299      	cmp	r1, r3
 8011f70:	d1f8      	bne.n	8011f64 <Network_Preprocess+0x104>
}
 8011f72:	b010      	add	sp, #64	@ 0x40
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->activation_buffer[AI_NETWORK_INPUTS_IN_ACTIVATIONS_INDEX]),
 8011f78:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8011f7a:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8011f7e:	6818      	ldr	r0, [r3, #0]
 8011f80:	f000 f92a 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
 8011f84:	e7e5      	b.n	8011f52 <Network_Preprocess+0xf2>
 8011f86:	bf00      	nop
 8011f88:	00000280 	.word	0x00000280
 8011f8c:	000001e0 	.word	0x000001e0
 8011f90:	0002fffd 	.word	0x0002fffd

08011f94 <Network_Inference>:
{
 8011f94:	b510      	push	{r4, lr}
 8011f96:	4604      	mov	r4, r0
  App_Config_Ptr->Tinf_start =Utility_GetTimeStamp();
 8011f98:	f000 f8be 	bl	8012118 <Utility_GetTimeStamp>
 8011f9c:	4603      	mov	r3, r0
  ai_run((void*)App_Config_Ptr->nn_input_buffer, (void**)App_Config_Ptr->nn_output_buffer);
 8011f9e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8011fa2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
  App_Config_Ptr->Tinf_start =Utility_GetTimeStamp();
 8011fa4:	6263      	str	r3, [r4, #36]	@ 0x24
  ai_run((void*)App_Config_Ptr->nn_input_buffer, (void**)App_Config_Ptr->nn_output_buffer);
 8011fa6:	f7ff fb61 	bl	801166c <ai_run>
  App_Config_Ptr->Tinf_stop =Utility_GetTimeStamp();
 8011faa:	f000 f8b5 	bl	8012118 <Utility_GetTimeStamp>
 8011fae:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8011fb0:	bd10      	pop	{r4, pc}
 8011fb2:	bf00      	nop

08011fb4 <Network_Postprocess>:
{
 8011fb4:	b538      	push	{r3, r4, r5, lr}
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	ed2d 8b02 	vpush	{d8}
  while(App_Config_Ptr->new_frame_ready == 0);
 8011fbc:	7b23      	ldrb	r3, [r4, #12]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d0fc      	beq.n	8011fbc <Network_Postprocess+0x8>
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8011fc2:	f7ff faa3 	bl	801150c <ai_get_output_format>
 8011fc6:	2802      	cmp	r0, #2
 8011fc8:	d00d      	beq.n	8011fe6 <Network_Postprocess+0x32>
  if (App_Config_Ptr->error == AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 8011fca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8011fcc:	b103      	cbz	r3, 8011fd0 <Network_Postprocess+0x1c>
    while(1);
 8011fce:	e7fe      	b.n	8011fce <Network_Postprocess+0x1a>
    App_Config_Ptr->error = app_postprocess_run( App_Config_Ptr->nn_output_buffer,
 8011fd0:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 8011fd4:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8011fd8:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8011fdc:	f000 f88e 	bl	80120fc <app_postprocess_run>
 8011fe0:	6460      	str	r0, [r4, #68]	@ 0x44
  if (App_Config_Ptr->error != AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 8011fe2:	b3d8      	cbz	r0, 801205c <Network_Postprocess+0xa8>
    while(1);
 8011fe4:	e7fe      	b.n	8011fe4 <Network_Postprocess+0x30>
    switch(ai_get_output_quantization_scheme())
 8011fe6:	f7ff fa99 	bl	801151c <ai_get_output_quantization_scheme>
 8011fea:	2801      	cmp	r0, #1
 8011fec:	d01b      	beq.n	8012026 <Network_Postprocess+0x72>
 8011fee:	2802      	cmp	r0, #2
 8011ff0:	d03a      	beq.n	8012068 <Network_Postprocess+0xb4>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d1e9      	bne.n	8011fca <Network_Postprocess+0x16>
      scale=ai_get_output_fxp_scale();
 8011ff6:	f7ff fab1 	bl	801155c <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) App_Config_Ptr->nn_output_buffer[0];
 8011ffa:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8011ffc:	f243 5352 	movw	r3, #13650	@ 0x3552
 8012000:	f24d 5248 	movw	r2, #54600	@ 0xd548
      scale=ai_get_output_fxp_scale();
 8012004:	eeb0 7a40 	vmov.f32	s14, s0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012008:	440b      	add	r3, r1
 801200a:	440a      	add	r2, r1
        float q_value = (float) *(nn_output_i8 + i);
 801200c:	f913 0d01 	ldrsb.w	r0, [r3, #-1]!
 8012010:	ee07 0a90 	vmov	s15, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012014:	4299      	cmp	r1, r3
        float q_value = (float) *(nn_output_i8 + i);
 8012016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 801201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801201e:	ed62 7a01 	vstmdb	r2!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012022:	d1f3      	bne.n	801200c <Network_Postprocess+0x58>
 8012024:	e7d1      	b.n	8011fca <Network_Postprocess+0x16>
      scale = ai_get_output_scale();
 8012026:	f7ff faad 	bl	8011584 <ai_get_output_scale>
 801202a:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 801202e:	f7ff fac5 	bl	80115bc <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) App_Config_Ptr->nn_output_buffer[0];
 8012032:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8012034:	f243 5252 	movw	r2, #13650	@ 0x3552
 8012038:	f24d 5148 	movw	r1, #54600	@ 0xd548
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 801203c:	442a      	add	r2, r5
 801203e:	4429      	add	r1, r5
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8012040:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8012044:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012046:	4295      	cmp	r5, r2
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8012048:	ee07 3a90 	vmov	s15, r3
 801204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012050:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012054:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012058:	d1f2      	bne.n	8012040 <Network_Postprocess+0x8c>
 801205a:	e7b6      	b.n	8011fca <Network_Postprocess+0x16>
  App_Config_Ptr->Tfps_stop =Utility_GetTimeStamp();
 801205c:	f000 f85c 	bl	8012118 <Utility_GetTimeStamp>
 8012060:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8012062:	ecbd 8b02 	vpop	{d8}
 8012066:	bd38      	pop	{r3, r4, r5, pc}
      scale = ai_get_output_scale();
 8012068:	f7ff fa8c 	bl	8011584 <ai_get_output_scale>
 801206c:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8012070:	f7ff faa4 	bl	80115bc <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) App_Config_Ptr->nn_output_buffer[0];
 8012074:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8012076:	f243 5252 	movw	r2, #13650	@ 0x3552
 801207a:	f24d 5148 	movw	r1, #54600	@ 0xd548
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 801207e:	442a      	add	r2, r5
 8012080:	4429      	add	r1, r5
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8012082:	f912 3d01 	ldrsb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8012086:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8012088:	42aa      	cmp	r2, r5
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 801208a:	ee07 3a90 	vmov	s15, r3
 801208e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012092:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012096:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 801209a:	d1f2      	bne.n	8012082 <Network_Postprocess+0xce>
 801209c:	e795      	b.n	8011fca <Network_Postprocess+0x16>
 801209e:	bf00      	nop

080120a0 <Network_Init>:
{
 80120a0:	b510      	push	{r4, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	4604      	mov	r4, r0
  ai_init((void*)(App_Config_Ptr->activation_buffer), &input_data_ptr, output_data_ptr);
 80120a6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80120a8:	aa01      	add	r2, sp, #4
 80120aa:	4669      	mov	r1, sp
 80120ac:	f7ff faaa 	bl	8011604 <ai_init>
  if(input_data_ptr!= NULL)
 80120b0:	9b00      	ldr	r3, [sp, #0]
 80120b2:	b15b      	cbz	r3, 80120cc <Network_Init+0x2c>
    if(output_data_ptr[i]!= NULL)
 80120b4:	9a01      	ldr	r2, [sp, #4]
    App_Config_Ptr->nn_input_buffer=input_data_ptr;
 80120b6:	67a3      	str	r3, [r4, #120]	@ 0x78
    if(output_data_ptr[i]!= NULL)
 80120b8:	b14a      	cbz	r2, 80120ce <Network_Init+0x2e>
 80120ba:	9b02      	ldr	r3, [sp, #8]
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 80120bc:	66e2      	str	r2, [r4, #108]	@ 0x6c
    if(output_data_ptr[i]!= NULL)
 80120be:	b133      	cbz	r3, 80120ce <Network_Init+0x2e>
 80120c0:	9a03      	ldr	r2, [sp, #12]
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 80120c2:	6723      	str	r3, [r4, #112]	@ 0x70
    if(output_data_ptr[i]!= NULL)
 80120c4:	b11a      	cbz	r2, 80120ce <Network_Init+0x2e>
      App_Config_Ptr->nn_output_buffer[i] = output_data_ptr[i];
 80120c6:	6762      	str	r2, [r4, #116]	@ 0x74
}
 80120c8:	b004      	add	sp, #16
 80120ca:	bd10      	pop	{r4, pc}
    while(1);
 80120cc:	e7fe      	b.n	80120cc <Network_Init+0x2c>
      while (1);     
 80120ce:	e7fe      	b.n	80120ce <Network_Init+0x2e>

080120d0 <app_postprocess_init>:
#if POSTPROCESS_TYPE == POSTPROCESS_SSD
#include "anchors.h"
#endif

int32_t app_postprocess_init( AppConfig_TypeDef *App_Config_Ptr)
{
 80120d0:	4603      	mov	r3, r0
    App_Config_Ptr->input_static_param.pAnchors         = AI_OBJDETECT_YOLOV2_PP_ANCHORS;		// Pointer on Anchor boxes, aligned with the training phase
    App_Config_Ptr->input_static_param.max_boxes_limit  = AI_OBJDETECT_YOLOV2_PP_MAX_BOXES_LIMIT;	// Maximum number of boxes as output of the post processing, that can be tuned by the user
    App_Config_Ptr->input_static_param.optim            = AI_OBJDETECT_YOLOV2_PP_OPTIM_NORMAL;	// Only this mode is supported for now.
    error = objdetect_yolov2_pp_reset((yolov2_pp_static_param_t *) &App_Config_Ptr->input_static_param);
#elif POSTPROCESS_TYPE == POSTPROCESS_ST_SSD
    App_Config_Ptr->input_static_param.nb_classes      = AI_OD_SSD_ST_PP_NB_CLASSES;
 80120d2:	2102      	movs	r1, #2
 80120d4:	f641 22a9 	movw	r2, #6825	@ 0x1aa9
    App_Config_Ptr->input_static_param.nb_detections   = AI_OD_SSD_ST_PP_TOTAL_DETECTIONS;
    App_Config_Ptr->input_static_param.max_boxes_limit = AI_OD_SSD_ST_PP_MAX_BOXES_LIMIT;
 80120d8:	200a      	movs	r0, #10
    App_Config_Ptr->input_static_param.conf_threshold  = AI_OD_SSD_ST_PP_CONF_THRESHOLD;
    App_Config_Ptr->input_static_param.iou_threshold   = AI_OD_SSD_ST_PP_IOU_THRESHOLD;
 80120da:	f04f 5c7c 	mov.w	ip, #1056964608	@ 0x3f000000
    App_Config_Ptr->input_static_param.max_boxes_limit = AI_OD_SSD_ST_PP_MAX_BOXES_LIMIT;
 80120de:	6518      	str	r0, [r3, #80]	@ 0x50
    App_Config_Ptr->input_static_param.nb_detect       = 1;
    error = objdetect_ssd_st_pp_reset((ssd_st_pp_static_param_t *) &App_Config_Ptr->input_static_param);
 80120e0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
    App_Config_Ptr->input_static_param.iou_threshold   = AI_OD_SSD_ST_PP_IOU_THRESHOLD;
 80120e4:	f8c3 c058 	str.w	ip, [r3, #88]	@ 0x58
    App_Config_Ptr->input_static_param.nb_classes      = AI_OD_SSD_ST_PP_NB_CLASSES;
 80120e8:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
    App_Config_Ptr->input_static_param.conf_threshold  = AI_OD_SSD_ST_PP_CONF_THRESHOLD;
 80120ec:	4902      	ldr	r1, [pc, #8]	@ (80120f8 <app_postprocess_init+0x28>)
    App_Config_Ptr->input_static_param.nb_detect       = 1;
 80120ee:	2201      	movs	r2, #1
    App_Config_Ptr->input_static_param.conf_threshold  = AI_OD_SSD_ST_PP_CONF_THRESHOLD;
 80120f0:	6559      	str	r1, [r3, #84]	@ 0x54
    App_Config_Ptr->input_static_param.nb_detect       = 1;
 80120f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    error = objdetect_ssd_st_pp_reset((ssd_st_pp_static_param_t *) &App_Config_Ptr->input_static_param);
 80120f4:	f021 be7c 	b.w	8033df0 <objdetect_ssd_st_pp_reset>
 80120f8:	3f19999a 	.word	0x3f19999a

080120fc <app_postprocess_run>:
}

int32_t app_postprocess_run( void **pInput,
                            postprocess_out_t*pOutput,
                            void *pInput_static_param)
{
 80120fc:	b510      	push	{r4, lr}
#elif POSTPROCESS_TYPE == POSTPROCESS_YOLO_V2
    error = objdetect_yolov2_pp_process((yolov2_pp_in_t*) pInput[0],
                                        (postprocess_out_t*) pOutput,
                                        (yolov2_pp_static_param_t*) pInput_static_param);
#elif POSTPROCESS_TYPE == POSTPROCESS_ST_SSD
    ssd_st_pp_in_centroid_t pp_input = 
 80120fe:	6803      	ldr	r3, [r0, #0]
{
 8012100:	b084      	sub	sp, #16
    ssd_st_pp_in_centroid_t pp_input = 
 8012102:	9303      	str	r3, [sp, #12]
 8012104:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
    {
        .pAnchors = pInput[2],
        .pBoxes = pInput[1],
        .pScores = pInput[0],
    };
    error = objdetect_ssd_st_pp_process((ssd_st_pp_in_centroid_t*) &pp_input,
 8012108:	a801      	add	r0, sp, #4
    ssd_st_pp_in_centroid_t pp_input = 
 801210a:	9402      	str	r4, [sp, #8]
 801210c:	9301      	str	r3, [sp, #4]
    error = objdetect_ssd_st_pp_process((ssd_st_pp_in_centroid_t*) &pp_input,
 801210e:	f021 fe75 	bl	8033dfc <objdetect_ssd_st_pp_process>
                                     (ssd_pp_static_param_t*) pInput_static_param);
#else
    #error "PostProcessing type not supported" 
#endif
    return error;
}
 8012112:	b004      	add	sp, #16
 8012114:	bd10      	pop	{r4, pc}
 8012116:	bf00      	nop

08012118 <Utility_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t Utility_GetTimeStamp(void)
{
  return HAL_GetTick();
 8012118:	f005 bb76 	b.w	8017808 <HAL_GetTick>

0801211c <Utility_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void Utility_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 801211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012120:	b087      	sub	sp, #28
 8012122:	4688      	mov	r8, r1
 8012124:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8012128:	9004      	str	r0, [sp, #16]
 801212a:	4618      	mov	r0, r3
 801212c:	f1ba 0f04 	cmp.w	sl, #4
 8012130:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012134:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8012138:	9305      	str	r3, [sp, #20]
 801213a:	e9dd b612 	ldrd	fp, r6, [sp, #72]	@ 0x48
 801213e:	e9dd 5715 	ldrd	r5, r7, [sp, #84]	@ 0x54
 8012142:	d82a      	bhi.n	801219a <Utility_Dma2d_Memcpy+0x7e>
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
 8012144:	fb0b 2200 	mla	r2, fp, r0, r2
 8012148:	4821      	ldr	r0, [pc, #132]	@ (80121d0 <Utility_Dma2d_Memcpy+0xb4>)
 801214a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801214e:	fb00 f302 	mul.w	r3, r0, r2
 8012152:	9303      	str	r3, [sp, #12]
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8012154:	4c1f      	ldr	r4, [pc, #124]	@ (80121d4 <Utility_Dma2d_Memcpy+0xb8>)
 8012156:	4620      	mov	r0, r4
 8012158:	f006 ff4e 	bl	8018ff8 <HAL_DMA2D_DeInit>

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 801215c:	3d00      	subs	r5, #0
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 801215e:	ebab 0309 	sub.w	r3, fp, r9
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8012162:	4620      	mov	r0, r4
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8012164:	bf18      	it	ne
 8012166:	2501      	movne	r5, #1
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8012168:	1e39      	subs	r1, r7, #0
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 801216a:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.XferCpltCallback = NULL;
 801216c:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8012170:	ea4f 4505 	mov.w	r5, r5, lsl #16
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8012174:	bf18      	it	ne
 8012176:	2101      	movne	r1, #1
  hlcd_dma2d.XferCpltCallback = NULL;
 8012178:	6223      	str	r3, [r4, #32]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 801217a:	6065      	str	r5, [r4, #4]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 801217c:	2501      	movs	r5, #1
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 801217e:	6463      	str	r3, [r4, #68]	@ 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8012180:	23ff      	movs	r3, #255	@ 0xff
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8012182:	f8c4 a008 	str.w	sl, [r4, #8]
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8012186:	64a6      	str	r6, [r4, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8012188:	65a1      	str	r1, [r4, #88]	@ 0x58
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 801218a:	e9c4 5313 	strd	r5, r3, [r4, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 801218e:	f006 fef3 	bl	8018f78 <HAL_DMA2D_Init>
 8012192:	b128      	cbz	r0, 80121a0 <Utility_Dma2d_Memcpy+0x84>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8012194:	b007      	add	sp, #28
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 801219a:	2300      	movs	r3, #0
 801219c:	9303      	str	r3, [sp, #12]
 801219e:	e7d9      	b.n	8012154 <Utility_Dma2d_Memcpy+0x38>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80121a0:	4629      	mov	r1, r5
 80121a2:	4620      	mov	r0, r4
 80121a4:	f007 f94e 	bl	8019444 <HAL_DMA2D_ConfigLayer>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d1f3      	bne.n	8012194 <Utility_Dma2d_Memcpy+0x78>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 80121ac:	9b05      	ldr	r3, [sp, #20]
 80121ae:	4620      	mov	r0, r4
 80121b0:	9a03      	ldr	r2, [sp, #12]
 80121b2:	9300      	str	r3, [sp, #0]
 80121b4:	464b      	mov	r3, r9
 80121b6:	4442      	add	r2, r8
 80121b8:	9904      	ldr	r1, [sp, #16]
 80121ba:	f006 ffa3 	bl	8019104 <HAL_DMA2D_Start>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d1e8      	bne.n	8012194 <Utility_Dma2d_Memcpy+0x78>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 80121c2:	211e      	movs	r1, #30
 80121c4:	4620      	mov	r0, r4
}
 80121c6:	b007      	add	sp, #28
 80121c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 80121cc:	f006 bff4 	b.w	80191b8 <HAL_DMA2D_PollForTransfer>
 80121d0:	080575a8 	.word	0x080575a8
 80121d4:	2400991c 	.word	0x2400991c

080121d8 <Utility_DCache_Coherency_Maintenance>:
 * @retval None
 */
void Utility_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 80121d8:	ea40 0301 	orr.w	r3, r0, r1
 80121dc:	06db      	lsls	r3, r3, #27
 80121de:	d106      	bne.n	80121ee <Utility_DCache_Coherency_Maintenance+0x16>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 80121e0:	2a01      	cmp	r2, #1
 80121e2:	d005      	beq.n	80121f0 <Utility_DCache_Coherency_Maintenance+0x18>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80121e4:	2900      	cmp	r1, #0
 80121e6:	dd01      	ble.n	80121ec <Utility_DCache_Coherency_Maintenance+0x14>
 80121e8:	2a02      	cmp	r2, #2
 80121ea:	d01a      	beq.n	8012222 <Utility_DCache_Coherency_Maintenance+0x4a>
 80121ec:	4770      	bx	lr
    while(1);
 80121ee:	e7fe      	b.n	80121ee <Utility_DCache_Coherency_Maintenance+0x16>
    if ( dsize > 0 ) { 
 80121f0:	2900      	cmp	r1, #0
 80121f2:	ddfb      	ble.n	80121ec <Utility_DCache_Coherency_Maintenance+0x14>
{
 80121f4:	b410      	push	{r4}
 80121f6:	4604      	mov	r4, r0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	1e4b      	subs	r3, r1, #1
 80121fe:	f100 0120 	add.w	r1, r0, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012202:	4a0f      	ldr	r2, [pc, #60]	@ (8012240 <Utility_DCache_Coherency_Maintenance+0x68>)
 8012204:	f023 031f 	bic.w	r3, r3, #31
 8012208:	440b      	add	r3, r1
 801220a:	f8c2 425c 	str.w	r4, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801220e:	3420      	adds	r4, #32
      } while ( op_size > 0 );
 8012210:	429c      	cmp	r4, r3
 8012212:	d1fa      	bne.n	801220a <Utility_DCache_Coherency_Maintenance+0x32>
 8012214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012218:	f3bf 8f6f 	isb	sy
  }
  else if(Maintenance_operation == CLEAN)
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 801221c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012220:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8012222:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012226:	4a06      	ldr	r2, [pc, #24]	@ (8012240 <Utility_DCache_Coherency_Maintenance+0x68>)
 8012228:	4401      	add	r1, r0
 801222a:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801222e:	3020      	adds	r0, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8012230:	1a0b      	subs	r3, r1, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	dcf9      	bgt.n	801222a <Utility_DCache_Coherency_Maintenance+0x52>
 8012236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801223a:	f3bf 8f6f 	isb	sy
 801223e:	4770      	bx	lr
 8012240:	e000ed00 	.word	0xe000ed00

08012244 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8012244:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8012246:	2000      	movs	r0, #0
 8012248:	f003 fb22 	bl	8015890 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 801224c:	2001      	movs	r0, #1
 801224e:	f003 fb1f 	bl	8015890 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8012252:	2002      	movs	r0, #2
 8012254:	f003 fb1c 	bl	8015890 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8012258:	2003      	movs	r0, #3
 801225a:	f003 fb19 	bl	8015890 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 801225e:	2002      	movs	r0, #2
 8012260:	f003 fb06 	bl	8015870 <BSP_LED_On>
  while (1)
 8012264:	e7fe      	b.n	8012264 <Error_Handler+0x20>
 8012266:	bf00      	nop

08012268 <main>:
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b09e      	sub	sp, #120	@ 0x78
  HAL_MPU_Disable();
 801226c:	f005 fb64 	bl	8017938 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8012270:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8012274:	4a9c      	ldr	r2, [pc, #624]	@ (80124e8 <main+0x280>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012276:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8012278:	4b9c      	ldr	r3, [pc, #624]	@ (80124ec <main+0x284>)
  MPU_InitStruct.BaseAddress = 0xD0000000;
 801227a:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801227c:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801227e:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8012282:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8012286:	f005 fb75 	bl	8017974 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801228a:	2004      	movs	r0, #4
 801228c:	f005 fb62 	bl	8017954 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8012290:	4a97      	ldr	r2, [pc, #604]	@ (80124f0 <main+0x288>)
 8012292:	6953      	ldr	r3, [r2, #20]
 8012294:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8012298:	d111      	bne.n	80122be <main+0x56>
  __ASM volatile ("dsb 0xF":::"memory");
 801229a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801229e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80122a2:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80122a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80122aa:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80122ae:	6953      	ldr	r3, [r2, #20]
 80122b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80122b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80122ba:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80122be:	488c      	ldr	r0, [pc, #560]	@ (80124f0 <main+0x288>)
 80122c0:	6943      	ldr	r3, [r0, #20]
 80122c2:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80122c6:	d124      	bne.n	8012312 <main+0xaa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80122c8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80122cc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80122d0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80122d4:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80122d8:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80122dc:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 80122e0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80122e2:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80122e6:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80122e8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80122ec:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80122ee:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 80122f2:	1c5a      	adds	r2, r3, #1
 80122f4:	d1f8      	bne.n	80122e8 <main+0x80>
    } while(sets-- != 0U);
 80122f6:	3c20      	subs	r4, #32
 80122f8:	f114 0f20 	cmn.w	r4, #32
 80122fc:	d1f1      	bne.n	80122e2 <main+0x7a>
 80122fe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8012302:	6943      	ldr	r3, [r0, #20]
 8012304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012308:	6143      	str	r3, [r0, #20]
 801230a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801230e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8012312:	f005 fa3d 	bl	8017790 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8012316:	2004      	movs	r0, #4
 8012318:	f009 f83c 	bl	801b394 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801231c:	4b75      	ldr	r3, [pc, #468]	@ (80124f4 <main+0x28c>)
 801231e:	2100      	movs	r1, #0
 8012320:	4a75      	ldr	r2, [pc, #468]	@ (80124f8 <main+0x290>)
 8012322:	9101      	str	r1, [sp, #4]
 8012324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012326:	f021 0101 	bic.w	r1, r1, #1
 801232a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 801232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801232e:	f003 0301 	and.w	r3, r3, #1
 8012332:	9301      	str	r3, [sp, #4]
 8012334:	6993      	ldr	r3, [r2, #24]
 8012336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801233a:	6193      	str	r3, [r2, #24]
 801233c:	6993      	ldr	r3, [r2, #24]
 801233e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012342:	9301      	str	r3, [sp, #4]
 8012344:	9b01      	ldr	r3, [sp, #4]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8012346:	6993      	ldr	r3, [r2, #24]
 8012348:	049b      	lsls	r3, r3, #18
 801234a:	d5fc      	bpl.n	8012346 <main+0xde>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801234c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8012350:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012352:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8012354:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8012356:	2408      	movs	r4, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8012358:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 801235a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 801235c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 801235e:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLR = 2;
 8012360:	961a      	str	r6, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8012362:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8012364:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012366:	e9cd 720b 	strd	r7, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 5;
 801236a:	2205      	movs	r2, #5
 801236c:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 801236e:	22a0      	movs	r2, #160	@ 0xa0
 8012370:	e9cd 2617 	strd	r2, r6, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8012374:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012376:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 801237a:	9219      	str	r2, [sp, #100]	@ 0x64
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 801237c:	f009 fc5a 	bl	801bc34 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 8012380:	2800      	cmp	r0, #0
 8012382:	f040 80af 	bne.w	80124e4 <main+0x27c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8012386:	233f      	movs	r3, #63	@ 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8012388:	f04f 0840 	mov.w	r8, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801238c:	f04f 0903 	mov.w	r9, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8012390:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8012392:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8012394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8012398:	4631      	mov	r1, r6
 801239a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801239c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801239e:	f8cd 9010 	str.w	r9, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80123a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80123a6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80123a8:	e9cd 8807 	strd	r8, r8, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80123ac:	f009 ffc4 	bl	801c338 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 80123b0:	4605      	mov	r5, r0
 80123b2:	2800      	cmp	r0, #0
 80123b4:	f040 8096 	bne.w	80124e4 <main+0x27c>
  __HAL_RCC_CSI_ENABLE();
 80123b8:	4c50      	ldr	r4, [pc, #320]	@ (80124fc <main+0x294>)
 80123ba:	6823      	ldr	r3, [r4, #0]
 80123bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123c0:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80123c2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80123c6:	f043 0302 	orr.w	r3, r3, #2
 80123ca:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 80123ce:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80123d2:	f003 0302 	and.w	r3, r3, #2
 80123d6:	9302      	str	r3, [sp, #8]
 80123d8:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 80123da:	f005 fa33 	bl	8017844 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 80123de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80123e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80123e6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80123ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  App_Config_Ptr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 80123ee:	4c44      	ldr	r4, [pc, #272]	@ (8012500 <main+0x298>)
  __HAL_RCC_CRC_CLK_ENABLE();
 80123f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  App_Config_Ptr->error = app_postprocess_init( App_Config_Ptr );
 80123f4:	4620      	mov	r0, r4
  App_Config_Ptr->error = AI_OBJDETECT_POSTPROCESS_ERROR_NO;
 80123f6:	6465      	str	r5, [r4, #68]	@ 0x44
  __HAL_RCC_CRC_CLK_ENABLE();
 80123f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  App_Config_Ptr->lut=pixel_conv_lut;
 80123fc:	4b41      	ldr	r3, [pc, #260]	@ (8012504 <main+0x29c>)
  App_Config_Ptr->new_frame_ready=0;
 80123fe:	7325      	strb	r5, [r4, #12]
  App_Config_Ptr->lut=pixel_conv_lut;
 8012400:	6363      	str	r3, [r4, #52]	@ 0x34
  App_Config_Ptr->nn_output_labels=classes_table;
 8012402:	4b41      	ldr	r3, [pc, #260]	@ (8012508 <main+0x2a0>)
  App_Config_Ptr->lcd_sync=0;
 8012404:	6225      	str	r5, [r4, #32]
  App_Config_Ptr->nn_output_labels=classes_table;
 8012406:	6423      	str	r3, [r4, #64]	@ 0x40
  App_Config_Ptr->output.pOutBuff = out_postproc;
 8012408:	4b40      	ldr	r3, [pc, #256]	@ (801250c <main+0x2a4>)
  App_Config_Ptr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 801240a:	6127      	str	r7, [r4, #16]
  App_Config_Ptr->output.pOutBuff = out_postproc;
 801240c:	6623      	str	r3, [r4, #96]	@ 0x60
  App_Config_Ptr->nn_output_type= QUANT_OUTPUT_TYPE;
 801240e:	e9c4 790e 	strd	r7, r9, [r4, #56]	@ 0x38
  App_Config_Ptr->PixelFormatConv=HW_PFC;
 8012412:	e9c4 7706 	strd	r7, r7, [r4, #24]
  App_Config_Ptr->error = app_postprocess_init( App_Config_Ptr );
 8012416:	f7ff fe5b 	bl	80120d0 <app_postprocess_init>
 801241a:	4605      	mov	r5, r0
 801241c:	6460      	str	r0, [r4, #68]	@ 0x44
  if (App_Config_Ptr->error != AI_OBJDETECT_POSTPROCESS_ERROR_NO)
 801241e:	b100      	cbz	r0, 8012422 <main+0x1ba>
    while(1);
 8012420:	e7fe      	b.n	8012420 <main+0x1b8>
  App_Config_Ptr->lcd_frame_read_buff=lcd_display_global_memory;
 8012422:	4a3b      	ldr	r2, [pc, #236]	@ (8012510 <main+0x2a8>)
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 8012424:	4601      	mov	r1, r0
  App_Config_Ptr->camera_capture_buffer = CapturedImage_Buffer;
 8012426:	4b3b      	ldr	r3, [pc, #236]	@ (8012514 <main+0x2ac>)
  App_Config_Ptr->lcd_frame_read_buff=lcd_display_global_memory;
 8012428:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  App_Config_Ptr->lcd_frame_write_buff=lcd_display_global_memory + SDRAM_BANK_SIZE;
 801242c:	f502 0200 	add.w	r2, r2, #8388608	@ 0x800000
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 8012430:	4618      	mov	r0, r3
  App_Config_Ptr->camera_capture_buffer = CapturedImage_Buffer;
 8012432:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  App_Config_Ptr->lcd_frame_write_buff=lcd_display_global_memory + SDRAM_BANK_SIZE;
 8012436:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  App_Config_Ptr->nn_input_buffer = NN_InputImage_Buffer; 
 801243a:	4a37      	ldr	r2, [pc, #220]	@ (8012518 <main+0x2b0>)
 801243c:	6812      	ldr	r2, [r2, #0]
 801243e:	67a2      	str	r2, [r4, #120]	@ 0x78
  App_Config_Ptr->nn_output_buffer[0]=NN_OutputData_Buffer;
 8012440:	4a36      	ldr	r2, [pc, #216]	@ (801251c <main+0x2b4>)
 8012442:	6812      	ldr	r2, [r2, #0]
 8012444:	66e2      	str	r2, [r4, #108]	@ 0x6c
  App_Config_Ptr->camera_capture_buffer_no_borders = App_Config_Ptr->camera_capture_buffer+((CAM_RES_WIDTH - CAM_RES_HEIGHT)/2)*CAM_RES_WIDTH*RGB_565_BPP;
 8012446:	f503 32c8 	add.w	r2, r3, #102400	@ 0x19000
 801244a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  App_Config_Ptr->rescaled_image_buffer = RescaledImage_Buffer;
 801244e:	4a34      	ldr	r2, [pc, #208]	@ (8012520 <main+0x2b8>)
 8012450:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  App_Config_Ptr->activation_buffer = NN_Activation_Buffer;
 8012454:	4a33      	ldr	r2, [pc, #204]	@ (8012524 <main+0x2bc>)
 8012456:	67e2      	str	r2, [r4, #124]	@ 0x7c
  memset(App_Config_Ptr->camera_capture_buffer, 0x00, CAM_FRAME_BUFFER_SIZE);
 8012458:	f44f 2216 	mov.w	r2, #614400	@ 0x96000
 801245c:	f022 fbf1 	bl	8034c42 <memset>
  Utility_DCache_Coherency_Maintenance((void *)(App_Config_Ptr->camera_capture_buffer), CAM_FRAME_BUFFER_SIZE, CLEAN);
 8012460:	f44f 2116 	mov.w	r1, #614400	@ 0x96000
 8012464:	4632      	mov	r2, r6
 8012466:	f7ff feb7 	bl	80121d8 <Utility_DCache_Coherency_Maintenance>
  BSP_LED_Init(LED_GREEN);
 801246a:	4628      	mov	r0, r5
 801246c:	f003 f9d2 	bl	8015814 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8012470:	4638      	mov	r0, r7
 8012472:	f003 f9cf 	bl	8015814 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8012476:	4630      	mov	r0, r6
 8012478:	f003 f9cc 	bl	8015814 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 801247c:	4648      	mov	r0, r9
 801247e:	f003 f9c9 	bl	8015814 <BSP_LED_Init>
  Display_Init(App_Config_Ptr);
 8012482:	4620      	mov	r0, r4
 8012484:	f7ff fa56 	bl	8011934 <Display_Init>
  Camera_Init(App_Config_Ptr); 
 8012488:	4620      	mov	r0, r4
 801248a:	f7ff f967 	bl	801175c <Camera_Init>
  Network_Init(&App_Config);
 801248e:	4620      	mov	r0, r4
 8012490:	f7ff fe06 	bl	80120a0 <Network_Init>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8012494:	4924      	ldr	r1, [pc, #144]	@ (8012528 <main+0x2c0>)
 8012496:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 801249a:	4628      	mov	r0, r5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 801249c:	f881 8002 	strb.w	r8, [r1, #2]
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80124a0:	800b      	strh	r3, [r1, #0]
  if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 80124a2:	f004 ff4f 	bl	8017344 <BSP_QSPI_Init>
 80124a6:	b100      	cbz	r0, 80124aa <main+0x242>
    while(1);
 80124a8:	e7fe      	b.n	80124a8 <main+0x240>
    if(BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80124aa:	f005 f92f 	bl	801770c <BSP_QSPI_EnableMemoryMappedMode>
 80124ae:	b100      	cbz	r0, 80124b2 <main+0x24a>
      while(1);
 80124b0:	e7fe      	b.n	80124b0 <main+0x248>
  Display_WelcomeScreen(&App_Config);
 80124b2:	4620      	mov	r0, r4
 80124b4:	f7ff fa88 	bl	80119c8 <Display_WelcomeScreen>
    Camera_GetNextReadyFrame(&App_Config);
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7ff f945 	bl	8011748 <Camera_GetNextReadyFrame>
    Display_CameraPreview(&App_Config);
 80124be:	4620      	mov	r0, r4
 80124c0:	f7ff fb22 	bl	8011b08 <Display_CameraPreview>
    Network_Preprocess(&App_Config);
 80124c4:	4620      	mov	r0, r4
 80124c6:	f7ff fccb 	bl	8011e60 <Network_Preprocess>
    Camera_StartNewFrameAcquisition(&App_Config);
 80124ca:	4620      	mov	r0, r4
 80124cc:	f7ff f940 	bl	8011750 <Camera_StartNewFrameAcquisition>
    Network_Inference(&App_Config);
 80124d0:	4620      	mov	r0, r4
 80124d2:	f7ff fd5f 	bl	8011f94 <Network_Inference>
    Network_Postprocess(&App_Config);  
 80124d6:	4620      	mov	r0, r4
 80124d8:	f7ff fd6c 	bl	8011fb4 <Network_Postprocess>
    Display_NetworkOutput(&App_Config);
 80124dc:	4620      	mov	r0, r4
 80124de:	f7ff fb53 	bl	8011b88 <Display_NetworkOutput>
  while(1)
 80124e2:	e7e9      	b.n	80124b8 <main+0x250>
    Error_Handler();
 80124e4:	f7ff feae 	bl	8012244 <Error_Handler>
 80124e8:	03010018 	.word	0x03010018
 80124ec:	01010000 	.word	0x01010000
 80124f0:	e000ed00 	.word	0xe000ed00
 80124f4:	58000400 	.word	0x58000400
 80124f8:	58024800 	.word	0x58024800
 80124fc:	58024400 	.word	0x58024400
 8012500:	d0aa1298 	.word	0xd0aa1298
 8012504:	24008b18 	.word	0x24008b18
 8012508:	240081ac 	.word	0x240081ac
 801250c:	d0a792c0 	.word	0xd0a792c0
 8012510:	d0000000 	.word	0xd0000000
 8012514:	d09c32c0 	.word	0xd09c32c0
 8012518:	240084e0 	.word	0x240084e0
 801251c:	240084c0 	.word	0x240084c0
 8012520:	d0a592c0 	.word	0xd0a592c0
 8012524:	240081a0 	.word	0x240081a0
 8012528:	24008b14 	.word	0x24008b14

0801252c <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop

08012530 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop

08012534 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8012534:	e7fe      	b.n	8012534 <HardFault_Handler>
 8012536:	bf00      	nop

08012538 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8012538:	e7fe      	b.n	8012538 <MemManage_Handler>
 801253a:	bf00      	nop

0801253c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801253c:	e7fe      	b.n	801253c <BusFault_Handler>
 801253e:	bf00      	nop

08012540 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8012540:	e7fe      	b.n	8012540 <UsageFault_Handler>
 8012542:	bf00      	nop

08012544 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop

08012548 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop

0801254c <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop

08012550 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8012550:	f005 b94e 	b.w	80177f0 <HAL_IncTick>

08012554 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8012554:	2000      	movs	r0, #0
 8012556:	f004 b905 	b.w	8016764 <BSP_CAMERA_DMA_IRQHandler>
 801255a:	bf00      	nop

0801255c <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 801255c:	2000      	movs	r0, #0
 801255e:	f004 b8fb 	b.w	8016758 <BSP_CAMERA_IRQHandler>
 8012562:	bf00      	nop

08012564 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 8012564:	4801      	ldr	r0, [pc, #4]	@ (801256c <MDMA_IRQHandler+0x8>)
 8012566:	f008 be57 	b.w	801b218 <HAL_MDMA_IRQHandler>
 801256a:	bf00      	nop
 801256c:	24008aa8 	.word	0x24008aa8

08012570 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8012570:	4801      	ldr	r0, [pc, #4]	@ (8012578 <DSI_IRQHandler+0x8>)
 8012572:	f007 b895 	b.w	80196a0 <HAL_DSI_IRQHandler>
 8012576:	bf00      	nop
 8012578:	24009984 	.word	0x24009984

0801257c <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 801257c:	4801      	ldr	r0, [pc, #4]	@ (8012584 <DMA2D_IRQHandler+0x8>)
 801257e:	f006 becd 	b.w	801931c <HAL_DMA2D_IRQHandler>
 8012582:	bf00      	nop
 8012584:	2400991c 	.word	0x2400991c

08012588 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8012588:	4801      	ldr	r0, [pc, #4]	@ (8012590 <LTDC_IRQHandler+0x8>)
 801258a:	f008 bc13 	b.w	801adb4 <HAL_LTDC_IRQHandler>
 801258e:	bf00      	nop
 8012590:	24009874 	.word	0x24009874

08012594 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8012594:	4994      	ldr	r1, [pc, #592]	@ (80127e8 <SystemInit+0x254>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012596:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8012598:	4b94      	ldr	r3, [pc, #592]	@ (80127ec <SystemInit+0x258>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801259a:	4895      	ldr	r0, [pc, #596]	@ (80127f0 <SystemInit+0x25c>)
{
 801259c:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 801259e:	f8d1 4088 	ldr.w	r4, [r1, #136]	@ 0x88
{
 80125a2:	b082      	sub	sp, #8

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80125a4:	4d93      	ldr	r5, [pc, #588]	@ (80127f4 <SystemInit+0x260>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80125a6:	f444 0470 	orr.w	r4, r4, #15728640	@ 0xf00000
 80125aa:	f8c1 4088 	str.w	r4, [r1, #136]	@ 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80125ae:	690c      	ldr	r4, [r1, #16]
 80125b0:	f044 0404 	orr.w	r4, r4, #4
 80125b4:	610c      	str	r4, [r1, #16]
  EXTI_D2->EMR3 |= 0x4000UL;
 80125b6:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  RCC->CR |= RCC_CR_HSION;
 80125ba:	6819      	ldr	r1, [r3, #0]
 80125bc:	f041 0101 	orr.w	r1, r1, #1
 80125c0:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80125c2:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80125c4:	6819      	ldr	r1, [r3, #0]
 80125c6:	4008      	ands	r0, r1
 80125c8:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80125ca:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80125cc:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80125ce:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80125d0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x00000000;
 80125d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80125d4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 80125d6:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x00000000;
 80125d8:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 80125da:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80125dc:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 80125de:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80125e0:	6819      	ldr	r1, [r3, #0]
 80125e2:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80125e6:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80125e8:	661a      	str	r2, [r3, #96]	@ 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 80125ea:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 80125ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80125f2:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80125f6:	682b      	ldr	r3, [r5, #0]
 80125f8:	f36f 030f 	bfc	r3, #0, #16
 80125fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012600:	d203      	bcs.n	801260a <SystemInit+0x76>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8012602:	4b7d      	ldr	r3, [pc, #500]	@ (80127f8 <SystemInit+0x264>)
 8012604:	2201      	movs	r2, #1
 8012606:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 801260a:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 801260c:	4d77      	ldr	r5, [pc, #476]	@ (80127ec <SystemInit+0x258>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 801260e:	497b      	ldr	r1, [pc, #492]	@ (80127fc <SystemInit+0x268>)
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8012610:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
  __IO uint32_t tmp = 0;
 8012614:	9300      	str	r3, [sp, #0]
  RCC->AHB4ENR |= 0x000001F8;
 8012616:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
  GPIOE->AFR[0] = 0xC00000CC;
 801261a:	4a79      	ldr	r2, [pc, #484]	@ (8012800 <SystemInit+0x26c>)
  RCC->AHB4ENR |= 0x000001F8;
 801261c:	f440 70fc 	orr.w	r0, r0, #504	@ 0x1f8
  GPIOE->OTYPER = 0x00000000;
  /* Configure PEx pins in Pull-up */
  GPIOE->PUPDR = 0x55554005;

  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0] = 0x00CCCCCC;
 8012620:	4c78      	ldr	r4, [pc, #480]	@ (8012804 <SystemInit+0x270>)
 8012622:	4f79      	ldr	r7, [pc, #484]	@ (8012808 <SystemInit+0x274>)
  RCC->AHB4ENR |= 0x000001F8;
 8012624:	f8c5 00e0 	str.w	r0, [r5, #224]	@ 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8012628:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
  GPIOF->AFR[1] = 0xCCCCC000;
 801262c:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 801286c <SystemInit+0x2d8>
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8012630:	f000 0010 	and.w	r0, r0, #16
 8012634:	9000      	str	r0, [sp, #0]
  GPIOD->AFR[0] = 0x000000CC;
 8012636:	20cc      	movs	r0, #204	@ 0xcc
 8012638:	6208      	str	r0, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 801263a:	4874      	ldr	r0, [pc, #464]	@ (801280c <SystemInit+0x278>)
 801263c:	6248      	str	r0, [r1, #36]	@ 0x24
  GPIOD->MODER = 0xAFEAFFFA;
 801263e:	4874      	ldr	r0, [pc, #464]	@ (8012810 <SystemInit+0x27c>)
 8012640:	6008      	str	r0, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8012642:	4874      	ldr	r0, [pc, #464]	@ (8012814 <SystemInit+0x280>)
 8012644:	6088      	str	r0, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 8012646:	4874      	ldr	r0, [pc, #464]	@ (8012818 <SystemInit+0x284>)
  GPIOD->OTYPER = 0x00000000;
 8012648:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 801264a:	60c8      	str	r0, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 801264c:	4973      	ldr	r1, [pc, #460]	@ (801281c <SystemInit+0x288>)
  GPIOF->OTYPER = 0x00000000;
  /* Configure PFx pins in Pull-up */
  GPIOF->PUPDR = 0x55400555;

  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0] = 0x00CCCCCC;
 801264e:	4874      	ldr	r0, [pc, #464]	@ (8012820 <SystemInit+0x28c>)
  GPIOE->AFR[0] = 0xC00000CC;
 8012650:	6211      	str	r1, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8012652:	4974      	ldr	r1, [pc, #464]	@ (8012824 <SystemInit+0x290>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8012654:	6256      	str	r6, [r2, #36]	@ 0x24
  GPIOE->MODER = 0xAAAABFFA;
 8012656:	6011      	str	r1, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8012658:	4973      	ldr	r1, [pc, #460]	@ (8012828 <SystemInit+0x294>)
 801265a:	6091      	str	r1, [r2, #8]
  GPIOE->PUPDR = 0x55554005;
 801265c:	4973      	ldr	r1, [pc, #460]	@ (801282c <SystemInit+0x298>)
  GPIOE->OTYPER = 0x00000000;
 801265e:	6053      	str	r3, [r2, #4]
  GPIOE->PUPDR = 0x55554005;
 8012660:	60d1      	str	r1, [r2, #12]
  GPIOH->OTYPER = 0x00000000;
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8012662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  GPIOF->AFR[0] = 0x00CCCCCC;
 8012666:	6227      	str	r7, [r4, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8012668:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
  GPIOF->MODER = 0xAABFFAAA;
 801266c:	f8df c200 	ldr.w	ip, [pc, #512]	@ 8012870 <SystemInit+0x2dc>
  GPIOH->AFR[0] = 0xCCC00000;
 8012670:	496f      	ldr	r1, [pc, #444]	@ (8012830 <SystemInit+0x29c>)
  GPIOF->MODER = 0xAABFFAAA;
 8012672:	f8c4 c000 	str.w	ip, [r4]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8012676:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 8012874 <SystemInit+0x2e0>
 801267a:	f8c4 c008 	str.w	ip, [r4, #8]
  GPIOF->PUPDR = 0x55400555;
 801267e:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8012878 <SystemInit+0x2e4>
  GPIOF->OTYPER = 0x00000000;
 8012682:	6063      	str	r3, [r4, #4]
  GPIOF->PUPDR = 0x55400555;
 8012684:	f8c4 c00c 	str.w	ip, [r4, #12]
  GPIOG->AFR[1] = 0xC000000C;
 8012688:	4c6a      	ldr	r4, [pc, #424]	@ (8012834 <SystemInit+0x2a0>)
  GPIOG->AFR[0] = 0x00CCCCCC;
 801268a:	6207      	str	r7, [r0, #32]
  GPIOG->AFR[1] = 0xC000000C;
 801268c:	6244      	str	r4, [r0, #36]	@ 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 801268e:	f5a4 3482 	sub.w	r4, r4, #66560	@ 0x10400
 8012692:	f5a4 74b1 	sub.w	r4, r4, #354	@ 0x162
 8012696:	6004      	str	r4, [r0, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8012698:	f504 2482 	add.w	r4, r4, #266240	@ 0x41000
 801269c:	f204 5455 	addw	r4, r4, #1365	@ 0x555
 80126a0:	6084      	str	r4, [r0, #8]
  GPIOG->PUPDR = 0x40010555;
 80126a2:	4c65      	ldr	r4, [pc, #404]	@ (8012838 <SystemInit+0x2a4>)
  GPIOG->OTYPER = 0x00000000;
 80126a4:	6043      	str	r3, [r0, #4]
  GPIOG->PUPDR = 0x40010555;
 80126a6:	60c4      	str	r4, [r0, #12]
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 80126a8:	f240 1465 	movw	r4, #357	@ 0x165
  GPIOH->AFR[0] = 0xCCC00000;
 80126ac:	4863      	ldr	r0, [pc, #396]	@ (801283c <SystemInit+0x2a8>)
 80126ae:	6208      	str	r0, [r1, #32]
  GPIOH->MODER = 0xAAAAABFF;
 80126b0:	4863      	ldr	r0, [pc, #396]	@ (8012840 <SystemInit+0x2ac>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 80126b2:	624e      	str	r6, [r1, #36]	@ 0x24
  GPIOH->MODER = 0xAAAAABFF;
 80126b4:	6008      	str	r0, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 80126b6:	4863      	ldr	r0, [pc, #396]	@ (8012844 <SystemInit+0x2b0>)
 80126b8:	6088      	str	r0, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 80126ba:	4863      	ldr	r0, [pc, #396]	@ (8012848 <SystemInit+0x2b4>)
  GPIOH->OTYPER = 0x00000000;
 80126bc:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 80126be:	60c8      	str	r0, [r1, #12]
  GPIOI->AFR[1] = 0x00000CC0;
 80126c0:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
  GPIOI->MODER = 0xFFEBAAAA;
 80126c4:	4861      	ldr	r0, [pc, #388]	@ (801284c <SystemInit+0x2b8>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 80126c6:	6216      	str	r6, [r2, #32]
  GPIOI->AFR[1] = 0x00000CC0;
 80126c8:	6251      	str	r1, [r2, #36]	@ 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 80126ca:	6010      	str	r0, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 80126cc:	4960      	ldr	r1, [pc, #384]	@ (8012850 <SystemInit+0x2bc>)
  GPIOI->PUPDR = 0x00145555;
 80126ce:	4861      	ldr	r0, [pc, #388]	@ (8012854 <SystemInit+0x2c0>)
  GPIOI->OSPEEDR = 0x003CFFFF;
 80126d0:	6091      	str	r1, [r2, #8]
  GPIOI->OTYPER = 0x00000000;
 80126d2:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 80126d4:	60d0      	str	r0, [r2, #12]
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 80126d6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 80126da:	f8d5 30d4 	ldr.w	r3, [r5, #212]	@ 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 80126de:	495e      	ldr	r1, [pc, #376]	@ (8012858 <SystemInit+0x2c4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 80126e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 80126e4:	485d      	ldr	r0, [pc, #372]	@ (801285c <SystemInit+0x2c8>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 80126e6:	f8c5 30d4 	str.w	r3, [r5, #212]	@ 0xd4
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 80126ea:	2309      	movs	r3, #9
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 80126ec:	640a      	str	r2, [r1, #64]	@ 0x40
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 80126ee:	4a5c      	ldr	r2, [pc, #368]	@ (8012860 <SystemInit+0x2cc>)
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 80126f0:	644c      	str	r4, [r1, #68]	@ 0x44
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 80126f2:	6488      	str	r0, [r1, #72]	@ 0x48
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 80126f4:	64ca      	str	r2, [r1, #76]	@ 0x4c
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 80126f6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80126f8:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 80126fa:	f013 0320 	ands.w	r3, r3, #32
 80126fe:	d060      	beq.n	80127c2 <SystemInit+0x22e>
 8012700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012704:	e001      	b.n	801270a <SystemInit+0x176>
 8012706:	3a01      	subs	r2, #1
 8012708:	d054      	beq.n	80127b4 <SystemInit+0x220>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 801270a:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 801270c:	f013 0320 	ands.w	r3, r3, #32
 8012710:	d1f9      	bne.n	8012706 <SystemInit+0x172>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8012712:	9301      	str	r3, [sp, #4]
 8012714:	9b01      	ldr	r3, [sp, #4]
 8012716:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801271a:	d25f      	bcs.n	80127dc <SystemInit+0x248>
 801271c:	2100      	movs	r1, #0
 801271e:	9b01      	ldr	r3, [sp, #4]
 8012720:	3301      	adds	r3, #1
 8012722:	9301      	str	r3, [sp, #4]
 8012724:	9b01      	ldr	r3, [sp, #4]
 8012726:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801272a:	d3f8      	bcc.n	801271e <SystemInit+0x18a>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 801272c:	4b4a      	ldr	r3, [pc, #296]	@ (8012858 <SystemInit+0x2c4>)
 801272e:	220a      	movs	r2, #10
 8012730:	651a      	str	r2, [r3, #80]	@ 0x50
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8012732:	2900      	cmp	r1, #0
 8012734:	d054      	beq.n	80127e0 <SystemInit+0x24c>
  for (index = 0; index < 1000; index++)
 8012736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 801273a:	4947      	ldr	r1, [pc, #284]	@ (8012858 <SystemInit+0x2c4>)
 801273c:	e001      	b.n	8012742 <SystemInit+0x1ae>
  while ((tmpreg != 0) && (timeout-- > 0))
 801273e:	3b01      	subs	r3, #1
 8012740:	d01e      	beq.n	8012780 <SystemInit+0x1ec>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8012742:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8012744:	0690      	lsls	r0, r2, #26
 8012746:	d4fa      	bmi.n	801273e <SystemInit+0x1aa>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8012748:	23eb      	movs	r3, #235	@ 0xeb
 801274a:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 801274c:	4b42      	ldr	r3, [pc, #264]	@ (8012858 <SystemInit+0x2c4>)
 801274e:	4a45      	ldr	r2, [pc, #276]	@ (8012864 <SystemInit+0x2d0>)
 8012750:	651a      	str	r2, [r3, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8012752:	4b41      	ldr	r3, [pc, #260]	@ (8012858 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8012754:	f640 4206 	movw	r2, #3078	@ 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8012758:	4943      	ldr	r1, [pc, #268]	@ (8012868 <SystemInit+0x2d4>)
  tmpreg = FMC_Bank5_6_R->SDRTR;
 801275a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801275c:	4822      	ldr	r0, [pc, #136]	@ (80127e8 <SystemInit+0x254>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 801275e:	4322      	orrs	r2, r4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012760:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8012764:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8012766:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 8012768:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801276c:	645a      	str	r2, [r3, #68]	@ 0x44
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 801276e:	680b      	ldr	r3, [r1, #0]
 8012770:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012774:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8012776:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012778:	6084      	str	r4, [r0, #8]
}
 801277a:	b002      	add	sp, #8
 801277c:	bcf0      	pop	{r4, r5, r6, r7}
 801277e:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8012780:	22eb      	movs	r2, #235	@ 0xeb
 8012782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8012786:	4834      	ldr	r0, [pc, #208]	@ (8012858 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8012788:	650a      	str	r2, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 801278a:	e001      	b.n	8012790 <SystemInit+0x1fc>
 801278c:	3b01      	subs	r3, #1
 801278e:	d005      	beq.n	801279c <SystemInit+0x208>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8012790:	6d82      	ldr	r2, [r0, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8012792:	0691      	lsls	r1, r2, #26
 8012794:	d4fa      	bmi.n	801278c <SystemInit+0x1f8>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8012796:	4b33      	ldr	r3, [pc, #204]	@ (8012864 <SystemInit+0x2d0>)
 8012798:	6503      	str	r3, [r0, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 801279a:	e7da      	b.n	8012752 <SystemInit+0x1be>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 801279c:	4a31      	ldr	r2, [pc, #196]	@ (8012864 <SystemInit+0x2d0>)
 801279e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80127a2:	492d      	ldr	r1, [pc, #180]	@ (8012858 <SystemInit+0x2c4>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80127a4:	6502      	str	r2, [r0, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80127a6:	e001      	b.n	80127ac <SystemInit+0x218>
 80127a8:	3b01      	subs	r3, #1
 80127aa:	d0d2      	beq.n	8012752 <SystemInit+0x1be>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80127ac:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 80127ae:	0692      	lsls	r2, r2, #26
 80127b0:	d5cf      	bpl.n	8012752 <SystemInit+0x1be>
 80127b2:	e7f9      	b.n	80127a8 <SystemInit+0x214>
  for (index = 0; index < 1000; index++)
 80127b4:	9201      	str	r2, [sp, #4]
 80127b6:	9b01      	ldr	r3, [sp, #4]
 80127b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80127bc:	d20b      	bcs.n	80127d6 <SystemInit+0x242>
 80127be:	2120      	movs	r1, #32
 80127c0:	e7ad      	b.n	801271e <SystemInit+0x18a>
 80127c2:	9301      	str	r3, [sp, #4]
 80127c4:	9b01      	ldr	r3, [sp, #4]
 80127c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80127ca:	d3a7      	bcc.n	801271c <SystemInit+0x188>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80127cc:	220a      	movs	r2, #10
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80127ce:	23eb      	movs	r3, #235	@ 0xeb
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80127d0:	650a      	str	r2, [r1, #80]	@ 0x50
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80127d2:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80127d4:	e7ba      	b.n	801274c <SystemInit+0x1b8>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80127d6:	230a      	movs	r3, #10
 80127d8:	650b      	str	r3, [r1, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80127da:	e7ac      	b.n	8012736 <SystemInit+0x1a2>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80127dc:	230a      	movs	r3, #10
 80127de:	650b      	str	r3, [r1, #80]	@ 0x50
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80127e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012858 <SystemInit+0x2c4>)
 80127e2:	22eb      	movs	r2, #235	@ 0xeb
 80127e4:	651a      	str	r2, [r3, #80]	@ 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80127e6:	e7b1      	b.n	801274c <SystemInit+0x1b8>
 80127e8:	e000ed00 	.word	0xe000ed00
 80127ec:	58024400 	.word	0x58024400
 80127f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80127f4:	5c001000 	.word	0x5c001000
 80127f8:	51008000 	.word	0x51008000
 80127fc:	58020c00 	.word	0x58020c00
 8012800:	58021000 	.word	0x58021000
 8012804:	58021400 	.word	0x58021400
 8012808:	00cccccc 	.word	0x00cccccc
 801280c:	cc000ccc 	.word	0xcc000ccc
 8012810:	afeafffa 	.word	0xafeafffa
 8012814:	f03f000f 	.word	0xf03f000f
 8012818:	50150005 	.word	0x50150005
 801281c:	c00000cc 	.word	0xc00000cc
 8012820:	58021800 	.word	0x58021800
 8012824:	aaaabffa 	.word	0xaaaabffa
 8012828:	ffffc00f 	.word	0xffffc00f
 801282c:	55554005 	.word	0x55554005
 8012830:	58021c00 	.word	0x58021c00
 8012834:	c000000c 	.word	0xc000000c
 8012838:	40010555 	.word	0x40010555
 801283c:	ccc00000 	.word	0xccc00000
 8012840:	aaaaabff 	.word	0xaaaaabff
 8012844:	fffffc00 	.word	0xfffffc00
 8012848:	55555400 	.word	0x55555400
 801284c:	ffebaaaa 	.word	0xffebaaaa
 8012850:	003cffff 	.word	0x003cffff
 8012854:	00145555 	.word	0x00145555
 8012858:	52004100 	.word	0x52004100
 801285c:	00105000 	.word	0x00105000
 8012860:	01010351 	.word	0x01010351
 8012864:	0004400c 	.word	0x0004400c
 8012868:	52004000 	.word	0x52004000
 801286c:	ccccc000 	.word	0xccccc000
 8012870:	aabffaaa 	.word	0xaabffaaa
 8012874:	ffc00fff 	.word	0xffc00fff
 8012878:	55400555 	.word	0x55400555

0801287c <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 801287c:	b430      	push	{r4, r5}
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 801287e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012882:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8012886:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
{
 801288a:	4603      	mov	r3, r0
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 801288c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012890:	e9c0 5200 	strd	r5, r2, [r0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8012894:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8012898:	e9c0 4102 	strd	r4, r1, [r0, #8]
  return MT25TL01G_OK;
}
 801289c:	2000      	movs	r0, #0
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 801289e:	611a      	str	r2, [r3, #16]
}
 80128a0:	bc30      	pop	{r4, r5}
 80128a2:	4770      	bx	lr
 80128a4:	0000      	movs	r0, r0
	...

080128a8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80128a8:	b510      	push	{r4, lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80128aa:	f44f 7440 	mov.w	r4, #768	@ 0x300
{
 80128ae:	b094      	sub	sp, #80	@ 0x50
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80128b0:	2105      	movs	r1, #5
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80128b2:	2200      	movs	r2, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80128b4:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80128b6:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.DummyCycles       = 2;
 80128ba:	2302      	movs	r3, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80128bc:	9106      	str	r1, [sp, #24]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.Interval        = 0x10;
 80128be:	2110      	movs	r1, #16
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80128c0:	940f      	str	r4, [sp, #60]	@ 0x3c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80128c2:	f240 1401 	movw	r4, #257	@ 0x101
  s_command.DummyCycles       = 2;
 80128c6:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_config.StatusBytesSize = 2;
 80128c8:	9303      	str	r3, [sp, #12]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80128ca:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80128ce:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80128d0:	9200      	str	r2, [sp, #0]
  s_config.Interval        = 0x10;
 80128d2:	9102      	str	r1, [sp, #8]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80128d4:	a906      	add	r1, sp, #24
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80128d6:	9401      	str	r4, [sp, #4]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80128d8:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8012900 <MT25TL01G_AutoPollingMemReady+0x58>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80128dc:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80128e0:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80128e4:	466a      	mov	r2, sp
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80128e6:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80128ea:	f009 f841 	bl	801b970 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80128ee:	2800      	cmp	r0, #0

}
 80128f0:	bf14      	ite	ne
 80128f2:	f06f 0004 	mvnne.w	r0, #4
 80128f6:	2000      	moveq	r0, #0
 80128f8:	b014      	add	sp, #80	@ 0x50
 80128fa:	bd10      	pop	{r4, pc}
 80128fc:	f3af 8000 	nop.w
 8012900:	00000000 	.word	0x00000000
 8012904:	00400000 	.word	0x00400000

08012908 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8012908:	b530      	push	{r4, r5, lr}

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801290a:	2300      	movs	r3, #0
{
 801290c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 801290e:	2903      	cmp	r1, #3
{
 8012910:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012912:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012914:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 8012918:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801291a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 801291c:	9313      	str	r3, [sp, #76]	@ 0x4c
{
 801291e:	4605      	mov	r5, r0
  s_command.DataMode          = QSPI_DATA_NONE;
 8012920:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012924:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012928:	bf14      	ite	ne
 801292a:	f44f 7380 	movne.w	r3, #256	@ 0x100
 801292e:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 8012932:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8012934:	2306      	movs	r3, #6
 8012936:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012938:	f008 fe8a 	bl	801b650 <HAL_QSPI_Command>
 801293c:	bb30      	cbnz	r0, 801298c <MT25TL01G_WriteEnable+0x84>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 801293e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
 8012942:	2202      	movs	r2, #2
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8012944:	2c03      	cmp	r4, #3
  s_config.Interval        = 0x10;
 8012946:	f04f 0410 	mov.w	r4, #16
  s_config.StatusBytesSize = 2;
 801294a:	9203      	str	r2, [sp, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 801294c:	f04f 0200 	mov.w	r2, #0
  s_config.Interval        = 0x10;
 8012950:	9402      	str	r4, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8012952:	f04f 0405 	mov.w	r4, #5


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012956:	a906      	add	r1, sp, #24
 8012958:	4628      	mov	r0, r5
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 801295a:	9406      	str	r4, [sp, #24]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 801295c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8012960:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012964:	e9cd 2304 	strd	r2, r3, [sp, #16]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8012968:	bf14      	ite	ne
 801296a:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 801296e:	f04f 7240 	moveq.w	r2, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012972:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8012976:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012978:	466a      	mov	r2, sp
 801297a:	f008 fff9 	bl	801b970 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 801297e:	2800      	cmp	r0, #0
 8012980:	bf14      	ite	ne
 8012982:	f06f 0004 	mvnne.w	r0, #4
 8012986:	2000      	moveq	r0, #0
}
 8012988:	b015      	add	sp, #84	@ 0x54
 801298a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 801298c:	f06f 0001 	mvn.w	r0, #1
 8012990:	e7fa      	b.n	8012988 <MT25TL01G_WriteEnable+0x80>
 8012992:	bf00      	nop
 8012994:	0000      	movs	r0, r0
	...

08012998 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012998:	2903      	cmp	r1, #3
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801299a:	f04f 0300 	mov.w	r3, #0
{
 801299e:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80129a0:	bf18      	it	ne
 80129a2:	f44f 7280 	movne.w	r2, #256	@ 0x100
{
 80129a6:	b0a3      	sub	sp, #140	@ 0x8c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80129a8:	bf08      	it	eq
 80129aa:	f44f 7240 	moveq.w	r2, #768	@ 0x300
{
 80129ae:	4605      	mov	r5, r0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80129b0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80129b2:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80129b4:	22b7      	movs	r2, #183	@ 0xb7
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80129b6:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode          = QSPI_DATA_NONE;
 80129b8:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 80129ba:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80129bc:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80129be:	9206      	str	r2, [sp, #24]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80129c0:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80129c4:	f7ff ffa0 	bl	8012908 <MT25TL01G_WriteEnable>
 80129c8:	bb60      	cbnz	r0, 8012a24 <MT25TL01G_Enter4BytesAddressMode+0x8c>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80129ca:	4604      	mov	r4, r0
 80129cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80129d0:	a906      	add	r1, sp, #24
 80129d2:	4628      	mov	r0, r5
 80129d4:	f008 fe3c 	bl	801b650 <HAL_QSPI_Command>
 80129d8:	bb20      	cbnz	r0, 8012a24 <MT25TL01G_Enter4BytesAddressMode+0x8c>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80129da:	f44f 7140 	mov.w	r1, #768	@ 0x300
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80129de:	2205      	movs	r2, #5
  s_command.DummyCycles       = 2;
 80129e0:	2302      	movs	r3, #2
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80129e2:	4628      	mov	r0, r5
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80129e4:	9214      	str	r2, [sp, #80]	@ 0x50
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80129e6:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.DummyCycles       = 2;
 80129ea:	9319      	str	r3, [sp, #100]	@ 0x64
  s_config.StatusBytesSize = 2;
 80129ec:	9303      	str	r3, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80129ee:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80129f2:	9421      	str	r4, [sp, #132]	@ 0x84
  s_config.Match           = 0;
 80129f4:	9400      	str	r4, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80129f6:	e9cd 141a 	strd	r1, r4, [sp, #104]	@ 0x68
  s_config.Interval        = 0x10;
 80129fa:	2110      	movs	r1, #16
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80129fc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8012a30 <MT25TL01G_Enter4BytesAddressMode+0x98>
  s_config.Interval        = 0x10;
 8012a00:	9102      	str	r1, [sp, #8]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8012a02:	f240 1101 	movw	r1, #257	@ 0x101
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8012a06:	e9cd 421c 	strd	r4, r2, [sp, #112]	@ 0x70
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8012a0a:	9101      	str	r1, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a0c:	466a      	mov	r2, sp
 8012a0e:	a914      	add	r1, sp, #80	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012a10:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8012a14:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a18:	f008 ffaa 	bl	801b970 <HAL_QSPI_AutoPolling>
 8012a1c:	b910      	cbnz	r0, 8012a24 <MT25TL01G_Enter4BytesAddressMode+0x8c>
}
 8012a1e:	4620      	mov	r0, r4
 8012a20:	b023      	add	sp, #140	@ 0x8c
 8012a22:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8012a24:	f06f 0401 	mvn.w	r4, #1
 8012a28:	e7f9      	b.n	8012a1e <MT25TL01G_Enter4BytesAddressMode+0x86>
 8012a2a:	bf00      	nop
 8012a2c:	f3af 8000 	nop.w
 8012a30:	00000000 	.word	0x00000000
 8012a34:	00400000 	.word	0x00400000

08012a38 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8012a38:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8012a3a:	2135      	movs	r1, #53	@ 0x35
{
 8012a3c:	b08e      	sub	sp, #56	@ 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012a3e:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012a40:	f44f 7480 	mov.w	r4, #256	@ 0x100
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8012a44:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012a4a:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8012a4c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012a4e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012a50:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8012a54:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012a58:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a5c:	f008 fdf8 	bl	801b650 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8012a60:	2800      	cmp	r0, #0
}
 8012a62:	bf14      	ite	ne
 8012a64:	f06f 0001 	mvnne.w	r0, #1
 8012a68:	2000      	moveq	r0, #0
 8012a6a:	b00e      	add	sp, #56	@ 0x38
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	bf00      	nop

08012a70 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8012a70:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8012a72:	21f5      	movs	r1, #245	@ 0xf5
{
 8012a74:	b08e      	sub	sp, #56	@ 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012a76:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012a78:	f44f 7480 	mov.w	r4, #256	@ 0x100
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8012a7c:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012a82:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8012a84:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012a86:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012a88:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8012a8c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012a90:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012a94:	f008 fddc 	bl	801b650 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8012a98:	2800      	cmp	r0, #0
}
 8012a9a:	bf14      	ite	ne
 8012a9c:	f06f 0001 	mvnne.w	r0, #1
 8012aa0:	2000      	moveq	r0, #0
 8012aa2:	b00e      	add	sp, #56	@ 0x38
 8012aa4:	bd10      	pop	{r4, pc}
 8012aa6:	bf00      	nop

08012aa8 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8012aa8:	b510      	push	{r4, lr}
 8012aaa:	b090      	sub	sp, #64	@ 0x40
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8012aac:	2903      	cmp	r1, #3
 8012aae:	d80c      	bhi.n	8012aca <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8012ab0:	e8df f001 	tbb	[pc, r1]
 8012ab4:	2802323c 	.word	0x2802323c
    s_command.DataMode          = QSPI_DATA_2_LINES;

    break;
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012ab8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012b40 <MT25TL01G_EnableMemoryMappedModeDTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8012abc:	22ee      	movs	r2, #238	@ 0xee
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012abe:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8012ac2:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012ac6:	ed8d 7b08 	vstr	d7, [sp, #32]
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8012aca:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8012ace:	2208      	movs	r2, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8012ad0:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8012ad2:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8012ad6:	9105      	str	r1, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8012ad8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8012adc:	9207      	str	r2, [sp, #28]

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012ade:	466a      	mov	r2, sp
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8012ae0:	910e      	str	r1, [sp, #56]	@ 0x38
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012ae2:	a902      	add	r1, sp, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8012ae4:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8012ae6:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012ae8:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8012aea:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8012b48 <MT25TL01G_EnableMemoryMappedModeDTR+0xa0>
 8012aee:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012af2:	f008 ffcb 	bl	801ba8c <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8012af6:	2800      	cmp	r0, #0
}
 8012af8:	bf14      	ite	ne
 8012afa:	f06f 0005 	mvnne.w	r0, #5
 8012afe:	2000      	moveq	r0, #0
 8012b00:	b010      	add	sp, #64	@ 0x40
 8012b02:	bd10      	pop	{r4, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8012b04:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012b50 <MT25TL01G_EnableMemoryMappedModeDTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8012b08:	22ed      	movs	r2, #237	@ 0xed
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012b0a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8012b0e:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012b10:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8012b12:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012b16:	e7d8      	b.n	8012aca <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b18:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8012b58 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8012b1c:	223d      	movs	r2, #61	@ 0x3d
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8012b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8012b22:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8012b24:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b26:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012b2a:	e7ce      	b.n	8012aca <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b2c:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8012b58 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8012b30:	220e      	movs	r2, #14
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8012b32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8012b36:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8012b38:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b3a:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012b3e:	e7c4      	b.n	8012aca <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8012b40:	00000100 	.word	0x00000100
 8012b44:	00000c00 	.word	0x00000c00
	...
 8012b50:	00000300 	.word	0x00000300
 8012b54:	00000c00 	.word	0x00000c00
 8012b58:	00000100 	.word	0x00000100
 8012b5c:	00000400 	.word	0x00000400

08012b60 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8012b60:	b500      	push	{lr}
 8012b62:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8012b64:	2903      	cmp	r1, #3
 8012b66:	d80c      	bhi.n	8012b82 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 8012b68:	e8df f001 	tbb	[pc, r1]
 8012b6c:	25022f39 	.word	0x25022f39

    break;

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012bf8 <MT25TL01G_EnableMemoryMappedModeSTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8012b74:	22ec      	movs	r2, #236	@ 0xec
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012b76:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8012b7a:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012b7e:	ed8d 7b08 	vstr	d7, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8012b82:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8012c00 <MT25TL01G_EnableMemoryMappedModeSTR+0xa0>
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8012b86:	2108      	movs	r1, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8012b88:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8012b8c:	2300      	movs	r3, #0
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8012b8e:	9107      	str	r1, [sp, #28]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012b90:	4469      	add	r1, sp
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8012b92:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012b94:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8012b96:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012b98:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012b9a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8012b9e:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8012ba2:	f008 ff73 	bl	801ba8c <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8012ba6:	2800      	cmp	r0, #0
}
 8012ba8:	bf14      	ite	ne
 8012baa:	f06f 0005 	mvnne.w	r0, #5
 8012bae:	2000      	moveq	r0, #0
 8012bb0:	b011      	add	sp, #68	@ 0x44
 8012bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8012bb6:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8012c08 <MT25TL01G_EnableMemoryMappedModeSTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8012bba:	22eb      	movs	r2, #235	@ 0xeb
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012bbc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8012bc0:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8012bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8012bc4:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012bc8:	e7db      	b.n	8012b82 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012bca:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8012c10 <MT25TL01G_EnableMemoryMappedModeSTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8012bce:	22bc      	movs	r2, #188	@ 0xbc
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8012bd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8012bd4:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8012bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012bd8:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012bdc:	e7d1      	b.n	8012b82 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012bde:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8012c18 <MT25TL01G_EnableMemoryMappedModeSTR+0xb8>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8012be2:	220c      	movs	r2, #12
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8012be4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8012be8:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8012bea:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8012bec:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8012bf0:	e7c7      	b.n	8012b82 <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 8012bf2:	bf00      	nop
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	00000100 	.word	0x00000100
 8012bfc:	00000c00 	.word	0x00000c00
	...
 8012c08:	00000300 	.word	0x00000300
 8012c0c:	00000c00 	.word	0x00000c00
 8012c10:	00000100 	.word	0x00000100
 8012c14:	00000800 	.word	0x00000800
 8012c18:	00000100 	.word	0x00000100
 8012c1c:	00000400 	.word	0x00000400

08012c20 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8012c20:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c22:	2903      	cmp	r1, #3
{
 8012c24:	b08e      	sub	sp, #56	@ 0x38
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8012c26:	f04f 0466 	mov.w	r4, #102	@ 0x66
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012c2a:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c32:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8012c34:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c36:	bf14      	ite	ne
 8012c38:	f44f 7480 	movne.w	r4, #256	@ 0x100
 8012c3c:	f44f 7440 	moveq.w	r4, #768	@ 0x300
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012c40:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012c42:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8012c44:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c48:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012c4c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012c50:	f008 fcfe 	bl	801b650 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8012c54:	2800      	cmp	r0, #0
}
 8012c56:	bf14      	ite	ne
 8012c58:	f06f 0001 	mvnne.w	r0, #1
 8012c5c:	2000      	moveq	r0, #0
 8012c5e:	b00e      	add	sp, #56	@ 0x38
 8012c60:	bd10      	pop	{r4, pc}
 8012c62:	bf00      	nop

08012c64 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8012c64:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c66:	2903      	cmp	r1, #3
{
 8012c68:	b08e      	sub	sp, #56	@ 0x38
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8012c6a:	f04f 0499 	mov.w	r4, #153	@ 0x99
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012c6e:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c76:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8012c78:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c7a:	bf14      	ite	ne
 8012c7c:	f44f 7480 	movne.w	r4, #256	@ 0x100
 8012c80:	f44f 7440 	moveq.w	r4, #768	@ 0x300
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8012c84:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8012c86:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8012c88:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8012c8c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8012c90:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8012c94:	f008 fcdc 	bl	801b650 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8012c98:	2800      	cmp	r0, #0
}
 8012c9a:	bf14      	ite	ne
 8012c9c:	f06f 0001 	mvnne.w	r0, #1
 8012ca0:	2000      	moveq	r0, #0
 8012ca2:	b00e      	add	sp, #56	@ 0x38
 8012ca4:	bd10      	pop	{r4, pc}
 8012ca6:	bf00      	nop

08012ca8 <NT35510_DeInit>:
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
  return NT35510_ERROR;
}
 8012ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop

08012cb0 <NT35510_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = NT35510Ctx.Brightness;
 8012cb0:	4b02      	ldr	r3, [pc, #8]	@ (8012cbc <NT35510_GetBrightness+0xc>)
  return NT35510_OK;  
}
 8012cb2:	2000      	movs	r0, #0
  *Brightness = NT35510Ctx.Brightness;
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	600b      	str	r3, [r1, #0]
}
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop
 8012cbc:	24008c18 	.word	0x24008c18

08012cc0 <NT35510_GetOrientation>:
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8012cc0:	4b02      	ldr	r3, [pc, #8]	@ (8012ccc <NT35510_GetOrientation+0xc>)
  
  return NT35510_OK;
}
 8012cc2:	2000      	movs	r0, #0
  *Orientation = NT35510Ctx.Orientation;
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	600b      	str	r3, [r1, #0]
}
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	24008c18 	.word	0x24008c18

08012cd0 <NT35510_GetXSize>:
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8012cd0:	4b05      	ldr	r3, [pc, #20]	@ (8012ce8 <NT35510_GetXSize+0x18>)
    *Xsize = NT35510_800X480_WIDTH;
    break;
  }
  
  return NT35510_OK;
}
 8012cd2:	2000      	movs	r0, #0
  switch(NT35510Ctx.Orientation)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4283      	cmp	r3, r0
 8012cd8:	bf0c      	ite	eq
 8012cda:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 8012cde:	f44f 7348 	movne.w	r3, #800	@ 0x320
    *Xsize = NT35510_480X800_WIDTH;
 8012ce2:	600b      	str	r3, [r1, #0]
}
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	24008c18 	.word	0x24008c18

08012cec <NT35510_GetYSize>:
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8012cec:	4b05      	ldr	r3, [pc, #20]	@ (8012d04 <NT35510_GetYSize+0x18>)
    *Ysize = NT35510_800X480_HEIGHT;
    break;
  }
  
  return NT35510_OK;
}
 8012cee:	2000      	movs	r0, #0
  switch(NT35510Ctx.Orientation)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	4283      	cmp	r3, r0
 8012cf4:	bf0c      	ite	eq
 8012cf6:	f44f 7348 	moveq.w	r3, #800	@ 0x320
 8012cfa:	f44f 73f0 	movne.w	r3, #480	@ 0x1e0
    *Ysize = NT35510_480X800_HEIGHT;
 8012cfe:	600b      	str	r3, [r1, #0]
}
 8012d00:	4770      	bx	lr
 8012d02:	bf00      	nop
 8012d04:	24008c18 	.word	0x24008c18

08012d08 <NT35510_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d08:	f04f 30ff 	mov.w	r0, #4294967295
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop

08012d10 <NT35510_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d10:	f04f 30ff 	mov.w	r0, #4294967295
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop

08012d18 <NT35510_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d18:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop

08012d20 <NT35510_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d20:	f04f 30ff 	mov.w	r0, #4294967295
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop

08012d28 <NT35510_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d28:	f04f 30ff 	mov.w	r0, #4294967295
 8012d2c:	4770      	bx	lr
 8012d2e:	bf00      	nop

08012d30 <NT35510_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
}
 8012d30:	f04f 30ff 	mov.w	r0, #4294967295
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop

08012d38 <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8012d38:	b410      	push	{r4}
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8012d3a:	6884      	ldr	r4, [r0, #8]
 8012d3c:	8800      	ldrh	r0, [r0, #0]
 8012d3e:	46a4      	mov	ip, r4
}
 8012d40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8012d44:	4760      	bx	ip
 8012d46:	bf00      	nop

08012d48 <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8012d48:	b410      	push	{r4}
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8012d4a:	6844      	ldr	r4, [r0, #4]
 8012d4c:	8800      	ldrh	r0, [r0, #0]
 8012d4e:	46a4      	mov	ip, r4
}
 8012d50:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8012d54:	4760      	bx	ip
 8012d56:	bf00      	nop

08012d58 <NT35510_Init>:
{
 8012d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 8012d5c:	f100 0510 	add.w	r5, r0, #16
 8012d60:	2305      	movs	r3, #5
{
 8012d62:	4606      	mov	r6, r0
 8012d64:	4690      	mov	r8, r2
 8012d66:	460f      	mov	r7, r1
  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 8012d68:	4a9e      	ldr	r2, [pc, #632]	@ (8012fe4 <NT35510_Init+0x28c>)
 8012d6a:	21f0      	movs	r1, #240	@ 0xf0
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	f000 fa59 	bl	8013224 <nt35510_write_reg>
 8012d72:	4604      	mov	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 8012d74:	2303      	movs	r3, #3
 8012d76:	4a9c      	ldr	r2, [pc, #624]	@ (8012fe8 <NT35510_Init+0x290>)
 8012d78:	21b0      	movs	r1, #176	@ 0xb0
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	f000 fa52 	bl	8013224 <nt35510_write_reg>
 8012d80:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 8012d82:	2303      	movs	r3, #3
 8012d84:	4a99      	ldr	r2, [pc, #612]	@ (8012fec <NT35510_Init+0x294>)
 8012d86:	21b6      	movs	r1, #182	@ 0xb6
 8012d88:	4628      	mov	r0, r5
 8012d8a:	f000 fa4b 	bl	8013224 <nt35510_write_reg>
 8012d8e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 8012d90:	2303      	movs	r3, #3
 8012d92:	4a97      	ldr	r2, [pc, #604]	@ (8012ff0 <NT35510_Init+0x298>)
 8012d94:	21b1      	movs	r1, #177	@ 0xb1
 8012d96:	4628      	mov	r0, r5
 8012d98:	f000 fa44 	bl	8013224 <nt35510_write_reg>
 8012d9c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 8012d9e:	2303      	movs	r3, #3
 8012da0:	4a94      	ldr	r2, [pc, #592]	@ (8012ff4 <NT35510_Init+0x29c>)
 8012da2:	21b7      	movs	r1, #183	@ 0xb7
 8012da4:	4628      	mov	r0, r5
 8012da6:	f000 fa3d 	bl	8013224 <nt35510_write_reg>
 8012daa:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 8012dac:	2303      	movs	r3, #3
 8012dae:	4a92      	ldr	r2, [pc, #584]	@ (8012ff8 <NT35510_Init+0x2a0>)
 8012db0:	21b2      	movs	r1, #178	@ 0xb2
 8012db2:	4628      	mov	r0, r5
 8012db4:	f000 fa36 	bl	8013224 <nt35510_write_reg>
 8012db8:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 8012dba:	2303      	movs	r3, #3
 8012dbc:	4a8f      	ldr	r2, [pc, #572]	@ (8012ffc <NT35510_Init+0x2a4>)
 8012dbe:	21b8      	movs	r1, #184	@ 0xb8
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f000 fa2f 	bl	8013224 <nt35510_write_reg>
 8012dc6:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 8012dc8:	2301      	movs	r3, #1
 8012dca:	4a8d      	ldr	r2, [pc, #564]	@ (8013000 <NT35510_Init+0x2a8>)
 8012dcc:	21bf      	movs	r1, #191	@ 0xbf
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f000 fa28 	bl	8013224 <nt35510_write_reg>
 8012dd4:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 8012dd6:	2303      	movs	r3, #3
 8012dd8:	4a8a      	ldr	r2, [pc, #552]	@ (8013004 <NT35510_Init+0x2ac>)
 8012dda:	21b3      	movs	r1, #179	@ 0xb3
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f000 fa21 	bl	8013224 <nt35510_write_reg>
 8012de2:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 8012de4:	2303      	movs	r3, #3
 8012de6:	4a88      	ldr	r2, [pc, #544]	@ (8013008 <NT35510_Init+0x2b0>)
 8012de8:	21b9      	movs	r1, #185	@ 0xb9
 8012dea:	4628      	mov	r0, r5
 8012dec:	f000 fa1a 	bl	8013224 <nt35510_write_reg>
 8012df0:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 8012df2:	2303      	movs	r3, #3
 8012df4:	4a85      	ldr	r2, [pc, #532]	@ (801300c <NT35510_Init+0x2b4>)
 8012df6:	21b5      	movs	r1, #181	@ 0xb5
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f000 fa13 	bl	8013224 <nt35510_write_reg>
 8012dfe:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 8012e00:	2303      	movs	r3, #3
 8012e02:	4a83      	ldr	r2, [pc, #524]	@ (8013010 <NT35510_Init+0x2b8>)
 8012e04:	21ba      	movs	r1, #186	@ 0xba
 8012e06:	4628      	mov	r0, r5
 8012e08:	f000 fa0c 	bl	8013224 <nt35510_write_reg>
 8012e0c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 8012e0e:	2303      	movs	r3, #3
 8012e10:	4a80      	ldr	r2, [pc, #512]	@ (8013014 <NT35510_Init+0x2bc>)
 8012e12:	21bc      	movs	r1, #188	@ 0xbc
 8012e14:	4628      	mov	r0, r5
 8012e16:	f000 fa05 	bl	8013224 <nt35510_write_reg>
 8012e1a:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 8012e1c:	2303      	movs	r3, #3
 8012e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8013018 <NT35510_Init+0x2c0>)
 8012e20:	21bd      	movs	r1, #189	@ 0xbd
 8012e22:	4628      	mov	r0, r5
 8012e24:	f000 f9fe 	bl	8013224 <nt35510_write_reg>
 8012e28:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 8012e2a:	2302      	movs	r3, #2
 8012e2c:	4a7b      	ldr	r2, [pc, #492]	@ (801301c <NT35510_Init+0x2c4>)
 8012e2e:	21be      	movs	r1, #190	@ 0xbe
 8012e30:	4628      	mov	r0, r5
 8012e32:	f000 f9f7 	bl	8013224 <nt35510_write_reg>
 8012e36:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 8012e38:	2305      	movs	r3, #5
 8012e3a:	4a79      	ldr	r2, [pc, #484]	@ (8013020 <NT35510_Init+0x2c8>)
 8012e3c:	21f0      	movs	r1, #240	@ 0xf0
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f000 f9f0 	bl	8013224 <nt35510_write_reg>
 8012e44:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 8012e46:	2302      	movs	r3, #2
 8012e48:	4a76      	ldr	r2, [pc, #472]	@ (8013024 <NT35510_Init+0x2cc>)
 8012e4a:	21b1      	movs	r1, #177	@ 0xb1
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f000 f9e9 	bl	8013224 <nt35510_write_reg>
 8012e52:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 8012e54:	2301      	movs	r3, #1
 8012e56:	4a74      	ldr	r2, [pc, #464]	@ (8013028 <NT35510_Init+0x2d0>)
 8012e58:	21b6      	movs	r1, #182	@ 0xb6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f000 f9e2 	bl	8013224 <nt35510_write_reg>
 8012e60:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 8012e62:	2301      	movs	r3, #1
 8012e64:	4a71      	ldr	r2, [pc, #452]	@ (801302c <NT35510_Init+0x2d4>)
 8012e66:	21b5      	movs	r1, #181	@ 0xb5
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f000 f9db 	bl	8013224 <nt35510_write_reg>
 8012e6e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 8012e70:	2302      	movs	r3, #2
 8012e72:	4a6f      	ldr	r2, [pc, #444]	@ (8013030 <NT35510_Init+0x2d8>)
 8012e74:	21b7      	movs	r1, #183	@ 0xb7
 8012e76:	4628      	mov	r0, r5
 8012e78:	f000 f9d4 	bl	8013224 <nt35510_write_reg>
 8012e7c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 8012e7e:	2304      	movs	r3, #4
 8012e80:	4a6c      	ldr	r2, [pc, #432]	@ (8013034 <NT35510_Init+0x2dc>)
 8012e82:	21b8      	movs	r1, #184	@ 0xb8
 8012e84:	4628      	mov	r0, r5
 8012e86:	f000 f9cd 	bl	8013224 <nt35510_write_reg>
 8012e8a:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	4a6a      	ldr	r2, [pc, #424]	@ (8013038 <NT35510_Init+0x2e0>)
 8012e90:	21bc      	movs	r1, #188	@ 0xbc
 8012e92:	4628      	mov	r0, r5
 8012e94:	f000 f9c6 	bl	8013224 <nt35510_write_reg>
 8012e98:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 8012e9a:	2303      	movs	r3, #3
 8012e9c:	4a67      	ldr	r2, [pc, #412]	@ (801303c <NT35510_Init+0x2e4>)
 8012e9e:	21cc      	movs	r1, #204	@ 0xcc
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f000 f9bf 	bl	8013224 <nt35510_write_reg>
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8012ea6:	2301      	movs	r3, #1
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 8012ea8:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8012eaa:	4a65      	ldr	r2, [pc, #404]	@ (8013040 <NT35510_Init+0x2e8>)
 8012eac:	21ba      	movs	r1, #186	@ 0xba
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f000 f9b8 	bl	8013224 <nt35510_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8012eb4:	68f3      	ldr	r3, [r6, #12]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8012eb6:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8012eb8:	4798      	blx	r3
 8012eba:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8012ebc:	68f3      	ldr	r3, [r6, #12]
 8012ebe:	4798      	blx	r3
 8012ec0:	eba0 0009 	sub.w	r0, r0, r9
 8012ec4:	28c7      	cmp	r0, #199	@ 0xc7
 8012ec6:	d9f9      	bls.n	8012ebc <NT35510_Init+0x164>
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 8012ec8:	f1b8 0f00 	cmp.w	r8, #0
 8012ecc:	d163      	bne.n	8012f96 <NT35510_Init+0x23e>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 8012ece:	4643      	mov	r3, r8
 8012ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8013044 <NT35510_Init+0x2ec>)
 8012ed2:	2136      	movs	r1, #54	@ 0x36
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	f000 f9a5 	bl	8013224 <nt35510_write_reg>
 8012eda:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8012edc:	2304      	movs	r3, #4
 8012ede:	4a5a      	ldr	r2, [pc, #360]	@ (8013048 <NT35510_Init+0x2f0>)
 8012ee0:	212a      	movs	r1, #42	@ 0x2a
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f000 f99e 	bl	8013224 <nt35510_write_reg>
 8012ee8:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8012eea:	2304      	movs	r3, #4
 8012eec:	4a57      	ldr	r2, [pc, #348]	@ (801304c <NT35510_Init+0x2f4>)
 8012eee:	212b      	movs	r1, #43	@ 0x2b
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f000 f997 	bl	8013224 <nt35510_write_reg>
 8012ef6:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8012ef8:	2300      	movs	r3, #0
 8012efa:	4a55      	ldr	r2, [pc, #340]	@ (8013050 <NT35510_Init+0x2f8>)
 8012efc:	2111      	movs	r1, #17
 8012efe:	4628      	mov	r0, r5
 8012f00:	f000 f990 	bl	8013224 <nt35510_write_reg>
  tickstart = pObj->IO.GetTick();
 8012f04:	68f3      	ldr	r3, [r6, #12]
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8012f06:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8012f08:	4798      	blx	r3
 8012f0a:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8012f0c:	68f3      	ldr	r3, [r6, #12]
 8012f0e:	4798      	blx	r3
 8012f10:	eba0 0008 	sub.w	r0, r0, r8
 8012f14:	2813      	cmp	r0, #19
 8012f16:	d9f9      	bls.n	8012f0c <NT35510_Init+0x1b4>
  switch(ColorCoding)
 8012f18:	2f00      	cmp	r7, #0
 8012f1a:	d05a      	beq.n	8012fd2 <NT35510_Init+0x27a>
 8012f1c:	2f02      	cmp	r7, #2
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8012f1e:	f04f 0300 	mov.w	r3, #0
  switch(ColorCoding)
 8012f22:	d14e      	bne.n	8012fc2 <NT35510_Init+0x26a>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 8012f24:	4a4b      	ldr	r2, [pc, #300]	@ (8013054 <NT35510_Init+0x2fc>)
 8012f26:	213a      	movs	r1, #58	@ 0x3a
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f000 f97b 	bl	8013224 <nt35510_write_reg>
 8012f2e:	4404      	add	r4, r0
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 8012f30:	4a49      	ldr	r2, [pc, #292]	@ (8013058 <NT35510_Init+0x300>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 8012f32:	2300      	movs	r3, #0
 8012f34:	2151      	movs	r1, #81	@ 0x51
 8012f36:	4628      	mov	r0, r5
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 8012f38:	6057      	str	r7, [r2, #4]
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 8012f3a:	4a48      	ldr	r2, [pc, #288]	@ (801305c <NT35510_Init+0x304>)
 8012f3c:	f000 f972 	bl	8013224 <nt35510_write_reg>
 8012f40:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 8012f42:	2300      	movs	r3, #0
 8012f44:	4a46      	ldr	r2, [pc, #280]	@ (8013060 <NT35510_Init+0x308>)
 8012f46:	2153      	movs	r1, #83	@ 0x53
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f000 f96b 	bl	8013224 <nt35510_write_reg>
 8012f4e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 8012f50:	2300      	movs	r3, #0
 8012f52:	4a44      	ldr	r2, [pc, #272]	@ (8013064 <NT35510_Init+0x30c>)
 8012f54:	2155      	movs	r1, #85	@ 0x55
 8012f56:	4628      	mov	r0, r5
 8012f58:	f000 f964 	bl	8013224 <nt35510_write_reg>
 8012f5c:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8012f5e:	2300      	movs	r3, #0
 8012f60:	4a41      	ldr	r2, [pc, #260]	@ (8013068 <NT35510_Init+0x310>)
 8012f62:	215e      	movs	r1, #94	@ 0x5e
 8012f64:	4628      	mov	r0, r5
 8012f66:	f000 f95d 	bl	8013224 <nt35510_write_reg>
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	4a3f      	ldr	r2, [pc, #252]	@ (801306c <NT35510_Init+0x314>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8012f6e:	4404      	add	r4, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8012f70:	2129      	movs	r1, #41	@ 0x29
 8012f72:	4628      	mov	r0, r5
 8012f74:	f000 f956 	bl	8013224 <nt35510_write_reg>
 8012f78:	4601      	mov	r1, r0
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8013070 <NT35510_Init+0x318>)
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8012f7e:	440c      	add	r4, r1
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8012f80:	4628      	mov	r0, r5
 8012f82:	212c      	movs	r1, #44	@ 0x2c
 8012f84:	f000 f94e 	bl	8013224 <nt35510_write_reg>
  if(ret != NT35510_OK)
 8012f88:	42c4      	cmn	r4, r0
}
 8012f8a:	bf14      	ite	ne
 8012f8c:	f04f 30ff 	movne.w	r0, #4294967295
 8012f90:	2000      	moveq	r0, #0
 8012f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 8012f96:	2300      	movs	r3, #0
 8012f98:	4a36      	ldr	r2, [pc, #216]	@ (8013074 <NT35510_Init+0x31c>)
 8012f9a:	2136      	movs	r1, #54	@ 0x36
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f000 f941 	bl	8013224 <nt35510_write_reg>
 8012fa2:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8012fa4:	2304      	movs	r3, #4
 8012fa6:	4a34      	ldr	r2, [pc, #208]	@ (8013078 <NT35510_Init+0x320>)
 8012fa8:	212a      	movs	r1, #42	@ 0x2a
 8012faa:	4628      	mov	r0, r5
 8012fac:	f000 f93a 	bl	8013224 <nt35510_write_reg>
 8012fb0:	4404      	add	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8012fb2:	2304      	movs	r3, #4
 8012fb4:	4a31      	ldr	r2, [pc, #196]	@ (801307c <NT35510_Init+0x324>)
 8012fb6:	212b      	movs	r1, #43	@ 0x2b
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f000 f933 	bl	8013224 <nt35510_write_reg>
 8012fbe:	4404      	add	r4, r0
 8012fc0:	e79a      	b.n	8012ef8 <NT35510_Init+0x1a0>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8012fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8013080 <NT35510_Init+0x328>)
 8012fc4:	213a      	movs	r1, #58	@ 0x3a
 8012fc6:	4628      	mov	r0, r5
      break;
 8012fc8:	2700      	movs	r7, #0
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8012fca:	f000 f92b 	bl	8013224 <nt35510_write_reg>
 8012fce:	4404      	add	r4, r0
      break;
 8012fd0:	e7ae      	b.n	8012f30 <NT35510_Init+0x1d8>
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8012fd2:	463b      	mov	r3, r7
 8012fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8013080 <NT35510_Init+0x328>)
 8012fd6:	213a      	movs	r1, #58	@ 0x3a
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f000 f923 	bl	8013224 <nt35510_write_reg>
 8012fde:	4404      	add	r4, r0
      break;
 8012fe0:	e7a6      	b.n	8012f30 <NT35510_Init+0x1d8>
 8012fe2:	bf00      	nop
 8012fe4:	08057650 	.word	0x08057650
 8012fe8:	0805764c 	.word	0x0805764c
 8012fec:	08057648 	.word	0x08057648
 8012ff0:	08057644 	.word	0x08057644
 8012ff4:	08057640 	.word	0x08057640
 8012ff8:	0805763c 	.word	0x0805763c
 8012ffc:	08057638 	.word	0x08057638
 8013000:	08057634 	.word	0x08057634
 8013004:	08057630 	.word	0x08057630
 8013008:	0805762c 	.word	0x0805762c
 801300c:	08057628 	.word	0x08057628
 8013010:	08057624 	.word	0x08057624
 8013014:	08057620 	.word	0x08057620
 8013018:	0805761c 	.word	0x0805761c
 801301c:	08057618 	.word	0x08057618
 8013020:	08057610 	.word	0x08057610
 8013024:	0805760c 	.word	0x0805760c
 8013028:	08057608 	.word	0x08057608
 801302c:	08057604 	.word	0x08057604
 8013030:	08057600 	.word	0x08057600
 8013034:	080575fc 	.word	0x080575fc
 8013038:	080575f8 	.word	0x080575f8
 801303c:	080575f4 	.word	0x080575f4
 8013040:	080575f0 	.word	0x080575f0
 8013044:	0805767d 	.word	0x0805767d
 8013048:	08057674 	.word	0x08057674
 801304c:	0805766c 	.word	0x0805766c
 8013050:	080575ed 	.word	0x080575ed
 8013054:	080575e9 	.word	0x080575e9
 8013058:	24008c18 	.word	0x24008c18
 801305c:	080575e1 	.word	0x080575e1
 8013060:	080575dd 	.word	0x080575dd
 8013064:	080575d9 	.word	0x080575d9
 8013068:	080575d5 	.word	0x080575d5
 801306c:	080575d1 	.word	0x080575d1
 8013070:	080575cd 	.word	0x080575cd
 8013074:	08057669 	.word	0x08057669
 8013078:	08057660 	.word	0x08057660
 801307c:	08057658 	.word	0x08057658
 8013080:	080575e5 	.word	0x080575e5

08013084 <NT35510_SetBrightness>:
{
 8013084:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013086:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 801308a:	4d0c      	ldr	r5, [pc, #48]	@ (80130bc <NT35510_SetBrightness+0x38>)
{
 801308c:	b083      	sub	sp, #12
 801308e:	460c      	mov	r4, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013090:	fba5 5c0c 	umull	r5, ip, r5, ip
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8013094:	2300      	movs	r3, #0
 8013096:	f10d 0207 	add.w	r2, sp, #7
 801309a:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 801309c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 80130a0:	2151      	movs	r1, #81	@ 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80130a2:	f88d c007 	strb.w	ip, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 80130a6:	f000 f8bd 	bl	8013224 <nt35510_write_reg>
 80130aa:	b918      	cbnz	r0, 80130b4 <NT35510_SetBrightness+0x30>
    NT35510Ctx.Brightness = Brightness;
 80130ac:	4b04      	ldr	r3, [pc, #16]	@ (80130c0 <NT35510_SetBrightness+0x3c>)
 80130ae:	609c      	str	r4, [r3, #8]
}
 80130b0:	b003      	add	sp, #12
 80130b2:	bd30      	pop	{r4, r5, pc}
    ret = NT35510_ERROR;
 80130b4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80130b8:	e7fa      	b.n	80130b0 <NT35510_SetBrightness+0x2c>
 80130ba:	bf00      	nop
 80130bc:	51eb851f 	.word	0x51eb851f
 80130c0:	24008c18 	.word	0x24008c18

080130c4 <NT35510_DisplayOn>:
{
 80130c4:	b500      	push	{lr}
 80130c6:	b083      	sub	sp, #12
  uint8_t display = 0;
 80130c8:	2300      	movs	r3, #0
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 80130ca:	2129      	movs	r1, #41	@ 0x29
 80130cc:	3010      	adds	r0, #16
 80130ce:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80130d2:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 80130d6:	f000 f8a5 	bl	8013224 <nt35510_write_reg>
 80130da:	3800      	subs	r0, #0
 80130dc:	bf18      	it	ne
 80130de:	2001      	movne	r0, #1
}
 80130e0:	4240      	negs	r0, r0
 80130e2:	b003      	add	sp, #12
 80130e4:	f85d fb04 	ldr.w	pc, [sp], #4

080130e8 <NT35510_DisplayOff>:
{
 80130e8:	b500      	push	{lr}
 80130ea:	b083      	sub	sp, #12
  uint8_t display = 0;
 80130ec:	2300      	movs	r3, #0
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 80130ee:	2128      	movs	r1, #40	@ 0x28
 80130f0:	3010      	adds	r0, #16
 80130f2:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80130f6:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 80130fa:	f000 f893 	bl	8013224 <nt35510_write_reg>
 80130fe:	3800      	subs	r0, #0
 8013100:	bf18      	it	ne
 8013102:	2001      	movne	r0, #1
}
 8013104:	4240      	negs	r0, r0
 8013106:	b003      	add	sp, #12
 8013108:	f85d fb04 	ldr.w	pc, [sp], #4

0801310c <NT35510_SetOrientation>:
{
 801310c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 801310e:	2360      	movs	r3, #96	@ 0x60
{
 8013110:	b083      	sub	sp, #12
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 8013112:	2700      	movs	r7, #0
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 8013114:	2901      	cmp	r1, #1
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8013116:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 801311a:	f88d 7007 	strb.w	r7, [sp, #7]
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 801311e:	d83d      	bhi.n	801319c <NT35510_SetOrientation+0x90>
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 8013120:	d021      	beq.n	8013166 <NT35510_SetOrientation+0x5a>
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 8013122:	f100 0510 	add.w	r5, r0, #16
 8013126:	463b      	mov	r3, r7
 8013128:	f10d 0207 	add.w	r2, sp, #7
 801312c:	2136      	movs	r1, #54	@ 0x36
 801312e:	4628      	mov	r0, r5
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8013130:	463e      	mov	r6, r7
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 8013132:	f000 f877 	bl	8013224 <nt35510_write_reg>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8013136:	2304      	movs	r3, #4
 8013138:	4a1a      	ldr	r2, [pc, #104]	@ (80131a4 <NT35510_SetOrientation+0x98>)
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 801313a:	4604      	mov	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 801313c:	212a      	movs	r1, #42	@ 0x2a
 801313e:	4628      	mov	r0, r5
 8013140:	f000 f870 	bl	8013224 <nt35510_write_reg>
 8013144:	4602      	mov	r2, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8013146:	2304      	movs	r3, #4
 8013148:	4628      	mov	r0, r5
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 801314a:	4414      	add	r4, r2
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 801314c:	212b      	movs	r1, #43	@ 0x2b
 801314e:	4a16      	ldr	r2, [pc, #88]	@ (80131a8 <NT35510_SetOrientation+0x9c>)
 8013150:	f000 f868 	bl	8013224 <nt35510_write_reg>
 8013154:	4420      	add	r0, r4
  if(ret != NT35510_OK)
 8013156:	3800      	subs	r0, #0
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 8013158:	4b14      	ldr	r3, [pc, #80]	@ (80131ac <NT35510_SetOrientation+0xa0>)
  if(ret != NT35510_OK)
 801315a:	bf18      	it	ne
 801315c:	2001      	movne	r0, #1
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 801315e:	601e      	str	r6, [r3, #0]
  if(ret != NT35510_OK)
 8013160:	4240      	negs	r0, r0
}
 8013162:	b003      	add	sp, #12
 8013164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 8013166:	f100 0510 	add.w	r5, r0, #16
 801316a:	463b      	mov	r3, r7
 801316c:	f10d 0206 	add.w	r2, sp, #6
 8013170:	460e      	mov	r6, r1
 8013172:	4628      	mov	r0, r5
 8013174:	210b      	movs	r1, #11
 8013176:	f000 f855 	bl	8013224 <nt35510_write_reg>
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 801317a:	2304      	movs	r3, #4
 801317c:	4a0c      	ldr	r2, [pc, #48]	@ (80131b0 <NT35510_SetOrientation+0xa4>)
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 801317e:	4604      	mov	r4, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8013180:	212a      	movs	r1, #42	@ 0x2a
 8013182:	4628      	mov	r0, r5
 8013184:	f000 f84e 	bl	8013224 <nt35510_write_reg>
 8013188:	4602      	mov	r2, r0
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 801318a:	2304      	movs	r3, #4
 801318c:	4628      	mov	r0, r5
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 801318e:	4414      	add	r4, r2
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8013190:	212b      	movs	r1, #43	@ 0x2b
 8013192:	4a08      	ldr	r2, [pc, #32]	@ (80131b4 <NT35510_SetOrientation+0xa8>)
 8013194:	f000 f846 	bl	8013224 <nt35510_write_reg>
 8013198:	4420      	add	r0, r4
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 801319a:	e7dc      	b.n	8013156 <NT35510_SetOrientation+0x4a>
    ret = NT35510_ERROR;
 801319c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80131a0:	e7df      	b.n	8013162 <NT35510_SetOrientation+0x56>
 80131a2:	bf00      	nop
 80131a4:	08057674 	.word	0x08057674
 80131a8:	0805766c 	.word	0x0805766c
 80131ac:	24008c18 	.word	0x24008c18
 80131b0:	08057660 	.word	0x08057660
 80131b4:	08057658 	.word	0x08057658

080131b8 <NT35510_ReadID>:
{ 
 80131b8:	460a      	mov	r2, r1
  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 80131ba:	3010      	adds	r0, #16
 80131bc:	21db      	movs	r1, #219	@ 0xdb
{ 
 80131be:	b508      	push	{r3, lr}
  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 80131c0:	2301      	movs	r3, #1
 80131c2:	f000 f827 	bl	8013214 <nt35510_read_reg>
 80131c6:	3800      	subs	r0, #0
 80131c8:	bf18      	it	ne
 80131ca:	2001      	movne	r0, #1
}  
 80131cc:	4240      	negs	r0, r0
 80131ce:	bd08      	pop	{r3, pc}

080131d0 <NT35510_DrawVLine>:
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 80131d0:	f04f 30ff 	mov.w	r0, #4294967295
 80131d4:	4770      	bx	lr
 80131d6:	bf00      	nop

080131d8 <NT35510_GetPixel>:
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
 80131d8:	f04f 30ff 	mov.w	r0, #4294967295
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop

080131e0 <NT35510_RegisterBusIO>:
  if(pObj == NULL)
 80131e0:	b180      	cbz	r0, 8013204 <NT35510_RegisterBusIO+0x24>
 80131e2:	4603      	mov	r3, r0
{
 80131e4:	b410      	push	{r4}
    pObj->IO.WriteReg  = pIO->WriteReg;
 80131e6:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 80131ea:	68c8      	ldr	r0, [r1, #12]
 80131ec:	605a      	str	r2, [r3, #4]
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 80131ee:	4907      	ldr	r1, [pc, #28]	@ (801320c <NT35510_RegisterBusIO+0x2c>)
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 80131f0:	4a07      	ldr	r2, [pc, #28]	@ (8013210 <NT35510_RegisterBusIO+0x30>)
    pObj->Ctx.handle   = pObj;
 80131f2:	619b      	str	r3, [r3, #24]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80131f4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 80131f8:	e9c3 2104 	strd	r2, r1, [r3, #16]
  int32_t ret = NT35510_OK;
 80131fc:	2000      	movs	r0, #0
}
 80131fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013202:	4770      	bx	lr
    ret = NT35510_ERROR;
 8013204:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	08012d39 	.word	0x08012d39
 8013210:	08012d49 	.word	0x08012d49

08013214 <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8013214:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8013216:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 801321a:	46a4      	mov	ip, r4
}
 801321c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8013220:	4760      	bx	ip
 8013222:	bf00      	nop

08013224 <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8013224:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8013226:	6804      	ldr	r4, [r0, #0]
 8013228:	6880      	ldr	r0, [r0, #8]
 801322a:	46a4      	mov	ip, r4
}
 801322c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8013230:	4760      	bx	ip
 8013232:	bf00      	nop

08013234 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8013234:	f04f 30ff 	mov.w	r0, #4294967295
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop

0801323c <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 801323c:	4b02      	ldr	r3, [pc, #8]	@ (8013248 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 801323e:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	600b      	str	r3, [r1, #0]
}
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	24008c24 	.word	0x24008c24

0801324c <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 801324c:	4b02      	ldr	r3, [pc, #8]	@ (8013258 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 801324e:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	600b      	str	r3, [r1, #0]
}
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop
 8013258:	24008c24 	.word	0x24008c24

0801325c <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 801325c:	4b05      	ldr	r3, [pc, #20]	@ (8013274 <OTM8009A_GetXSize+0x18>)
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 801325e:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	4283      	cmp	r3, r0
 8013264:	bf0c      	ite	eq
 8013266:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 801326a:	f44f 7348 	movne.w	r3, #800	@ 0x320
    *Xsize = OTM8009A_480X800_WIDTH;
 801326e:	600b      	str	r3, [r1, #0]
}
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop
 8013274:	24008c24 	.word	0x24008c24

08013278 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8013278:	4b05      	ldr	r3, [pc, #20]	@ (8013290 <OTM8009A_GetYSize+0x18>)
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 801327a:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4283      	cmp	r3, r0
 8013280:	bf0c      	ite	eq
 8013282:	f44f 7348 	moveq.w	r3, #800	@ 0x320
 8013286:	f44f 73f0 	movne.w	r3, #480	@ 0x1e0
    *Ysize = OTM8009A_480X800_HEIGHT;
 801328a:	600b      	str	r3, [r1, #0]
}
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	24008c24 	.word	0x24008c24

08013294 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8013294:	f04f 30ff 	mov.w	r0, #4294967295
 8013298:	4770      	bx	lr
 801329a:	bf00      	nop

0801329c <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 801329c:	f04f 30ff 	mov.w	r0, #4294967295
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop

080132a4 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80132a4:	f04f 30ff 	mov.w	r0, #4294967295
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop

080132ac <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop

080132b4 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80132b4:	f04f 30ff 	mov.w	r0, #4294967295
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop

080132bc <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop

080132c4 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80132c4:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80132c6:	6884      	ldr	r4, [r0, #8]
 80132c8:	8800      	ldrh	r0, [r0, #0]
 80132ca:	46a4      	mov	ip, r4
}
 80132cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80132d0:	4760      	bx	ip
 80132d2:	bf00      	nop

080132d4 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80132d4:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80132d6:	6844      	ldr	r4, [r0, #4]
 80132d8:	8800      	ldrh	r0, [r0, #0]
 80132da:	46a4      	mov	ip, r4
}
 80132dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80132e0:	4760      	bx	ip
 80132e2:	bf00      	nop

080132e4 <OTM8009A_Init>:
{
 80132e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80132e8:	2300      	movs	r3, #0
 80132ea:	f100 0510 	add.w	r5, r0, #16
{
 80132ee:	b083      	sub	sp, #12
 80132f0:	4606      	mov	r6, r0
 80132f2:	4690      	mov	r8, r2
 80132f4:	460f      	mov	r7, r1
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80132f6:	4ada      	ldr	r2, [pc, #872]	@ (8013660 <OTM8009A_Init+0x37c>)
 80132f8:	4619      	mov	r1, r3
 80132fa:	4628      	mov	r0, r5
 80132fc:	f000 fc7a 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8013300:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013302:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8013304:	4ad7      	ldr	r2, [pc, #860]	@ (8013664 <OTM8009A_Init+0x380>)
 8013306:	21ff      	movs	r1, #255	@ 0xff
 8013308:	4628      	mov	r0, r5
 801330a:	f000 fc73 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801330e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8013310:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8013312:	4ad5      	ldr	r2, [pc, #852]	@ (8013668 <OTM8009A_Init+0x384>)
 8013314:	4619      	mov	r1, r3
 8013316:	4628      	mov	r0, r5
 8013318:	f000 fc6c 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 801331c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801331e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8013320:	4ad2      	ldr	r2, [pc, #840]	@ (801366c <OTM8009A_Init+0x388>)
 8013322:	21ff      	movs	r1, #255	@ 0xff
 8013324:	4628      	mov	r0, r5
 8013326:	f000 fc65 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801332a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 801332c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801332e:	4ace      	ldr	r2, [pc, #824]	@ (8013668 <OTM8009A_Init+0x384>)
 8013330:	4619      	mov	r1, r3
 8013332:	4628      	mov	r0, r5
 8013334:	f000 fc5e 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8013338:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801333a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 801333c:	4acc      	ldr	r2, [pc, #816]	@ (8013670 <OTM8009A_Init+0x38c>)
 801333e:	21c4      	movs	r1, #196	@ 0xc4
 8013340:	4628      	mov	r0, r5
 8013342:	f000 fc57 	bl	8013bf4 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8013346:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8013348:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 801334a:	4798      	blx	r3
 801334c:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801334e:	68f3      	ldr	r3, [r6, #12]
 8013350:	4798      	blx	r3
 8013352:	eba0 0009 	sub.w	r0, r0, r9
 8013356:	2809      	cmp	r0, #9
 8013358:	d9f9      	bls.n	801334e <OTM8009A_Init+0x6a>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 801335a:	2300      	movs	r3, #0
 801335c:	4ac5      	ldr	r2, [pc, #788]	@ (8013674 <OTM8009A_Init+0x390>)
 801335e:	4628      	mov	r0, r5
 8013360:	4619      	mov	r1, r3
 8013362:	f000 fc47 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8013366:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8013368:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 801336a:	4ac3      	ldr	r2, [pc, #780]	@ (8013678 <OTM8009A_Init+0x394>)
 801336c:	21c4      	movs	r1, #196	@ 0xc4
 801336e:	4628      	mov	r0, r5
 8013370:	f000 fc40 	bl	8013bf4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8013374:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8013376:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8013378:	4798      	blx	r3
 801337a:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801337c:	68f3      	ldr	r3, [r6, #12]
 801337e:	4798      	blx	r3
 8013380:	eba0 0009 	sub.w	r0, r0, r9
 8013384:	2809      	cmp	r0, #9
 8013386:	d9f9      	bls.n	801337c <OTM8009A_Init+0x98>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8013388:	2300      	movs	r3, #0
 801338a:	4abc      	ldr	r2, [pc, #752]	@ (801367c <OTM8009A_Init+0x398>)
 801338c:	4628      	mov	r0, r5
 801338e:	4619      	mov	r1, r3
 8013390:	f000 fc30 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8013394:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8013396:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8013398:	4ab9      	ldr	r2, [pc, #740]	@ (8013680 <OTM8009A_Init+0x39c>)
 801339a:	21c5      	movs	r1, #197	@ 0xc5
 801339c:	4628      	mov	r0, r5
 801339e:	f000 fc29 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80133a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80133a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80133a6:	4ab7      	ldr	r2, [pc, #732]	@ (8013684 <OTM8009A_Init+0x3a0>)
 80133a8:	4619      	mov	r1, r3
 80133aa:	4628      	mov	r0, r5
 80133ac:	f000 fc22 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80133b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80133b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80133b4:	4ab4      	ldr	r2, [pc, #720]	@ (8013688 <OTM8009A_Init+0x3a4>)
 80133b6:	21c5      	movs	r1, #197	@ 0xc5
 80133b8:	4628      	mov	r0, r5
 80133ba:	f000 fc1b 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80133be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80133c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80133c2:	4ab2      	ldr	r2, [pc, #712]	@ (801368c <OTM8009A_Init+0x3a8>)
 80133c4:	4619      	mov	r1, r3
 80133c6:	4628      	mov	r0, r5
 80133c8:	f000 fc14 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80133cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80133ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80133d0:	4aaf      	ldr	r2, [pc, #700]	@ (8013690 <OTM8009A_Init+0x3ac>)
 80133d2:	21c0      	movs	r1, #192	@ 0xc0
 80133d4:	4628      	mov	r0, r5
 80133d6:	f000 fc0d 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80133da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80133dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80133de:	4aa0      	ldr	r2, [pc, #640]	@ (8013660 <OTM8009A_Init+0x37c>)
 80133e0:	4619      	mov	r1, r3
 80133e2:	4628      	mov	r0, r5
 80133e4:	f000 fc06 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80133e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80133ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80133ec:	4aa9      	ldr	r2, [pc, #676]	@ (8013694 <OTM8009A_Init+0x3b0>)
 80133ee:	21d9      	movs	r1, #217	@ 0xd9
 80133f0:	4628      	mov	r0, r5
 80133f2:	f000 fbff 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80133f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80133f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80133fa:	4aa7      	ldr	r2, [pc, #668]	@ (8013698 <OTM8009A_Init+0x3b4>)
 80133fc:	4619      	mov	r1, r3
 80133fe:	4628      	mov	r0, r5
 8013400:	f000 fbf8 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8013404:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8013406:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8013408:	4aa4      	ldr	r2, [pc, #656]	@ (801369c <OTM8009A_Init+0x3b8>)
 801340a:	21c1      	movs	r1, #193	@ 0xc1
 801340c:	4628      	mov	r0, r5
 801340e:	f000 fbf1 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8013412:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8013414:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8013416:	4aa2      	ldr	r2, [pc, #648]	@ (80136a0 <OTM8009A_Init+0x3bc>)
 8013418:	4619      	mov	r1, r3
 801341a:	4628      	mov	r0, r5
 801341c:	f000 fbea 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8013420:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8013422:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8013424:	4a9f      	ldr	r2, [pc, #636]	@ (80136a4 <OTM8009A_Init+0x3c0>)
 8013426:	21c1      	movs	r1, #193	@ 0xc1
 8013428:	4628      	mov	r0, r5
 801342a:	f000 fbe3 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 801342e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8013430:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8013432:	4a9d      	ldr	r2, [pc, #628]	@ (80136a8 <OTM8009A_Init+0x3c4>)
 8013434:	4619      	mov	r1, r3
 8013436:	4628      	mov	r0, r5
 8013438:	f000 fbdc 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 801343c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 801343e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8013440:	4a9a      	ldr	r2, [pc, #616]	@ (80136ac <OTM8009A_Init+0x3c8>)
 8013442:	21c5      	movs	r1, #197	@ 0xc5
 8013444:	4628      	mov	r0, r5
 8013446:	f000 fbd5 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 801344a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 801344c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 801344e:	4a98      	ldr	r2, [pc, #608]	@ (80136b0 <OTM8009A_Init+0x3cc>)
 8013450:	4619      	mov	r1, r3
 8013452:	4628      	mov	r0, r5
 8013454:	f000 fbce 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8013458:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 801345a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 801345c:	4a8a      	ldr	r2, [pc, #552]	@ (8013688 <OTM8009A_Init+0x3a4>)
 801345e:	21c5      	movs	r1, #197	@ 0xc5
 8013460:	4628      	mov	r0, r5
 8013462:	f000 fbc7 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013466:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8013468:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801346a:	4a7d      	ldr	r2, [pc, #500]	@ (8013660 <OTM8009A_Init+0x37c>)
 801346c:	4619      	mov	r1, r3
 801346e:	4628      	mov	r0, r5
 8013470:	f000 fbc0 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8013474:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013476:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8013478:	4a8e      	ldr	r2, [pc, #568]	@ (80136b4 <OTM8009A_Init+0x3d0>)
 801347a:	21d8      	movs	r1, #216	@ 0xd8
 801347c:	4628      	mov	r0, r5
 801347e:	f000 fbb9 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8013482:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8013484:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8013486:	4a8c      	ldr	r2, [pc, #560]	@ (80136b8 <OTM8009A_Init+0x3d4>)
 8013488:	4619      	mov	r1, r3
 801348a:	4628      	mov	r0, r5
 801348c:	f000 fbb2 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8013490:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8013492:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8013494:	4a89      	ldr	r2, [pc, #548]	@ (80136bc <OTM8009A_Init+0x3d8>)
 8013496:	21c5      	movs	r1, #197	@ 0xc5
 8013498:	4628      	mov	r0, r5
 801349a:	f000 fbab 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 801349e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80134a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80134a2:	4a87      	ldr	r2, [pc, #540]	@ (80136c0 <OTM8009A_Init+0x3dc>)
 80134a4:	4619      	mov	r1, r3
 80134a6:	4628      	mov	r0, r5
 80134a8:	f000 fba4 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80134ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80134ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80134b0:	4a84      	ldr	r2, [pc, #528]	@ (80136c4 <OTM8009A_Init+0x3e0>)
 80134b2:	21c0      	movs	r1, #192	@ 0xc0
 80134b4:	4628      	mov	r0, r5
 80134b6:	f000 fb9d 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80134ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80134bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80134be:	4a82      	ldr	r2, [pc, #520]	@ (80136c8 <OTM8009A_Init+0x3e4>)
 80134c0:	4619      	mov	r1, r3
 80134c2:	4628      	mov	r0, r5
 80134c4:	f000 fb96 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80134c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80134ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80134cc:	4a7f      	ldr	r2, [pc, #508]	@ (80136cc <OTM8009A_Init+0x3e8>)
 80134ce:	21c5      	movs	r1, #197	@ 0xc5
 80134d0:	4628      	mov	r0, r5
 80134d2:	f000 fb8f 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80134d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80134d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80134da:	4a6f      	ldr	r2, [pc, #444]	@ (8013698 <OTM8009A_Init+0x3b4>)
 80134dc:	4619      	mov	r1, r3
 80134de:	4628      	mov	r0, r5
 80134e0:	f000 fb88 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80134e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80134e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80134e8:	4a79      	ldr	r2, [pc, #484]	@ (80136d0 <OTM8009A_Init+0x3ec>)
 80134ea:	21c4      	movs	r1, #196	@ 0xc4
 80134ec:	4628      	mov	r0, r5
 80134ee:	f000 fb81 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80134f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80134f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80134f6:	4a6a      	ldr	r2, [pc, #424]	@ (80136a0 <OTM8009A_Init+0x3bc>)
 80134f8:	4619      	mov	r1, r3
 80134fa:	4628      	mov	r0, r5
 80134fc:	f000 fb7a 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8013500:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8013502:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8013504:	4a73      	ldr	r2, [pc, #460]	@ (80136d4 <OTM8009A_Init+0x3f0>)
 8013506:	21c1      	movs	r1, #193	@ 0xc1
 8013508:	4628      	mov	r0, r5
 801350a:	f000 fb73 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 801350e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8013510:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8013512:	4a71      	ldr	r2, [pc, #452]	@ (80136d8 <OTM8009A_Init+0x3f4>)
 8013514:	4619      	mov	r1, r3
 8013516:	4628      	mov	r0, r5
 8013518:	f000 fb6c 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 801351c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 801351e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8013520:	4a6e      	ldr	r2, [pc, #440]	@ (80136dc <OTM8009A_Init+0x3f8>)
 8013522:	21b3      	movs	r1, #179	@ 0xb3
 8013524:	4628      	mov	r0, r5
 8013526:	f000 fb65 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801352a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 801352c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801352e:	4a4e      	ldr	r2, [pc, #312]	@ (8013668 <OTM8009A_Init+0x384>)
 8013530:	4619      	mov	r1, r3
 8013532:	4628      	mov	r0, r5
 8013534:	f000 fb5e 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8013538:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801353a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 801353c:	4a68      	ldr	r2, [pc, #416]	@ (80136e0 <OTM8009A_Init+0x3fc>)
 801353e:	21ce      	movs	r1, #206	@ 0xce
 8013540:	4628      	mov	r0, r5
 8013542:	f000 fb57 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8013546:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8013548:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 801354a:	4a66      	ldr	r2, [pc, #408]	@ (80136e4 <OTM8009A_Init+0x400>)
 801354c:	4619      	mov	r1, r3
 801354e:	4628      	mov	r0, r5
 8013550:	f000 fb50 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8013554:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8013556:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8013558:	4a63      	ldr	r2, [pc, #396]	@ (80136e8 <OTM8009A_Init+0x404>)
 801355a:	21ce      	movs	r1, #206	@ 0xce
 801355c:	4628      	mov	r0, r5
 801355e:	f000 fb49 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8013562:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8013564:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8013566:	4a61      	ldr	r2, [pc, #388]	@ (80136ec <OTM8009A_Init+0x408>)
 8013568:	4619      	mov	r1, r3
 801356a:	4628      	mov	r0, r5
 801356c:	f000 fb42 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8013570:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8013572:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8013574:	4a5e      	ldr	r2, [pc, #376]	@ (80136f0 <OTM8009A_Init+0x40c>)
 8013576:	21ce      	movs	r1, #206	@ 0xce
 8013578:	4628      	mov	r0, r5
 801357a:	f000 fb3b 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 801357e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8013580:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8013582:	4a5c      	ldr	r2, [pc, #368]	@ (80136f4 <OTM8009A_Init+0x410>)
 8013584:	4619      	mov	r1, r3
 8013586:	4628      	mov	r0, r5
 8013588:	f000 fb34 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 801358c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 801358e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8013590:	4a59      	ldr	r2, [pc, #356]	@ (80136f8 <OTM8009A_Init+0x414>)
 8013592:	21cf      	movs	r1, #207	@ 0xcf
 8013594:	4628      	mov	r0, r5
 8013596:	f000 fb2d 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 801359a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 801359c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 801359e:	4a57      	ldr	r2, [pc, #348]	@ (80136fc <OTM8009A_Init+0x418>)
 80135a0:	4619      	mov	r1, r3
 80135a2:	4628      	mov	r0, r5
 80135a4:	f000 fb26 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80135a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80135aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80135ac:	4a54      	ldr	r2, [pc, #336]	@ (8013700 <OTM8009A_Init+0x41c>)
 80135ae:	21cf      	movs	r1, #207	@ 0xcf
 80135b0:	4628      	mov	r0, r5
 80135b2:	f000 fb1f 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80135b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80135b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80135ba:	4a2b      	ldr	r2, [pc, #172]	@ (8013668 <OTM8009A_Init+0x384>)
 80135bc:	4619      	mov	r1, r3
 80135be:	4628      	mov	r0, r5
 80135c0:	f000 fb18 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80135c4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80135c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80135c8:	4a4e      	ldr	r2, [pc, #312]	@ (8013704 <OTM8009A_Init+0x420>)
 80135ca:	21cb      	movs	r1, #203	@ 0xcb
 80135cc:	4628      	mov	r0, r5
 80135ce:	f000 fb11 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80135d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80135d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80135d6:	4a4c      	ldr	r2, [pc, #304]	@ (8013708 <OTM8009A_Init+0x424>)
 80135d8:	4619      	mov	r1, r3
 80135da:	4628      	mov	r0, r5
 80135dc:	f000 fb0a 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80135e0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80135e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80135e4:	4a49      	ldr	r2, [pc, #292]	@ (801370c <OTM8009A_Init+0x428>)
 80135e6:	21cb      	movs	r1, #203	@ 0xcb
 80135e8:	4628      	mov	r0, r5
 80135ea:	f000 fb03 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80135ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80135f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80135f2:	4a3c      	ldr	r2, [pc, #240]	@ (80136e4 <OTM8009A_Init+0x400>)
 80135f4:	4619      	mov	r1, r3
 80135f6:	4628      	mov	r0, r5
 80135f8:	f000 fafc 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80135fc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80135fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8013600:	4a43      	ldr	r2, [pc, #268]	@ (8013710 <OTM8009A_Init+0x42c>)
 8013602:	21cb      	movs	r1, #203	@ 0xcb
 8013604:	4628      	mov	r0, r5
 8013606:	f000 faf5 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 801360a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 801360c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 801360e:	4a37      	ldr	r2, [pc, #220]	@ (80136ec <OTM8009A_Init+0x408>)
 8013610:	4619      	mov	r1, r3
 8013612:	4628      	mov	r0, r5
 8013614:	f000 faee 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8013618:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 801361a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 801361c:	4a3d      	ldr	r2, [pc, #244]	@ (8013714 <OTM8009A_Init+0x430>)
 801361e:	21cb      	movs	r1, #203	@ 0xcb
 8013620:	4628      	mov	r0, r5
 8013622:	f000 fae7 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8013626:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8013628:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 801362a:	4a32      	ldr	r2, [pc, #200]	@ (80136f4 <OTM8009A_Init+0x410>)
 801362c:	4619      	mov	r1, r3
 801362e:	4628      	mov	r0, r5
 8013630:	f000 fae0 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8013634:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8013636:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8013638:	4a37      	ldr	r2, [pc, #220]	@ (8013718 <OTM8009A_Init+0x434>)
 801363a:	21cb      	movs	r1, #203	@ 0xcb
 801363c:	4628      	mov	r0, r5
 801363e:	f000 fad9 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8013642:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8013644:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8013646:	4a2d      	ldr	r2, [pc, #180]	@ (80136fc <OTM8009A_Init+0x418>)
 8013648:	4619      	mov	r1, r3
 801364a:	4628      	mov	r0, r5
 801364c:	f000 fad2 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8013650:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8013652:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8013654:	4a31      	ldr	r2, [pc, #196]	@ (801371c <OTM8009A_Init+0x438>)
 8013656:	21cb      	movs	r1, #203	@ 0xcb
 8013658:	4628      	mov	r0, r5
 801365a:	f000 facb 	bl	8013bf4 <otm8009a_write_reg>
 801365e:	e05f      	b.n	8013720 <OTM8009A_Init+0x43c>
 8013660:	080577b1 	.word	0x080577b1
 8013664:	080577ac 	.word	0x080577ac
 8013668:	080577b2 	.word	0x080577b2
 801366c:	080577a8 	.word	0x080577a8
 8013670:	080577b3 	.word	0x080577b3
 8013674:	080577b4 	.word	0x080577b4
 8013678:	080577b5 	.word	0x080577b5
 801367c:	080577b6 	.word	0x080577b6
 8013680:	080577b7 	.word	0x080577b7
 8013684:	080577b8 	.word	0x080577b8
 8013688:	080577b9 	.word	0x080577b9
 801368c:	080577ba 	.word	0x080577ba
 8013690:	080577bb 	.word	0x080577bb
 8013694:	080577bc 	.word	0x080577bc
 8013698:	080577bd 	.word	0x080577bd
 801369c:	080577be 	.word	0x080577be
 80136a0:	080577bf 	.word	0x080577bf
 80136a4:	080577c0 	.word	0x080577c0
 80136a8:	080577c1 	.word	0x080577c1
 80136ac:	080577c2 	.word	0x080577c2
 80136b0:	080577c3 	.word	0x080577c3
 80136b4:	080577a4 	.word	0x080577a4
 80136b8:	080577c4 	.word	0x080577c4
 80136bc:	080577c5 	.word	0x080577c5
 80136c0:	080577c6 	.word	0x080577c6
 80136c4:	080577c7 	.word	0x080577c7
 80136c8:	080577c8 	.word	0x080577c8
 80136cc:	080577c9 	.word	0x080577c9
 80136d0:	080577ca 	.word	0x080577ca
 80136d4:	080577cb 	.word	0x080577cb
 80136d8:	080577cc 	.word	0x080577cc
 80136dc:	080577a0 	.word	0x080577a0
 80136e0:	08057798 	.word	0x08057798
 80136e4:	080577cd 	.word	0x080577cd
 80136e8:	08057788 	.word	0x08057788
 80136ec:	080577ce 	.word	0x080577ce
 80136f0:	08057778 	.word	0x08057778
 80136f4:	080577cf 	.word	0x080577cf
 80136f8:	0805776c 	.word	0x0805776c
 80136fc:	080577d0 	.word	0x080577d0
 8013700:	080577dd 	.word	0x080577dd
 8013704:	08057760 	.word	0x08057760
 8013708:	080577d1 	.word	0x080577d1
 801370c:	08057750 	.word	0x08057750
 8013710:	08057740 	.word	0x08057740
 8013714:	08057734 	.word	0x08057734
 8013718:	08057724 	.word	0x08057724
 801371c:	08057714 	.word	0x08057714
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8013720:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8013722:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8013724:	4aa7      	ldr	r2, [pc, #668]	@ (80139c4 <OTM8009A_Init+0x6e0>)
 8013726:	4619      	mov	r1, r3
 8013728:	4628      	mov	r0, r5
 801372a:	f000 fa63 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 801372e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8013730:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8013732:	4aa5      	ldr	r2, [pc, #660]	@ (80139c8 <OTM8009A_Init+0x6e4>)
 8013734:	21cb      	movs	r1, #203	@ 0xcb
 8013736:	4628      	mov	r0, r5
 8013738:	f000 fa5c 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 801373c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 801373e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8013740:	4aa2      	ldr	r2, [pc, #648]	@ (80139cc <OTM8009A_Init+0x6e8>)
 8013742:	4619      	mov	r1, r3
 8013744:	4628      	mov	r0, r5
 8013746:	f000 fa55 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 801374a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 801374c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 801374e:	4aa0      	ldr	r2, [pc, #640]	@ (80139d0 <OTM8009A_Init+0x6ec>)
 8013750:	21cb      	movs	r1, #203	@ 0xcb
 8013752:	4628      	mov	r0, r5
 8013754:	f000 fa4e 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8013758:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 801375a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 801375c:	4a9d      	ldr	r2, [pc, #628]	@ (80139d4 <OTM8009A_Init+0x6f0>)
 801375e:	4619      	mov	r1, r3
 8013760:	4628      	mov	r0, r5
 8013762:	f000 fa47 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8013766:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8013768:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 801376a:	4a9b      	ldr	r2, [pc, #620]	@ (80139d8 <OTM8009A_Init+0x6f4>)
 801376c:	21cc      	movs	r1, #204	@ 0xcc
 801376e:	4628      	mov	r0, r5
 8013770:	f000 fa40 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8013774:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8013776:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8013778:	4a98      	ldr	r2, [pc, #608]	@ (80139dc <OTM8009A_Init+0x6f8>)
 801377a:	4619      	mov	r1, r3
 801377c:	4628      	mov	r0, r5
 801377e:	f000 fa39 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8013782:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8013784:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8013786:	4a96      	ldr	r2, [pc, #600]	@ (80139e0 <OTM8009A_Init+0x6fc>)
 8013788:	21cc      	movs	r1, #204	@ 0xcc
 801378a:	4628      	mov	r0, r5
 801378c:	f000 fa32 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8013790:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8013792:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8013794:	4a93      	ldr	r2, [pc, #588]	@ (80139e4 <OTM8009A_Init+0x700>)
 8013796:	4619      	mov	r1, r3
 8013798:	4628      	mov	r0, r5
 801379a:	f000 fa2b 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 801379e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80137a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80137a2:	4a91      	ldr	r2, [pc, #580]	@ (80139e8 <OTM8009A_Init+0x704>)
 80137a4:	21cc      	movs	r1, #204	@ 0xcc
 80137a6:	4628      	mov	r0, r5
 80137a8:	f000 fa24 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80137ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80137ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80137b0:	4a8e      	ldr	r2, [pc, #568]	@ (80139ec <OTM8009A_Init+0x708>)
 80137b2:	4619      	mov	r1, r3
 80137b4:	4628      	mov	r0, r5
 80137b6:	f000 fa1d 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80137ba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80137bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80137be:	4a8c      	ldr	r2, [pc, #560]	@ (80139f0 <OTM8009A_Init+0x70c>)
 80137c0:	21cc      	movs	r1, #204	@ 0xcc
 80137c2:	4628      	mov	r0, r5
 80137c4:	f000 fa16 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80137c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80137ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80137cc:	4a89      	ldr	r2, [pc, #548]	@ (80139f4 <OTM8009A_Init+0x710>)
 80137ce:	4619      	mov	r1, r3
 80137d0:	4628      	mov	r0, r5
 80137d2:	f000 fa0f 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80137d6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80137d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80137da:	4a87      	ldr	r2, [pc, #540]	@ (80139f8 <OTM8009A_Init+0x714>)
 80137dc:	21cc      	movs	r1, #204	@ 0xcc
 80137de:	4628      	mov	r0, r5
 80137e0:	f000 fa08 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80137e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80137e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80137e8:	4a84      	ldr	r2, [pc, #528]	@ (80139fc <OTM8009A_Init+0x718>)
 80137ea:	4619      	mov	r1, r3
 80137ec:	4628      	mov	r0, r5
 80137ee:	f000 fa01 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80137f2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80137f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80137f6:	4a82      	ldr	r2, [pc, #520]	@ (8013a00 <OTM8009A_Init+0x71c>)
 80137f8:	21cc      	movs	r1, #204	@ 0xcc
 80137fa:	4628      	mov	r0, r5
 80137fc:	f000 f9fa 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8013800:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8013802:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8013804:	4a7f      	ldr	r2, [pc, #508]	@ (8013a04 <OTM8009A_Init+0x720>)
 8013806:	4619      	mov	r1, r3
 8013808:	4628      	mov	r0, r5
 801380a:	f000 f9f3 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 801380e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8013810:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8013812:	4a7d      	ldr	r2, [pc, #500]	@ (8013a08 <OTM8009A_Init+0x724>)
 8013814:	21c5      	movs	r1, #197	@ 0xc5
 8013816:	4628      	mov	r0, r5
 8013818:	f000 f9ec 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 801381c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 801381e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8013820:	4a7a      	ldr	r2, [pc, #488]	@ (8013a0c <OTM8009A_Init+0x728>)
 8013822:	4619      	mov	r1, r3
 8013824:	4628      	mov	r0, r5
 8013826:	f000 f9e5 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 801382a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 801382c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 801382e:	4a78      	ldr	r2, [pc, #480]	@ (8013a10 <OTM8009A_Init+0x72c>)
 8013830:	21f5      	movs	r1, #245	@ 0xf5
 8013832:	4628      	mov	r0, r5
 8013834:	f000 f9de 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8013838:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 801383a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 801383c:	4a75      	ldr	r2, [pc, #468]	@ (8013a14 <OTM8009A_Init+0x730>)
 801383e:	4619      	mov	r1, r3
 8013840:	4628      	mov	r0, r5
 8013842:	f000 f9d7 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8013846:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8013848:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 801384a:	4a73      	ldr	r2, [pc, #460]	@ (8013a18 <OTM8009A_Init+0x734>)
 801384c:	21c6      	movs	r1, #198	@ 0xc6
 801384e:	4628      	mov	r0, r5
 8013850:	f000 f9d0 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013854:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8013856:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013858:	4a70      	ldr	r2, [pc, #448]	@ (8013a1c <OTM8009A_Init+0x738>)
 801385a:	4619      	mov	r1, r3
 801385c:	4628      	mov	r0, r5
 801385e:	f000 f9c9 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8013862:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013864:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8013866:	4a6e      	ldr	r2, [pc, #440]	@ (8013a20 <OTM8009A_Init+0x73c>)
 8013868:	21ff      	movs	r1, #255	@ 0xff
 801386a:	4628      	mov	r0, r5
 801386c:	f000 f9c2 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013870:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8013872:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013874:	4a69      	ldr	r2, [pc, #420]	@ (8013a1c <OTM8009A_Init+0x738>)
 8013876:	4619      	mov	r1, r3
 8013878:	4628      	mov	r0, r5
 801387a:	f000 f9bb 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801387e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013880:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013882:	4a66      	ldr	r2, [pc, #408]	@ (8013a1c <OTM8009A_Init+0x738>)
 8013884:	4619      	mov	r1, r3
 8013886:	4628      	mov	r0, r5
 8013888:	f000 f9b4 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 801388c:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801388e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8013890:	4a64      	ldr	r2, [pc, #400]	@ (8013a24 <OTM8009A_Init+0x740>)
 8013892:	21e1      	movs	r1, #225	@ 0xe1
 8013894:	4628      	mov	r0, r5
 8013896:	f000 f9ad 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801389a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 801389c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801389e:	4a5f      	ldr	r2, [pc, #380]	@ (8013a1c <OTM8009A_Init+0x738>)
 80138a0:	4619      	mov	r1, r3
 80138a2:	4628      	mov	r0, r5
 80138a4:	f000 f9a6 	bl	8013bf4 <otm8009a_write_reg>
 80138a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80138aa:	2310      	movs	r3, #16
 80138ac:	4a5e      	ldr	r2, [pc, #376]	@ (8013a28 <OTM8009A_Init+0x744>)
 80138ae:	21e2      	movs	r1, #226	@ 0xe2
 80138b0:	4628      	mov	r0, r5
 80138b2:	f000 f99f 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80138b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80138b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80138ba:	4a5c      	ldr	r2, [pc, #368]	@ (8013a2c <OTM8009A_Init+0x748>)
 80138bc:	2111      	movs	r1, #17
 80138be:	4628      	mov	r0, r5
 80138c0:	f000 f998 	bl	8013bf4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80138c4:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80138c6:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80138c8:	4798      	blx	r3
 80138ca:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80138cc:	68f3      	ldr	r3, [r6, #12]
 80138ce:	4798      	blx	r3
 80138d0:	eba0 0009 	sub.w	r0, r0, r9
 80138d4:	2877      	cmp	r0, #119	@ 0x77
 80138d6:	d9f9      	bls.n	80138cc <OTM8009A_Init+0x5e8>
  switch(ColorCoding)
 80138d8:	2f00      	cmp	r7, #0
 80138da:	d06f      	beq.n	80139bc <OTM8009A_Init+0x6d8>
 80138dc:	2f02      	cmp	r7, #2
 80138de:	d14c      	bne.n	801397a <OTM8009A_Init+0x696>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80138e0:	2300      	movs	r3, #0
 80138e2:	4a53      	ldr	r2, [pc, #332]	@ (8013a30 <OTM8009A_Init+0x74c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80138e4:	213a      	movs	r1, #58	@ 0x3a
 80138e6:	4628      	mov	r0, r5
 80138e8:	f000 f984 	bl	8013bf4 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80138ec:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8013a58 <OTM8009A_Init+0x774>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80138f0:	f1b8 0f01 	cmp.w	r8, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80138f4:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80138f6:	f8c9 7004 	str.w	r7, [r9, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80138fa:	d043      	beq.n	8013984 <OTM8009A_Init+0x6a0>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80138fc:	2300      	movs	r3, #0
 80138fe:	f8c9 3000 	str.w	r3, [r9]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8013902:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8013904:	2300      	movs	r3, #0
 8013906:	4a4b      	ldr	r2, [pc, #300]	@ (8013a34 <OTM8009A_Init+0x750>)
 8013908:	2151      	movs	r1, #81	@ 0x51
 801390a:	4628      	mov	r0, r5
 801390c:	f000 f972 	bl	8013bf4 <otm8009a_write_reg>
 8013910:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8013912:	4633      	mov	r3, r6
 8013914:	4a48      	ldr	r2, [pc, #288]	@ (8013a38 <OTM8009A_Init+0x754>)
 8013916:	2153      	movs	r1, #83	@ 0x53
 8013918:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 801391a:	f8c9 6008 	str.w	r6, [r9, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 801391e:	f000 f969 	bl	8013bf4 <otm8009a_write_reg>
 8013922:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8013924:	4633      	mov	r3, r6
 8013926:	4a45      	ldr	r2, [pc, #276]	@ (8013a3c <OTM8009A_Init+0x758>)
 8013928:	2155      	movs	r1, #85	@ 0x55
 801392a:	4628      	mov	r0, r5
 801392c:	f000 f962 	bl	8013bf4 <otm8009a_write_reg>
 8013930:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8013932:	4633      	mov	r3, r6
 8013934:	4a42      	ldr	r2, [pc, #264]	@ (8013a40 <OTM8009A_Init+0x75c>)
 8013936:	215e      	movs	r1, #94	@ 0x5e
 8013938:	4628      	mov	r0, r5
 801393a:	f000 f95b 	bl	8013bf4 <otm8009a_write_reg>
 801393e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8013940:	4633      	mov	r3, r6
 8013942:	4a40      	ldr	r2, [pc, #256]	@ (8013a44 <OTM8009A_Init+0x760>)
 8013944:	2129      	movs	r1, #41	@ 0x29
 8013946:	4628      	mov	r0, r5
 8013948:	f000 f954 	bl	8013bf4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 801394c:	4633      	mov	r3, r6
 801394e:	4631      	mov	r1, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8013950:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013952:	4a32      	ldr	r2, [pc, #200]	@ (8013a1c <OTM8009A_Init+0x738>)
 8013954:	4628      	mov	r0, r5
 8013956:	f000 f94d 	bl	8013bf4 <otm8009a_write_reg>
 801395a:	4601      	mov	r1, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 801395c:	4633      	mov	r3, r6
 801395e:	4a3a      	ldr	r2, [pc, #232]	@ (8013a48 <OTM8009A_Init+0x764>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8013960:	440c      	add	r4, r1
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8013962:	4628      	mov	r0, r5
 8013964:	212c      	movs	r1, #44	@ 0x2c
 8013966:	f000 f945 	bl	8013bf4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 801396a:	42c4      	cmn	r4, r0
}
 801396c:	bf14      	ite	ne
 801396e:	f04f 30ff 	movne.w	r0, #4294967295
 8013972:	4630      	moveq	r0, r6
 8013974:	b003      	add	sp, #12
 8013976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 801397a:	f1b8 0f01 	cmp.w	r8, #1
 801397e:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8013a58 <OTM8009A_Init+0x774>
 8013982:	d1bb      	bne.n	80138fc <OTM8009A_Init+0x618>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8013984:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8013986:	f10d 0207 	add.w	r2, sp, #7
 801398a:	2136      	movs	r1, #54	@ 0x36
 801398c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 801398e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8013992:	2300      	movs	r3, #0
 8013994:	f000 f92e 	bl	8013bf4 <otm8009a_write_reg>
 8013998:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 801399a:	2304      	movs	r3, #4
 801399c:	4a2b      	ldr	r2, [pc, #172]	@ (8013a4c <OTM8009A_Init+0x768>)
 801399e:	212a      	movs	r1, #42	@ 0x2a
 80139a0:	4628      	mov	r0, r5
 80139a2:	f000 f927 	bl	8013bf4 <otm8009a_write_reg>
 80139a6:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80139a8:	2304      	movs	r3, #4
 80139aa:	4a29      	ldr	r2, [pc, #164]	@ (8013a50 <OTM8009A_Init+0x76c>)
 80139ac:	212b      	movs	r1, #43	@ 0x2b
 80139ae:	4628      	mov	r0, r5
 80139b0:	f000 f920 	bl	8013bf4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80139b4:	f8c9 8000 	str.w	r8, [r9]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80139b8:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80139ba:	e7a2      	b.n	8013902 <OTM8009A_Init+0x61e>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80139bc:	463b      	mov	r3, r7
 80139be:	4a25      	ldr	r2, [pc, #148]	@ (8013a54 <OTM8009A_Init+0x770>)
 80139c0:	e790      	b.n	80138e4 <OTM8009A_Init+0x600>
 80139c2:	bf00      	nop
 80139c4:	080577d2 	.word	0x080577d2
 80139c8:	08057708 	.word	0x08057708
 80139cc:	080577d3 	.word	0x080577d3
 80139d0:	080576fc 	.word	0x080576fc
 80139d4:	080577b2 	.word	0x080577b2
 80139d8:	080576f0 	.word	0x080576f0
 80139dc:	080577d1 	.word	0x080577d1
 80139e0:	080576e0 	.word	0x080576e0
 80139e4:	080577cd 	.word	0x080577cd
 80139e8:	080576d0 	.word	0x080576d0
 80139ec:	080577ce 	.word	0x080577ce
 80139f0:	080576c4 	.word	0x080576c4
 80139f4:	080577cf 	.word	0x080577cf
 80139f8:	080576b4 	.word	0x080576b4
 80139fc:	080577d0 	.word	0x080577d0
 8013a00:	080576a4 	.word	0x080576a4
 8013a04:	080577bd 	.word	0x080577bd
 8013a08:	080577de 	.word	0x080577de
 8013a0c:	080577df 	.word	0x080577df
 8013a10:	080577e0 	.word	0x080577e0
 8013a14:	080577e1 	.word	0x080577e1
 8013a18:	080577e2 	.word	0x080577e2
 8013a1c:	080577b1 	.word	0x080577b1
 8013a20:	080576a0 	.word	0x080576a0
 8013a24:	08057690 	.word	0x08057690
 8013a28:	08057680 	.word	0x08057680
 8013a2c:	080577d4 	.word	0x080577d4
 8013a30:	080577d5 	.word	0x080577d5
 8013a34:	080577d7 	.word	0x080577d7
 8013a38:	080577d8 	.word	0x080577d8
 8013a3c:	080577d9 	.word	0x080577d9
 8013a40:	080577da 	.word	0x080577da
 8013a44:	080577db 	.word	0x080577db
 8013a48:	080577dc 	.word	0x080577dc
 8013a4c:	080577e8 	.word	0x080577e8
 8013a50:	080577e4 	.word	0x080577e4
 8013a54:	080577d6 	.word	0x080577d6
 8013a58:	24008c24 	.word	0x24008c24

08013a5c <OTM8009A_SetBrightness>:
{
 8013a5c:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013a5e:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 8013a62:	4d0c      	ldr	r5, [pc, #48]	@ (8013a94 <OTM8009A_SetBrightness+0x38>)
{
 8013a64:	b083      	sub	sp, #12
 8013a66:	460c      	mov	r4, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013a68:	fba5 5c0c 	umull	r5, ip, r5, ip
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f10d 0207 	add.w	r2, sp, #7
 8013a72:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013a74:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8013a78:	2151      	movs	r1, #81	@ 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8013a7a:	f88d c007 	strb.w	ip, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8013a7e:	f000 f8b9 	bl	8013bf4 <otm8009a_write_reg>
 8013a82:	b918      	cbnz	r0, 8013a8c <OTM8009A_SetBrightness+0x30>
    OTM8009ACtx.Brightness = Brightness;
 8013a84:	4b04      	ldr	r3, [pc, #16]	@ (8013a98 <OTM8009A_SetBrightness+0x3c>)
 8013a86:	609c      	str	r4, [r3, #8]
}
 8013a88:	b003      	add	sp, #12
 8013a8a:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8013a8c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8013a90:	e7fa      	b.n	8013a88 <OTM8009A_SetBrightness+0x2c>
 8013a92:	bf00      	nop
 8013a94:	51eb851f 	.word	0x51eb851f
 8013a98:	24008c24 	.word	0x24008c24

08013a9c <OTM8009A_DisplayOn>:
{
 8013a9c:	b500      	push	{lr}
 8013a9e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8013aa0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8013aa2:	2129      	movs	r1, #41	@ 0x29
 8013aa4:	3010      	adds	r0, #16
 8013aa6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8013aaa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8013aae:	f000 f8a1 	bl	8013bf4 <otm8009a_write_reg>
 8013ab2:	3800      	subs	r0, #0
 8013ab4:	bf18      	it	ne
 8013ab6:	2001      	movne	r0, #1
}
 8013ab8:	4240      	negs	r0, r0
 8013aba:	b003      	add	sp, #12
 8013abc:	f85d fb04 	ldr.w	pc, [sp], #4

08013ac0 <OTM8009A_DisplayOff>:
{
 8013ac0:	b500      	push	{lr}
 8013ac2:	b083      	sub	sp, #12
  uint8_t display = 0;
 8013ac4:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8013ac6:	2128      	movs	r1, #40	@ 0x28
 8013ac8:	3010      	adds	r0, #16
 8013aca:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8013ace:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8013ad2:	f000 f88f 	bl	8013bf4 <otm8009a_write_reg>
 8013ad6:	3800      	subs	r0, #0
 8013ad8:	bf18      	it	ne
 8013ada:	2001      	movne	r0, #1
}
 8013adc:	4240      	negs	r0, r0
 8013ade:	b003      	add	sp, #12
 8013ae0:	f85d fb04 	ldr.w	pc, [sp], #4

08013ae4 <OTM8009A_SetOrientation>:
{
 8013ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8013ae6:	2360      	movs	r3, #96	@ 0x60
{
 8013ae8:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8013aea:	2700      	movs	r7, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8013aec:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8013aee:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8013af2:	f88d 7007 	strb.w	r7, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8013af6:	d83d      	bhi.n	8013b74 <OTM8009A_SetOrientation+0x90>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8013af8:	d021      	beq.n	8013b3e <OTM8009A_SetOrientation+0x5a>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8013afa:	f100 0510 	add.w	r5, r0, #16
 8013afe:	463b      	mov	r3, r7
 8013b00:	f10d 0207 	add.w	r2, sp, #7
 8013b04:	2136      	movs	r1, #54	@ 0x36
 8013b06:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8013b08:	463e      	mov	r6, r7
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8013b0a:	f000 f873 	bl	8013bf4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b0e:	2304      	movs	r3, #4
 8013b10:	4a1a      	ldr	r2, [pc, #104]	@ (8013b7c <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8013b12:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b14:	212a      	movs	r1, #42	@ 0x2a
 8013b16:	4628      	mov	r0, r5
 8013b18:	f000 f86c 	bl	8013bf4 <otm8009a_write_reg>
 8013b1c:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8013b1e:	2304      	movs	r3, #4
 8013b20:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b22:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8013b24:	212b      	movs	r1, #43	@ 0x2b
 8013b26:	4a16      	ldr	r2, [pc, #88]	@ (8013b80 <OTM8009A_SetOrientation+0x9c>)
 8013b28:	f000 f864 	bl	8013bf4 <otm8009a_write_reg>
 8013b2c:	4420      	add	r0, r4
  if(ret != OTM8009A_OK)
 8013b2e:	3800      	subs	r0, #0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8013b30:	4b14      	ldr	r3, [pc, #80]	@ (8013b84 <OTM8009A_SetOrientation+0xa0>)
  if(ret != OTM8009A_OK)
 8013b32:	bf18      	it	ne
 8013b34:	2001      	movne	r0, #1
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8013b36:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8013b38:	4240      	negs	r0, r0
}
 8013b3a:	b003      	add	sp, #12
 8013b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8013b3e:	f100 0510 	add.w	r5, r0, #16
 8013b42:	463b      	mov	r3, r7
 8013b44:	f10d 0206 	add.w	r2, sp, #6
 8013b48:	460e      	mov	r6, r1
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	2136      	movs	r1, #54	@ 0x36
 8013b4e:	f000 f851 	bl	8013bf4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b52:	2304      	movs	r3, #4
 8013b54:	4a09      	ldr	r2, [pc, #36]	@ (8013b7c <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8013b56:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b58:	212a      	movs	r1, #42	@ 0x2a
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f000 f84a 	bl	8013bf4 <otm8009a_write_reg>
 8013b60:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8013b62:	2304      	movs	r3, #4
 8013b64:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8013b66:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8013b68:	212b      	movs	r1, #43	@ 0x2b
 8013b6a:	4a05      	ldr	r2, [pc, #20]	@ (8013b80 <OTM8009A_SetOrientation+0x9c>)
 8013b6c:	f000 f842 	bl	8013bf4 <otm8009a_write_reg>
 8013b70:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8013b72:	e7dc      	b.n	8013b2e <OTM8009A_SetOrientation+0x4a>
    ret = OTM8009A_ERROR;
 8013b74:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8013b78:	e7df      	b.n	8013b3a <OTM8009A_SetOrientation+0x56>
 8013b7a:	bf00      	nop
 8013b7c:	080577e8 	.word	0x080577e8
 8013b80:	080577e4 	.word	0x080577e4
 8013b84:	24008c24 	.word	0x24008c24

08013b88 <OTM8009A_ReadID>:
{ 
 8013b88:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8013b8a:	3010      	adds	r0, #16
 8013b8c:	21da      	movs	r1, #218	@ 0xda
{ 
 8013b8e:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8013b90:	2301      	movs	r3, #1
 8013b92:	f000 f827 	bl	8013be4 <otm8009a_read_reg>
 8013b96:	3800      	subs	r0, #0
 8013b98:	bf18      	it	ne
 8013b9a:	2001      	movne	r0, #1
}  
 8013b9c:	4240      	negs	r0, r0
 8013b9e:	bd08      	pop	{r3, pc}

08013ba0 <OTM8009A_DrawVLine>:
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
 8013ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop

08013ba8 <OTM8009A_GetPixel>:
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
 8013ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop

08013bb0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8013bb0:	b180      	cbz	r0, 8013bd4 <OTM8009A_RegisterBusIO+0x24>
 8013bb2:	4603      	mov	r3, r0
{
 8013bb4:	b410      	push	{r4}
    pObj->IO.WriteReg  = pIO->WriteReg;
 8013bb6:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 8013bba:	68c8      	ldr	r0, [r1, #12]
 8013bbc:	605a      	str	r2, [r3, #4]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8013bbe:	4907      	ldr	r1, [pc, #28]	@ (8013bdc <OTM8009A_RegisterBusIO+0x2c>)
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8013bc0:	4a07      	ldr	r2, [pc, #28]	@ (8013be0 <OTM8009A_RegisterBusIO+0x30>)
    pObj->Ctx.handle   = pObj;
 8013bc2:	619b      	str	r3, [r3, #24]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8013bc4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8013bc8:	e9c3 2104 	strd	r2, r1, [r3, #16]
  int32_t ret = OTM8009A_OK;
 8013bcc:	2000      	movs	r0, #0
}
 8013bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bd2:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8013bd4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013bd8:	4770      	bx	lr
 8013bda:	bf00      	nop
 8013bdc:	080132c5 	.word	0x080132c5
 8013be0:	080132d5 	.word	0x080132d5

08013be4 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8013be4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8013be6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8013bea:	46a4      	mov	ip, r4
}
 8013bec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8013bf0:	4760      	bx	ip
 8013bf2:	bf00      	nop

08013bf4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8013bf4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8013bf6:	6804      	ldr	r4, [r0, #0]
 8013bf8:	6880      	ldr	r0, [r0, #8]
 8013bfa:	46a4      	mov	ip, r4
}
 8013bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8013c00:	4760      	bx	ip
 8013c02:	bf00      	nop

08013c04 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8013c04:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d102      	bne.n	8013c12 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return OV5640_OK;
}
 8013c12:	2000      	movs	r0, #0
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop

08013c18 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8013c18:	f04f 30ff 	mov.w	r0, #4294967295
 8013c1c:	4770      	bx	lr
 8013c1e:	bf00      	nop

08013c20 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8013c20:	b160      	cbz	r0, 8013c3c <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8013c22:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8013c24:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8013c26:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8013c28:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8013c2a:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_Resolution    = 1;
 8013c2c:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8013c2e:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8013c30:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 1;
 8013c32:	e9c1 3305 	strd	r3, r3, [r1, #20]
    Capabilities->Config_Zoom          = 1;
 8013c36:	e9c1 3308 	strd	r3, r3, [r1, #32]
    ret = OV5640_OK;
 8013c3a:	4770      	bx	lr
    ret = OV5640_ERROR;
 8013c3c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop

08013c44 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8013c44:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8013c46:	6904      	ldr	r4, [r0, #16]
 8013c48:	8900      	ldrh	r0, [r0, #8]
 8013c4a:	46a4      	mov	ip, r4
}
 8013c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8013c50:	4760      	bx	ip
 8013c52:	bf00      	nop

08013c54 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8013c54:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8013c56:	68c4      	ldr	r4, [r0, #12]
 8013c58:	8900      	ldrh	r0, [r0, #8]
 8013c5a:	46a4      	mov	ip, r4
}
 8013c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8013c60:	4760      	bx	ip
 8013c62:	bf00      	nop

08013c64 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8013c64:	2904      	cmp	r1, #4
 8013c66:	f200 80a8 	bhi.w	8013dba <OV5640_SetResolution+0x156>
    switch (Resolution)
 8013c6a:	3901      	subs	r1, #1
{
 8013c6c:	b530      	push	{r4, r5, lr}
 8013c6e:	b083      	sub	sp, #12
    switch (Resolution)
 8013c70:	2903      	cmp	r1, #3
 8013c72:	f200 80a5 	bhi.w	8013dc0 <OV5640_SetResolution+0x15c>
 8013c76:	e8df f001 	tbb	[pc, r1]
 8013c7a:	6439      	.short	0x6439
 8013c7c:	028f      	.short	0x028f
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013c7e:	2103      	movs	r1, #3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013c80:	f100 0418 	add.w	r4, r0, #24
 8013c84:	2301      	movs	r3, #1
 8013c86:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013c8a:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f643 0108 	movw	r1, #14344	@ 0x3808
 8013c94:	f001 f960 	bl	8014f58 <ov5640_write_reg>
 8013c98:	bb20      	cbnz	r0, 8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013c9a:	2120      	movs	r1, #32
 8013c9c:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	f10d 0207 	add.w	r2, sp, #7
 8013ca6:	f643 0109 	movw	r1, #14345	@ 0x3809
 8013caa:	4620      	mov	r0, r4
 8013cac:	f001 f954 	bl	8014f58 <ov5640_write_reg>
 8013cb0:	b9c0      	cbnz	r0, 8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013cb2:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013cb4:	f10d 0207 	add.w	r2, sp, #7
 8013cb8:	f643 010a 	movw	r1, #14346	@ 0x380a
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013cc0:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013cc4:	f001 f948 	bl	8014f58 <ov5640_write_reg>
 8013cc8:	b960      	cbnz	r0, 8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013cca:	f04f 0ce0 	mov.w	ip, #224	@ 0xe0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013cce:	462b      	mov	r3, r5
 8013cd0:	f10d 0207 	add.w	r2, sp, #7
 8013cd4:	f643 010b 	movw	r1, #14347	@ 0x380b
 8013cd8:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8013cda:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8013cde:	f001 f93b 	bl	8014f58 <ov5640_write_reg>
 8013ce2:	b108      	cbz	r0, 8013ce8 <OV5640_SetResolution+0x84>
{
 8013ce4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013ce8:	b003      	add	sp, #12
 8013cea:	bd30      	pop	{r4, r5, pc}
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013cec:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8013cee:	f100 0418 	add.w	r4, r0, #24
 8013cf2:	f10d 0207 	add.w	r2, sp, #7
 8013cf6:	f643 0108 	movw	r1, #14344	@ 0x3808
 8013cfa:	462b      	mov	r3, r5
 8013cfc:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013cfe:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8013d02:	f001 f929 	bl	8014f58 <ov5640_write_reg>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d1ec      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013d0a:	2240      	movs	r2, #64	@ 0x40
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8013d0c:	462b      	mov	r3, r5
 8013d0e:	f643 0109 	movw	r1, #14345	@ 0x3809
 8013d12:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013d14:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8013d18:	f10d 0207 	add.w	r2, sp, #7
 8013d1c:	f001 f91c 	bl	8014f58 <ov5640_write_reg>
 8013d20:	2800      	cmp	r0, #0
 8013d22:	d1df      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013d24:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8013d28:	462b      	mov	r3, r5
 8013d2a:	f10d 0207 	add.w	r2, sp, #7
 8013d2e:	f643 010a 	movw	r1, #14346	@ 0x380a
 8013d32:	4620      	mov	r0, r4
 8013d34:	f001 f910 	bl	8014f58 <ov5640_write_reg>
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	d1d3      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8013d3c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8013d40:	e7c5      	b.n	8013cce <OV5640_SetResolution+0x6a>
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d42:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8013d44:	f100 0418 	add.w	r4, r0, #24
 8013d48:	f10d 0207 	add.w	r2, sp, #7
 8013d4c:	f643 0108 	movw	r1, #14344	@ 0x3808
 8013d50:	462b      	mov	r3, r5
 8013d52:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d54:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8013d58:	f001 f8fe 	bl	8014f58 <ov5640_write_reg>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d1c1      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d60:	22e0      	movs	r2, #224	@ 0xe0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8013d62:	462b      	mov	r3, r5
 8013d64:	f643 0109 	movw	r1, #14345	@ 0x3809
 8013d68:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d6a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8013d6e:	f10d 0207 	add.w	r2, sp, #7
 8013d72:	f001 f8f1 	bl	8014f58 <ov5640_write_reg>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d1b4      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
 8013d7a:	462b      	mov	r3, r5
 8013d7c:	f10d 0207 	add.w	r2, sp, #7
 8013d80:	f643 010a 	movw	r1, #14346	@ 0x380a
 8013d84:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d86:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8013d8a:	f001 f8e5 	bl	8014f58 <ov5640_write_reg>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d1a8      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_480x272[index][1];
 8013d92:	f04f 0c10 	mov.w	ip, #16
 8013d96:	e79a      	b.n	8013cce <OV5640_SetResolution+0x6a>
            tmp = (uint8_t)OV5640_VGA[index][1];
 8013d98:	2102      	movs	r1, #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8013d9a:	f100 0418 	add.w	r4, r0, #24
 8013d9e:	2301      	movs	r3, #1
 8013da0:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_VGA[index][1];
 8013da4:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8013da8:	4620      	mov	r0, r4
 8013daa:	f643 0108 	movw	r1, #14344	@ 0x3808
 8013dae:	f001 f8d3 	bl	8014f58 <ov5640_write_reg>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	d196      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_VGA[index][1];
 8013db6:	2180      	movs	r1, #128	@ 0x80
 8013db8:	e770      	b.n	8013c9c <OV5640_SetResolution+0x38>
    ret = OV5640_ERROR;
 8013dba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013dbe:	4770      	bx	lr
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013dc0:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013dc2:	f100 0418 	add.w	r4, r0, #24
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	f10d 0207 	add.w	r2, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013dcc:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f643 0108 	movw	r1, #14344	@ 0x3808
 8013dd6:	f001 f8bf 	bl	8014f58 <ov5640_write_reg>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d182      	bne.n	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013dde:	21a0      	movs	r1, #160	@ 0xa0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013de0:	2301      	movs	r3, #1
 8013de2:	f10d 0207 	add.w	r2, sp, #7
 8013de6:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013de8:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013dec:	f643 0109 	movw	r1, #14345	@ 0x3809
 8013df0:	f001 f8b2 	bl	8014f58 <ov5640_write_reg>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	f47f af75 	bne.w	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013dfa:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013dfe:	2301      	movs	r3, #1
 8013e00:	f10d 0207 	add.w	r2, sp, #7
 8013e04:	f643 010a 	movw	r1, #14346	@ 0x380a
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f001 f8a5 	bl	8014f58 <ov5640_write_reg>
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	f47f af68 	bne.w	8013ce4 <OV5640_SetResolution+0x80>
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013e14:	2578      	movs	r5, #120	@ 0x78
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013e16:	2301      	movs	r3, #1
 8013e18:	f10d 0207 	add.w	r2, sp, #7
 8013e1c:	f643 010b 	movw	r1, #14347	@ 0x380b
 8013e20:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8013e22:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8013e26:	f001 f897 	bl	8014f58 <ov5640_write_reg>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	f43f af5c 	beq.w	8013ce8 <OV5640_SetResolution+0x84>
 8013e30:	e758      	b.n	8013ce4 <OV5640_SetResolution+0x80>
 8013e32:	bf00      	nop

08013e34 <OV5640_SetLightMode>:
{
 8013e34:	b570      	push	{r4, r5, r6, lr}
  tmp = 0x00;
 8013e36:	2200      	movs	r2, #0
{
 8013e38:	b082      	sub	sp, #8
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8013e3a:	f100 0418 	add.w	r4, r0, #24
{
 8013e3e:	460d      	mov	r5, r1
  tmp = 0x00;
 8013e40:	f88d 2007 	strb.w	r2, [sp, #7]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8013e44:	2301      	movs	r3, #1
 8013e46:	f10d 0207 	add.w	r2, sp, #7
 8013e4a:	f243 4106 	movw	r1, #13318	@ 0x3406
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f001 f882 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8013e54:	b108      	cbz	r0, 8013e5a <OV5640_SetLightMode+0x26>
}
 8013e56:	b002      	add	sp, #8
 8013e58:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x46;
 8013e5a:	2246      	movs	r2, #70	@ 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	f245 1190 	movw	r1, #20880	@ 0x5190
 8013e62:	4620      	mov	r0, r4
    tmp = 0x46;
 8013e64:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8013e68:	f10d 0207 	add.w	r2, sp, #7
 8013e6c:	f001 f874 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d1f0      	bne.n	8013e56 <OV5640_SetLightMode+0x22>
    tmp = 0xF8;
 8013e74:	22f8      	movs	r2, #248	@ 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8013e76:	2301      	movs	r3, #1
 8013e78:	f245 1191 	movw	r1, #20881	@ 0x5191
 8013e7c:	4620      	mov	r0, r4
    tmp = 0xF8;
 8013e7e:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8013e82:	f10d 0207 	add.w	r2, sp, #7
 8013e86:	f001 f867 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	d1e3      	bne.n	8013e56 <OV5640_SetLightMode+0x22>
    tmp = 0x04;
 8013e8e:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8013e90:	2301      	movs	r3, #1
 8013e92:	f245 1192 	movw	r1, #20882	@ 0x5192
 8013e96:	4620      	mov	r0, r4
    tmp = 0x04;
 8013e98:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8013e9c:	f10d 0207 	add.w	r2, sp, #7
 8013ea0:	f001 f85a 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d1d6      	bne.n	8013e56 <OV5640_SetLightMode+0x22>
    switch (LightMode)
 8013ea8:	1e69      	subs	r1, r5, #1
 8013eaa:	2907      	cmp	r1, #7
 8013eac:	d809      	bhi.n	8013ec2 <OV5640_SetLightMode+0x8e>
 8013eae:	e8df f011 	tbh	[pc, r1, lsl #1]
 8013eb2:	015f      	.short	0x015f
 8013eb4:	0008010b 	.word	0x0008010b
 8013eb8:	000800b9 	.word	0x000800b9
 8013ebc:	00080008 	.word	0x00080008
 8013ec0:	005e      	.short	0x005e
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013ec2:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	f10d 0207 	add.w	r2, sp, #7
 8013eca:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013ecc:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013ed0:	f243 4106 	movw	r1, #13318	@ 0x3406
 8013ed4:	f001 f840 	bl	8014f58 <ov5640_write_reg>
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	d145      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013edc:	2504      	movs	r5, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013ede:	2301      	movs	r3, #1
 8013ee0:	f10d 0207 	add.w	r2, sp, #7
 8013ee4:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8013ee8:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013eea:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013eee:	f001 f833 	bl	8014f58 <ov5640_write_reg>
 8013ef2:	bbc8      	cbnz	r0, 8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013ef4:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013ef8:	2301      	movs	r3, #1
 8013efa:	f10d 0207 	add.w	r2, sp, #7
 8013efe:	f243 4101 	movw	r1, #13313	@ 0x3401
 8013f02:	4620      	mov	r0, r4
 8013f04:	f001 f828 	bl	8014f58 <ov5640_write_reg>
 8013f08:	bb70      	cbnz	r0, 8013f68 <OV5640_SetLightMode+0x134>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	f10d 0207 	add.w	r2, sp, #7
 8013f10:	f243 4102 	movw	r1, #13314	@ 0x3402
 8013f14:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013f16:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013f1a:	f001 f81d 	bl	8014f58 <ov5640_write_reg>
 8013f1e:	bb18      	cbnz	r0, 8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013f20:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013f24:	2301      	movs	r3, #1
 8013f26:	f10d 0207 	add.w	r2, sp, #7
 8013f2a:	f243 4103 	movw	r1, #13315	@ 0x3403
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f001 f812 	bl	8014f58 <ov5640_write_reg>
 8013f34:	b9c0      	cbnz	r0, 8013f68 <OV5640_SetLightMode+0x134>
 8013f36:	2301      	movs	r3, #1
 8013f38:	f10d 0207 	add.w	r2, sp, #7
 8013f3c:	f243 4104 	movw	r1, #13316	@ 0x3404
 8013f40:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013f42:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013f46:	f001 f807 	bl	8014f58 <ov5640_write_reg>
 8013f4a:	4605      	mov	r5, r0
 8013f4c:	b960      	cbnz	r0, 8013f68 <OV5640_SetLightMode+0x134>
 8013f4e:	2301      	movs	r3, #1
 8013f50:	f10d 0207 	add.w	r2, sp, #7
 8013f54:	f243 4105 	movw	r1, #13317	@ 0x3405
 8013f58:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8013f5a:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8013f5e:	f000 fffb 	bl	8014f58 <ov5640_write_reg>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	f43f af77 	beq.w	8013e56 <OV5640_SetLightMode+0x22>
{
 8013f68:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8013f6c:	e773      	b.n	8013e56 <OV5640_SetLightMode+0x22>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013f6e:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013f70:	f10d 0207 	add.w	r2, sp, #7
 8013f74:	f243 4106 	movw	r1, #13318	@ 0x3406
 8013f78:	4620      	mov	r0, r4
 8013f7a:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013f7c:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013f80:	f000 ffea 	bl	8014f58 <ov5640_write_reg>
 8013f84:	2800      	cmp	r0, #0
 8013f86:	d1ef      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013f88:	2206      	movs	r2, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013f8a:	462b      	mov	r3, r5
 8013f8c:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8013f90:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013f92:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013f96:	f10d 0207 	add.w	r2, sp, #7
 8013f9a:	f000 ffdd 	bl	8014f58 <ov5640_write_reg>
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	d1e2      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013fa2:	2248      	movs	r2, #72	@ 0x48
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013fa4:	462b      	mov	r3, r5
 8013fa6:	f243 4101 	movw	r1, #13313	@ 0x3401
 8013faa:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013fac:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013fb0:	f10d 0207 	add.w	r2, sp, #7
 8013fb4:	f000 ffd0 	bl	8014f58 <ov5640_write_reg>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d1d5      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013fbc:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013fbe:	462b      	mov	r3, r5
 8013fc0:	f10d 0207 	add.w	r2, sp, #7
 8013fc4:	f243 4102 	movw	r1, #13314	@ 0x3402
 8013fc8:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013fca:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013fce:	f000 ffc3 	bl	8014f58 <ov5640_write_reg>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d1c8      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013fd6:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013fda:	462b      	mov	r3, r5
 8013fdc:	f10d 0207 	add.w	r2, sp, #7
 8013fe0:	f243 4103 	movw	r1, #13315	@ 0x3403
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f000 ffb7 	bl	8014f58 <ov5640_write_reg>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d1bc      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
 8013fee:	462b      	mov	r3, r5
 8013ff0:	f10d 0207 	add.w	r2, sp, #7
 8013ff4:	f243 4104 	movw	r1, #13316	@ 0x3404
 8013ff8:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8013ffa:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8013ffe:	f000 ffab 	bl	8014f58 <ov5640_write_reg>
 8014002:	2800      	cmp	r0, #0
 8014004:	d1b0      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8014006:	26d3      	movs	r6, #211	@ 0xd3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014008:	462b      	mov	r3, r5
 801400a:	f10d 0207 	add.w	r2, sp, #7
 801400e:	f243 4105 	movw	r1, #13317	@ 0x3405
 8014012:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014014:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014018:	f000 ff9e 	bl	8014f58 <ov5640_write_reg>
 801401c:	2800      	cmp	r0, #0
 801401e:	f43f af1a 	beq.w	8013e56 <OV5640_SetLightMode+0x22>
 8014022:	e7a1      	b.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014024:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014026:	f10d 0207 	add.w	r2, sp, #7
 801402a:	f243 4106 	movw	r1, #13318	@ 0x3406
 801402e:	4620      	mov	r0, r4
 8014030:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014032:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014036:	f000 ff8f 	bl	8014f58 <ov5640_write_reg>
 801403a:	2800      	cmp	r0, #0
 801403c:	d194      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 801403e:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014040:	462b      	mov	r3, r5
 8014042:	f10d 0207 	add.w	r2, sp, #7
 8014046:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 801404a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 801404c:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014050:	f000 ff82 	bl	8014f58 <ov5640_write_reg>
 8014054:	2800      	cmp	r0, #0
 8014056:	d187      	bne.n	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014058:	2310      	movs	r3, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 801405a:	f10d 0207 	add.w	r2, sp, #7
 801405e:	f243 4101 	movw	r1, #13313	@ 0x3401
 8014062:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014064:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014068:	462b      	mov	r3, r5
 801406a:	f000 ff75 	bl	8014f58 <ov5640_write_reg>
 801406e:	2800      	cmp	r0, #0
 8014070:	f47f af7a 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
 8014074:	462b      	mov	r3, r5
 8014076:	f10d 0207 	add.w	r2, sp, #7
 801407a:	f243 4102 	movw	r1, #13314	@ 0x3402
 801407e:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8014080:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014084:	f000 ff68 	bl	8014f58 <ov5640_write_reg>
 8014088:	2800      	cmp	r0, #0
 801408a:	f47f af6d 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 801408e:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8014092:	462b      	mov	r3, r5
 8014094:	f10d 0207 	add.w	r2, sp, #7
 8014098:	f243 4103 	movw	r1, #13315	@ 0x3403
 801409c:	4620      	mov	r0, r4
 801409e:	f000 ff5b 	bl	8014f58 <ov5640_write_reg>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	f47f af60 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80140a8:	2208      	movs	r2, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80140aa:	462b      	mov	r3, r5
 80140ac:	f243 4104 	movw	r1, #13316	@ 0x3404
 80140b0:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80140b2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80140b6:	f10d 0207 	add.w	r2, sp, #7
 80140ba:	f000 ff4d 	bl	8014f58 <ov5640_write_reg>
 80140be:	2800      	cmp	r0, #0
 80140c0:	f47f af52 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80140c4:	26b6      	movs	r6, #182	@ 0xb6
 80140c6:	e79f      	b.n	8014008 <OV5640_SetLightMode+0x1d4>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80140c8:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80140ca:	f10d 0207 	add.w	r2, sp, #7
 80140ce:	f243 4106 	movw	r1, #13318	@ 0x3406
 80140d2:	4620      	mov	r0, r4
 80140d4:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80140d6:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80140da:	f000 ff3d 	bl	8014f58 <ov5640_write_reg>
 80140de:	2800      	cmp	r0, #0
 80140e0:	f47f af42 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80140e4:	2205      	movs	r2, #5
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80140e6:	462b      	mov	r3, r5
 80140e8:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80140ec:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80140ee:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80140f2:	f10d 0207 	add.w	r2, sp, #7
 80140f6:	f000 ff2f 	bl	8014f58 <ov5640_write_reg>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	f47f af34 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8014100:	2248      	movs	r2, #72	@ 0x48
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8014102:	462b      	mov	r3, r5
 8014104:	f243 4101 	movw	r1, #13313	@ 0x3401
 8014108:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 801410a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 801410e:	f10d 0207 	add.w	r2, sp, #7
 8014112:	f000 ff21 	bl	8014f58 <ov5640_write_reg>
 8014116:	2800      	cmp	r0, #0
 8014118:	f47f af26 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 801411c:	2204      	movs	r2, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 801411e:	462b      	mov	r3, r5
 8014120:	f243 4102 	movw	r1, #13314	@ 0x3402
 8014124:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8014126:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 801412a:	f10d 0207 	add.w	r2, sp, #7
 801412e:	f000 ff13 	bl	8014f58 <ov5640_write_reg>
 8014132:	2800      	cmp	r0, #0
 8014134:	f47f af18 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8014138:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 801413c:	462b      	mov	r3, r5
 801413e:	f10d 0207 	add.w	r2, sp, #7
 8014142:	f243 4103 	movw	r1, #13315	@ 0x3403
 8014146:	4620      	mov	r0, r4
 8014148:	f000 ff06 	bl	8014f58 <ov5640_write_reg>
 801414c:	2800      	cmp	r0, #0
 801414e:	f47f af0b 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8014152:	2207      	movs	r2, #7
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8014154:	462b      	mov	r3, r5
 8014156:	f243 4104 	movw	r1, #13316	@ 0x3404
 801415a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 801415c:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8014160:	446a      	add	r2, sp
 8014162:	f000 fef9 	bl	8014f58 <ov5640_write_reg>
 8014166:	2800      	cmp	r0, #0
 8014168:	f47f aefe 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 801416c:	26cf      	movs	r6, #207	@ 0xcf
 801416e:	e74b      	b.n	8014008 <OV5640_SetLightMode+0x1d4>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8014170:	2501      	movs	r5, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8014172:	f10d 0207 	add.w	r2, sp, #7
 8014176:	f243 4106 	movw	r1, #13318	@ 0x3406
 801417a:	4620      	mov	r0, r4
 801417c:	462b      	mov	r3, r5
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 801417e:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8014182:	f000 fee9 	bl	8014f58 <ov5640_write_reg>
 8014186:	2800      	cmp	r0, #0
 8014188:	f47f aeee 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 801418c:	2206      	movs	r2, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 801418e:	462b      	mov	r3, r5
 8014190:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8014194:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8014196:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 801419a:	f10d 0207 	add.w	r2, sp, #7
 801419e:	f000 fedb 	bl	8014f58 <ov5640_write_reg>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	f47f aee0 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80141a8:	221c      	movs	r2, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80141aa:	462b      	mov	r3, r5
 80141ac:	f243 4101 	movw	r1, #13313	@ 0x3401
 80141b0:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80141b2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80141b6:	f10d 0207 	add.w	r2, sp, #7
 80141ba:	f000 fecd 	bl	8014f58 <ov5640_write_reg>
 80141be:	2800      	cmp	r0, #0
 80141c0:	f47f aed2 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80141c4:	2604      	movs	r6, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80141c6:	462b      	mov	r3, r5
 80141c8:	f10d 0207 	add.w	r2, sp, #7
 80141cc:	f243 4102 	movw	r1, #13314	@ 0x3402
 80141d0:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80141d2:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80141d6:	f000 febf 	bl	8014f58 <ov5640_write_reg>
 80141da:	2800      	cmp	r0, #0
 80141dc:	f47f aec4 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80141e0:	f88d 0007 	strb.w	r0, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80141e4:	462b      	mov	r3, r5
 80141e6:	f10d 0207 	add.w	r2, sp, #7
 80141ea:	f243 4103 	movw	r1, #13315	@ 0x3403
 80141ee:	4620      	mov	r0, r4
 80141f0:	f000 feb2 	bl	8014f58 <ov5640_write_reg>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	f47f aeb7 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
 80141fa:	462b      	mov	r3, r5
 80141fc:	f10d 0207 	add.w	r2, sp, #7
 8014200:	f243 4104 	movw	r1, #13316	@ 0x3404
 8014204:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8014206:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 801420a:	f000 fea5 	bl	8014f58 <ov5640_write_reg>
 801420e:	2800      	cmp	r0, #0
 8014210:	f47f aeaa 	bne.w	8013f68 <OV5640_SetLightMode+0x134>
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8014214:	26f3      	movs	r6, #243	@ 0xf3
 8014216:	e6f7      	b.n	8014008 <OV5640_SetLightMode+0x1d4>

08014218 <OV5640_SetColorEffect>:
  switch (Effect)
 8014218:	3901      	subs	r1, #1
{
 801421a:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801421c:	f100 0418 	add.w	r4, r0, #24
{
 8014220:	b083      	sub	sp, #12
  switch (Effect)
 8014222:	291f      	cmp	r1, #31
 8014224:	d821      	bhi.n	801426a <OV5640_SetColorEffect+0x52>
 8014226:	e8df f011 	tbh	[pc, r1, lsl #1]
 801422a:	003d      	.short	0x003d
 801422c:	0020004f 	.word	0x0020004f
 8014230:	00200087 	.word	0x00200087
 8014234:	00200020 	.word	0x00200020
 8014238:	002000b4 	.word	0x002000b4
 801423c:	00200020 	.word	0x00200020
 8014240:	00200020 	.word	0x00200020
 8014244:	00200020 	.word	0x00200020
 8014248:	002000d1 	.word	0x002000d1
 801424c:	00200020 	.word	0x00200020
 8014250:	00200020 	.word	0x00200020
 8014254:	00200020 	.word	0x00200020
 8014258:	00200020 	.word	0x00200020
 801425c:	00200020 	.word	0x00200020
 8014260:	00200020 	.word	0x00200020
 8014264:	00200020 	.word	0x00200020
 8014268:	00fd      	.short	0x00fd
      tmp = 0x7F;
 801426a:	217f      	movs	r1, #127	@ 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801426c:	2301      	movs	r3, #1
 801426e:	f10d 0207 	add.w	r2, sp, #7
 8014272:	4620      	mov	r0, r4
      tmp = 0x7F;
 8014274:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014278:	f245 0101 	movw	r1, #20481	@ 0x5001
 801427c:	f000 fe6c 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014280:	4684      	mov	ip, r0
 8014282:	b9e8      	cbnz	r0, 80142c0 <OV5640_SetColorEffect+0xa8>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014284:	2301      	movs	r3, #1
 8014286:	f10d 0207 	add.w	r2, sp, #7
 801428a:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 801428e:	4620      	mov	r0, r4
        tmp = 0x00;
 8014290:	f88d c007 	strb.w	ip, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014294:	f000 fe60 	bl	8014f58 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8014298:	3800      	subs	r0, #0
 801429a:	bf18      	it	ne
 801429c:	2001      	movne	r0, #1
 801429e:	4240      	negs	r0, r0
}
 80142a0:	b003      	add	sp, #12
 80142a2:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 80142a4:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80142a6:	2301      	movs	r3, #1
 80142a8:	f10d 0207 	add.w	r2, sp, #7
 80142ac:	4620      	mov	r0, r4
      tmp = 0xFF;
 80142ae:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80142b2:	f245 0101 	movw	r1, #20481	@ 0x5001
 80142b6:	f000 fe4f 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80142ba:	2800      	cmp	r0, #0
 80142bc:	f000 80c7 	beq.w	801444e <OV5640_SetColorEffect+0x236>
        ret = OV5640_ERROR;
 80142c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80142c4:	b003      	add	sp, #12
 80142c6:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 80142c8:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80142ca:	2301      	movs	r3, #1
 80142cc:	f10d 0207 	add.w	r2, sp, #7
 80142d0:	4620      	mov	r0, r4
      tmp = 0xFF;
 80142d2:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80142d6:	f245 0101 	movw	r1, #20481	@ 0x5001
 80142da:	f000 fe3d 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80142de:	2800      	cmp	r0, #0
 80142e0:	d1ee      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 80142e2:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80142e4:	2301      	movs	r3, #1
 80142e6:	f10d 0207 	add.w	r2, sp, #7
 80142ea:	4620      	mov	r0, r4
        tmp = 0x18;
 80142ec:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80142f0:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80142f4:	f000 fe30 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80142f8:	2800      	cmp	r0, #0
 80142fa:	d1e1      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x80;
 80142fc:	2180      	movs	r1, #128	@ 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80142fe:	2301      	movs	r3, #1
 8014300:	f10d 0207 	add.w	r2, sp, #7
 8014304:	4620      	mov	r0, r4
        tmp = 0x80;
 8014306:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 801430a:	f245 5183 	movw	r1, #21891	@ 0x5583
 801430e:	f000 fe23 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014312:	2800      	cmp	r0, #0
 8014314:	d1d4      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0xC0;
 8014316:	25c0      	movs	r5, #192	@ 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8014318:	2301      	movs	r3, #1
 801431a:	f10d 0207 	add.w	r2, sp, #7
 801431e:	f245 5184 	movw	r1, #21892	@ 0x5584
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014322:	4620      	mov	r0, r4
        tmp = 0x40;
 8014324:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014328:	f000 fe16 	bl	8014f58 <ov5640_write_reg>
      if (ret != OV5640_OK)
 801432c:	3800      	subs	r0, #0
 801432e:	bf18      	it	ne
 8014330:	2001      	movne	r0, #1
 8014332:	4240      	negs	r0, r0
}
 8014334:	b003      	add	sp, #12
 8014336:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8014338:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801433a:	2301      	movs	r3, #1
 801433c:	f10d 0207 	add.w	r2, sp, #7
 8014340:	4620      	mov	r0, r4
      tmp = 0xFF;
 8014342:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014346:	f245 0101 	movw	r1, #20481	@ 0x5001
 801434a:	f000 fe05 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 801434e:	2800      	cmp	r0, #0
 8014350:	d1b6      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 8014352:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014354:	2301      	movs	r3, #1
 8014356:	f10d 0207 	add.w	r2, sp, #7
 801435a:	4620      	mov	r0, r4
        tmp = 0x18;
 801435c:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014360:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8014364:	f000 fdf8 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014368:	2800      	cmp	r0, #0
 801436a:	d1a9      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x60;
 801436c:	2560      	movs	r5, #96	@ 0x60
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 801436e:	2301      	movs	r3, #1
 8014370:	f10d 0207 	add.w	r2, sp, #7
 8014374:	f245 5183 	movw	r1, #21891	@ 0x5583
 8014378:	4620      	mov	r0, r4
        tmp = 0x80;
 801437a:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 801437e:	f000 fdeb 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014382:	2800      	cmp	r0, #0
 8014384:	d19c      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8014386:	2301      	movs	r3, #1
 8014388:	f10d 0207 	add.w	r2, sp, #7
 801438c:	f245 5184 	movw	r1, #21892	@ 0x5584
 8014390:	e7c7      	b.n	8014322 <OV5640_SetColorEffect+0x10a>
      tmp = 0xFF;
 8014392:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014394:	2301      	movs	r3, #1
 8014396:	f10d 0207 	add.w	r2, sp, #7
 801439a:	4620      	mov	r0, r4
      tmp = 0xFF;
 801439c:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80143a0:	f245 0101 	movw	r1, #20481	@ 0x5001
 80143a4:	f000 fdd8 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d189      	bne.n	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 80143ac:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80143ae:	2301      	movs	r3, #1
 80143b0:	f10d 0207 	add.w	r2, sp, #7
 80143b4:	4620      	mov	r0, r4
        tmp = 0x18;
 80143b6:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80143ba:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80143be:	f000 fdcb 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80143c2:	2800      	cmp	r0, #0
 80143c4:	f47f af7c 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x80;
 80143c8:	2580      	movs	r5, #128	@ 0x80
 80143ca:	e7d0      	b.n	801436e <OV5640_SetColorEffect+0x156>
      tmp = 0xFF;
 80143cc:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80143ce:	2301      	movs	r3, #1
 80143d0:	f10d 0207 	add.w	r2, sp, #7
 80143d4:	4620      	mov	r0, r4
      tmp = 0xFF;
 80143d6:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80143da:	f245 0101 	movw	r1, #20481	@ 0x5001
 80143de:	f000 fdbb 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80143e2:	2800      	cmp	r0, #0
 80143e4:	f47f af6c 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x18;
 80143e8:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80143ea:	2301      	movs	r3, #1
 80143ec:	f10d 0207 	add.w	r2, sp, #7
 80143f0:	4620      	mov	r0, r4
        tmp = 0x18;
 80143f2:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80143f6:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80143fa:	f000 fdad 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80143fe:	2800      	cmp	r0, #0
 8014400:	f47f af5e 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 8014404:	2140      	movs	r1, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8014406:	2301      	movs	r3, #1
 8014408:	f10d 0207 	add.w	r2, sp, #7
 801440c:	4620      	mov	r0, r4
        tmp = 0x40;
 801440e:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8014412:	f245 5183 	movw	r1, #21891	@ 0x5583
 8014416:	f000 fd9f 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 801441a:	2800      	cmp	r0, #0
 801441c:	f47f af50 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0xA0;
 8014420:	25a0      	movs	r5, #160	@ 0xa0
 8014422:	e7b0      	b.n	8014386 <OV5640_SetColorEffect+0x16e>
      tmp = 0xFF;
 8014424:	21ff      	movs	r1, #255	@ 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014426:	2301      	movs	r3, #1
 8014428:	f10d 0207 	add.w	r2, sp, #7
 801442c:	4620      	mov	r0, r4
      tmp = 0xFF;
 801442e:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014432:	f245 0101 	movw	r1, #20481	@ 0x5001
 8014436:	f000 fd8f 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 801443a:	2800      	cmp	r0, #0
 801443c:	f47f af40 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 8014440:	2540      	movs	r5, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014442:	2301      	movs	r3, #1
 8014444:	f10d 0207 	add.w	r2, sp, #7
 8014448:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 801444c:	e769      	b.n	8014322 <OV5640_SetColorEffect+0x10a>
        tmp = 0x18;
 801444e:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014450:	2301      	movs	r3, #1
 8014452:	f10d 0207 	add.w	r2, sp, #7
 8014456:	4620      	mov	r0, r4
        tmp = 0x18;
 8014458:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 801445c:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8014460:	f000 fd7a 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014464:	2800      	cmp	r0, #0
 8014466:	f47f af2b 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0xA0;
 801446a:	21a0      	movs	r1, #160	@ 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 801446c:	2301      	movs	r3, #1
 801446e:	f10d 0207 	add.w	r2, sp, #7
 8014472:	4620      	mov	r0, r4
        tmp = 0xA0;
 8014474:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8014478:	f245 5183 	movw	r1, #21891	@ 0x5583
 801447c:	f000 fd6c 	bl	8014f58 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8014480:	2800      	cmp	r0, #0
 8014482:	f47f af1d 	bne.w	80142c0 <OV5640_SetColorEffect+0xa8>
        tmp = 0x40;
 8014486:	2540      	movs	r5, #64	@ 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8014488:	2301      	movs	r3, #1
 801448a:	f10d 0207 	add.w	r2, sp, #7
 801448e:	f245 5184 	movw	r1, #21892	@ 0x5584
 8014492:	e746      	b.n	8014322 <OV5640_SetColorEffect+0x10a>

08014494 <OV5640_SetBrightness>:
{
 8014494:	b530      	push	{r4, r5, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8014496:	4a2c      	ldr	r2, [pc, #176]	@ (8014548 <OV5640_SetBrightness+0xb4>)
{
 8014498:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801449a:	f100 0418 	add.w	r4, r0, #24
{
 801449e:	460d      	mov	r5, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80144a0:	ab01      	add	r3, sp, #4
 80144a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80144a4:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80144a6:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80144a8:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80144aa:	4620      	mov	r0, r4
 80144ac:	2301      	movs	r3, #1
  tmp = 0xFF;
 80144ae:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80144b2:	f10d 0203 	add.w	r2, sp, #3
 80144b6:	f245 0101 	movw	r1, #20481	@ 0x5001
 80144ba:	f000 fd4d 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80144be:	b108      	cbz	r0, 80144c4 <OV5640_SetBrightness+0x30>
}
 80144c0:	b005      	add	sp, #20
 80144c2:	bd30      	pop	{r4, r5, pc}
    tmp = brightness_level[Level + 4];
 80144c4:	f105 0210 	add.w	r2, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80144c8:	2301      	movs	r3, #1
 80144ca:	f245 5187 	movw	r1, #21895	@ 0x5587
 80144ce:	4620      	mov	r0, r4
    tmp = brightness_level[Level + 4];
 80144d0:	446a      	add	r2, sp
 80144d2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80144d6:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80144da:	f10d 0203 	add.w	r2, sp, #3
 80144de:	f000 fd3b 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d1ec      	bne.n	80144c0 <OV5640_SetBrightness+0x2c>
    tmp = 0x04;
 80144e6:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80144e8:	2301      	movs	r3, #1
 80144ea:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80144ee:	4620      	mov	r0, r4
    tmp = 0x04;
 80144f0:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80144f4:	f10d 0203 	add.w	r2, sp, #3
 80144f8:	f000 fd2e 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d1df      	bne.n	80144c0 <OV5640_SetBrightness+0x2c>
    if (Level < 0)
 8014500:	2d00      	cmp	r5, #0
 8014502:	db10      	blt.n	8014526 <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 8014504:	2509      	movs	r5, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8014506:	2301      	movs	r3, #1
 8014508:	f10d 0203 	add.w	r2, sp, #3
 801450c:	f245 5188 	movw	r1, #21896	@ 0x5588
 8014510:	4620      	mov	r0, r4
      tmp = 0x09;
 8014512:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8014516:	f000 fd1f 	bl	8014f58 <ov5640_write_reg>
 801451a:	3800      	subs	r0, #0
 801451c:	bf18      	it	ne
 801451e:	2001      	movne	r0, #1
 8014520:	4240      	negs	r0, r0
}
 8014522:	b005      	add	sp, #20
 8014524:	bd30      	pop	{r4, r5, pc}
      tmp = 0x01;
 8014526:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8014528:	f10d 0203 	add.w	r2, sp, #3
 801452c:	f245 5188 	movw	r1, #21896	@ 0x5588
 8014530:	4620      	mov	r0, r4
      tmp = 0x01;
 8014532:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8014536:	f000 fd0f 	bl	8014f58 <ov5640_write_reg>
 801453a:	3800      	subs	r0, #0
 801453c:	bf18      	it	ne
 801453e:	2001      	movne	r0, #1
 8014540:	4240      	negs	r0, r0
}
 8014542:	b005      	add	sp, #20
 8014544:	bd30      	pop	{r4, r5, pc}
 8014546:	bf00      	nop
 8014548:	08036f58 	.word	0x08036f58

0801454c <OV5640_SetSaturation>:
{
 801454c:	b530      	push	{r4, r5, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 801454e:	4a29      	ldr	r2, [pc, #164]	@ (80145f4 <OV5640_SetSaturation+0xa8>)
{
 8014550:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014552:	f100 0418 	add.w	r4, r0, #24
{
 8014556:	460d      	mov	r5, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8014558:	ab01      	add	r3, sp, #4
 801455a:	ca07      	ldmia	r2, {r0, r1, r2}
 801455c:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 801455e:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8014560:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014562:	4620      	mov	r0, r4
 8014564:	2301      	movs	r3, #1
  tmp = 0xFF;
 8014566:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801456a:	f10d 0203 	add.w	r2, sp, #3
 801456e:	f245 0101 	movw	r1, #20481	@ 0x5001
 8014572:	f000 fcf1 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8014576:	b118      	cbz	r0, 8014580 <OV5640_SetSaturation+0x34>
    ret = OV5640_ERROR;
 8014578:	f04f 30ff 	mov.w	r0, #4294967295
}
 801457c:	b005      	add	sp, #20
 801457e:	bd30      	pop	{r4, r5, pc}
    tmp = saturation_level[Level + 4];
 8014580:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8014584:	f10d 0203 	add.w	r2, sp, #3
 8014588:	4620      	mov	r0, r4
    tmp = saturation_level[Level + 4];
 801458a:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 801458e:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8014590:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8014594:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8014598:	f245 5183 	movw	r1, #21891	@ 0x5583
 801459c:	f000 fcdc 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d1e9      	bne.n	8014578 <OV5640_SetSaturation+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80145a4:	2301      	movs	r3, #1
 80145a6:	f10d 0203 	add.w	r2, sp, #3
 80145aa:	f245 5184 	movw	r1, #21892	@ 0x5584
 80145ae:	4620      	mov	r0, r4
 80145b0:	f000 fcd2 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80145b4:	2800      	cmp	r0, #0
 80145b6:	d1df      	bne.n	8014578 <OV5640_SetSaturation+0x2c>
    tmp = 0x02;
 80145b8:	2102      	movs	r1, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80145ba:	2301      	movs	r3, #1
 80145bc:	f10d 0203 	add.w	r2, sp, #3
 80145c0:	4620      	mov	r0, r4
    tmp = 0x02;
 80145c2:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80145c6:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80145ca:	f000 fcc5 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d1d2      	bne.n	8014578 <OV5640_SetSaturation+0x2c>
    tmp = 0x41;
 80145d2:	2541      	movs	r5, #65	@ 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80145d4:	2301      	movs	r3, #1
 80145d6:	f10d 0203 	add.w	r2, sp, #3
 80145da:	f245 5188 	movw	r1, #21896	@ 0x5588
 80145de:	4620      	mov	r0, r4
    tmp = 0x41;
 80145e0:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80145e4:	f000 fcb8 	bl	8014f58 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80145e8:	3800      	subs	r0, #0
 80145ea:	bf18      	it	ne
 80145ec:	2001      	movne	r0, #1
 80145ee:	4240      	negs	r0, r0
}
 80145f0:	b005      	add	sp, #20
 80145f2:	bd30      	pop	{r4, r5, pc}
 80145f4:	08036f64 	.word	0x08036f64

080145f8 <OV5640_SetContrast>:
{
 80145f8:	b530      	push	{r4, r5, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80145fa:	4a29      	ldr	r2, [pc, #164]	@ (80146a0 <OV5640_SetContrast+0xa8>)
{
 80145fc:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80145fe:	f100 0418 	add.w	r4, r0, #24
{
 8014602:	460d      	mov	r5, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8014604:	ab01      	add	r3, sp, #4
 8014606:	ca07      	ldmia	r2, {r0, r1, r2}
 8014608:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 801460a:	21ff      	movs	r1, #255	@ 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 801460c:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 801460e:	4620      	mov	r0, r4
 8014610:	2301      	movs	r3, #1
  tmp = 0xFF;
 8014612:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8014616:	f10d 0203 	add.w	r2, sp, #3
 801461a:	f245 0101 	movw	r1, #20481	@ 0x5001
 801461e:	f000 fc9b 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8014622:	b118      	cbz	r0, 801462c <OV5640_SetContrast+0x34>
    ret = OV5640_ERROR;
 8014624:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014628:	b005      	add	sp, #20
 801462a:	bd30      	pop	{r4, r5, pc}
    tmp = 0x04;
 801462c:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 801462e:	2301      	movs	r3, #1
 8014630:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8014634:	4620      	mov	r0, r4
    tmp = 0x04;
 8014636:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 801463a:	f10d 0203 	add.w	r2, sp, #3
 801463e:	f000 fc8b 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8014642:	2800      	cmp	r0, #0
 8014644:	d1ee      	bne.n	8014624 <OV5640_SetContrast+0x2c>
    tmp = contrast_level[Level + 4];
 8014646:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 801464a:	f10d 0203 	add.w	r2, sp, #3
 801464e:	4620      	mov	r0, r4
    tmp = contrast_level[Level + 4];
 8014650:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8014654:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8014656:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 801465a:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 801465e:	f245 5186 	movw	r1, #21894	@ 0x5586
 8014662:	f000 fc79 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8014666:	2800      	cmp	r0, #0
 8014668:	d1dc      	bne.n	8014624 <OV5640_SetContrast+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 801466a:	2301      	movs	r3, #1
 801466c:	f10d 0203 	add.w	r2, sp, #3
 8014670:	f245 5185 	movw	r1, #21893	@ 0x5585
 8014674:	4620      	mov	r0, r4
 8014676:	f000 fc6f 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 801467a:	2800      	cmp	r0, #0
 801467c:	d1d2      	bne.n	8014624 <OV5640_SetContrast+0x2c>
    tmp = 0x41;
 801467e:	2541      	movs	r5, #65	@ 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8014680:	2301      	movs	r3, #1
 8014682:	f10d 0203 	add.w	r2, sp, #3
 8014686:	f245 5188 	movw	r1, #21896	@ 0x5588
 801468a:	4620      	mov	r0, r4
    tmp = 0x41;
 801468c:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8014690:	f000 fc62 	bl	8014f58 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8014694:	3800      	subs	r0, #0
 8014696:	bf18      	it	ne
 8014698:	2001      	movne	r0, #1
 801469a:	4240      	negs	r0, r0
}
 801469c:	b005      	add	sp, #20
 801469e:	bd30      	pop	{r4, r5, pc}
 80146a0:	0803e7a4 	.word	0x0803e7a4

080146a4 <OV5640_SetHueDegree>:
{
 80146a4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80146a6:	4b33      	ldr	r3, [pc, #204]	@ (8014774 <OV5640_SetHueDegree+0xd0>)
{
 80146a8:	b08a      	sub	sp, #40	@ 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80146aa:	f100 0418 	add.w	r4, r0, #24
{
 80146ae:	460d      	mov	r5, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80146b0:	f103 0c0c 	add.w	ip, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80146b4:	f10d 0e04 	add.w	lr, sp, #4
 80146b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80146bc:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80146be:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80146c2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80146c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80146ca:	4b2b      	ldr	r3, [pc, #172]	@ (8014778 <OV5640_SetHueDegree+0xd4>)
 80146cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80146d2:	e903 0007 	stmdb	r3, {r0, r1, r2}
  tmp = 0xFF;
 80146d6:	22ff      	movs	r2, #255	@ 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80146d8:	2301      	movs	r3, #1
 80146da:	f245 0101 	movw	r1, #20481	@ 0x5001
 80146de:	4620      	mov	r0, r4
  tmp = 0xFF;
 80146e0:	f88d 2003 	strb.w	r2, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80146e4:	f10d 0203 	add.w	r2, sp, #3
 80146e8:	f000 fc36 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80146ec:	b118      	cbz	r0, 80146f6 <OV5640_SetHueDegree+0x52>
    ret = OV5640_ERROR;
 80146ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80146f2:	b00a      	add	sp, #40	@ 0x28
 80146f4:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x01;
 80146f6:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80146f8:	f10d 0203 	add.w	r2, sp, #3
 80146fc:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8014700:	4620      	mov	r0, r4
 8014702:	4633      	mov	r3, r6
    tmp = 0x01;
 8014704:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8014708:	f000 fc26 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 801470c:	2800      	cmp	r0, #0
 801470e:	d1ee      	bne.n	80146ee <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8014710:	f105 032e 	add.w	r3, r5, #46	@ 0x2e
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8014714:	f10d 0203 	add.w	r2, sp, #3
 8014718:	f245 5181 	movw	r1, #21889	@ 0x5581
 801471c:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 801471e:	eb0d 0503 	add.w	r5, sp, r3
 8014722:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 8014726:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 801472a:	4633      	mov	r3, r6
 801472c:	f000 fc14 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8014730:	2800      	cmp	r0, #0
 8014732:	d1dc      	bne.n	80146ee <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8014734:	f815 3c18 	ldrb.w	r3, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8014738:	f10d 0203 	add.w	r2, sp, #3
 801473c:	f245 5182 	movw	r1, #21890	@ 0x5582
 8014740:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 8014742:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8014746:	4633      	mov	r3, r6
 8014748:	f000 fc06 	bl	8014f58 <ov5640_write_reg>
  if (ret == OV5640_OK)
 801474c:	2800      	cmp	r0, #0
 801474e:	d1ce      	bne.n	80146ee <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8014750:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8014754:	4633      	mov	r3, r6
 8014756:	f10d 0203 	add.w	r2, sp, #3
 801475a:	f245 5188 	movw	r1, #21896	@ 0x5588
 801475e:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl8[Degree + 6];
 8014760:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8014764:	f000 fbf8 	bl	8014f58 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8014768:	3800      	subs	r0, #0
 801476a:	bf18      	it	ne
 801476c:	2001      	movne	r0, #1
 801476e:	4240      	negs	r0, r0
}
 8014770:	b00a      	add	sp, #40	@ 0x28
 8014772:	bd70      	pop	{r4, r5, r6, pc}
 8014774:	08036f70 	.word	0x08036f70
 8014778:	0803e7b0 	.word	0x0803e7b0

0801477c <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 801477c:	2902      	cmp	r1, #2
{
 801477e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014782:	4604      	mov	r4, r0
 8014784:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8014786:	d95f      	bls.n	8014848 <OV5640_SetPixelFormat+0xcc>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8014788:	2907      	cmp	r1, #7
 801478a:	f000 80b7 	beq.w	80148fc <OV5640_SetPixelFormat+0x180>
 801478e:	2908      	cmp	r1, #8
 8014790:	d154      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8014792:	2230      	movs	r2, #48	@ 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8014794:	f100 0718 	add.w	r7, r0, #24
 8014798:	f10d 0607 	add.w	r6, sp, #7
 801479c:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 801479e:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80147a2:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 80147a6:	4632      	mov	r2, r6
 80147a8:	4638      	mov	r0, r7
 80147aa:	f000 fbd5 	bl	8014f58 <ov5640_write_reg>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	f000 80fe 	beq.w	80149b0 <OV5640_SetPixelFormat+0x234>
{
 80147b4:	f04f 35ff 	mov.w	r5, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80147b8:	2301      	movs	r3, #1
 80147ba:	4632      	mov	r2, r6
 80147bc:	f643 0121 	movw	r1, #14369	@ 0x3821
 80147c0:	4638      	mov	r0, r7
 80147c2:	f000 fbc1 	bl	8014f48 <ov5640_read_reg>
 80147c6:	bbc8      	cbnz	r0, 801483c <OV5640_SetPixelFormat+0xc0>
        tmp |= (1 << 5);
 80147c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80147cc:	2301      	movs	r3, #1
 80147ce:	f643 0121 	movw	r1, #14369	@ 0x3821
 80147d2:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 80147d4:	f042 0220 	orr.w	r2, r2, #32
 80147d8:	f88d 2007 	strb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80147dc:	4632      	mov	r2, r6
 80147de:	f000 fbbb 	bl	8014f58 <ov5640_write_reg>
 80147e2:	bb58      	cbnz	r0, 801483c <OV5640_SetPixelFormat+0xc0>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80147e4:	2301      	movs	r3, #1
 80147e6:	4632      	mov	r2, r6
 80147e8:	f243 0102 	movw	r1, #12290	@ 0x3002
 80147ec:	4638      	mov	r0, r7
 80147ee:	f000 fbab 	bl	8014f48 <ov5640_read_reg>
 80147f2:	bb18      	cbnz	r0, 801483c <OV5640_SetPixelFormat+0xc0>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80147f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80147f8:	2301      	movs	r3, #1
 80147fa:	f243 0102 	movw	r1, #12290	@ 0x3002
 80147fe:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8014800:	f022 021c 	bic.w	r2, r2, #28
 8014804:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8014808:	4632      	mov	r2, r6
 801480a:	f000 fba5 	bl	8014f58 <ov5640_write_reg>
 801480e:	b9a8      	cbnz	r0, 801483c <OV5640_SetPixelFormat+0xc0>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8014810:	2301      	movs	r3, #1
 8014812:	4632      	mov	r2, r6
 8014814:	f243 0106 	movw	r1, #12294	@ 0x3006
 8014818:	4638      	mov	r0, r7
 801481a:	f000 fb95 	bl	8014f48 <ov5640_read_reg>
 801481e:	b968      	cbnz	r0, 801483c <OV5640_SetPixelFormat+0xc0>
                tmp |= ((1 << 5) | (1 << 3));
 8014820:	f89d 1007 	ldrb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8014824:	2301      	movs	r3, #1
 8014826:	4632      	mov	r2, r6
 8014828:	4638      	mov	r0, r7
                tmp |= ((1 << 5) | (1 << 3));
 801482a:	f041 0128 	orr.w	r1, r1, #40	@ 0x28
 801482e:	f88d 1007 	strb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8014832:	f243 0106 	movw	r1, #12294	@ 0x3006
 8014836:	f000 fb8f 	bl	8014f58 <ov5640_write_reg>
 801483a:	b108      	cbz	r0, 8014840 <OV5640_SetPixelFormat+0xc4>
{
 801483c:	f04f 35ff 	mov.w	r5, #4294967295
}
 8014840:	4628      	mov	r0, r5
 8014842:	b002      	add	sp, #8
 8014844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (PixelFormat)
 8014848:	d12b      	bne.n	80148a2 <OV5640_SetPixelFormat+0x126>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 801484a:	2230      	movs	r2, #48	@ 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 801484c:	f100 0518 	add.w	r5, r0, #24
 8014850:	f10d 0607 	add.w	r6, sp, #7
 8014854:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8014856:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 801485a:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 801485e:	4632      	mov	r2, r6
 8014860:	4628      	mov	r0, r5
 8014862:	f000 fb79 	bl	8014f58 <ov5640_write_reg>
 8014866:	2800      	cmp	r0, #0
 8014868:	d1e8      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 801486a:	6963      	ldr	r3, [r4, #20]
 801486c:	4798      	blx	r3
 801486e:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8014870:	6963      	ldr	r3, [r4, #20]
 8014872:	4798      	blx	r3
 8014874:	4287      	cmp	r7, r0
 8014876:	d0fb      	beq.n	8014870 <OV5640_SetPixelFormat+0xf4>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8014878:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 801487a:	4628      	mov	r0, r5
 801487c:	2301      	movs	r3, #1
 801487e:	4632      	mov	r2, r6
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8014880:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8014884:	f245 011f 	movw	r1, #20511	@ 0x501f
 8014888:	f000 fb66 	bl	8014f58 <ov5640_write_reg>
 801488c:	4605      	mov	r5, r0
 801488e:	2800      	cmp	r0, #0
 8014890:	d1d4      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8014892:	6963      	ldr	r3, [r4, #20]
 8014894:	4798      	blx	r3
 8014896:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8014898:	6963      	ldr	r3, [r4, #20]
 801489a:	4798      	blx	r3
 801489c:	4286      	cmp	r6, r0
 801489e:	d0fb      	beq.n	8014898 <OV5640_SetPixelFormat+0x11c>
 80148a0:	e7ce      	b.n	8014840 <OV5640_SetPixelFormat+0xc4>
    switch (PixelFormat)
 80148a2:	2901      	cmp	r1, #1
 80148a4:	d057      	beq.n	8014956 <OV5640_SetPixelFormat+0x1da>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80148a6:	226f      	movs	r2, #111	@ 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80148a8:	f100 0518 	add.w	r5, r0, #24
 80148ac:	f10d 0607 	add.w	r6, sp, #7
 80148b0:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80148b2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80148b6:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 80148ba:	4632      	mov	r2, r6
 80148bc:	4628      	mov	r0, r5
 80148be:	f000 fb4b 	bl	8014f58 <ov5640_write_reg>
 80148c2:	2800      	cmp	r0, #0
 80148c4:	d1ba      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 80148c6:	6963      	ldr	r3, [r4, #20]
 80148c8:	4798      	blx	r3
 80148ca:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80148cc:	6963      	ldr	r3, [r4, #20]
 80148ce:	4798      	blx	r3
 80148d0:	4287      	cmp	r7, r0
 80148d2:	d0fb      	beq.n	80148cc <OV5640_SetPixelFormat+0x150>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80148d4:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80148d6:	4628      	mov	r0, r5
 80148d8:	4632      	mov	r2, r6
 80148da:	f245 011f 	movw	r1, #20511	@ 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80148de:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80148e2:	f000 fb39 	bl	8014f58 <ov5640_write_reg>
 80148e6:	4605      	mov	r5, r0
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d1a7      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 80148ec:	6963      	ldr	r3, [r4, #20]
 80148ee:	4798      	blx	r3
 80148f0:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80148f2:	6963      	ldr	r3, [r4, #20]
 80148f4:	4798      	blx	r3
 80148f6:	4286      	cmp	r6, r0
 80148f8:	d0fb      	beq.n	80148f2 <OV5640_SetPixelFormat+0x176>
 80148fa:	e7a1      	b.n	8014840 <OV5640_SetPixelFormat+0xc4>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80148fc:	2210      	movs	r2, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80148fe:	f100 0518 	add.w	r5, r0, #24
 8014902:	f10d 0607 	add.w	r6, sp, #7
 8014906:	2301      	movs	r3, #1
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8014908:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 801490c:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 8014910:	4632      	mov	r2, r6
 8014912:	4628      	mov	r0, r5
 8014914:	f000 fb20 	bl	8014f58 <ov5640_write_reg>
 8014918:	2800      	cmp	r0, #0
 801491a:	d18f      	bne.n	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 801491c:	6963      	ldr	r3, [r4, #20]
 801491e:	4798      	blx	r3
 8014920:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8014922:	6963      	ldr	r3, [r4, #20]
 8014924:	4798      	blx	r3
 8014926:	4287      	cmp	r7, r0
 8014928:	d0fb      	beq.n	8014922 <OV5640_SetPixelFormat+0x1a6>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 801492a:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 801492c:	4628      	mov	r0, r5
 801492e:	2301      	movs	r3, #1
 8014930:	4632      	mov	r2, r6
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8014932:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8014936:	f245 011f 	movw	r1, #20511	@ 0x501f
 801493a:	f000 fb0d 	bl	8014f58 <ov5640_write_reg>
 801493e:	4605      	mov	r5, r0
 8014940:	2800      	cmp	r0, #0
 8014942:	f47f af7b 	bne.w	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8014946:	6963      	ldr	r3, [r4, #20]
 8014948:	4798      	blx	r3
 801494a:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 801494c:	6963      	ldr	r3, [r4, #20]
 801494e:	4798      	blx	r3
 8014950:	4286      	cmp	r6, r0
 8014952:	d0fb      	beq.n	801494c <OV5640_SetPixelFormat+0x1d0>
 8014954:	e774      	b.n	8014840 <OV5640_SetPixelFormat+0xc4>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8014956:	2223      	movs	r2, #35	@ 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8014958:	f100 0518 	add.w	r5, r0, #24
 801495c:	f10d 0607 	add.w	r6, sp, #7
 8014960:	460b      	mov	r3, r1
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8014962:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8014966:	f44f 4186 	mov.w	r1, #17152	@ 0x4300
 801496a:	4632      	mov	r2, r6
 801496c:	4628      	mov	r0, r5
 801496e:	f000 faf3 	bl	8014f58 <ov5640_write_reg>
 8014972:	2800      	cmp	r0, #0
 8014974:	f47f af62 	bne.w	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 8014978:	6963      	ldr	r3, [r4, #20]
 801497a:	4798      	blx	r3
 801497c:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 801497e:	6963      	ldr	r3, [r4, #20]
 8014980:	4798      	blx	r3
 8014982:	4287      	cmp	r7, r0
 8014984:	d0fb      	beq.n	801497e <OV5640_SetPixelFormat+0x202>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8014986:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8014988:	4628      	mov	r0, r5
 801498a:	4632      	mov	r2, r6
 801498c:	f245 011f 	movw	r1, #20511	@ 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8014990:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8014994:	f000 fae0 	bl	8014f58 <ov5640_write_reg>
 8014998:	4605      	mov	r5, r0
 801499a:	2800      	cmp	r0, #0
 801499c:	f47f af4e 	bne.w	801483c <OV5640_SetPixelFormat+0xc0>
  tickstart = pObj->IO.GetTick();
 80149a0:	6963      	ldr	r3, [r4, #20]
 80149a2:	4798      	blx	r3
 80149a4:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80149a6:	6963      	ldr	r3, [r4, #20]
 80149a8:	4798      	blx	r3
 80149aa:	4286      	cmp	r6, r0
 80149ac:	d0fb      	beq.n	80149a6 <OV5640_SetPixelFormat+0x22a>
 80149ae:	e747      	b.n	8014840 <OV5640_SetPixelFormat+0xc4>
  tickstart = pObj->IO.GetTick();
 80149b0:	6963      	ldr	r3, [r4, #20]
 80149b2:	4798      	blx	r3
 80149b4:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80149b6:	6963      	ldr	r3, [r4, #20]
 80149b8:	4798      	blx	r3
 80149ba:	4285      	cmp	r5, r0
 80149bc:	d0fb      	beq.n	80149b6 <OV5640_SetPixelFormat+0x23a>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80149be:	2200      	movs	r2, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80149c0:	2301      	movs	r3, #1
 80149c2:	f245 011f 	movw	r1, #20511	@ 0x501f
 80149c6:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80149c8:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80149cc:	4632      	mov	r2, r6
 80149ce:	f000 fac3 	bl	8014f58 <ov5640_write_reg>
 80149d2:	4605      	mov	r5, r0
 80149d4:	2800      	cmp	r0, #0
 80149d6:	f47f aeed 	bne.w	80147b4 <OV5640_SetPixelFormat+0x38>
  tickstart = pObj->IO.GetTick();
 80149da:	6963      	ldr	r3, [r4, #20]
 80149dc:	4798      	blx	r3
 80149de:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80149e0:	6963      	ldr	r3, [r4, #20]
 80149e2:	4798      	blx	r3
 80149e4:	4580      	cmp	r8, r0
 80149e6:	d0fb      	beq.n	80149e0 <OV5640_SetPixelFormat+0x264>
 80149e8:	e6e6      	b.n	80147b8 <OV5640_SetPixelFormat+0x3c>
 80149ea:	bf00      	nop

080149ec <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 80149ec:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80149f0:	b10b      	cbz	r3, 80149f6 <OV5640_Init+0xa>
  int32_t ret = OV5640_OK;
 80149f2:	2000      	movs	r0, #0
}
 80149f4:	4770      	bx	lr
    if ((Resolution > OV5640_R800x480) ||
 80149f6:	2904      	cmp	r1, #4
{
 80149f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149fc:	4689      	mov	r9, r1
 80149fe:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 8014a00:	d83d      	bhi.n	8014a7e <OV5640_Init+0x92>
 8014a02:	f032 0302 	bics.w	r3, r2, #2
 8014a06:	4607      	mov	r7, r0
 8014a08:	4690      	mov	r8, r2
 8014a0a:	d004      	beq.n	8014a16 <OV5640_Init+0x2a>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8014a0c:	1fd3      	subs	r3, r2, #7
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d901      	bls.n	8014a16 <OV5640_Init+0x2a>
 8014a12:	2a01      	cmp	r2, #1
 8014a14:	d133      	bne.n	8014a7e <OV5640_Init+0x92>
 8014a16:	4c1b      	ldr	r4, [pc, #108]	@ (8014a84 <OV5640_Init+0x98>)
 8014a18:	f107 0618 	add.w	r6, r7, #24
 8014a1c:	f504 757e 	add.w	r5, r4, #1016	@ 0x3f8
          tmp = (uint8_t)OV5640_Common[index][1];
 8014a20:	f8b4 c002 	ldrh.w	ip, [r4, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8014a24:	2301      	movs	r3, #1
 8014a26:	f10d 0206 	add.w	r2, sp, #6
 8014a2a:	8821      	ldrh	r1, [r4, #0]
 8014a2c:	4630      	mov	r0, r6
          tmp = (uint8_t)OV5640_Common[index][1];
 8014a2e:	f88d c006 	strb.w	ip, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8014a32:	f000 fa91 	bl	8014f58 <ov5640_write_reg>
 8014a36:	b9f8      	cbnz	r0, 8014a78 <OV5640_Init+0x8c>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8014a38:	3404      	adds	r4, #4
 8014a3a:	42a5      	cmp	r5, r4
 8014a3c:	d1f0      	bne.n	8014a20 <OV5640_Init+0x34>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8014a3e:	4649      	mov	r1, r9
 8014a40:	4638      	mov	r0, r7
 8014a42:	f7ff f90f 	bl	8013c64 <OV5640_SetResolution>
 8014a46:	b9d0      	cbnz	r0, 8014a7e <OV5640_Init+0x92>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8014a48:	4641      	mov	r1, r8
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f7ff fe96 	bl	801477c <OV5640_SetPixelFormat>
 8014a50:	b9a8      	cbnz	r0, 8014a7e <OV5640_Init+0x92>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8014a52:	2122      	movs	r1, #34	@ 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8014a54:	2301      	movs	r3, #1
 8014a56:	f10d 0207 	add.w	r2, sp, #7
 8014a5a:	4630      	mov	r0, r6
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8014a5c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8014a60:	f244 7140 	movw	r1, #18240	@ 0x4740
 8014a64:	f000 fa78 	bl	8014f58 <ov5640_write_reg>
 8014a68:	b948      	cbnz	r0, 8014a7e <OV5640_Init+0x92>
          pObj->IsInitialized = 1U;
 8014a6a:	2301      	movs	r3, #1
  int32_t ret = OV5640_OK;
 8014a6c:	2000      	movs	r0, #0
          pObj->IsInitialized = 1U;
 8014a6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
}
 8014a72:	b003      	add	sp, #12
 8014a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8014a78:	3404      	adds	r4, #4
 8014a7a:	42ac      	cmp	r4, r5
 8014a7c:	d1fc      	bne.n	8014a78 <OV5640_Init+0x8c>
      ret = OV5640_ERROR;
 8014a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a82:	e7f6      	b.n	8014a72 <OV5640_Init+0x86>
 8014a84:	080577ec 	.word	0x080577ec

08014a88 <OV5640_GetResolution>:
{
 8014a88:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8014a8a:	f100 0418 	add.w	r4, r0, #24
{
 8014a8e:	b082      	sub	sp, #8
 8014a90:	460e      	mov	r6, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8014a92:	2301      	movs	r3, #1
 8014a94:	f10d 0207 	add.w	r2, sp, #7
 8014a98:	f643 0108 	movw	r1, #14344	@ 0x3808
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f000 fa53 	bl	8014f48 <ov5640_read_reg>
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d150      	bne.n	8014b48 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 8014aa6:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8014aaa:	2301      	movs	r3, #1
 8014aac:	f10d 0207 	add.w	r2, sp, #7
 8014ab0:	f643 0109 	movw	r1, #14345	@ 0x3809
 8014ab4:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 8014ab6:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8014ab8:	f000 fa46 	bl	8014f48 <ov5640_read_reg>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d143      	bne.n	8014b48 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8014ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8014ac4:	f10d 0207 	add.w	r2, sp, #7
 8014ac8:	f643 010a 	movw	r1, #14346	@ 0x380a
 8014acc:	4620      	mov	r0, r4
      x_size |= tmp;
 8014ace:	431d      	orrs	r5, r3
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	f000 fa39 	bl	8014f48 <ov5640_read_reg>
 8014ad6:	bbb8      	cbnz	r0, 8014b48 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 8014ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8014adc:	4620      	mov	r0, r4
 8014ade:	f10d 0207 	add.w	r2, sp, #7
 8014ae2:	f643 010b 	movw	r1, #14347	@ 0x380b
        y_size = (uint16_t)tmp << 8U;
 8014ae6:	021c      	lsls	r4, r3, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8014ae8:	2301      	movs	r3, #1
 8014aea:	f000 fa2d 	bl	8014f48 <ov5640_read_reg>
 8014aee:	bb58      	cbnz	r0, 8014b48 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8014af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8014af4:	f5b5 7f48 	cmp.w	r5, #800	@ 0x320
          y_size |= tmp;
 8014af8:	ea43 0304 	orr.w	r3, r3, r4
          if ((x_size == 800U) && (y_size == 480U))
 8014afc:	f5a3 72f0 	sub.w	r2, r3, #480	@ 0x1e0
 8014b00:	fab2 f282 	clz	r2, r2
 8014b04:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8014b08:	d104      	bne.n	8014b14 <OV5640_GetResolution+0x8c>
 8014b0a:	b11a      	cbz	r2, 8014b14 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 8014b0c:	2304      	movs	r3, #4
 8014b0e:	6033      	str	r3, [r6, #0]
}
 8014b10:	b002      	add	sp, #8
 8014b12:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8014b14:	f5b5 7f20 	cmp.w	r5, #640	@ 0x280
 8014b18:	d104      	bne.n	8014b24 <OV5640_GetResolution+0x9c>
 8014b1a:	b11a      	cbz	r2, 8014b24 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 8014b1c:	2303      	movs	r3, #3
 8014b1e:	6033      	str	r3, [r6, #0]
}
 8014b20:	b002      	add	sp, #8
 8014b22:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8014b24:	f5b5 7ff0 	cmp.w	r5, #480	@ 0x1e0
 8014b28:	d106      	bne.n	8014b38 <OV5640_GetResolution+0xb0>
 8014b2a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8014b2e:	d103      	bne.n	8014b38 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8014b30:	2302      	movs	r3, #2
 8014b32:	6033      	str	r3, [r6, #0]
}
 8014b34:	b002      	add	sp, #8
 8014b36:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8014b38:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
 8014b3c:	d108      	bne.n	8014b50 <OV5640_GetResolution+0xc8>
 8014b3e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014b40:	d106      	bne.n	8014b50 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8014b42:	2301      	movs	r3, #1
 8014b44:	6033      	str	r3, [r6, #0]
            ret = OV5640_OK;
 8014b46:	e7e3      	b.n	8014b10 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8014b48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014b4c:	b002      	add	sp, #8
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8014b50:	2da0      	cmp	r5, #160	@ 0xa0
 8014b52:	d1f9      	bne.n	8014b48 <OV5640_GetResolution+0xc0>
 8014b54:	2b78      	cmp	r3, #120	@ 0x78
 8014b56:	d1f7      	bne.n	8014b48 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	6033      	str	r3, [r6, #0]
            ret = OV5640_OK;
 8014b5c:	e7d8      	b.n	8014b10 <OV5640_GetResolution+0x88>
 8014b5e:	bf00      	nop

08014b60 <OV5640_ZoomConfig>:
{
 8014b60:	b530      	push	{r4, r5, lr}
 8014b62:	b083      	sub	sp, #12
 8014b64:	460d      	mov	r5, r1
 8014b66:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8014b68:	a901      	add	r1, sp, #4
 8014b6a:	f7ff ff8d 	bl	8014a88 <OV5640_GetResolution>
 8014b6e:	bb88      	cbnz	r0, 8014bd4 <OV5640_ZoomConfig+0x74>
    if (zoom == OV5640_ZOOM_x1)
 8014b70:	2d44      	cmp	r5, #68	@ 0x44
 8014b72:	d026      	beq.n	8014bc2 <OV5640_ZoomConfig+0x62>
      switch (res)
 8014b74:	9b01      	ldr	r3, [sp, #4]
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d91f      	bls.n	8014bba <OV5640_ZoomConfig+0x5a>
 8014b7a:	2b03      	cmp	r3, #3
 8014b7c:	d100      	bne.n	8014b80 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 2U;
 8014b7e:	08ad      	lsrs	r5, r5, #2
      tmp = 0x00;
 8014b80:	2200      	movs	r2, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8014b82:	3418      	adds	r4, #24
 8014b84:	2301      	movs	r3, #1
 8014b86:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
      tmp = 0x00;
 8014b8a:	f88d 2003 	strb.w	r2, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f10d 0203 	add.w	r2, sp, #3
 8014b94:	f000 f9e0 	bl	8014f58 <ov5640_write_reg>
 8014b98:	b9e0      	cbnz	r0, 8014bd4 <OV5640_ZoomConfig+0x74>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	f10d 0203 	add.w	r2, sp, #3
 8014ba0:	f245 6101 	movw	r1, #22017	@ 0x5601
 8014ba4:	4620      	mov	r0, r4
        tmp = (uint8_t)zoom;
 8014ba6:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8014baa:	f000 f9d5 	bl	8014f58 <ov5640_write_reg>
 8014bae:	3800      	subs	r0, #0
 8014bb0:	bf18      	it	ne
 8014bb2:	2001      	movne	r0, #1
 8014bb4:	4240      	negs	r0, r0
}
 8014bb6:	b003      	add	sp, #12
 8014bb8:	bd30      	pop	{r4, r5, pc}
      switch (res)
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d0e0      	beq.n	8014b80 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 1U;
 8014bbe:	086d      	lsrs	r5, r5, #1
          break;
 8014bc0:	e7de      	b.n	8014b80 <OV5640_ZoomConfig+0x20>
      tmp = 0x10;
 8014bc2:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	f10d 0203 	add.w	r2, sp, #3
 8014bca:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
 8014bce:	f104 0018 	add.w	r0, r4, #24
 8014bd2:	e7e8      	b.n	8014ba6 <OV5640_ZoomConfig+0x46>
    ret = OV5640_ERROR;
 8014bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd8:	e7ed      	b.n	8014bb6 <OV5640_ZoomConfig+0x56>
 8014bda:	bf00      	nop

08014bdc <OV5640_ReadID>:
{
 8014bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8014bde:	4606      	mov	r6, r0
{
 8014be0:	b083      	sub	sp, #12
 8014be2:	460f      	mov	r7, r1
 8014be4:	4604      	mov	r4, r0
  pObj->IO.Init();
 8014be6:	f856 3b18 	ldr.w	r3, [r6], #24
 8014bea:	4798      	blx	r3
  tmp = 0x80;
 8014bec:	2380      	movs	r3, #128	@ 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8014bee:	f10d 0207 	add.w	r2, sp, #7
 8014bf2:	f243 0108 	movw	r1, #12296	@ 0x3008
  tmp = 0x80;
 8014bf6:	f88d 3007 	strb.w	r3, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8014bfa:	4630      	mov	r0, r6
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	f000 f9ab 	bl	8014f58 <ov5640_write_reg>
 8014c02:	bb28      	cbnz	r0, 8014c50 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 8014c04:	6963      	ldr	r3, [r4, #20]
 8014c06:	4798      	blx	r3
 8014c08:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8014c0a:	6963      	ldr	r3, [r4, #20]
 8014c0c:	4798      	blx	r3
 8014c0e:	1b40      	subs	r0, r0, r5
 8014c10:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8014c14:	d3f9      	bcc.n	8014c0a <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8014c16:	2301      	movs	r3, #1
 8014c18:	f10d 0207 	add.w	r2, sp, #7
 8014c1c:	f243 010a 	movw	r1, #12298	@ 0x300a
 8014c20:	4630      	mov	r0, r6
 8014c22:	f000 f991 	bl	8014f48 <ov5640_read_reg>
 8014c26:	b998      	cbnz	r0, 8014c50 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 8014c28:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	f10d 0207 	add.w	r2, sp, #7
 8014c32:	4630      	mov	r0, r6
      *Id = (uint32_t)tmp << 8U;
 8014c34:	0209      	lsls	r1, r1, #8
 8014c36:	6039      	str	r1, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8014c38:	f243 010b 	movw	r1, #12299	@ 0x300b
 8014c3c:	f000 f984 	bl	8014f48 <ov5640_read_reg>
 8014c40:	b930      	cbnz	r0, 8014c50 <OV5640_ReadID+0x74>
        *Id |= tmp;
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014c48:	4313      	orrs	r3, r2
 8014c4a:	603b      	str	r3, [r7, #0]
}
 8014c4c:	b003      	add	sp, #12
 8014c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8014c50:	f04f 30ff 	mov.w	r0, #4294967295
 8014c54:	e7fa      	b.n	8014c4c <OV5640_ReadID+0x70>
 8014c56:	bf00      	nop

08014c58 <OV5640_MirrorFlipConfig>:
{
 8014c58:	b530      	push	{r4, r5, lr}
  uint8_t tmp3820 = 0;
 8014c5a:	2200      	movs	r2, #0
{
 8014c5c:	b083      	sub	sp, #12
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014c5e:	f100 0418 	add.w	r4, r0, #24
{
 8014c62:	460d      	mov	r5, r1
  uint8_t tmp3820 = 0;
 8014c64:	f88d 2006 	strb.w	r2, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014c68:	2301      	movs	r3, #1
 8014c6a:	f10d 0206 	add.w	r2, sp, #6
 8014c6e:	f643 0120 	movw	r1, #14368	@ 0x3820
 8014c72:	4620      	mov	r0, r4
 8014c74:	f000 f968 	bl	8014f48 <ov5640_read_reg>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d160      	bne.n	8014d3e <OV5640_MirrorFlipConfig+0xe6>
    tmp3820 &= 0xF9U;
 8014c7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014c80:	f10d 0207 	add.w	r2, sp, #7
 8014c84:	f643 0121 	movw	r1, #14369	@ 0x3821
 8014c88:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8014c8a:	f023 0306 	bic.w	r3, r3, #6
 8014c8e:	f88d 3006 	strb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014c92:	2301      	movs	r3, #1
 8014c94:	f000 f958 	bl	8014f48 <ov5640_read_reg>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d150      	bne.n	8014d3e <OV5640_MirrorFlipConfig+0xe6>
      tmp3821 &= 0xF9U;
 8014c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8014ca0:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 8014ca2:	f023 0306 	bic.w	r3, r3, #6
 8014ca6:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8014caa:	d03e      	beq.n	8014d2a <OV5640_MirrorFlipConfig+0xd2>
 8014cac:	2d03      	cmp	r5, #3
 8014cae:	d019      	beq.n	8014ce4 <OV5640_MirrorFlipConfig+0x8c>
 8014cb0:	2d01      	cmp	r5, #1
 8014cb2:	d047      	beq.n	8014d44 <OV5640_MirrorFlipConfig+0xec>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	f10d 0206 	add.w	r2, sp, #6
 8014cba:	f643 0120 	movw	r1, #14368	@ 0x3820
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f000 f94a 	bl	8014f58 <ov5640_write_reg>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d13a      	bne.n	8014d3e <OV5640_MirrorFlipConfig+0xe6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014cc8:	2301      	movs	r3, #1
 8014cca:	f10d 0207 	add.w	r2, sp, #7
 8014cce:	f643 0121 	movw	r1, #14369	@ 0x3821
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	f000 f940 	bl	8014f58 <ov5640_write_reg>
 8014cd8:	3800      	subs	r0, #0
 8014cda:	bf18      	it	ne
 8014cdc:	2001      	movne	r0, #1
 8014cde:	4240      	negs	r0, r0
}
 8014ce0:	b003      	add	sp, #12
 8014ce2:	bd30      	pop	{r4, r5, pc}
          tmp3820 |= 0x06U;
 8014ce4:	f89d 1006 	ldrb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014ce8:	2301      	movs	r3, #1
 8014cea:	f10d 0206 	add.w	r2, sp, #6
 8014cee:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8014cf0:	f041 0106 	orr.w	r1, r1, #6
 8014cf4:	f88d 1006 	strb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014cf8:	f643 0120 	movw	r1, #14368	@ 0x3820
 8014cfc:	f000 f92c 	bl	8014f58 <ov5640_write_reg>
 8014d00:	b9e8      	cbnz	r0, 8014d3e <OV5640_MirrorFlipConfig+0xe6>
            tmp3821 |= 0x06U;
 8014d02:	f89d 5007 	ldrb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014d06:	2301      	movs	r3, #1
 8014d08:	f10d 0207 	add.w	r2, sp, #7
 8014d0c:	f643 0121 	movw	r1, #14369	@ 0x3821
            tmp3821 |= 0x06U;
 8014d10:	f045 0506 	orr.w	r5, r5, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014d14:	4620      	mov	r0, r4
            tmp3821 |= 0x06U;
 8014d16:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8014d1a:	f000 f91d 	bl	8014f58 <ov5640_write_reg>
 8014d1e:	3800      	subs	r0, #0
 8014d20:	bf18      	it	ne
 8014d22:	2001      	movne	r0, #1
 8014d24:	4240      	negs	r0, r0
}
 8014d26:	b003      	add	sp, #12
 8014d28:	bd30      	pop	{r4, r5, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	f10d 0206 	add.w	r2, sp, #6
 8014d30:	f643 0120 	movw	r1, #14368	@ 0x3820
 8014d34:	4620      	mov	r0, r4
 8014d36:	f000 f90f 	bl	8014f58 <ov5640_write_reg>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d0e1      	beq.n	8014d02 <OV5640_MirrorFlipConfig+0xaa>
    ret = OV5640_ERROR;
 8014d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d42:	e7cd      	b.n	8014ce0 <OV5640_MirrorFlipConfig+0x88>
          tmp3820 |= 0x06U;
 8014d44:	f89d 3006 	ldrb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014d48:	f10d 0206 	add.w	r2, sp, #6
 8014d4c:	f643 0120 	movw	r1, #14368	@ 0x3820
 8014d50:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8014d52:	f043 0306 	orr.w	r3, r3, #6
 8014d56:	f88d 3006 	strb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8014d5a:	462b      	mov	r3, r5
 8014d5c:	f000 f8fc 	bl	8014f58 <ov5640_write_reg>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d0b1      	beq.n	8014cc8 <OV5640_MirrorFlipConfig+0x70>
 8014d64:	e7eb      	b.n	8014d3e <OV5640_MirrorFlipConfig+0xe6>
 8014d66:	bf00      	nop

08014d68 <OV5640_NightModeConfig>:
{
 8014d68:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8014d6a:	2300      	movs	r3, #0
{
 8014d6c:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 8014d6e:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 8014d70:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8014d74:	d01e      	beq.n	8014db4 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8014d76:	f100 0418 	add.w	r4, r0, #24
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 8014d80:	f10d 0207 	add.w	r2, sp, #7
 8014d84:	4620      	mov	r0, r4
 8014d86:	f000 f8df 	bl	8014f48 <ov5640_read_reg>
 8014d8a:	b9f8      	cbnz	r0, 8014dcc <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8014d8c:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8014d90:	2301      	movs	r3, #1
 8014d92:	f10d 0207 	add.w	r2, sp, #7
 8014d96:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
      tmp &= 0xFBU;
 8014d9a:	f025 0504 	bic.w	r5, r5, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8014d9e:	4620      	mov	r0, r4
      tmp &= 0xFBU;
 8014da0:	f88d 5007 	strb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8014da4:	f000 f8d8 	bl	8014f58 <ov5640_write_reg>
 8014da8:	3800      	subs	r0, #0
 8014daa:	bf18      	it	ne
 8014dac:	2001      	movne	r0, #1
 8014dae:	4240      	negs	r0, r0
}
 8014db0:	b002      	add	sp, #8
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8014db4:	f100 0418 	add.w	r4, r0, #24
 8014db8:	460d      	mov	r5, r1
 8014dba:	460b      	mov	r3, r1
 8014dbc:	f10d 0207 	add.w	r2, sp, #7
 8014dc0:	f243 0138 	movw	r1, #12344	@ 0x3038
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f000 f8c7 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014dca:	b118      	cbz	r0, 8014dd4 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8014dcc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014dd0:	b002      	add	sp, #8
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8014dd4:	462b      	mov	r3, r5
 8014dd6:	f10d 0207 	add.w	r2, sp, #7
 8014dda:	f243 0139 	movw	r1, #12345	@ 0x3039
 8014dde:	4620      	mov	r0, r4
 8014de0:	f000 f8ba 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014de4:	2800      	cmp	r0, #0
 8014de6:	d1f1      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 8014de8:	227c      	movs	r2, #124	@ 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8014dea:	462b      	mov	r3, r5
 8014dec:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 8014df0:	4620      	mov	r0, r4
      tmp = 0x7C;
 8014df2:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8014df6:	f10d 0207 	add.w	r2, sp, #7
 8014dfa:	f000 f8ad 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d1e4      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8014e02:	462b      	mov	r3, r5
 8014e04:	f10d 0207 	add.w	r2, sp, #7
 8014e08:	f643 2108 	movw	r1, #14856	@ 0x3a08
 8014e0c:	4620      	mov	r0, r4
      tmp = 0x01;
 8014e0e:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8014e12:	f000 f8a1 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d1d8      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 8014e1a:	2227      	movs	r2, #39	@ 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8014e1c:	462b      	mov	r3, r5
 8014e1e:	f643 2109 	movw	r1, #14857	@ 0x3a09
 8014e22:	4620      	mov	r0, r4
      tmp = 0x27;
 8014e24:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8014e28:	f10d 0207 	add.w	r2, sp, #7
 8014e2c:	f000 f894 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d1cb      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x00;
 8014e34:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8014e38:	462b      	mov	r3, r5
 8014e3a:	f10d 0207 	add.w	r2, sp, #7
 8014e3e:	f643 210a 	movw	r1, #14858	@ 0x3a0a
 8014e42:	4620      	mov	r0, r4
 8014e44:	f000 f888 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d1bf      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 8014e4c:	22f6      	movs	r2, #246	@ 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8014e4e:	462b      	mov	r3, r5
 8014e50:	f643 210b 	movw	r1, #14859	@ 0x3a0b
 8014e54:	4620      	mov	r0, r4
      tmp = 0xF6;
 8014e56:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8014e5a:	f10d 0207 	add.w	r2, sp, #7
 8014e5e:	f000 f87b 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e62:	2800      	cmp	r0, #0
 8014e64:	d1b2      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8014e66:	2204      	movs	r2, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8014e68:	462b      	mov	r3, r5
 8014e6a:	f643 210d 	movw	r1, #14861	@ 0x3a0d
 8014e6e:	4620      	mov	r0, r4
      tmp = 0x04;
 8014e70:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8014e74:	f10d 0207 	add.w	r2, sp, #7
 8014e78:	f000 f86e 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d1a5      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8014e80:	462b      	mov	r3, r5
 8014e82:	f10d 0207 	add.w	r2, sp, #7
 8014e86:	f643 210e 	movw	r1, #14862	@ 0x3a0e
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	f000 f864 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d19b      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8014e94:	250b      	movs	r5, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8014e96:	2301      	movs	r3, #1
 8014e98:	f10d 0207 	add.w	r2, sp, #7
 8014e9c:	f643 2102 	movw	r1, #14850	@ 0x3a02
 8014ea0:	4620      	mov	r0, r4
      tmp = 0x0B;
 8014ea2:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8014ea6:	f000 f857 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d18e      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 8014eae:	2688      	movs	r6, #136	@ 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	f10d 0207 	add.w	r2, sp, #7
 8014eb6:	f643 2103 	movw	r1, #14851	@ 0x3a03
 8014eba:	4620      	mov	r0, r4
      tmp = 0x88;
 8014ebc:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8014ec0:	f000 f84a 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d181      	bne.n	8014dcc <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8014ec8:	2301      	movs	r3, #1
 8014eca:	f10d 0207 	add.w	r2, sp, #7
 8014ece:	f643 2114 	movw	r1, #14868	@ 0x3a14
 8014ed2:	4620      	mov	r0, r4
      tmp = 0x0B;
 8014ed4:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8014ed8:	f000 f83e 	bl	8014f58 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8014edc:	2800      	cmp	r0, #0
 8014ede:	f47f af75 	bne.w	8014dcc <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	f10d 0207 	add.w	r2, sp, #7
 8014ee8:	f643 2115 	movw	r1, #14869	@ 0x3a15
 8014eec:	4620      	mov	r0, r4
      tmp = 0x88;
 8014eee:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8014ef2:	f000 f831 	bl	8014f58 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8014ef6:	3800      	subs	r0, #0
 8014ef8:	bf18      	it	ne
 8014efa:	2001      	movne	r0, #1
 8014efc:	4240      	negs	r0, r0
}
 8014efe:	b002      	add	sp, #8
 8014f00:	bd70      	pop	{r4, r5, r6, pc}
 8014f02:	bf00      	nop

08014f04 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8014f04:	b1c0      	cbz	r0, 8014f38 <OV5640_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 8014f06:	890a      	ldrh	r2, [r1, #8]
{
 8014f08:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 8014f0a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8014f0e:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8014f10:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014f14:	694a      	ldr	r2, [r1, #20]
 8014f16:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8014f1a:	4909      	ldr	r1, [pc, #36]	@ (8014f40 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014f1c:	60c5      	str	r5, [r0, #12]
 8014f1e:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8014f22:	4a08      	ldr	r2, [pc, #32]	@ (8014f44 <OV5640_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8014f24:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8014f28:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init != NULL)
 8014f2a:	b10b      	cbz	r3, 8014f30 <OV5640_RegisterBusIO+0x2c>
}
 8014f2c:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8014f2e:	4718      	bx	r3
}
 8014f30:	f04f 30ff 	mov.w	r0, #4294967295
 8014f34:	bc30      	pop	{r4, r5}
 8014f36:	4770      	bx	lr
 8014f38:	f04f 30ff 	mov.w	r0, #4294967295
 8014f3c:	4770      	bx	lr
 8014f3e:	bf00      	nop
 8014f40:	08013c45 	.word	0x08013c45
 8014f44:	08013c55 	.word	0x08013c55

08014f48 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8014f48:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8014f4a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8014f4e:	46a4      	mov	ip, r4
}
 8014f50:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8014f54:	4760      	bx	ip
 8014f56:	bf00      	nop

08014f58 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8014f58:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8014f5a:	6804      	ldr	r4, [r0, #0]
 8014f5c:	6880      	ldr	r0, [r0, #8]
 8014f5e:	46a4      	mov	ip, r4
}
 8014f60:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8014f64:	4760      	bx	ip
 8014f66:	bf00      	nop

08014f68 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8014f68:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d102      	bne.n	8014f76 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8014f70:	2300      	movs	r3, #0
 8014f72:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  }

  return OV9655_OK;
}
 8014f76:	2000      	movs	r0, #0
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop

08014f7c <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8014f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop

08014f84 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8014f84:	b168      	cbz	r0, 8014fa2 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8014f86:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8014f88:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8014f8a:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8014f8c:	4610      	mov	r0, r2
    Capabilities->Config_LightMode     = 0;
 8014f8e:	604a      	str	r2, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8014f90:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_Resolution    = 1;
 8014f92:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 0;
 8014f94:	610a      	str	r2, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8014f96:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8014f98:	e9c1 3205 	strd	r3, r2, [r1, #20]
    Capabilities->Config_Zoom          = 0;
 8014f9c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    ret = OV9655_OK;
 8014fa0:	4770      	bx	lr
    ret = OV9655_ERROR;
 8014fa2:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8014fa6:	4770      	bx	lr

08014fa8 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8014fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop

08014fb0 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8014fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop

08014fb8 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8014fb8:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8014fba:	6904      	ldr	r4, [r0, #16]
 8014fbc:	8900      	ldrh	r0, [r0, #8]
 8014fbe:	46a4      	mov	ip, r4
}
 8014fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8014fc4:	4760      	bx	ip
 8014fc6:	bf00      	nop

08014fc8 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8014fc8:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8014fca:	68c4      	ldr	r4, [r0, #12]
 8014fcc:	8900      	ldrh	r0, [r0, #8]
 8014fce:	46a4      	mov	ip, r4
}
 8014fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8014fd4:	4760      	bx	ip
 8014fd6:	bf00      	nop

08014fd8 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8014fd8:	2903      	cmp	r1, #3
{
 8014fda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fde:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 8014fe0:	f200 80bd 	bhi.w	801515e <OV9655_SetResolution+0x186>
    switch (Resolution)
 8014fe4:	2901      	cmp	r1, #1
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	d072      	beq.n	80150d0 <OV9655_SetResolution+0xf8>
 8014fea:	3902      	subs	r1, #2
 8014fec:	2901      	cmp	r1, #1
 8014fee:	d828      	bhi.n	8015042 <OV9655_SetResolution+0x6a>
 8014ff0:	4e5c      	ldr	r6, [pc, #368]	@ (8015164 <OV9655_SetResolution+0x18c>)
  int32_t ret = OV9655_OK;
 8014ff2:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8014ff4:	f100 0918 	add.w	r9, r0, #24
 8014ff8:	f506 7893 	add.w	r8, r6, #294	@ 0x126
 8014ffc:	e002      	b.n	8015004 <OV9655_SetResolution+0x2c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8014ffe:	3602      	adds	r6, #2
 8015000:	45b0      	cmp	r8, r6
 8015002:	d01a      	beq.n	801503a <OV9655_SetResolution+0x62>
        if(ret != OV9655_ERROR)
 8015004:	1c6b      	adds	r3, r5, #1
 8015006:	d0fa      	beq.n	8014ffe <OV9655_SetResolution+0x26>
          tmp = OV9655_VGA[index][1];
 8015008:	7877      	ldrb	r7, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 801500a:	2301      	movs	r3, #1
 801500c:	f10d 0207 	add.w	r2, sp, #7
 8015010:	7831      	ldrb	r1, [r6, #0]
 8015012:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 8015014:	f88d 7007 	strb.w	r7, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8015018:	f000 fbf4 	bl	8015804 <ov9655_write_reg>
            ret = OV9655_ERROR;
 801501c:	2800      	cmp	r0, #0
  tickstart = pObj->IO.GetTick();
 801501e:	6963      	ldr	r3, [r4, #20]
            ret = OV9655_ERROR;
 8015020:	bf18      	it	ne
 8015022:	f04f 35ff 	movne.w	r5, #4294967295
  tickstart = pObj->IO.GetTick();
 8015026:	4798      	blx	r3
 8015028:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801502a:	6963      	ldr	r3, [r4, #20]
 801502c:	4798      	blx	r3
 801502e:	1bc0      	subs	r0, r0, r7
 8015030:	2801      	cmp	r0, #1
 8015032:	d9fa      	bls.n	801502a <OV9655_SetResolution+0x52>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8015034:	3602      	adds	r6, #2
 8015036:	45b0      	cmp	r8, r6
 8015038:	d1e4      	bne.n	8015004 <OV9655_SetResolution+0x2c>
}
 801503a:	4628      	mov	r0, r5
 801503c:	b003      	add	sp, #12
 801503e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015042:	4e49      	ldr	r6, [pc, #292]	@ (8015168 <OV9655_SetResolution+0x190>)
  int32_t ret = OV9655_OK;
 8015044:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8015046:	f100 0918 	add.w	r9, r0, #24
 801504a:	f506 7891 	add.w	r8, r6, #290	@ 0x122
 801504e:	e002      	b.n	8015056 <OV9655_SetResolution+0x7e>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8015050:	3602      	adds	r6, #2
 8015052:	4546      	cmp	r6, r8
 8015054:	d01a      	beq.n	801508c <OV9655_SetResolution+0xb4>
        if(ret != OV9655_ERROR)
 8015056:	1c6f      	adds	r7, r5, #1
 8015058:	d0fa      	beq.n	8015050 <OV9655_SetResolution+0x78>
          tmp = OV9655_QVGA_QQVGA[index][1];
 801505a:	7877      	ldrb	r7, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 801505c:	2301      	movs	r3, #1
 801505e:	f10d 0207 	add.w	r2, sp, #7
 8015062:	7831      	ldrb	r1, [r6, #0]
 8015064:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8015066:	f88d 7007 	strb.w	r7, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 801506a:	f000 fbcb 	bl	8015804 <ov9655_write_reg>
            ret = OV9655_ERROR;
 801506e:	2800      	cmp	r0, #0
  tickstart = pObj->IO.GetTick();
 8015070:	6963      	ldr	r3, [r4, #20]
            ret = OV9655_ERROR;
 8015072:	bf18      	it	ne
 8015074:	f04f 35ff 	movne.w	r5, #4294967295
  tickstart = pObj->IO.GetTick();
 8015078:	4798      	blx	r3
 801507a:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801507c:	6963      	ldr	r3, [r4, #20]
 801507e:	4798      	blx	r3
 8015080:	1bc0      	subs	r0, r0, r7
 8015082:	2801      	cmp	r0, #1
 8015084:	d9fa      	bls.n	801507c <OV9655_SetResolution+0xa4>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8015086:	3602      	adds	r6, #2
 8015088:	4546      	cmp	r6, r8
 801508a:	d1e4      	bne.n	8015056 <OV9655_SetResolution+0x7e>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 801508c:	4e37      	ldr	r6, [pc, #220]	@ (801516c <OV9655_SetResolution+0x194>)
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 801508e:	f104 0918 	add.w	r9, r4, #24
 8015092:	f106 080a 	add.w	r8, r6, #10
 8015096:	e002      	b.n	801509e <OV9655_SetResolution+0xc6>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8015098:	3602      	adds	r6, #2
 801509a:	4546      	cmp	r6, r8
 801509c:	d0cd      	beq.n	801503a <OV9655_SetResolution+0x62>
        if(ret != OV9655_ERROR)
 801509e:	1c68      	adds	r0, r5, #1
 80150a0:	d0fa      	beq.n	8015098 <OV9655_SetResolution+0xc0>
          tmp = OV9655_QQVGA[index][1];
 80150a2:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80150a4:	f10d 0207 	add.w	r2, sp, #7
 80150a8:	7831      	ldrb	r1, [r6, #0]
 80150aa:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 80150ac:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80150b0:	2301      	movs	r3, #1
 80150b2:	f000 fba7 	bl	8015804 <ov9655_write_reg>
            ret = OV9655_ERROR;
 80150b6:	2800      	cmp	r0, #0
  tickstart = pObj->IO.GetTick();
 80150b8:	6963      	ldr	r3, [r4, #20]
            ret = OV9655_ERROR;
 80150ba:	bf18      	it	ne
 80150bc:	f04f 35ff 	movne.w	r5, #4294967295
  tickstart = pObj->IO.GetTick();
 80150c0:	4798      	blx	r3
 80150c2:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80150c4:	6963      	ldr	r3, [r4, #20]
 80150c6:	4798      	blx	r3
 80150c8:	1bc0      	subs	r0, r0, r7
 80150ca:	2801      	cmp	r0, #1
 80150cc:	d9fa      	bls.n	80150c4 <OV9655_SetResolution+0xec>
 80150ce:	e7e3      	b.n	8015098 <OV9655_SetResolution+0xc0>
 80150d0:	4e25      	ldr	r6, [pc, #148]	@ (8015168 <OV9655_SetResolution+0x190>)
  int32_t ret = OV9655_OK;
 80150d2:	2500      	movs	r5, #0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80150d4:	f100 0918 	add.w	r9, r0, #24
 80150d8:	f506 7891 	add.w	r8, r6, #290	@ 0x122
 80150dc:	e002      	b.n	80150e4 <OV9655_SetResolution+0x10c>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80150de:	3602      	adds	r6, #2
 80150e0:	4546      	cmp	r6, r8
 80150e2:	d01a      	beq.n	801511a <OV9655_SetResolution+0x142>
        if(ret != OV9655_ERROR)
 80150e4:	1c69      	adds	r1, r5, #1
 80150e6:	d0fa      	beq.n	80150de <OV9655_SetResolution+0x106>
          tmp = OV9655_QVGA_QQVGA[index][1];
 80150e8:	7877      	ldrb	r7, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80150ea:	2301      	movs	r3, #1
 80150ec:	f10d 0207 	add.w	r2, sp, #7
 80150f0:	7831      	ldrb	r1, [r6, #0]
 80150f2:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 80150f4:	f88d 7007 	strb.w	r7, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80150f8:	f000 fb84 	bl	8015804 <ov9655_write_reg>
            ret = OV9655_ERROR;
 80150fc:	2800      	cmp	r0, #0
  tickstart = pObj->IO.GetTick();
 80150fe:	6963      	ldr	r3, [r4, #20]
            ret = OV9655_ERROR;
 8015100:	bf18      	it	ne
 8015102:	f04f 35ff 	movne.w	r5, #4294967295
  tickstart = pObj->IO.GetTick();
 8015106:	4798      	blx	r3
 8015108:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801510a:	6963      	ldr	r3, [r4, #20]
 801510c:	4798      	blx	r3
 801510e:	1bc0      	subs	r0, r0, r7
 8015110:	2801      	cmp	r0, #1
 8015112:	d9fa      	bls.n	801510a <OV9655_SetResolution+0x132>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8015114:	3602      	adds	r6, #2
 8015116:	4546      	cmp	r6, r8
 8015118:	d1e4      	bne.n	80150e4 <OV9655_SetResolution+0x10c>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 801511a:	4e15      	ldr	r6, [pc, #84]	@ (8015170 <OV9655_SetResolution+0x198>)
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 801511c:	f104 0918 	add.w	r9, r4, #24
 8015120:	f106 080a 	add.w	r8, r6, #10
 8015124:	e002      	b.n	801512c <OV9655_SetResolution+0x154>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8015126:	3602      	adds	r6, #2
 8015128:	4546      	cmp	r6, r8
 801512a:	d086      	beq.n	801503a <OV9655_SetResolution+0x62>
        if(ret != OV9655_ERROR)
 801512c:	1c6a      	adds	r2, r5, #1
 801512e:	d0fa      	beq.n	8015126 <OV9655_SetResolution+0x14e>
          tmp = OV9655_QVGA[index][1];
 8015130:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8015132:	f10d 0207 	add.w	r2, sp, #7
 8015136:	7831      	ldrb	r1, [r6, #0]
 8015138:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 801513a:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 801513e:	2301      	movs	r3, #1
 8015140:	f000 fb60 	bl	8015804 <ov9655_write_reg>
            ret = OV9655_ERROR;
 8015144:	2800      	cmp	r0, #0
  tickstart = pObj->IO.GetTick();
 8015146:	6963      	ldr	r3, [r4, #20]
            ret = OV9655_ERROR;
 8015148:	bf18      	it	ne
 801514a:	f04f 35ff 	movne.w	r5, #4294967295
  tickstart = pObj->IO.GetTick();
 801514e:	4798      	blx	r3
 8015150:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8015152:	6963      	ldr	r3, [r4, #20]
 8015154:	4798      	blx	r3
 8015156:	1bc0      	subs	r0, r0, r7
 8015158:	2801      	cmp	r0, #1
 801515a:	d9fa      	bls.n	8015152 <OV9655_SetResolution+0x17a>
 801515c:	e7e3      	b.n	8015126 <OV9655_SetResolution+0x14e>
    ret = OV9655_ERROR;
 801515e:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 8015162:	e76a      	b.n	801503a <OV9655_SetResolution+0x62>
 8015164:	08057be4 	.word	0x08057be4
 8015168:	08057d24 	.word	0x08057d24
 801516c:	08057d18 	.word	0x08057d18
 8015170:	08057d0c 	.word	0x08057d0c

08015174 <OV9655_SetColorEffect>:
  switch(Effect)
 8015174:	3901      	subs	r1, #1
{
 8015176:	b570      	push	{r4, r5, r6, lr}
 8015178:	b082      	sub	sp, #8
  switch(Effect)
 801517a:	291f      	cmp	r1, #31
 801517c:	d821      	bhi.n	80151c2 <OV9655_SetColorEffect+0x4e>
 801517e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8015182:	006c      	.short	0x006c
 8015184:	002000b1 	.word	0x002000b1
 8015188:	002000e4 	.word	0x002000e4
 801518c:	00200020 	.word	0x00200020
 8015190:	0020012b 	.word	0x0020012b
 8015194:	00200020 	.word	0x00200020
 8015198:	00200020 	.word	0x00200020
 801519c:	00200020 	.word	0x00200020
 80151a0:	00200145 	.word	0x00200145
 80151a4:	00200020 	.word	0x00200020
 80151a8:	00200020 	.word	0x00200020
 80151ac:	00200020 	.word	0x00200020
 80151b0:	00200020 	.word	0x00200020
 80151b4:	00200020 	.word	0x00200020
 80151b8:	00200020 	.word	0x00200020
 80151bc:	00200020 	.word	0x00200020
 80151c0:	0174      	.short	0x0174
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80151c2:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 80151c6:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80151c8:	2301      	movs	r3, #1
 80151ca:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 80151ce:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80151d2:	4628      	mov	r0, r5
 80151d4:	213a      	movs	r1, #58	@ 0x3a
    tmp = 0x80;
 80151d6:	2680      	movs	r6, #128	@ 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80151d8:	f000 fb14 	bl	8015804 <ov9655_write_reg>
 80151dc:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80151de:	2301      	movs	r3, #1
 80151e0:	f10d 0207 	add.w	r2, sp, #7
 80151e4:	214f      	movs	r1, #79	@ 0x4f
 80151e6:	4628      	mov	r0, r5
    tmp = 0x80;
 80151e8:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80151ec:	f000 fb0a 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80151f0:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80151f2:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80151f4:	f10d 0207 	add.w	r2, sp, #7
 80151f8:	2150      	movs	r1, #80	@ 0x50
 80151fa:	4628      	mov	r0, r5
 80151fc:	f000 fb02 	bl	8015804 <ov9655_write_reg>
    tmp = 0x00;
 8015200:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8015202:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8015204:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x00;
 8015208:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801520c:	2151      	movs	r1, #81	@ 0x51
 801520e:	2301      	movs	r3, #1
 8015210:	4628      	mov	r0, r5
 8015212:	f000 faf7 	bl	8015804 <ov9655_write_reg>
 8015216:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8015218:	2301      	movs	r3, #1
 801521a:	f10d 0207 	add.w	r2, sp, #7
 801521e:	2152      	movs	r1, #82	@ 0x52
 8015220:	4628      	mov	r0, r5
 8015222:	f000 faef 	bl	8015804 <ov9655_write_reg>
    tmp = 0x80;
 8015226:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 801522a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 801522c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 801522e:	f10d 0207 	add.w	r2, sp, #7
 8015232:	2153      	movs	r1, #83	@ 0x53
 8015234:	4628      	mov	r0, r5
 8015236:	f000 fae5 	bl	8015804 <ov9655_write_reg>
 801523a:	4601      	mov	r1, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 801523c:	2301      	movs	r3, #1
 801523e:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8015242:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8015244:	4628      	mov	r0, r5
 8015246:	2154      	movs	r1, #84	@ 0x54
 8015248:	f000 fadc 	bl	8015804 <ov9655_write_reg>
 801524c:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 801524e:	3800      	subs	r0, #0
 8015250:	bf18      	it	ne
 8015252:	2001      	movne	r0, #1
}
 8015254:	4240      	negs	r0, r0
 8015256:	b002      	add	sp, #8
 8015258:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801525a:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 801525e:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015260:	2301      	movs	r3, #1
 8015262:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8015266:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801526a:	4628      	mov	r0, r5
 801526c:	213a      	movs	r1, #58	@ 0x3a
 801526e:	f000 fac9 	bl	8015804 <ov9655_write_reg>
    tmp = 0x00;
 8015272:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015274:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015276:	2301      	movs	r3, #1
 8015278:	214f      	movs	r1, #79	@ 0x4f
    tmp = 0x00;
 801527a:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 801527e:	4628      	mov	r0, r5
 8015280:	f10d 0207 	add.w	r2, sp, #7
 8015284:	f000 fabe 	bl	8015804 <ov9655_write_reg>
 8015288:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801528a:	2301      	movs	r3, #1
 801528c:	f10d 0207 	add.w	r2, sp, #7
 8015290:	2150      	movs	r1, #80	@ 0x50
 8015292:	4628      	mov	r0, r5
 8015294:	f000 fab6 	bl	8015804 <ov9655_write_reg>
 8015298:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801529a:	2301      	movs	r3, #1
 801529c:	f10d 0207 	add.w	r2, sp, #7
 80152a0:	2151      	movs	r1, #81	@ 0x51
 80152a2:	4628      	mov	r0, r5
 80152a4:	f000 faae 	bl	8015804 <ov9655_write_reg>
 80152a8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80152aa:	2301      	movs	r3, #1
 80152ac:	f10d 0207 	add.w	r2, sp, #7
 80152b0:	2152      	movs	r1, #82	@ 0x52
 80152b2:	4628      	mov	r0, r5
 80152b4:	f000 faa6 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80152b8:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80152ba:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80152bc:	f10d 0207 	add.w	r2, sp, #7
 80152c0:	2153      	movs	r1, #83	@ 0x53
 80152c2:	4628      	mov	r0, r5
 80152c4:	f000 fa9e 	bl	8015804 <ov9655_write_reg>
 80152c8:	4601      	mov	r1, r0
    tmp = 0x60;
 80152ca:	2360      	movs	r3, #96	@ 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80152cc:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80152d0:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80152d2:	4628      	mov	r0, r5
    tmp = 0x60;
 80152d4:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80152d8:	2154      	movs	r1, #84	@ 0x54
 80152da:	2301      	movs	r3, #1
 80152dc:	f000 fa92 	bl	8015804 <ov9655_write_reg>
 80152e0:	4420      	add	r0, r4
    break;
 80152e2:	e7b4      	b.n	801524e <OV9655_SetColorEffect+0xda>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80152e4:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 80152e8:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80152ea:	2301      	movs	r3, #1
 80152ec:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 80152f0:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80152f4:	4628      	mov	r0, r5
 80152f6:	213a      	movs	r1, #58	@ 0x3a
 80152f8:	f000 fa84 	bl	8015804 <ov9655_write_reg>
    tmp = 0x60;
 80152fc:	2260      	movs	r2, #96	@ 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80152fe:	2301      	movs	r3, #1
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015300:	4604      	mov	r4, r0
    tmp = 0x60;
 8015302:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015306:	214f      	movs	r1, #79	@ 0x4f
 8015308:	f10d 0207 	add.w	r2, sp, #7
 801530c:	4628      	mov	r0, r5
 801530e:	f000 fa79 	bl	8015804 <ov9655_write_reg>
    tmp = 0x00;
 8015312:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015314:	4404      	add	r4, r0
    tmp = 0x00;
 8015316:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801531a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801531c:	f10d 0207 	add.w	r2, sp, #7
 8015320:	2150      	movs	r1, #80	@ 0x50
 8015322:	4628      	mov	r0, r5
 8015324:	f000 fa6e 	bl	8015804 <ov9655_write_reg>
 8015328:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801532a:	f10d 0207 	add.w	r2, sp, #7
 801532e:	2301      	movs	r3, #1
 8015330:	2151      	movs	r1, #81	@ 0x51
 8015332:	4628      	mov	r0, r5
 8015334:	f000 fa66 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8015338:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801533a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 801533c:	f10d 0207 	add.w	r2, sp, #7
 8015340:	2152      	movs	r1, #82	@ 0x52
 8015342:	4628      	mov	r0, r5
 8015344:	f000 fa5e 	bl	8015804 <ov9655_write_reg>
 8015348:	e76f      	b.n	801522a <OV9655_SetColorEffect+0xb6>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801534a:	f100 0618 	add.w	r6, r0, #24
    tmp = 0xCC;
 801534e:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015350:	2301      	movs	r3, #1
 8015352:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8015356:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801535a:	4630      	mov	r0, r6
 801535c:	213a      	movs	r1, #58	@ 0x3a
    tmp = 0x00;
 801535e:	2500      	movs	r5, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015360:	f000 fa50 	bl	8015804 <ov9655_write_reg>
 8015364:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015366:	2301      	movs	r3, #1
 8015368:	f10d 0207 	add.w	r2, sp, #7
 801536c:	214f      	movs	r1, #79	@ 0x4f
 801536e:	4630      	mov	r0, r6
    tmp = 0x00;
 8015370:	f88d 5007 	strb.w	r5, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015374:	f000 fa46 	bl	8015804 <ov9655_write_reg>
 8015378:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801537a:	2301      	movs	r3, #1
 801537c:	f10d 0207 	add.w	r2, sp, #7
 8015380:	2150      	movs	r1, #80	@ 0x50
 8015382:	4630      	mov	r0, r6
 8015384:	f000 fa3e 	bl	8015804 <ov9655_write_reg>
 8015388:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801538a:	2301      	movs	r3, #1
 801538c:	f10d 0207 	add.w	r2, sp, #7
 8015390:	2151      	movs	r1, #81	@ 0x51
 8015392:	4630      	mov	r0, r6
 8015394:	f000 fa36 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8015398:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801539a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 801539c:	f10d 0207 	add.w	r2, sp, #7
 80153a0:	2152      	movs	r1, #82	@ 0x52
 80153a2:	4630      	mov	r0, r6
 80153a4:	f000 fa2e 	bl	8015804 <ov9655_write_reg>
    tmp = 0x80;
 80153a8:	2380      	movs	r3, #128	@ 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80153aa:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80153ac:	f10d 0207 	add.w	r2, sp, #7
 80153b0:	2153      	movs	r1, #83	@ 0x53
    tmp = 0x80;
 80153b2:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80153b6:	4630      	mov	r0, r6
 80153b8:	2301      	movs	r3, #1
 80153ba:	f000 fa23 	bl	8015804 <ov9655_write_reg>
 80153be:	4603      	mov	r3, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80153c0:	f10d 0207 	add.w	r2, sp, #7
 80153c4:	4630      	mov	r0, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80153c6:	441c      	add	r4, r3
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80153c8:	2154      	movs	r1, #84	@ 0x54
 80153ca:	2301      	movs	r3, #1
    tmp = 0x00;
 80153cc:	f88d 5007 	strb.w	r5, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80153d0:	f000 fa18 	bl	8015804 <ov9655_write_reg>
 80153d4:	4420      	add	r0, r4
    break;
 80153d6:	e73a      	b.n	801524e <OV9655_SetColorEffect+0xda>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80153d8:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 80153dc:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80153de:	2301      	movs	r3, #1
 80153e0:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 80153e4:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80153e8:	4628      	mov	r0, r5
 80153ea:	213a      	movs	r1, #58	@ 0x3a
 80153ec:	f000 fa0a 	bl	8015804 <ov9655_write_reg>
    tmp = 0x00;
 80153f0:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80153f2:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80153f4:	2301      	movs	r3, #1
    tmp = 0x00;
 80153f6:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80153fa:	214f      	movs	r1, #79	@ 0x4f
 80153fc:	f10d 0207 	add.w	r2, sp, #7
 8015400:	4628      	mov	r0, r5
 8015402:	f000 f9ff 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8015406:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015408:	4404      	add	r4, r0
 801540a:	e787      	b.n	801531c <OV9655_SetColorEffect+0x1a8>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801540c:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 8015410:	21cc      	movs	r1, #204	@ 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015412:	2301      	movs	r3, #1
 8015414:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8015418:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801541c:	4628      	mov	r0, r5
 801541e:	213a      	movs	r1, #58	@ 0x3a
    tmp = 0x00;
 8015420:	2600      	movs	r6, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8015422:	f000 f9ef 	bl	8015804 <ov9655_write_reg>
 8015426:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015428:	2301      	movs	r3, #1
 801542a:	f10d 0207 	add.w	r2, sp, #7
 801542e:	214f      	movs	r1, #79	@ 0x4f
 8015430:	4628      	mov	r0, r5
    tmp = 0x00;
 8015432:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8015436:	f000 f9e5 	bl	8015804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801543a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 801543c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801543e:	f10d 0207 	add.w	r2, sp, #7
 8015442:	2150      	movs	r1, #80	@ 0x50
 8015444:	4628      	mov	r0, r5
 8015446:	f000 f9dd 	bl	8015804 <ov9655_write_reg>
    tmp = 0x20;
 801544a:	2320      	movs	r3, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 801544c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 801544e:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x20;
 8015452:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8015456:	2151      	movs	r1, #81	@ 0x51
 8015458:	2301      	movs	r3, #1
 801545a:	4628      	mov	r0, r5
 801545c:	f000 f9d2 	bl	8015804 <ov9655_write_reg>
    tmp = 0xF0;
 8015460:	23f0      	movs	r3, #240	@ 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8015462:	4404      	add	r4, r0
    tmp = 0xF0;
 8015464:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8015468:	e6d6      	b.n	8015218 <OV9655_SetColorEffect+0xa4>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 801546a:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xEC;
 801546e:	21ec      	movs	r1, #236	@ 0xec
 8015470:	e6aa      	b.n	80151c8 <OV9655_SetColorEffect+0x54>
 8015472:	bf00      	nop

08015474 <OV9655_SetBrightness>:
{
 8015474:	b500      	push	{lr}
  tmp = brightness_level[Level + 4];
 8015476:	3110      	adds	r1, #16
{
 8015478:	b085      	sub	sp, #20
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 801547a:	4a0d      	ldr	r2, [pc, #52]	@ (80154b0 <OV9655_SetBrightness+0x3c>)
{
 801547c:	4686      	mov	lr, r0
  tmp = brightness_level[Level + 4];
 801547e:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8015482:	ab01      	add	r3, sp, #4
 8015484:	ca07      	ldmia	r2, {r0, r1, r2}
 8015486:	c303      	stmia	r3!, {r0, r1}
 8015488:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 801548a:	2155      	movs	r1, #85	@ 0x55
  tmp = brightness_level[Level + 4];
 801548c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8015490:	2301      	movs	r3, #1
 8015492:	f10d 0203 	add.w	r2, sp, #3
 8015496:	f10e 0018 	add.w	r0, lr, #24
  tmp = brightness_level[Level + 4];
 801549a:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 801549e:	f000 f9b1 	bl	8015804 <ov9655_write_reg>
 80154a2:	3800      	subs	r0, #0
 80154a4:	bf18      	it	ne
 80154a6:	2001      	movne	r0, #1
}
 80154a8:	4240      	negs	r0, r0
 80154aa:	b005      	add	sp, #20
 80154ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80154b0:	08036f88 	.word	0x08036f88

080154b4 <OV9655_SetContrast>:
{
 80154b4:	b500      	push	{lr}
  tmp = contrast_level[Level + 4];
 80154b6:	3110      	adds	r1, #16
{
 80154b8:	b085      	sub	sp, #20
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80154ba:	4a0d      	ldr	r2, [pc, #52]	@ (80154f0 <OV9655_SetContrast+0x3c>)
{
 80154bc:	4686      	mov	lr, r0
  tmp = contrast_level[Level + 4];
 80154be:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80154c2:	ab01      	add	r3, sp, #4
 80154c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80154c6:	c303      	stmia	r3!, {r0, r1}
 80154c8:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80154ca:	2156      	movs	r1, #86	@ 0x56
  tmp = contrast_level[Level + 4];
 80154cc:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80154d0:	2301      	movs	r3, #1
 80154d2:	f10d 0203 	add.w	r2, sp, #3
 80154d6:	f10e 0018 	add.w	r0, lr, #24
  tmp = contrast_level[Level + 4];
 80154da:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80154de:	f000 f991 	bl	8015804 <ov9655_write_reg>
 80154e2:	3800      	subs	r0, #0
 80154e4:	bf18      	it	ne
 80154e6:	2001      	movne	r0, #1
}
 80154e8:	4240      	negs	r0, r0
 80154ea:	b005      	add	sp, #20
 80154ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80154f0:	0803e7c0 	.word	0x0803e7c0

080154f4 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80154f4:	f031 0302 	bics.w	r3, r1, #2
{
 80154f8:	b530      	push	{r4, r5, lr}
 80154fa:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80154fc:	d177      	bne.n	80155ee <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80154fe:	f100 0418 	add.w	r4, r0, #24
 8015502:	460d      	mov	r5, r1
 8015504:	2301      	movs	r3, #1
 8015506:	f10d 0207 	add.w	r2, sp, #7
 801550a:	2112      	movs	r1, #18
 801550c:	4620      	mov	r0, r4
 801550e:	f000 f971 	bl	80157f4 <ov9655_read_reg>
 8015512:	2800      	cmp	r0, #0
 8015514:	d16b      	bne.n	80155ee <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8015516:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 801551a:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 801551c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
    switch (PixelFormat)
 8015520:	d029      	beq.n	8015576 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 8015522:	f043 0103 	orr.w	r1, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8015526:	f10d 0207 	add.w	r2, sp, #7
 801552a:	2301      	movs	r3, #1
 801552c:	4620      	mov	r0, r4
      tmp |= 0x03U;
 801552e:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8015532:	2112      	movs	r1, #18
 8015534:	f000 f966 	bl	8015804 <ov9655_write_reg>
 8015538:	2800      	cmp	r0, #0
 801553a:	d158      	bne.n	80155ee <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 801553c:	2301      	movs	r3, #1
 801553e:	f10d 0207 	add.w	r2, sp, #7
 8015542:	2140      	movs	r1, #64	@ 0x40
 8015544:	4620      	mov	r0, r4
 8015546:	f000 f955 	bl	80157f4 <ov9655_read_reg>
 801554a:	2800      	cmp	r0, #0
 801554c:	d14f      	bne.n	80155ee <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 801554e:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8015552:	2301      	movs	r3, #1
 8015554:	f10d 0207 	add.w	r2, sp, #7
 8015558:	2140      	movs	r1, #64	@ 0x40
        tmp |= 0x10U;
 801555a:	f045 0510 	orr.w	r5, r5, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 801555e:	4620      	mov	r0, r4
        tmp |= 0x10U;
 8015560:	f88d 5007 	strb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8015564:	f000 f94e 	bl	8015804 <ov9655_write_reg>
 8015568:	1e05      	subs	r5, r0, #0
 801556a:	bf18      	it	ne
 801556c:	2501      	movne	r5, #1
 801556e:	426d      	negs	r5, r5
}
 8015570:	4628      	mov	r0, r5
 8015572:	b003      	add	sp, #12
 8015574:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 8015576:	f043 0102 	orr.w	r1, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 801557a:	f10d 0207 	add.w	r2, sp, #7
 801557e:	2301      	movs	r3, #1
 8015580:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8015582:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8015586:	2112      	movs	r1, #18
 8015588:	f000 f93c 	bl	8015804 <ov9655_write_reg>
 801558c:	bb78      	cbnz	r0, 80155ee <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 801558e:	2301      	movs	r3, #1
 8015590:	f10d 0207 	add.w	r2, sp, #7
 8015594:	213a      	movs	r1, #58	@ 0x3a
 8015596:	4620      	mov	r0, r4
 8015598:	f000 f92c 	bl	80157f4 <ov9655_read_reg>
 801559c:	bb38      	cbnz	r0, 80155ee <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 801559e:	f89d 1007 	ldrb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80155a2:	2301      	movs	r3, #1
 80155a4:	f10d 0207 	add.w	r2, sp, #7
 80155a8:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80155aa:	f021 012c 	bic.w	r1, r1, #44	@ 0x2c
 80155ae:	f88d 1007 	strb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80155b2:	213a      	movs	r1, #58	@ 0x3a
 80155b4:	f000 f926 	bl	8015804 <ov9655_write_reg>
 80155b8:	b9c8      	cbnz	r0, 80155ee <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80155ba:	2301      	movs	r3, #1
 80155bc:	f10d 0207 	add.w	r2, sp, #7
 80155c0:	2140      	movs	r1, #64	@ 0x40
 80155c2:	4620      	mov	r0, r4
 80155c4:	f000 f916 	bl	80157f4 <ov9655_read_reg>
 80155c8:	4605      	mov	r5, r0
 80155ca:	b9a8      	cbnz	r0, 80155f8 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 80155cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80155d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80155d4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80155d8:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80155dc:	2301      	movs	r3, #1
 80155de:	f10d 0207 	add.w	r2, sp, #7
 80155e2:	2140      	movs	r1, #64	@ 0x40
 80155e4:	4620      	mov	r0, r4
 80155e6:	f000 f90d 	bl	8015804 <ov9655_write_reg>
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d0c0      	beq.n	8015570 <OV9655_SetPixelFormat+0x7c>
    ret = OV9655_ERROR;
 80155ee:	f04f 35ff 	mov.w	r5, #4294967295
}
 80155f2:	4628      	mov	r0, r5
 80155f4:	b003      	add	sp, #12
 80155f6:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 80155f8:	f04f 35ff 	mov.w	r5, #4294967295
 80155fc:	e7ee      	b.n	80155dc <OV9655_SetPixelFormat+0xe8>
 80155fe:	bf00      	nop

08015600 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8015600:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8015604:	b10b      	cbz	r3, 801560a <OV9655_Init+0xa>
  int32_t ret = OV9655_OK;
 8015606:	2000      	movs	r0, #0
}
 8015608:	4770      	bx	lr
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 801560a:	2903      	cmp	r1, #3
{
 801560c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560e:	460e      	mov	r6, r1
 8015610:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8015612:	d827      	bhi.n	8015664 <OV9655_Init+0x64>
 8015614:	f032 0302 	bics.w	r3, r2, #2
 8015618:	4617      	mov	r7, r2
 801561a:	d123      	bne.n	8015664 <OV9655_Init+0x64>
      tmp = 0x80U;
 801561c:	2280      	movs	r2, #128	@ 0x80
 801561e:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8015620:	2301      	movs	r3, #1
 8015622:	2112      	movs	r1, #18
      tmp = 0x80U;
 8015624:	f88d 2007 	strb.w	r2, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8015628:	3018      	adds	r0, #24
 801562a:	f10d 0207 	add.w	r2, sp, #7
 801562e:	f000 f8e9 	bl	8015804 <ov9655_write_reg>
 8015632:	b9b8      	cbnz	r0, 8015664 <OV9655_Init+0x64>
  tickstart = pObj->IO.GetTick();
 8015634:	6963      	ldr	r3, [r4, #20]
 8015636:	4798      	blx	r3
 8015638:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801563a:	6963      	ldr	r3, [r4, #20]
 801563c:	4798      	blx	r3
 801563e:	1b43      	subs	r3, r0, r5
 8015640:	2bc7      	cmp	r3, #199	@ 0xc7
 8015642:	d9fa      	bls.n	801563a <OV9655_Init+0x3a>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8015644:	4631      	mov	r1, r6
 8015646:	4620      	mov	r0, r4
 8015648:	f7ff fcc6 	bl	8014fd8 <OV9655_SetResolution>
 801564c:	b950      	cbnz	r0, 8015664 <OV9655_Init+0x64>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 801564e:	4639      	mov	r1, r7
 8015650:	4620      	mov	r0, r4
 8015652:	f7ff ff4f 	bl	80154f4 <OV9655_SetPixelFormat>
 8015656:	b928      	cbnz	r0, 8015664 <OV9655_Init+0x64>
          pObj->IsInitialized = 1U;
 8015658:	2301      	movs	r3, #1
  int32_t ret = OV9655_OK;
 801565a:	2000      	movs	r0, #0
          pObj->IsInitialized = 1U;
 801565c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8015660:	b003      	add	sp, #12
 8015662:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = OV9655_ERROR;
 8015664:	f04f 30ff 	mov.w	r0, #4294967295
 8015668:	e7fa      	b.n	8015660 <OV9655_Init+0x60>
 801566a:	bf00      	nop

0801566c <OV9655_GetResolution>:
{
 801566c:	b510      	push	{r4, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8015672:	2301      	movs	r3, #1
 8015674:	2132      	movs	r1, #50	@ 0x32
 8015676:	f10d 0207 	add.w	r2, sp, #7
 801567a:	3018      	adds	r0, #24
 801567c:	f000 f8ba 	bl	80157f4 <ov9655_read_reg>
 8015680:	b938      	cbnz	r0, 8015692 <OV9655_GetResolution+0x26>
    switch (tmp)
 8015682:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015686:	2ba4      	cmp	r3, #164	@ 0xa4
 8015688:	d00f      	beq.n	80156aa <OV9655_GetResolution+0x3e>
 801568a:	2bff      	cmp	r3, #255	@ 0xff
 801568c:	d005      	beq.n	801569a <OV9655_GetResolution+0x2e>
 801568e:	2b12      	cmp	r3, #18
 8015690:	d007      	beq.n	80156a2 <OV9655_GetResolution+0x36>
 8015692:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015696:	b002      	add	sp, #8
 8015698:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 801569a:	2303      	movs	r3, #3
 801569c:	6023      	str	r3, [r4, #0]
}
 801569e:	b002      	add	sp, #8
 80156a0:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 80156a2:	2301      	movs	r3, #1
 80156a4:	6023      	str	r3, [r4, #0]
}
 80156a6:	b002      	add	sp, #8
 80156a8:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 80156aa:	6020      	str	r0, [r4, #0]
}
 80156ac:	b002      	add	sp, #8
 80156ae:	bd10      	pop	{r4, pc}

080156b0 <OV9655_ReadID>:
{
 80156b0:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 80156b2:	4604      	mov	r4, r0
{
 80156b4:	b083      	sub	sp, #12
 80156b6:	460d      	mov	r5, r1
  pObj->IO.Init();
 80156b8:	f854 3b18 	ldr.w	r3, [r4], #24
 80156bc:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80156be:	2301      	movs	r3, #1
 80156c0:	f10d 0207 	add.w	r2, sp, #7
 80156c4:	210a      	movs	r1, #10
 80156c6:	4620      	mov	r0, r4
 80156c8:	f000 f894 	bl	80157f4 <ov9655_read_reg>
 80156cc:	b990      	cbnz	r0, 80156f4 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 80156ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80156d2:	2301      	movs	r3, #1
 80156d4:	f10d 0207 	add.w	r2, sp, #7
 80156d8:	4620      	mov	r0, r4
      *Id = (uint32_t)tmp << 8U;
 80156da:	0209      	lsls	r1, r1, #8
 80156dc:	6029      	str	r1, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80156de:	210b      	movs	r1, #11
 80156e0:	f000 f888 	bl	80157f4 <ov9655_read_reg>
 80156e4:	b930      	cbnz	r0, 80156f4 <OV9655_ReadID+0x44>
        *Id |= tmp;
 80156e6:	682b      	ldr	r3, [r5, #0]
 80156e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80156ec:	4313      	orrs	r3, r2
 80156ee:	602b      	str	r3, [r5, #0]
}
 80156f0:	b003      	add	sp, #12
 80156f2:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 80156f4:	f04f 30ff 	mov.w	r0, #4294967295
 80156f8:	e7fa      	b.n	80156f0 <OV9655_ReadID+0x40>
 80156fa:	bf00      	nop

080156fc <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 80156fc:	2903      	cmp	r1, #3
 80156fe:	d824      	bhi.n	801574a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8015700:	2301      	movs	r3, #1
{
 8015702:	b530      	push	{r4, r5, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8015704:	f100 0418 	add.w	r4, r0, #24
{
 8015708:	b083      	sub	sp, #12
 801570a:	460d      	mov	r5, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 801570c:	211e      	movs	r1, #30
 801570e:	f10d 0207 	add.w	r2, sp, #7
 8015712:	4620      	mov	r0, r4
 8015714:	f000 f86e 	bl	80157f4 <ov9655_read_reg>
 8015718:	b9a0      	cbnz	r0, 8015744 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 801571a:	f89d c007 	ldrb.w	ip, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 801571e:	4620      	mov	r0, r4
 8015720:	2301      	movs	r3, #1
 8015722:	f10d 0207 	add.w	r2, sp, #7
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8015726:	f02c 0430 	bic.w	r4, ip, #48	@ 0x30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 801572a:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 801572e:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8015732:	211e      	movs	r1, #30
 8015734:	f000 f866 	bl	8015804 <ov9655_write_reg>
 8015738:	3800      	subs	r0, #0
 801573a:	bf18      	it	ne
 801573c:	2001      	movne	r0, #1
 801573e:	4240      	negs	r0, r0
}
 8015740:	b003      	add	sp, #12
 8015742:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8015744:	f04f 30ff 	mov.w	r0, #4294967295
 8015748:	e7fa      	b.n	8015740 <OV9655_MirrorFlipConfig+0x44>
 801574a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801574e:	4770      	bx	lr

08015750 <OV9655_NightModeConfig>:
{
 8015750:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8015752:	f100 0418 	add.w	r4, r0, #24
{
 8015756:	b083      	sub	sp, #12
 8015758:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 801575a:	2301      	movs	r3, #1
 801575c:	f10d 0207 	add.w	r2, sp, #7
 8015760:	213b      	movs	r1, #59	@ 0x3b
 8015762:	4620      	mov	r0, r4
 8015764:	f000 f846 	bl	80157f4 <ov9655_read_reg>
 8015768:	b9b8      	cbnz	r0, 801579a <OV9655_NightModeConfig+0x4a>
      tmp |= 0x80U;
 801576a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(Cmd == NIGHT_MODE_ENABLE)
 801576e:	2d01      	cmp	r5, #1
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8015770:	f10d 0207 	add.w	r2, sp, #7
 8015774:	f04f 013b 	mov.w	r1, #59	@ 0x3b
      tmp |= 0x80U;
 8015778:	bf0c      	ite	eq
 801577a:	f043 0580 	orreq.w	r5, r3, #128	@ 0x80
      tmp &= 0x7FU;
 801577e:	f003 057f 	andne.w	r5, r3, #127	@ 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8015782:	4620      	mov	r0, r4
 8015784:	2301      	movs	r3, #1
 8015786:	f88d 5007 	strb.w	r5, [sp, #7]
 801578a:	f000 f83b 	bl	8015804 <ov9655_write_reg>
 801578e:	3800      	subs	r0, #0
 8015790:	bf18      	it	ne
 8015792:	2001      	movne	r0, #1
 8015794:	4240      	negs	r0, r0
}
 8015796:	b003      	add	sp, #12
 8015798:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 801579a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 801579e:	e7fa      	b.n	8015796 <OV9655_NightModeConfig+0x46>

080157a0 <OV9655_SetHueDegree>:
int32_t OV9655_SetHueDegree(OV9655_Object_t *pObj, int32_t Degree)
 80157a0:	f04f 30ff 	mov.w	r0, #4294967295
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop

080157a8 <OV9655_ZoomConfig>:
int32_t OV9655_ZoomConfig(OV9655_Object_t *pObj, uint32_t Zoom)
 80157a8:	f04f 30ff 	mov.w	r0, #4294967295
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop

080157b0 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 80157b0:	b1c0      	cbz	r0, 80157e4 <OV9655_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 80157b2:	890a      	ldrh	r2, [r1, #8]
{
 80157b4:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 80157b6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 80157ba:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80157bc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80157c0:	694a      	ldr	r2, [r1, #20]
 80157c2:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 80157c6:	4909      	ldr	r1, [pc, #36]	@ (80157ec <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80157c8:	60c5      	str	r5, [r0, #12]
 80157ca:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 80157ce:	4a08      	ldr	r2, [pc, #32]	@ (80157f0 <OV9655_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 80157d0:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 80157d4:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80157d6:	b10b      	cbz	r3, 80157dc <OV9655_RegisterBusIO+0x2c>
}
 80157d8:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 80157da:	4718      	bx	r3
}
 80157dc:	f04f 30ff 	mov.w	r0, #4294967295
 80157e0:	bc30      	pop	{r4, r5}
 80157e2:	4770      	bx	lr
 80157e4:	f04f 30ff 	mov.w	r0, #4294967295
 80157e8:	4770      	bx	lr
 80157ea:	bf00      	nop
 80157ec:	08014fb9 	.word	0x08014fb9
 80157f0:	08014fc9 	.word	0x08014fc9

080157f4 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80157f4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80157f6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80157fa:	46a4      	mov	ip, r4
}
 80157fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8015800:	4760      	bx	ip
 8015802:	bf00      	nop

08015804 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8015804:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8015806:	6804      	ldr	r4, [r0, #0]
 8015808:	6880      	ldr	r0, [r0, #8]
 801580a:	46a4      	mov	ip, r4
}
 801580c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8015810:	4760      	bx	ip
 8015812:	bf00      	nop

08015814 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8015814:	4b13      	ldr	r3, [pc, #76]	@ (8015864 <BSP_LED_Init+0x50>)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8015816:	4914      	ldr	r1, [pc, #80]	@ (8015868 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 8015818:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801581c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8015820:	b570      	push	{r4, r5, r6, lr}
 8015822:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE();
 8015824:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8015828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801582c:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 801582e:	4a0f      	ldr	r2, [pc, #60]	@ (801586c <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 8015830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8015834:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8015838:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE();
 801583c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801583e:	2303      	movs	r3, #3
  LEDx_GPIO_CLK_ENABLE();
 8015840:	9900      	ldr	r1, [sp, #0]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8015842:	4628      	mov	r0, r5
 8015844:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015846:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015848:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801584a:	e9cd 6401 	strd	r6, r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 801584e:	f004 fa15 	bl	8019c7c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8015852:	4628      	mov	r0, r5
 8015854:	4622      	mov	r2, r4
 8015856:	b2b1      	uxth	r1, r6
 8015858:	f004 fd46 	bl	801a2e8 <HAL_GPIO_WritePin>
 return ret;
}
 801585c:	2000      	movs	r0, #0
 801585e:	b006      	add	sp, #24
 8015860:	bd70      	pop	{r4, r5, r6, pc}
 8015862:	bf00      	nop
 8015864:	58024400 	.word	0x58024400
 8015868:	08057e48 	.word	0x08057e48
 801586c:	08057e58 	.word	0x08057e58

08015870 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8015870:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8015872:	4905      	ldr	r1, [pc, #20]	@ (8015888 <BSP_LED_On+0x18>)
 8015874:	2200      	movs	r2, #0
 8015876:	4b05      	ldr	r3, [pc, #20]	@ (801588c <BSP_LED_On+0x1c>)
 8015878:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 801587c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015880:	f004 fd32 	bl	801a2e8 <HAL_GPIO_WritePin>
  return ret;
}
 8015884:	2000      	movs	r0, #0
 8015886:	bd08      	pop	{r3, pc}
 8015888:	08057e48 	.word	0x08057e48
 801588c:	08057e58 	.word	0x08057e58

08015890 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8015890:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8015892:	4905      	ldr	r1, [pc, #20]	@ (80158a8 <BSP_LED_Off+0x18>)
 8015894:	2201      	movs	r2, #1
 8015896:	4b05      	ldr	r3, [pc, #20]	@ (80158ac <BSP_LED_Off+0x1c>)
 8015898:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 801589c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80158a0:	f004 fd22 	bl	801a2e8 <HAL_GPIO_WritePin>
  return ret;
}
 80158a4:	2000      	movs	r0, #0
 80158a6:	bd08      	pop	{r3, pc}
 80158a8:	08057e48 	.word	0x08057e48
 80158ac:	08057e58 	.word	0x08057e58

080158b0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80158b0:	4a10      	ldr	r2, [pc, #64]	@ (80158f4 <BSP_I2C4_DeInit+0x44>)
{
 80158b2:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80158b4:	6813      	ldr	r3, [r2, #0]
 80158b6:	3b01      	subs	r3, #1
 80158b8:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80158ba:	b10b      	cbz	r3, 80158c0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80158bc:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80158be:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80158c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80158c4:	480c      	ldr	r0, [pc, #48]	@ (80158f8 <BSP_I2C4_DeInit+0x48>)
 80158c6:	f004 fbdf 	bl	801a088 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80158ca:	480b      	ldr	r0, [pc, #44]	@ (80158f8 <BSP_I2C4_DeInit+0x48>)
 80158cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80158d0:	f004 fbda 	bl	801a088 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80158d4:	4a09      	ldr	r2, [pc, #36]	@ (80158fc <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80158d6:	480a      	ldr	r0, [pc, #40]	@ (8015900 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80158d8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80158dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80158e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80158e4:	f004 feca 	bl	801a67c <HAL_I2C_DeInit>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d0e7      	beq.n	80158bc <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80158ec:	f06f 0007 	mvn.w	r0, #7
}
 80158f0:	bd08      	pop	{r3, pc}
 80158f2:	bf00      	nop
 80158f4:	24009688 	.word	0x24009688
 80158f8:	58020c00 	.word	0x58020c00
 80158fc:	58024400 	.word	0x58024400
 8015900:	24008c30 	.word	0x24008c30

08015904 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8015904:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8015906:	2201      	movs	r2, #1
{
 8015908:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 801590a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 801590e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015912:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8015916:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 801591a:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 801591c:	f004 fe56 	bl	801a5cc <HAL_I2C_Init>
 8015920:	b108      	cbz	r0, 8015926 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8015922:	2001      	movs	r0, #1
}
 8015924:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8015926:	4601      	mov	r1, r0
 8015928:	4620      	mov	r0, r4
 801592a:	f005 f979 	bl	801ac20 <HAL_I2CEx_ConfigAnalogFilter>
 801592e:	2800      	cmp	r0, #0
 8015930:	d1f7      	bne.n	8015922 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8015932:	4601      	mov	r1, r0
 8015934:	4620      	mov	r0, r4
 8015936:	f005 f99d 	bl	801ac74 <HAL_I2CEx_ConfigDigitalFilter>
 801593a:	3800      	subs	r0, #0
 801593c:	bf18      	it	ne
 801593e:	2001      	movne	r0, #1
}
 8015940:	bd10      	pop	{r4, pc}
 8015942:	bf00      	nop

08015944 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8015944:	4b9c      	ldr	r3, [pc, #624]	@ (8015bb8 <BSP_I2C4_Init+0x274>)
  hbus_i2c4.Instance = BUS_I2C4;
 8015946:	489d      	ldr	r0, [pc, #628]	@ (8015bbc <BSP_I2C4_Init+0x278>)
 8015948:	4a9d      	ldr	r2, [pc, #628]	@ (8015bc0 <BSP_I2C4_Init+0x27c>)
{
 801594a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (I2c4InitCounter == 0U)
 801594e:	681c      	ldr	r4, [r3, #0]
{
 8015950:	b09f      	sub	sp, #124	@ 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
 8015952:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 8015954:	b11c      	cbz	r4, 801595e <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8015956:	2000      	movs	r0, #0
}
 8015958:	b01f      	add	sp, #124	@ 0x7c
 801595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 801595e:	2201      	movs	r2, #1
 8015960:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8015962:	f005 f957 	bl	801ac14 <HAL_I2C_GetState>
 8015966:	2800      	cmp	r0, #0
 8015968:	d1f5      	bne.n	8015956 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 801596a:	4d96      	ldr	r5, [pc, #600]	@ (8015bc4 <BSP_I2C4_Init+0x280>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 801596c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015970:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8015972:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8015974:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8015978:	f04f 0800 	mov.w	r8, #0
 801597c:	f04f 0902 	mov.w	r9, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8015980:	f043 0308 	orr.w	r3, r3, #8
 8015984:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8015988:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 801598c:	f003 0308 	and.w	r3, r3, #8
 8015990:	9315      	str	r3, [sp, #84]	@ 0x54
 8015992:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8015994:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8015998:	f043 0308 	orr.w	r3, r3, #8
 801599c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80159a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80159a4:	961c      	str	r6, [sp, #112]	@ 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80159a6:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80159aa:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80159ae:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80159b0:	a918      	add	r1, sp, #96	@ 0x60
 80159b2:	4885      	ldr	r0, [pc, #532]	@ (8015bc8 <BSP_I2C4_Init+0x284>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80159b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80159b6:	e9cd 891a 	strd	r8, r9, [sp, #104]	@ 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80159ba:	f004 f95f 	bl	8019c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80159be:	2312      	movs	r3, #18
 80159c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80159c4:	a918      	add	r1, sp, #96	@ 0x60
 80159c6:	4880      	ldr	r0, [pc, #512]	@ (8015bc8 <BSP_I2C4_Init+0x284>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80159c8:	961c      	str	r6, [sp, #112]	@ 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80159ca:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 80159ce:	e9cd 891a 	strd	r8, r9, [sp, #104]	@ 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80159d2:	f004 f953 	bl	8019c7c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80159d6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80159da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80159de:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80159e2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80159e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80159ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80159ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  BUS_I2C4_FORCE_RESET();
 80159ee:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80159f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80159f6:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80159fa:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80159fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015a02:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8015a06:	f006 fdc1 	bl	801c58c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	f000 8198 	beq.w	8015d40 <BSP_I2C4_Init+0x3fc>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8015a10:	4b6e      	ldr	r3, [pc, #440]	@ (8015bcc <BSP_I2C4_Init+0x288>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8015a12:	f06f 011d 	mvn.w	r1, #29
  if (tsdadel_max <= 0)
 8015a16:	4627      	mov	r7, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8015a18:	f04f 0a10 	mov.w	sl, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8015a1c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015a20:	4e6b      	ldr	r6, [pc, #428]	@ (8015bd0 <BSP_I2C4_Init+0x28c>)
 8015a22:	9402      	str	r4, [sp, #8]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8015a24:	fbb3 f3f0 	udiv	r3, r3, r0
 8015a28:	4618      	mov	r0, r3
 8015a2a:	9301      	str	r3, [sp, #4]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8015a2c:	f640 13f6 	movw	r3, #2550	@ 0x9f6
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8015a30:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  if (tsdadel_max <= 0)
 8015a34:	4684      	mov	ip, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8015a36:	eba3 0e80 	sub.w	lr, r3, r0, lsl #2
 8015a3a:	4623      	mov	r3, r4
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8015a3c:	eba1 0802 	sub.w	r8, r1, r2
 8015a40:	4a64      	ldr	r2, [pc, #400]	@ (8015bd4 <BSP_I2C4_Init+0x290>)
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8015a42:	0041      	lsls	r1, r0, #1
  if (tsdadel_max <= 0)
 8015a44:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 8015a48:	6815      	ldr	r5, [r2, #0]
  if (tsdadel_min <= 0)
 8015a4a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8015a4e:	9103      	str	r1, [sp, #12]
  if (tsdadel_max <= 0)
 8015a50:	46a9      	mov	r9, r5
 8015a52:	9513      	str	r5, [sp, #76]	@ 0x4c
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8015a54:	ebbe 0f4c 	cmp.w	lr, ip, lsl #1
 8015a58:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8015a5c:	bf2c      	ite	cs
 8015a5e:	2001      	movcs	r0, #1
 8015a60:	2000      	movcc	r0, #0
 8015a62:	ebb8 0f4c 	cmp.w	r8, ip, lsl #1
 8015a66:	f000 0001 	and.w	r0, r0, #1
 8015a6a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8015a6e:	bf88      	it	hi
 8015a70:	2000      	movhi	r0, #0
 8015a72:	4590      	cmp	r8, r2
 8015a74:	ebcc 0bcc 	rsb	fp, ip, ip, lsl #3
 8015a78:	9004      	str	r0, [sp, #16]
 8015a7a:	bf8c      	ite	hi
 8015a7c:	2000      	movhi	r0, #0
 8015a7e:	2001      	movls	r0, #1
 8015a80:	4596      	cmp	lr, r2
 8015a82:	eb0c 0482 	add.w	r4, ip, r2, lsl #2
 8015a86:	bf38      	it	cc
 8015a88:	2000      	movcc	r0, #0
 8015a8a:	ebb8 0f8c 	cmp.w	r8, ip, lsl #2
 8015a8e:	9411      	str	r4, [sp, #68]	@ 0x44
 8015a90:	465c      	mov	r4, fp
 8015a92:	9006      	str	r0, [sp, #24]
 8015a94:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
 8015a98:	9007      	str	r0, [sp, #28]
 8015a9a:	bf94      	ite	ls
 8015a9c:	2001      	movls	r0, #1
 8015a9e:	2000      	movhi	r0, #0
 8015aa0:	ebbe 0f8c 	cmp.w	lr, ip, lsl #2
 8015aa4:	f000 0501 	and.w	r5, r0, #1
 8015aa8:	bf38      	it	cc
 8015aaa:	2500      	movcc	r5, #0
 8015aac:	4588      	cmp	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8015aae:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8015ab2:	9508      	str	r5, [sp, #32]
 8015ab4:	bf8c      	ite	hi
 8015ab6:	2500      	movhi	r5, #0
 8015ab8:	2501      	movls	r5, #1
 8015aba:	458e      	cmp	lr, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8015abc:	9005      	str	r0, [sp, #20]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8015abe:	bf38      	it	cc
 8015ac0:	2500      	movcc	r5, #0
 8015ac2:	ebb8 0f42 	cmp.w	r8, r2, lsl #1
 8015ac6:	bf98      	it	ls
 8015ac8:	2001      	movls	r0, #1
 8015aca:	ebbe 0f42 	cmp.w	lr, r2, lsl #1
 8015ace:	9509      	str	r5, [sp, #36]	@ 0x24
 8015ad0:	4665      	mov	r5, ip
 8015ad2:	f000 0001 	and.w	r0, r0, #1
 8015ad6:	bf38      	it	cc
 8015ad8:	2000      	movcc	r0, #0
 8015ada:	45d8      	cmp	r8, fp
 8015adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8015ade:	4658      	mov	r0, fp
 8015ae0:	bf8c      	ite	hi
 8015ae2:	2000      	movhi	r0, #0
 8015ae4:	2001      	movls	r0, #1
 8015ae6:	45de      	cmp	lr, fp
 8015ae8:	bf38      	it	cc
 8015aea:	2000      	movcc	r0, #0
 8015aec:	ebb8 0fcc 	cmp.w	r8, ip, lsl #3
 8015af0:	4683      	mov	fp, r0
 8015af2:	bf94      	ite	ls
 8015af4:	f04f 0b01 	movls.w	fp, #1
 8015af8:	f04f 0b00 	movhi.w	fp, #0
 8015afc:	ebbe 0fcc 	cmp.w	lr, ip, lsl #3
 8015b00:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015b02:	f00b 0b01 	and.w	fp, fp, #1
 8015b06:	bf38      	it	cc
 8015b08:	f04f 0b00 	movcc.w	fp, #0
 8015b0c:	4658      	mov	r0, fp
 8015b0e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8015b12:	eb0c 0bcc 	add.w	fp, ip, ip, lsl #3
 8015b16:	45d8      	cmp	r8, fp
 8015b18:	bf8c      	ite	hi
 8015b1a:	2000      	movhi	r0, #0
 8015b1c:	2001      	movls	r0, #1
 8015b1e:	45de      	cmp	lr, fp
 8015b20:	bf38      	it	cc
 8015b22:	2000      	movcc	r0, #0
 8015b24:	ebb8 0f41 	cmp.w	r8, r1, lsl #1
 8015b28:	900d      	str	r0, [sp, #52]	@ 0x34
 8015b2a:	bf98      	it	ls
 8015b2c:	f04f 0b01 	movls.w	fp, #1
 8015b30:	9807      	ldr	r0, [sp, #28]
 8015b32:	bf88      	it	hi
 8015b34:	f04f 0b00 	movhi.w	fp, #0
 8015b38:	ebbe 0f41 	cmp.w	lr, r1, lsl #1
 8015b3c:	f00b 0101 	and.w	r1, fp, #1
 8015b40:	bf38      	it	cc
 8015b42:	2100      	movcc	r1, #0
 8015b44:	4580      	cmp	r8, r0
 8015b46:	910e      	str	r1, [sp, #56]	@ 0x38
 8015b48:	4601      	mov	r1, r0
 8015b4a:	bf8c      	ite	hi
 8015b4c:	2100      	movhi	r1, #0
 8015b4e:	2101      	movls	r1, #1
 8015b50:	4586      	cmp	lr, r0
 8015b52:	4620      	mov	r0, r4
 8015b54:	bf38      	it	cc
 8015b56:	2100      	movcc	r1, #0
 8015b58:	ebb8 0f82 	cmp.w	r8, r2, lsl #2
 8015b5c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015b5e:	bf94      	ite	ls
 8015b60:	2101      	movls	r1, #1
 8015b62:	2100      	movhi	r1, #0
 8015b64:	ebbe 0f82 	cmp.w	lr, r2, lsl #2
 8015b68:	f001 0101 	and.w	r1, r1, #1
 8015b6c:	bf38      	it	cc
 8015b6e:	2100      	movcc	r1, #0
 8015b70:	9110      	str	r1, [sp, #64]	@ 0x40
 8015b72:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015b74:	4588      	cmp	r8, r1
 8015b76:	460a      	mov	r2, r1
 8015b78:	bf8c      	ite	hi
 8015b7a:	2200      	movhi	r2, #0
 8015b7c:	2201      	movls	r2, #1
 8015b7e:	458e      	cmp	lr, r1
 8015b80:	bf38      	it	cc
 8015b82:	2200      	movcc	r2, #0
 8015b84:	ebb8 0f44 	cmp.w	r8, r4, lsl #1
 8015b88:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b8a:	bf94      	ite	ls
 8015b8c:	2201      	movls	r2, #1
 8015b8e:	2200      	movhi	r2, #0
 8015b90:	ebbe 0f44 	cmp.w	lr, r4, lsl #1
 8015b94:	f04f 0400 	mov.w	r4, #0
 8015b98:	f002 0201 	and.w	r2, r2, #1
 8015b9c:	bf38      	it	cc
 8015b9e:	2200      	movcc	r2, #0
 8015ba0:	9212      	str	r2, [sp, #72]	@ 0x48
 8015ba2:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
 8015ba6:	4590      	cmp	r8, r2
 8015ba8:	bf8c      	ite	hi
 8015baa:	2100      	movhi	r1, #0
 8015bac:	2101      	movls	r1, #1
 8015bae:	4596      	cmp	lr, r2
 8015bb0:	bf38      	it	cc
 8015bb2:	2100      	movcc	r1, #0
 8015bb4:	9107      	str	r1, [sp, #28]
 8015bb6:	e013      	b.n	8015be0 <BSP_I2C4_Init+0x29c>
 8015bb8:	24009688 	.word	0x24009688
 8015bbc:	24008c30 	.word	0x24008c30
 8015bc0:	58001c00 	.word	0x58001c00
 8015bc4:	58024400 	.word	0x58024400
 8015bc8:	58020c00 	.word	0x58020c00
 8015bcc:	3b9aca00 	.word	0x3b9aca00
 8015bd0:	24008c88 	.word	0x24008c88
 8015bd4:	24008c84 	.word	0x24008c84
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8015bd8:	2c10      	cmp	r4, #16
 8015bda:	4465      	add	r5, ip
 8015bdc:	f000 827d 	beq.w	80160da <BSP_I2C4_Init+0x796>
      if (tscldel >= (uint32_t)tscldel_min)
 8015be0:	f240 3279 	movw	r2, #889	@ 0x379
 8015be4:	4621      	mov	r1, r4
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8015be6:	3401      	adds	r4, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8015be8:	4295      	cmp	r5, r2
 8015bea:	d9f5      	bls.n	8015bd8 <BSP_I2C4_Init+0x294>
            if(presc != prev_presc)
 8015bec:	fab8 fb88 	clz	fp, r8
 8015bf0:	4557      	cmp	r7, sl
 8015bf2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015bf6:	bf08      	it	eq
 8015bf8:	f04f 0b00 	moveq.w	fp, #0
 8015bfc:	f1bb 0f00 	cmp.w	fp, #0
 8015c00:	f040 8200 	bne.w	8016004 <BSP_I2C4_Init+0x6c0>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8015c04:	45f4      	cmp	ip, lr
 8015c06:	bf8c      	ite	hi
 8015c08:	2200      	movhi	r2, #0
 8015c0a:	2201      	movls	r2, #1
 8015c0c:	45c4      	cmp	ip, r8
 8015c0e:	bf38      	it	cc
 8015c10:	2200      	movcc	r2, #0
            if(presc != prev_presc)
 8015c12:	4557      	cmp	r7, sl
 8015c14:	bf0c      	ite	eq
 8015c16:	2200      	moveq	r2, #0
 8015c18:	f002 0201 	andne.w	r2, r2, #1
 8015c1c:	2a00      	cmp	r2, #0
 8015c1e:	f000 8099 	beq.w	8015d54 <BSP_I2C4_Init+0x410>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c22:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015c26:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015c2a:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c2c:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015c30:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015c38:	6098      	str	r0, [r3, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c3a:	4630      	mov	r0, r6
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015c3c:	6059      	str	r1, [r3, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015c3e:	f200 80f2 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8015c42:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c46:	4557      	cmp	r7, sl
 8015c48:	bf0c      	ite	eq
 8015c4a:	2300      	moveq	r3, #0
 8015c4c:	f003 0301 	andne.w	r3, r3, #1
 8015c50:	469b      	mov	fp, r3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	f000 8097 	beq.w	8015d86 <BSP_I2C4_Init+0x442>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c58:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015c5c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015c60:	2205      	movs	r2, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c62:	4630      	mov	r0, r6
 8015c64:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015c68:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015c70:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015c72:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015c74:	f200 80d7 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
 8015c78:	465a      	mov	r2, fp
              prev_presc = presc;
 8015c7a:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015c7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c7e:	4557      	cmp	r7, sl
 8015c80:	bf0c      	ite	eq
 8015c82:	2300      	moveq	r3, #0
 8015c84:	f003 0301 	andne.w	r3, r3, #1
 8015c88:	469b      	mov	fp, r3
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 8096 	beq.w	8015dbc <BSP_I2C4_Init+0x478>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c90:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015c94:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015c98:	2209      	movs	r2, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015c9a:	4630      	mov	r0, r6
 8015c9c:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015ca0:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015ca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015ca8:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015caa:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015cac:	f200 80bb 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
 8015cb0:	465a      	mov	r2, fp
              prev_presc = presc;
 8015cb2:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015cb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015cb6:	4557      	cmp	r7, sl
 8015cb8:	bf0c      	ite	eq
 8015cba:	2300      	moveq	r3, #0
 8015cbc:	f003 0301 	andne.w	r3, r3, #1
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	f000 8096 	beq.w	8015df2 <BSP_I2C4_Init+0x4ae>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015cc6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015cca:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f846 7022 	str.w	r7, [r6, r2, lsl #2]
 8015cd4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015cd8:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015cdc:	6051      	str	r1, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015cde:	f04f 010d 	mov.w	r1, #13
 8015ce2:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015ce4:	f200 809f 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8015ce8:	46ba      	mov	sl, r7
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8015cea:	e775      	b.n	8015bd8 <BSP_I2C4_Init+0x294>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8015cec:	9a06      	ldr	r2, [sp, #24]
 8015cee:	4661      	mov	r1, ip
 8015cf0:	f109 0914 	add.w	r9, r9, #20
 8015cf4:	3201      	adds	r2, #1
 8015cf6:	e9dd e40a 	ldrd	lr, r4, [sp, #40]	@ 0x28
 8015cfa:	e9dd c30c 	ldrd	ip, r3, [sp, #48]	@ 0x30
 8015cfe:	4572      	cmp	r2, lr
 8015d00:	9206      	str	r2, [sp, #24]
 8015d02:	f040 80b4 	bne.w	8015e6e <BSP_I2C4_Init+0x52a>
        if (idx < I2C_VALID_TIMING_NBR)
 8015d06:	9b01      	ldr	r3, [sp, #4]
 8015d08:	2b7f      	cmp	r3, #127	@ 0x7f
 8015d0a:	e9dd 4008 	ldrd	r4, r0, [sp, #32]
 8015d0e:	d817      	bhi.n	8015d40 <BSP_I2C4_Init+0x3fc>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8015d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015d14:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015d18:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8015d1c:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8015d1e:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8015d20:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8015d22:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8015d26:	f400 0070 	and.w	r0, r0, #15728640	@ 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8015d2a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8015d2e:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8015d30:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8015d32:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8015d34:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8015d38:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8015d3a:	430b      	orrs	r3, r1
 8015d3c:	ea43 0402 	orr.w	r4, r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8015d40:	4621      	mov	r1, r4
 8015d42:	48ad      	ldr	r0, [pc, #692]	@ (8015ff8 <BSP_I2C4_Init+0x6b4>)
 8015d44:	f7ff fdde 	bl	8015904 <MX_I2C4_Init>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	f43f ae04 	beq.w	8015956 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8015d4e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8015d52:	e601      	b.n	8015958 <BSP_I2C4_Init+0x14>
            if(presc != prev_presc)
 8015d54:	9a04      	ldr	r2, [sp, #16]
 8015d56:	4557      	cmp	r7, sl
 8015d58:	bf0c      	ite	eq
 8015d5a:	2200      	moveq	r2, #0
 8015d5c:	f002 0201 	andne.w	r2, r2, #1
 8015d60:	2a00      	cmp	r2, #0
 8015d62:	f000 81cf 	beq.w	8016104 <BSP_I2C4_Init+0x7c0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015d66:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015d6a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015d6e:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015d70:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015d74:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015d78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015d7c:	6098      	str	r0, [r3, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015d7e:	4630      	mov	r0, r6
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015d80:	6059      	str	r1, [r3, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015d82:	d850      	bhi.n	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8015d84:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d88:	4557      	cmp	r7, sl
 8015d8a:	bf0c      	ite	eq
 8015d8c:	2300      	moveq	r3, #0
 8015d8e:	f003 0301 	andne.w	r3, r3, #1
 8015d92:	469b      	mov	fp, r3
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	f000 80db 	beq.w	8015f50 <BSP_I2C4_Init+0x60c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015d9a:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015d9e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015da2:	2206      	movs	r2, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015da4:	4630      	mov	r0, r6
 8015da6:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015daa:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015dae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015db2:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015db4:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015db6:	d836      	bhi.n	8015e26 <BSP_I2C4_Init+0x4e2>
 8015db8:	465a      	mov	r2, fp
              prev_presc = presc;
 8015dba:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015dbe:	4557      	cmp	r7, sl
 8015dc0:	bf0c      	ite	eq
 8015dc2:	2300      	moveq	r3, #0
 8015dc4:	f003 0301 	andne.w	r3, r3, #1
 8015dc8:	469b      	mov	fp, r3
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f000 80dc 	beq.w	8015f88 <BSP_I2C4_Init+0x644>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015dd0:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015dd4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015dd8:	220a      	movs	r2, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015dda:	4630      	mov	r0, r6
 8015ddc:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015de0:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015de4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015de8:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015dea:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015dec:	d81b      	bhi.n	8015e26 <BSP_I2C4_Init+0x4e2>
 8015dee:	465a      	mov	r2, fp
              prev_presc = presc;
 8015df0:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015df2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015df4:	4557      	cmp	r7, sl
 8015df6:	bf0c      	ite	eq
 8015df8:	2300      	moveq	r3, #0
 8015dfa:	f003 0301 	andne.w	r3, r3, #1
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	f000 80de 	beq.w	8015fc0 <BSP_I2C4_Init+0x67c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015e04:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015e08:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	f846 7022 	str.w	r7, [r6, r2, lsl #2]
 8015e12:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015e16:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015e1a:	6051      	str	r1, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015e1c:	f04f 010e 	mov.w	r1, #14
 8015e20:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015e22:	f67f af61 	bls.w	8015ce8 <BSP_I2C4_Init+0x3a4>
 8015e26:	4b75      	ldr	r3, [pc, #468]	@ (8015ffc <BSP_I2C4_Init+0x6b8>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8015e28:	464d      	mov	r5, r9
 8015e2a:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 8015e2e:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8015e32:	f242 424a 	movw	r2, #9290	@ 0x244a
 8015e36:	f101 0332 	add.w	r3, r1, #50	@ 0x32
 8015e3a:	f640 769f 	movw	r6, #3999	@ 0xf9f
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015e3e:	2700      	movs	r7, #0
 8015e40:	1a52      	subs	r2, r2, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015e42:	9408      	str	r4, [sp, #32]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015e44:	9706      	str	r7, [sp, #24]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015e46:	461c      	mov	r4, r3
 8015e48:	eba2 0c03 	sub.w	ip, r2, r3
 8015e4c:	9a01      	ldr	r2, [sp, #4]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015e4e:	f04f 37ff 	mov.w	r7, #4294967295
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015e52:	460b      	mov	r3, r1
 8015e54:	4296      	cmp	r6, r2
 8015e56:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8016000 <BSP_I2C4_Init+0x6bc>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015e5a:	f242 7b10 	movw	fp, #10000	@ 0x2710
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015e5e:	f241 0a47 	movw	sl, #4167	@ 0x1047
 8015e62:	bf38      	it	cc
 8015e64:	4616      	movcc	r6, r2
 8015e66:	46ae      	mov	lr, r5
 8015e68:	4611      	mov	r1, r2
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015e6a:	9701      	str	r7, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015e6c:	9009      	str	r0, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8015e6e:	f8d9 0000 	ldr.w	r0, [r9]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8015e72:	2500      	movs	r5, #0
 8015e74:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8015e78:	fb00 1001 	mla	r0, r0, r1, r1
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8015e7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8015e7e:	18c2      	adds	r2, r0, r3
 8015e80:	ebac 0840 	sub.w	r8, ip, r0, lsl #1
 8015e84:	1907      	adds	r7, r0, r4
 8015e86:	468c      	mov	ip, r1
 8015e88:	f5a2 5211 	sub.w	r2, r2, #9280	@ 0x2440
 8015e8c:	3a0a      	subs	r2, #10
 8015e8e:	e9cd e40a 	strd	lr, r4, [sp, #40]	@ 0x28
 8015e92:	9207      	str	r2, [sp, #28]
 8015e94:	e006      	b.n	8015ea4 <BSP_I2C4_Init+0x560>
 8015e96:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8015e9a:	4407      	add	r7, r0
 8015e9c:	eba8 0800 	sub.w	r8, r8, r0
 8015ea0:	f43f af24 	beq.w	8015cec <BSP_I2C4_Init+0x3a8>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8015ea4:	f241 235c 	movw	r3, #4700	@ 0x125c
 8015ea8:	4629      	mov	r1, r5
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015eaa:	3501      	adds	r5, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8015eac:	429f      	cmp	r7, r3
 8015eae:	d9f2      	bls.n	8015e96 <BSP_I2C4_Init+0x552>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8015eb0:	f1a7 0332 	sub.w	r3, r7, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8015eb4:	ebbc 0f93 	cmp.w	ip, r3, lsr #2
 8015eb8:	d2ed      	bcs.n	8015e96 <BSP_I2C4_Init+0x552>
 8015eba:	f242 4e4a 	movw	lr, #9290	@ 0x244a
 8015ebe:	4644      	mov	r4, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8015ec0:	f8cd 8010 	str.w	r8, [sp, #16]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	ebae 0e03 	sub.w	lr, lr, r3
 8015eca:	9b07      	ldr	r3, [sp, #28]
 8015ecc:	9705      	str	r7, [sp, #20]
 8015ece:	443b      	add	r3, r7
 8015ed0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015ed4:	460f      	mov	r7, r1
 8015ed6:	e9cd 5c02 	strd	r5, ip, [sp, #8]
 8015eda:	46b4      	mov	ip, r6
 8015edc:	e005      	b.n	8015eea <BSP_I2C4_Init+0x5a6>
 8015ede:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8015ee2:	4403      	add	r3, r0
 8015ee4:	eba4 0400 	sub.w	r4, r4, r0
 8015ee8:	d01a      	beq.n	8015f20 <BSP_I2C4_Init+0x5dc>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015eea:	eb0e 0103 	add.w	r1, lr, r3
 8015eee:	4616      	mov	r6, r2
 8015ef0:	f203 6583 	addw	r5, r3, #1667	@ 0x683
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8015ef4:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8015ef6:	4561      	cmp	r1, ip
 8015ef8:	d9f1      	bls.n	8015ede <BSP_I2C4_Init+0x59a>
 8015efa:	4555      	cmp	r5, sl
 8015efc:	d8ef      	bhi.n	8015ede <BSP_I2C4_Init+0x59a>
            if (error < 0)
 8015efe:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 8015f02:	bf28      	it	cs
 8015f04:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 8015f06:	458b      	cmp	fp, r1
 8015f08:	d9e9      	bls.n	8015ede <BSP_I2C4_Init+0x59a>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8015f0a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
              prev_error = (uint32_t)error;
 8015f0e:	468b      	mov	fp, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8015f10:	4403      	add	r3, r0
 8015f12:	eba4 0400 	sub.w	r4, r4, r0
              ret = count;
 8015f16:	f8cd 8004 	str.w	r8, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
 8015f1a:	e9c9 6703 	strd	r6, r7, [r9, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8015f1e:	d1e4      	bne.n	8015eea <BSP_I2C4_Init+0x5a6>
 8015f20:	4666      	mov	r6, ip
 8015f22:	9d02      	ldr	r5, [sp, #8]
 8015f24:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015f28:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015f2c:	e7b3      	b.n	8015e96 <BSP_I2C4_Init+0x552>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f2e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015f32:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015f36:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f38:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015f3c:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015f44:	6098      	str	r0, [r3, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f46:	4630      	mov	r0, r6
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015f48:	6059      	str	r1, [r3, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015f4a:	f63f af6c 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8015f4e:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015f50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f52:	4557      	cmp	r7, sl
 8015f54:	bf0c      	ite	eq
 8015f56:	2300      	moveq	r3, #0
 8015f58:	f003 0301 	andne.w	r3, r3, #1
 8015f5c:	469b      	mov	fp, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f000 8083 	beq.w	801606a <BSP_I2C4_Init+0x726>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f64:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015f68:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015f6c:	2207      	movs	r2, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015f74:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015f7c:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015f7e:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015f80:	f63f af51 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
 8015f84:	465a      	mov	r2, fp
              prev_presc = presc;
 8015f86:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f8a:	4557      	cmp	r7, sl
 8015f8c:	bf0c      	ite	eq
 8015f8e:	2300      	moveq	r3, #0
 8015f90:	f003 0301 	andne.w	r3, r3, #1
 8015f94:	469b      	mov	fp, r3
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	f000 8083 	beq.w	80160a2 <BSP_I2C4_Init+0x75e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015f9c:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8015fa0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015fa4:	220b      	movs	r2, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015fac:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015fb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015fb4:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015fb6:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015fb8:	f63f af35 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
 8015fbc:	465a      	mov	r2, fp
              prev_presc = presc;
 8015fbe:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8015fc0:	9b07      	ldr	r3, [sp, #28]
 8015fc2:	4557      	cmp	r7, sl
 8015fc4:	bf0c      	ite	eq
 8015fc6:	2300      	moveq	r3, #0
 8015fc8:	f003 0301 	andne.w	r3, r3, #1
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	f000 8097 	beq.w	8016100 <BSP_I2C4_Init+0x7bc>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015fd2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8015fd6:	480a      	ldr	r0, [pc, #40]	@ (8016000 <BSP_I2C4_Init+0x6bc>)
              I2c_valid_timing_nbr ++;
 8015fd8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8015fdc:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 8015fe0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015fe4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8015fe8:	6051      	str	r1, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8015fea:	f04f 010f 	mov.w	r1, #15
 8015fee:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8015ff0:	f63f af19 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8015ff4:	46ba      	mov	sl, r7
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8015ff6:	e5ef      	b.n	8015bd8 <BSP_I2C4_Init+0x294>
 8015ff8:	24008c30 	.word	0x24008c30
 8015ffc:	24008c84 	.word	0x24008c84
 8016000:	24008c88 	.word	0x24008c88
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016004:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8016008:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 801600c:	2200      	movs	r2, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 801600e:	4630      	mov	r0, r6
 8016010:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8016014:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016018:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 801601c:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 801601e:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8016020:	f63f af01 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8016024:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 8016026:	9a06      	ldr	r2, [sp, #24]
 8016028:	45ba      	cmp	sl, r7
 801602a:	bf0c      	ite	eq
 801602c:	2200      	moveq	r2, #0
 801602e:	f002 0201 	andne.w	r2, r2, #1
 8016032:	2a00      	cmp	r2, #0
 8016034:	f47f af7b 	bne.w	8015f2e <BSP_I2C4_Init+0x5ea>
 8016038:	9a08      	ldr	r2, [sp, #32]
 801603a:	45ba      	cmp	sl, r7
 801603c:	bf0c      	ite	eq
 801603e:	2200      	moveq	r2, #0
 8016040:	f002 0201 	andne.w	r2, r2, #1
 8016044:	2a00      	cmp	r2, #0
 8016046:	d05f      	beq.n	8016108 <BSP_I2C4_Init+0x7c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016048:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 801604c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8016050:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016052:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8016056:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 801605a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 801605e:	6098      	str	r0, [r3, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016060:	4630      	mov	r0, r6
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8016062:	6059      	str	r1, [r3, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8016064:	f63f aedf 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 8016068:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 801606a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801606c:	4557      	cmp	r7, sl
 801606e:	bf0c      	ite	eq
 8016070:	2300      	moveq	r3, #0
 8016072:	f003 0301 	andne.w	r3, r3, #1
 8016076:	469b      	mov	fp, r3
 8016078:	2b00      	cmp	r3, #0
 801607a:	f43f adff 	beq.w	8015c7c <BSP_I2C4_Init+0x338>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 801607e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 8016082:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8016086:	2208      	movs	r2, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016088:	4630      	mov	r0, r6
 801608a:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 801608e:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8016092:	eb06 0383 	add.w	r3, r6, r3, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8016096:	6059      	str	r1, [r3, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8016098:	609a      	str	r2, [r3, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 801609a:	f63f aec4 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
 801609e:	465a      	mov	r2, fp
              prev_presc = presc;
 80160a0:	46ba      	mov	sl, r7
            if(presc != prev_presc)
 80160a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80160a4:	4557      	cmp	r7, sl
 80160a6:	bf0c      	ite	eq
 80160a8:	2300      	moveq	r3, #0
 80160aa:	f003 0301 	andne.w	r3, r3, #1
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	f43f ae00 	beq.w	8015cb4 <BSP_I2C4_Init+0x370>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80160b4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
 80160b8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80160bc:	4630      	mov	r0, r6
 80160be:	f846 7022 	str.w	r7, [r6, r2, lsl #2]
 80160c2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80160c6:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80160ca:	6051      	str	r1, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80160cc:	f04f 010c 	mov.w	r1, #12
 80160d0:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80160d2:	f63f aea8 	bhi.w	8015e26 <BSP_I2C4_Init+0x4e2>
              prev_presc = presc;
 80160d6:	46ba      	mov	sl, r7
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80160d8:	e57e      	b.n	8015bd8 <BSP_I2C4_Init+0x294>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80160da:	3701      	adds	r7, #1
 80160dc:	9a01      	ldr	r2, [sp, #4]
 80160de:	2f10      	cmp	r7, #16
 80160e0:	4494      	add	ip, r2
 80160e2:	f47f acb7 	bne.w	8015a54 <BSP_I2C4_Init+0x110>
 80160e6:	9c02      	ldr	r4, [sp, #8]
 80160e8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80160ea:	9903      	ldr	r1, [sp, #12]
 80160ec:	b11b      	cbz	r3, 80160f6 <BSP_I2C4_Init+0x7b2>
 80160ee:	4b07      	ldr	r3, [pc, #28]	@ (801610c <BSP_I2C4_Init+0x7c8>)
 80160f0:	464d      	mov	r5, r9
 80160f2:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80160f6:	2d00      	cmp	r5, #0
 80160f8:	f43f ae22 	beq.w	8015d40 <BSP_I2C4_Init+0x3fc>
 80160fc:	4804      	ldr	r0, [pc, #16]	@ (8016110 <BSP_I2C4_Init+0x7cc>)
 80160fe:	e698      	b.n	8015e32 <BSP_I2C4_Init+0x4ee>
 8016100:	4613      	mov	r3, r2
 8016102:	e569      	b.n	8015bd8 <BSP_I2C4_Init+0x294>
            if(presc != prev_presc)
 8016104:	469b      	mov	fp, r3
 8016106:	e78e      	b.n	8016026 <BSP_I2C4_Init+0x6e2>
 8016108:	465a      	mov	r2, fp
 801610a:	e59b      	b.n	8015c44 <BSP_I2C4_Init+0x300>
 801610c:	24008c84 	.word	0x24008c84
 8016110:	24008c88 	.word	0x24008c88

08016114 <BSP_I2C4_WriteReg>:
{
 8016114:	b530      	push	{r4, r5, lr}
 8016116:	4614      	mov	r4, r2
 8016118:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801611a:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 801611e:	460a      	mov	r2, r1
 8016120:	9301      	str	r3, [sp, #4]
 8016122:	4601      	mov	r1, r0
 8016124:	2301      	movs	r3, #1
 8016126:	4809      	ldr	r0, [pc, #36]	@ (801614c <BSP_I2C4_WriteReg+0x38>)
 8016128:	9502      	str	r5, [sp, #8]
 801612a:	9400      	str	r4, [sp, #0]
 801612c:	f004 fac0 	bl	801a6b0 <HAL_I2C_Mem_Write>
 8016130:	b908      	cbnz	r0, 8016136 <BSP_I2C4_WriteReg+0x22>
}
 8016132:	b005      	add	sp, #20
 8016134:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8016136:	4805      	ldr	r0, [pc, #20]	@ (801614c <BSP_I2C4_WriteReg+0x38>)
 8016138:	f004 fd70 	bl	801ac1c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 801613c:	2804      	cmp	r0, #4
 801613e:	bf14      	ite	ne
 8016140:	f06f 0003 	mvnne.w	r0, #3
 8016144:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 8016148:	e7f3      	b.n	8016132 <BSP_I2C4_WriteReg+0x1e>
 801614a:	bf00      	nop
 801614c:	24008c30 	.word	0x24008c30

08016150 <BSP_I2C4_ReadReg>:
{
 8016150:	b530      	push	{r4, r5, lr}
 8016152:	4614      	mov	r4, r2
 8016154:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8016156:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 801615a:	460a      	mov	r2, r1
 801615c:	9301      	str	r3, [sp, #4]
 801615e:	4601      	mov	r1, r0
 8016160:	2301      	movs	r3, #1
 8016162:	4809      	ldr	r0, [pc, #36]	@ (8016188 <BSP_I2C4_ReadReg+0x38>)
 8016164:	9502      	str	r5, [sp, #8]
 8016166:	9400      	str	r4, [sp, #0]
 8016168:	f004 fc10 	bl	801a98c <HAL_I2C_Mem_Read>
 801616c:	b908      	cbnz	r0, 8016172 <BSP_I2C4_ReadReg+0x22>
}
 801616e:	b005      	add	sp, #20
 8016170:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8016172:	4805      	ldr	r0, [pc, #20]	@ (8016188 <BSP_I2C4_ReadReg+0x38>)
 8016174:	f004 fd52 	bl	801ac1c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8016178:	2804      	cmp	r0, #4
 801617a:	bf14      	ite	ne
 801617c:	f06f 0003 	mvnne.w	r0, #3
 8016180:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 8016184:	e7f3      	b.n	801616e <BSP_I2C4_ReadReg+0x1e>
 8016186:	bf00      	nop
 8016188:	24008c30 	.word	0x24008c30

0801618c <BSP_I2C4_WriteReg16>:
{
 801618c:	b530      	push	{r4, r5, lr}
 801618e:	4614      	mov	r4, r2
 8016190:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8016192:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8016196:	460a      	mov	r2, r1
 8016198:	9301      	str	r3, [sp, #4]
 801619a:	4601      	mov	r1, r0
 801619c:	2302      	movs	r3, #2
 801619e:	4809      	ldr	r0, [pc, #36]	@ (80161c4 <BSP_I2C4_WriteReg16+0x38>)
 80161a0:	9502      	str	r5, [sp, #8]
 80161a2:	9400      	str	r4, [sp, #0]
 80161a4:	f004 fa84 	bl	801a6b0 <HAL_I2C_Mem_Write>
 80161a8:	b908      	cbnz	r0, 80161ae <BSP_I2C4_WriteReg16+0x22>
}
 80161aa:	b005      	add	sp, #20
 80161ac:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80161ae:	4805      	ldr	r0, [pc, #20]	@ (80161c4 <BSP_I2C4_WriteReg16+0x38>)
 80161b0:	f004 fd34 	bl	801ac1c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80161b4:	2804      	cmp	r0, #4
 80161b6:	bf14      	ite	ne
 80161b8:	f06f 0003 	mvnne.w	r0, #3
 80161bc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 80161c0:	e7f3      	b.n	80161aa <BSP_I2C4_WriteReg16+0x1e>
 80161c2:	bf00      	nop
 80161c4:	24008c30 	.word	0x24008c30

080161c8 <BSP_I2C4_ReadReg16>:
{
 80161c8:	b530      	push	{r4, r5, lr}
 80161ca:	4614      	mov	r4, r2
 80161cc:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80161ce:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 80161d2:	460a      	mov	r2, r1
 80161d4:	9301      	str	r3, [sp, #4]
 80161d6:	4601      	mov	r1, r0
 80161d8:	2302      	movs	r3, #2
 80161da:	4809      	ldr	r0, [pc, #36]	@ (8016200 <BSP_I2C4_ReadReg16+0x38>)
 80161dc:	9502      	str	r5, [sp, #8]
 80161de:	9400      	str	r4, [sp, #0]
 80161e0:	f004 fbd4 	bl	801a98c <HAL_I2C_Mem_Read>
 80161e4:	b908      	cbnz	r0, 80161ea <BSP_I2C4_ReadReg16+0x22>
}
 80161e6:	b005      	add	sp, #20
 80161e8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80161ea:	4805      	ldr	r0, [pc, #20]	@ (8016200 <BSP_I2C4_ReadReg16+0x38>)
 80161ec:	f004 fd16 	bl	801ac1c <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80161f0:	2804      	cmp	r0, #4
 80161f2:	bf14      	ite	ne
 80161f4:	f06f 0003 	mvnne.w	r0, #3
 80161f8:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 80161fc:	e7f3      	b.n	80161e6 <BSP_I2C4_ReadReg16+0x1e>
 80161fe:	bf00      	nop
 8016200:	24008c30 	.word	0x24008c30

08016204 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8016204:	f001 bb00 	b.w	8017808 <HAL_GetTick>

08016208 <MX_DCMI_Init>:
{
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
  hdcmi->Init.HSPolarity       = HSPolarity;
 8016208:	4909      	ldr	r1, [pc, #36]	@ (8016230 <MX_DCMI_Init+0x28>)
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 801620a:	2200      	movs	r2, #0
{
 801620c:	b510      	push	{r4, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 801620e:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance              = DCMI;
 8016210:	4c08      	ldr	r4, [pc, #32]	@ (8016234 <MX_DCMI_Init+0x2c>)
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8016212:	6182      	str	r2, [r0, #24]
  hdcmi->Instance              = DCMI;
 8016214:	6004      	str	r4, [r0, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8016216:	2480      	movs	r4, #128	@ 0x80
  hdcmi->Init.HSPolarity       = HSPolarity;
 8016218:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 801621c:	2120      	movs	r1, #32
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 801621e:	60c4      	str	r4, [r0, #12]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8016220:	e9c0 2101 	strd	r2, r1, [r0, #4]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 8016224:	f001 fbda 	bl	80179dc <HAL_DCMI_Init>
  {
    return HAL_ERROR;
  }
  return HAL_OK;
}
 8016228:	3800      	subs	r0, #0
 801622a:	bf18      	it	ne
 801622c:	2001      	movne	r0, #1
 801622e:	bd10      	pop	{r4, pc}
 8016230:	2400975c 	.word	0x2400975c
 8016234:	48020000 	.word	0x48020000

08016238 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8016238:	2800      	cmp	r0, #0
 801623a:	f040 81f9 	bne.w	8016630 <BSP_CAMERA_Init+0x3f8>
{
 801623e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8016242:	4cc1      	ldr	r4, [pc, #772]	@ (8016548 <BSP_CAMERA_Init+0x310>)
{
 8016244:	b093      	sub	sp, #76	@ 0x4c
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8016246:	260d      	movs	r6, #13
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8016248:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_DCMI_CLK_ENABLE();
 801624c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8016250:	f04f 0903 	mov.w	r9, #3
 8016254:	4692      	mov	sl, r2
 8016256:	2250      	movs	r2, #80	@ 0x50
  __HAL_RCC_DCMI_CLK_ENABLE();
 8016258:	f043 0301 	orr.w	r3, r3, #1
 801625c:	4605      	mov	r5, r0
 801625e:	460f      	mov	r7, r1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8016260:	48ba      	ldr	r0, [pc, #744]	@ (801654c <BSP_CAMERA_Init+0x314>)
  __HAL_RCC_DCMI_CLK_ENABLE();
 8016262:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8016266:	a90c      	add	r1, sp, #48	@ 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 8016268:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801626c:	f003 0301 	and.w	r3, r3, #1
 8016270:	9303      	str	r3, [sp, #12]
 8016272:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8016274:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8016278:	f043 0302 	orr.w	r3, r3, #2
 801627c:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8016280:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8016284:	f003 0302 	and.w	r3, r3, #2
 8016288:	9304      	str	r3, [sp, #16]
 801628a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801628c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8016290:	f043 0301 	orr.w	r3, r3, #1
 8016294:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8016298:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 801629c:	f003 0301 	and.w	r3, r3, #1
 80162a0:	9305      	str	r3, [sp, #20]
 80162a2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80162a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162a8:	f043 0302 	orr.w	r3, r3, #2
 80162ac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80162b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162b4:	f003 0302 	and.w	r3, r3, #2
 80162b8:	9306      	str	r3, [sp, #24]
 80162ba:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80162bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162c0:	f043 0304 	orr.w	r3, r3, #4
 80162c4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80162c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162cc:	f003 0304 	and.w	r3, r3, #4
 80162d0:	9307      	str	r3, [sp, #28]
 80162d2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80162d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162d8:	f043 0308 	orr.w	r3, r3, #8
 80162dc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80162e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162e4:	f003 0308 	and.w	r3, r3, #8
 80162e8:	9308      	str	r3, [sp, #32]
 80162ea:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80162ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80162f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162f4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80162f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80162fc:	9610      	str	r6, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80162fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016302:	9309      	str	r3, [sp, #36]	@ 0x24
 8016304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8016306:	2302      	movs	r3, #2
 8016308:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 801630c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8016310:	f003 fcb4 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8016314:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8016318:	2302      	movs	r3, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 801631a:	a90c      	add	r1, sp, #48	@ 0x30
 801631c:	488c      	ldr	r0, [pc, #560]	@ (8016550 <BSP_CAMERA_Init+0x318>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 801631e:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8016320:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016324:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8016328:	f003 fca8 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 801632c:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8016330:	2302      	movs	r3, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8016332:	a90c      	add	r1, sp, #48	@ 0x30
 8016334:	4887      	ldr	r0, [pc, #540]	@ (8016554 <BSP_CAMERA_Init+0x31c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8016336:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8016338:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801633c:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8016340:	f003 fc9c 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 8016344:	2208      	movs	r2, #8
 8016346:	2302      	movs	r3, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8016348:	a90c      	add	r1, sp, #48	@ 0x30
 801634a:	4883      	ldr	r0, [pc, #524]	@ (8016558 <BSP_CAMERA_Init+0x320>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 801634c:	9610      	str	r6, [sp, #64]	@ 0x40
  gpio_init_structure.Pin       = GPIO_PIN_3;
 801634e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016352:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8016356:	f003 fc91 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_10;
 801635a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801635e:	2302      	movs	r3, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8016360:	a90c      	add	r1, sp, #48	@ 0x30
 8016362:	487e      	ldr	r0, [pc, #504]	@ (801655c <BSP_CAMERA_Init+0x324>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8016364:	9610      	str	r6, [sp, #64]	@ 0x40
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
  hdma_handler.Instance                 = DMA2_Stream3;

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8016366:	4e7e      	ldr	r6, [pc, #504]	@ (8016560 <BSP_CAMERA_Init+0x328>)
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8016368:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801636c:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8016370:	f003 fc84 	bl	8019c7c <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8016374:	4b7b      	ldr	r3, [pc, #492]	@ (8016564 <BSP_CAMERA_Init+0x32c>)
 8016376:	224b      	movs	r2, #75	@ 0x4b
 8016378:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801637c:	f44f 4880 	mov.w	r8, #16384	@ 0x4000
 8016380:	f44f 3c00 	mov.w	ip, #131072	@ 0x20000
 8016384:	605a      	str	r2, [r3, #4]
 8016386:	f44f 5280 	mov.w	r2, #4096	@ 0x1000

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 801638a:	210f      	movs	r1, #15
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 801638c:	64b3      	str	r3, [r6, #72]	@ 0x48
 801638e:	639e      	str	r6, [r3, #56]	@ 0x38
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8016390:	e9c3 0204 	strd	r0, r2, [r3, #16]
 8016394:	f44f 7280 	mov.w	r2, #256	@ 0x100
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8016398:	204e      	movs	r0, #78	@ 0x4e
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 801639a:	e9c3 8206 	strd	r8, r2, [r3, #24]
 801639e:	2204      	movs	r2, #4
 80163a0:	e9c3 c208 	strd	ip, r2, [r3, #32]
 80163a4:	2203      	movs	r2, #3
 80163a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_handler.Instance                 = DMA2_Stream3;
 80163a8:	4a6f      	ldr	r2, [pc, #444]	@ (8016568 <BSP_CAMERA_Init+0x330>)
 80163aa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80163ac:	462a      	mov	r2, r5
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 80163ae:	e9c3 5502 	strd	r5, r5, [r3, #8]
 80163b2:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80163b6:	f001 fa5f 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80163ba:	204e      	movs	r0, #78	@ 0x4e
 80163bc:	f001 fa98 	bl	80178f0 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80163c0:	462a      	mov	r2, r5
 80163c2:	210f      	movs	r1, #15
 80163c4:	203b      	movs	r0, #59	@ 0x3b
 80163c6:	f001 fa57 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80163ca:	203b      	movs	r0, #59	@ 0x3b
 80163cc:	f001 fa90 	bl	80178f0 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 80163d0:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 80163d2:	f001 fd2f 	bl	8017e34 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80163d6:	4630      	mov	r0, r6
 80163d8:	f7ff ff16 	bl	8016208 <MX_DCMI_Init>
 80163dc:	4605      	mov	r5, r0
 80163de:	2800      	cmp	r0, #0
 80163e0:	f040 80ae 	bne.w	8016540 <BSP_CAMERA_Init+0x308>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80163e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80163e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80163ec:	a90c      	add	r1, sp, #48	@ 0x30
 80163ee:	485f      	ldr	r0, [pc, #380]	@ (801656c <BSP_CAMERA_Init+0x334>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80163f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 80163f4:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8016598 <BSP_CAMERA_Init+0x360>
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80163f8:	4e5d      	ldr	r6, [pc, #372]	@ (8016570 <BSP_CAMERA_Init+0x338>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80163fa:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80163fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8016402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016406:	930a      	str	r3, [sp, #40]	@ 0x28
 8016408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 801640a:	2301      	movs	r3, #1
 801640c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016410:	2302      	movs	r3, #2
 8016412:	2200      	movs	r2, #0
 8016414:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8016418:	f003 fc30 	bl	8019c7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 801641c:	4641      	mov	r1, r8
 801641e:	2201      	movs	r2, #1
 8016420:	4852      	ldr	r0, [pc, #328]	@ (801656c <BSP_CAMERA_Init+0x334>)
 8016422:	f003 ff61 	bl	801a2e8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8016426:	2064      	movs	r0, #100	@ 0x64
 8016428:	f001 f9f4 	bl	8017814 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 801642c:	4641      	mov	r1, r8
 801642e:	462a      	mov	r2, r5
 8016430:	484e      	ldr	r0, [pc, #312]	@ (801656c <BSP_CAMERA_Init+0x334>)
 8016432:	f003 ff59 	bl	801a2e8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8016436:	2014      	movs	r0, #20
 8016438:	f001 f9ec 	bl	8017814 <HAL_Delay>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 801643c:	2360      	movs	r3, #96	@ 0x60
  IOCtx.Init        = BSP_I2C4_Init;
 801643e:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 801659c <BSP_CAMERA_Init+0x364>
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8016442:	a90c      	add	r1, sp, #48	@ 0x30
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8016444:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8016448:	4648      	mov	r0, r9
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 801644a:	4b4a      	ldr	r3, [pc, #296]	@ (8016574 <BSP_CAMERA_Init+0x33c>)
  IOCtx.GetTick     = BSP_GetTick;
 801644c:	4d4a      	ldr	r5, [pc, #296]	@ (8016578 <BSP_CAMERA_Init+0x340>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 801644e:	9310      	str	r3, [sp, #64]	@ 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8016450:	4b4a      	ldr	r3, [pc, #296]	@ (801657c <BSP_CAMERA_Init+0x344>)
  IOCtx.Init        = BSP_I2C4_Init;
 8016452:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8016456:	960d      	str	r6, [sp, #52]	@ 0x34
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8016458:	930f      	str	r3, [sp, #60]	@ 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 801645a:	9511      	str	r5, [sp, #68]	@ 0x44
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 801645c:	f7ff f9a8 	bl	80157b0 <OV9655_RegisterBusIO>
 8016460:	2800      	cmp	r0, #0
 8016462:	f040 80a1 	bne.w	80165a8 <BSP_CAMERA_Init+0x370>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 8016466:	4c46      	ldr	r4, [pc, #280]	@ (8016580 <BSP_CAMERA_Init+0x348>)
 8016468:	4648      	mov	r0, r9
 801646a:	4621      	mov	r1, r4
 801646c:	f7ff f920 	bl	80156b0 <OV9655_ReadID>
 8016470:	2800      	cmp	r0, #0
 8016472:	f040 8099 	bne.w	80165a8 <BSP_CAMERA_Init+0x370>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 8016476:	6822      	ldr	r2, [r4, #0]
 8016478:	4b42      	ldr	r3, [pc, #264]	@ (8016584 <BSP_CAMERA_Init+0x34c>)
 801647a:	4413      	add	r3, r2
 801647c:	2b01      	cmp	r3, #1
 801647e:	f200 8093 	bhi.w	80165a8 <BSP_CAMERA_Init+0x370>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
      Camera_CompObj = &OV9655Obj;
 8016482:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 80165a0 <BSP_CAMERA_Init+0x368>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8016486:	4648      	mov	r0, r9
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8016488:	4b3f      	ldr	r3, [pc, #252]	@ (8016588 <BSP_CAMERA_Init+0x350>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 801648a:	4652      	mov	r2, sl
      Camera_CompObj = &OV9655Obj;
 801648c:	f8cb 9000 	str.w	r9, [fp]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8016490:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8016492:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 80165a4 <BSP_CAMERA_Init+0x36c>
 8016496:	f8c9 3000 	str.w	r3, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	4798      	blx	r3
 801649e:	2800      	cmp	r0, #0
 80164a0:	f040 8082 	bne.w	80165a8 <BSP_CAMERA_Init+0x370>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 80164a4:	f8d9 3000 	ldr.w	r3, [r9]
 80164a8:	f8db 0000 	ldr.w	r0, [fp]
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	4937      	ldr	r1, [pc, #220]	@ (801658c <BSP_CAMERA_Init+0x354>)
 80164b0:	4798      	blx	r3
 80164b2:	2800      	cmp	r0, #0
 80164b4:	d178      	bne.n	80165a8 <BSP_CAMERA_Init+0x370>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 80164b6:	6822      	ldr	r2, [r4, #0]
 80164b8:	4b32      	ldr	r3, [pc, #200]	@ (8016584 <BSP_CAMERA_Init+0x34c>)
 80164ba:	4413      	add	r3, r2
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d837      	bhi.n	8016530 <BSP_CAMERA_Init+0x2f8>
          if(Resolution == CAMERA_R480x272)
 80164c0:	2f02      	cmp	r7, #2
 80164c2:	f000 80a2 	beq.w	801660a <BSP_CAMERA_Init+0x3d2>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80164c6:	4b20      	ldr	r3, [pc, #128]	@ (8016548 <BSP_CAMERA_Init+0x310>)
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80164c8:	a90c      	add	r1, sp, #48	@ 0x30
 80164ca:	4828      	ldr	r0, [pc, #160]	@ (801656c <BSP_CAMERA_Init+0x334>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80164cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80164d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80164d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80164d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80164dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80164e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80164e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80164e8:	2301      	movs	r3, #1
 80164ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80164ee:	2302      	movs	r3, #2
 80164f0:	2200      	movs	r2, #0
 80164f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80164f6:	f003 fbc1 	bl	8019c7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 80164fa:	2201      	movs	r2, #1
 80164fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016500:	481a      	ldr	r0, [pc, #104]	@ (801656c <BSP_CAMERA_Init+0x334>)
 8016502:	f003 fef1 	bl	801a2e8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8016506:	2064      	movs	r0, #100	@ 0x64
 8016508:	f001 f984 	bl	8017814 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 801650c:	2200      	movs	r2, #0
 801650e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016512:	4816      	ldr	r0, [pc, #88]	@ (801656c <BSP_CAMERA_Init+0x334>)
 8016514:	f003 fee8 	bl	801a2e8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8016518:	2014      	movs	r0, #20
 801651a:	f001 f97b 	bl	8017814 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 801651e:	4b1c      	ldr	r3, [pc, #112]	@ (8016590 <BSP_CAMERA_Init+0x358>)
 8016520:	6822      	ldr	r2, [r4, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8016522:	2000      	movs	r0, #0
 8016524:	e9c3 7a01 	strd	r7, sl, [r3, #4]
          Camera_Ctx[Instance].CameraId  = CameraId;
 8016528:	601a      	str	r2, [r3, #0]
}
 801652a:	b013      	add	sp, #76	@ 0x4c
 801652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8016530:	4b18      	ldr	r3, [pc, #96]	@ (8016594 <BSP_CAMERA_Init+0x35c>)
 8016532:	2240      	movs	r2, #64	@ 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8016534:	480a      	ldr	r0, [pc, #40]	@ (8016560 <BSP_CAMERA_Init+0x328>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8016536:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8016538:	f7ff fe66 	bl	8016208 <MX_DCMI_Init>
 801653c:	2800      	cmp	r0, #0
 801653e:	d0c2      	beq.n	80164c6 <BSP_CAMERA_Init+0x28e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8016540:	f06f 0003 	mvn.w	r0, #3
 8016544:	e7f1      	b.n	801652a <BSP_CAMERA_Init+0x2f2>
 8016546:	bf00      	nop
 8016548:	58024400 	.word	0x58024400
 801654c:	58020000 	.word	0x58020000
 8016550:	58020400 	.word	0x58020400
 8016554:	58020800 	.word	0x58020800
 8016558:	58020c00 	.word	0x58020c00
 801655c:	58021800 	.word	0x58021800
 8016560:	240097c0 	.word	0x240097c0
 8016564:	240096e0 	.word	0x240096e0
 8016568:	40020458 	.word	0x40020458
 801656c:	58022400 	.word	0x58022400
 8016570:	080158b1 	.word	0x080158b1
 8016574:	08016151 	.word	0x08016151
 8016578:	08016205 	.word	0x08016205
 801657c:	08016115 	.word	0x08016115
 8016580:	24009758 	.word	0x24009758
 8016584:	ffff69aa 	.word	0xffff69aa
 8016588:	24008298 	.word	0x24008298
 801658c:	24009760 	.word	0x24009760
 8016590:	2400978c 	.word	0x2400978c
 8016594:	2400975c 	.word	0x2400975c
 8016598:	240096b4 	.word	0x240096b4
 801659c:	08015945 	.word	0x08015945
 80165a0:	24009810 	.word	0x24009810
 80165a4:	24009788 	.word	0x24009788

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 80165a8:	4b23      	ldr	r3, [pc, #140]	@ (8016638 <BSP_CAMERA_Init+0x400>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80165aa:	a90c      	add	r1, sp, #48	@ 0x30
  IOCtx.GetTick     = BSP_GetTick;
 80165ac:	9511      	str	r5, [sp, #68]	@ 0x44
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 80165ae:	9310      	str	r3, [sp, #64]	@ 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80165b0:	4b22      	ldr	r3, [pc, #136]	@ (801663c <BSP_CAMERA_Init+0x404>)
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80165b2:	4d23      	ldr	r5, [pc, #140]	@ (8016640 <BSP_CAMERA_Init+0x408>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80165b4:	930f      	str	r3, [sp, #60]	@ 0x3c
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80165b6:	2378      	movs	r3, #120	@ 0x78
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80165b8:	4628      	mov	r0, r5
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80165ba:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80165be:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80165c2:	f7fe fc9f 	bl	8014f04 <OV5640_RegisterBusIO>
 80165c6:	b9e8      	cbnz	r0, 8016604 <BSP_CAMERA_Init+0x3cc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 80165c8:	4c1e      	ldr	r4, [pc, #120]	@ (8016644 <BSP_CAMERA_Init+0x40c>)
 80165ca:	4628      	mov	r0, r5
 80165cc:	4621      	mov	r1, r4
 80165ce:	f7fe fb05 	bl	8014bdc <OV5640_ReadID>
 80165d2:	b9b8      	cbnz	r0, 8016604 <BSP_CAMERA_Init+0x3cc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 80165d4:	6822      	ldr	r2, [r4, #0]
 80165d6:	f245 6340 	movw	r3, #22080	@ 0x5640
 80165da:	429a      	cmp	r2, r3
 80165dc:	d112      	bne.n	8016604 <BSP_CAMERA_Init+0x3cc>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
      Camera_CompObj = &OV5640Obj;
 80165de:	4e1a      	ldr	r6, [pc, #104]	@ (8016648 <BSP_CAMERA_Init+0x410>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80165e0:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80165e2:	4b1a      	ldr	r3, [pc, #104]	@ (801664c <BSP_CAMERA_Init+0x414>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80165e4:	4652      	mov	r2, sl
      Camera_CompObj = &OV5640Obj;
 80165e6:	6035      	str	r5, [r6, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80165e8:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80165ea:	4d19      	ldr	r5, [pc, #100]	@ (8016650 <BSP_CAMERA_Init+0x418>)
 80165ec:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4798      	blx	r3
 80165f2:	b938      	cbnz	r0, 8016604 <BSP_CAMERA_Init+0x3cc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 80165f4:	682b      	ldr	r3, [r5, #0]
 80165f6:	6830      	ldr	r0, [r6, #0]
 80165f8:	68db      	ldr	r3, [r3, #12]
 80165fa:	4916      	ldr	r1, [pc, #88]	@ (8016654 <BSP_CAMERA_Init+0x41c>)
 80165fc:	4798      	blx	r3
 80165fe:	2800      	cmp	r0, #0
 8016600:	f43f af59 	beq.w	80164b6 <BSP_CAMERA_Init+0x27e>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8016604:	f06f 0006 	mvn.w	r0, #6
 8016608:	e78f      	b.n	801652a <BSP_CAMERA_Init+0x2f2>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 801660a:	f240 130f 	movw	r3, #271	@ 0x10f
 801660e:	2268      	movs	r2, #104	@ 0x68
 8016610:	2150      	movs	r1, #80	@ 0x50
 8016612:	4811      	ldr	r0, [pc, #68]	@ (8016658 <BSP_CAMERA_Init+0x420>)
 8016614:	9300      	str	r3, [sp, #0]
 8016616:	f240 33bf 	movw	r3, #959	@ 0x3bf
 801661a:	f001 faeb 	bl	8017bf4 <HAL_DCMI_ConfigCrop>
 801661e:	2800      	cmp	r0, #0
 8016620:	d18e      	bne.n	8016540 <BSP_CAMERA_Init+0x308>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 8016622:	480d      	ldr	r0, [pc, #52]	@ (8016658 <BSP_CAMERA_Init+0x420>)
 8016624:	f001 fb04 	bl	8017c30 <HAL_DCMI_EnableCrop>
 8016628:	2800      	cmp	r0, #0
 801662a:	f43f af4c 	beq.w	80164c6 <BSP_CAMERA_Init+0x28e>
 801662e:	e787      	b.n	8016540 <BSP_CAMERA_Init+0x308>
    ret = BSP_ERROR_WRONG_PARAM;
 8016630:	f06f 0001 	mvn.w	r0, #1
}
 8016634:	4770      	bx	lr
 8016636:	bf00      	nop
 8016638:	080161c9 	.word	0x080161c9
 801663c:	0801618d 	.word	0x0801618d
 8016640:	2400968c 	.word	0x2400968c
 8016644:	24009758 	.word	0x24009758
 8016648:	24009810 	.word	0x24009810
 801664c:	24008254 	.word	0x24008254
 8016650:	24009788 	.word	0x24009788
 8016654:	24009760 	.word	0x24009760
 8016658:	240097c0 	.word	0x240097c0

0801665c <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 801665c:	b948      	cbnz	r0, 8016672 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 801665e:	4806      	ldr	r0, [pc, #24]	@ (8016678 <BSP_CAMERA_Suspend+0x1c>)
{
 8016660:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8016662:	f001 fa09 	bl	8017a78 <HAL_DCMI_Suspend>
    ret = BSP_ERROR_NONE;
 8016666:	2800      	cmp	r0, #0
 8016668:	bf14      	ite	ne
 801666a:	f06f 0003 	mvnne.w	r0, #3
 801666e:	2000      	moveq	r0, #0
}
 8016670:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8016672:	f06f 0001 	mvn.w	r0, #1
}
 8016676:	4770      	bx	lr
 8016678:	240097c0 	.word	0x240097c0

0801667c <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 801667c:	b948      	cbnz	r0, 8016692 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 801667e:	4806      	ldr	r0, [pc, #24]	@ (8016698 <BSP_CAMERA_Resume+0x1c>)
{
 8016680:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8016682:	f001 fa3d 	bl	8017b00 <HAL_DCMI_Resume>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8016686:	2800      	cmp	r0, #0
 8016688:	bf0c      	ite	eq
 801668a:	2000      	moveq	r0, #0
 801668c:	f06f 0003 	mvnne.w	r0, #3
}
 8016690:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8016692:	f06f 0001 	mvn.w	r0, #1
}
 8016696:	4770      	bx	lr
 8016698:	240097c0 	.word	0x240097c0

0801669c <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 801669c:	b988      	cbnz	r0, 80166c2 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 801669e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 80166a0:	4b0c      	ldr	r3, [pc, #48]	@ (80166d4 <BSP_CAMERA_SetMirrorFlip+0x38>)
 80166a2:	69db      	ldr	r3, [r3, #28]
 80166a4:	b183      	cbz	r3, 80166c8 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 80166a6:	4b0c      	ldr	r3, [pc, #48]	@ (80166d8 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 80166a8:	4604      	mov	r4, r0
 80166aa:	4a0c      	ldr	r2, [pc, #48]	@ (80166dc <BSP_CAMERA_SetMirrorFlip+0x40>)
 80166ac:	460d      	mov	r5, r1
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	6810      	ldr	r0, [r2, #0]
 80166b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166b4:	4798      	blx	r3
 80166b6:	2800      	cmp	r0, #0
 80166b8:	db09      	blt.n	80166ce <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 80166ba:	4b09      	ldr	r3, [pc, #36]	@ (80166e0 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 80166bc:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 80166be:	625d      	str	r5, [r3, #36]	@ 0x24
}
 80166c0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80166c2:	f06f 0001 	mvn.w	r0, #1
}
 80166c6:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80166c8:	f06f 000a 	mvn.w	r0, #10
}
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80166ce:	f06f 0004 	mvn.w	r0, #4
}
 80166d2:	bd38      	pop	{r3, r4, r5, pc}
 80166d4:	24009760 	.word	0x24009760
 80166d8:	24009788 	.word	0x24009788
 80166dc:	24009810 	.word	0x24009810
 80166e0:	2400978c 	.word	0x2400978c
 80166e4:	00000000 	.word	0x00000000

080166e8 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 80166e8:	bb20      	cbnz	r0, 8016734 <BSP_CAMERA_PwrDown+0x4c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80166ea:	4b19      	ldr	r3, [pc, #100]	@ (8016750 <BSP_CAMERA_PwrDown+0x68>)
 80166ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80166f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80166f4:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016740 <BSP_CAMERA_PwrDown+0x58>
{
 80166f8:	b510      	push	{r4, lr}
 80166fa:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80166fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8016700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016704:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8016706:	a902      	add	r1, sp, #8
 8016708:	4812      	ldr	r0, [pc, #72]	@ (8016754 <BSP_CAMERA_PwrDown+0x6c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801670a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 801670e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016712:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016748 <BSP_CAMERA_PwrDown+0x60>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 801671a:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 801671e:	f003 faad 	bl	8019c7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8016722:	2201      	movs	r2, #1
 8016724:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016728:	480a      	ldr	r0, [pc, #40]	@ (8016754 <BSP_CAMERA_PwrDown+0x6c>)
 801672a:	f003 fddd 	bl	801a2e8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 801672e:	4620      	mov	r0, r4
}
 8016730:	b008      	add	sp, #32
 8016732:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8016734:	f06f 0001 	mvn.w	r0, #1
}
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	f3af 8000 	nop.w
 8016740:	00004000 	.word	0x00004000
 8016744:	00000001 	.word	0x00000001
 8016748:	00000000 	.word	0x00000000
 801674c:	00000002 	.word	0x00000002
 8016750:	58024400 	.word	0x58024400
 8016754:	58022400 	.word	0x58022400

08016758 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8016758:	4801      	ldr	r0, [pc, #4]	@ (8016760 <BSP_CAMERA_IRQHandler+0x8>)
 801675a:	f001 b9fd 	b.w	8017b58 <HAL_DCMI_IRQHandler>
 801675e:	bf00      	nop
 8016760:	240097c0 	.word	0x240097c0

08016764 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8016764:	4b01      	ldr	r3, [pc, #4]	@ (801676c <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8016766:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8016768:	f002 b9f2 	b.w	8018b50 <HAL_DMA_IRQHandler>
 801676c:	240097c0 	.word	0x240097c0

08016770 <BSP_CAMERA_LineEventCallback>:
}
 8016770:	4770      	bx	lr
 8016772:	bf00      	nop

08016774 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 8016774:	2000      	movs	r0, #0
{
 8016776:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8016778:	f7ff fffa 	bl	8016770 <BSP_CAMERA_LineEventCallback>
}
 801677c:	bd08      	pop	{r3, pc}
 801677e:	bf00      	nop

08016780 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 8016780:	2000      	movs	r0, #0
{
 8016782:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 8016784:	f7fb f8c4 	bl	8011910 <BSP_CAMERA_FrameEventCallback>
}
 8016788:	bd08      	pop	{r3, pc}
 801678a:	bf00      	nop

0801678c <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 801678c:	2000      	movs	r0, #0
{
 801678e:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 8016790:	f7fb f8ca 	bl	8011928 <BSP_CAMERA_VsyncEventCallback>
}
 8016794:	bd08      	pop	{r3, pc}
 8016796:	bf00      	nop

08016798 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 8016798:	2000      	movs	r0, #0
{
 801679a:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 801679c:	f7fb f8c8 	bl	8011930 <BSP_CAMERA_ErrorCallback>
}
 80167a0:	bd08      	pop	{r3, pc}
 80167a2:	bf00      	nop

080167a4 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80167a4:	b910      	cbnz	r0, 80167ac <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80167a6:	4b03      	ldr	r3, [pc, #12]	@ (80167b4 <BSP_LCD_SetActiveLayer+0x10>)
 80167a8:	6099      	str	r1, [r3, #8]
 80167aa:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80167ac:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	24009858 	.word	0x24009858

080167b8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80167b8:	b918      	cbnz	r0, 80167c2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80167ba:	4b03      	ldr	r3, [pc, #12]	@ (80167c8 <BSP_LCD_GetPixelFormat+0x10>)
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	600b      	str	r3, [r1, #0]
 80167c0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80167c2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80167c6:	4770      	bx	lr
 80167c8:	24009858 	.word	0x24009858

080167cc <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80167cc:	b940      	cbnz	r0, 80167e0 <BSP_LCD_GetXSize+0x14>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80167ce:	4b06      	ldr	r3, [pc, #24]	@ (80167e8 <BSP_LCD_GetXSize+0x1c>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167d4:	b113      	cbz	r3, 80167dc <BSP_LCD_GetXSize+0x10>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80167d6:	4b05      	ldr	r3, [pc, #20]	@ (80167ec <BSP_LCD_GetXSize+0x20>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	600b      	str	r3, [r1, #0]
  int32_t ret = BSP_ERROR_NONE;
 80167dc:	2000      	movs	r0, #0
 80167de:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80167e0:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80167e4:	4770      	bx	lr
 80167e6:	bf00      	nop
 80167e8:	240099a4 	.word	0x240099a4
 80167ec:	24009858 	.word	0x24009858

080167f0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80167f0:	b940      	cbnz	r0, 8016804 <BSP_LCD_GetYSize+0x14>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80167f2:	4b06      	ldr	r3, [pc, #24]	@ (801680c <BSP_LCD_GetYSize+0x1c>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80167f8:	b113      	cbz	r3, 8016800 <BSP_LCD_GetYSize+0x10>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80167fa:	4b05      	ldr	r3, [pc, #20]	@ (8016810 <BSP_LCD_GetYSize+0x20>)
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	600b      	str	r3, [r1, #0]
  int32_t ret = BSP_ERROR_NONE;
 8016800:	2000      	movs	r0, #0
 8016802:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8016804:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8016808:	4770      	bx	lr
 801680a:	bf00      	nop
 801680c:	240099a4 	.word	0x240099a4
 8016810:	24009858 	.word	0x24009858

08016814 <BSP_LCD_ReadPixel>:
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016814:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8016818:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 801681a:	4c0f      	ldr	r4, [pc, #60]	@ (8016858 <BSP_LCD_ReadPixel+0x44>)
 801681c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8016820:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016824:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8016828:	fb00 1102 	mla	r1, r0, r2, r1
 801682c:	2234      	movs	r2, #52	@ 0x34
 801682e:	480b      	ldr	r0, [pc, #44]	@ (801685c <BSP_LCD_ReadPixel+0x48>)
 8016830:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016834:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8016836:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016838:	b934      	cbnz	r4, 8016848 <BSP_LCD_ReadPixel+0x34>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 801683a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 801683e:	2000      	movs	r0, #0
 8016840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8016848:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
}
 801684c:	2000      	movs	r0, #0
 801684e:	f85d 4b04 	ldr.w	r4, [sp], #4
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8016852:	b292      	uxth	r2, r2
 8016854:	601a      	str	r2, [r3, #0]
}
 8016856:	4770      	bx	lr
 8016858:	24009858 	.word	0x24009858
 801685c:	24009874 	.word	0x24009874

08016860 <BSP_LCD_WritePixel>:
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016860:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8016864:	b410      	push	{r4}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016866:	4c0e      	ldr	r4, [pc, #56]	@ (80168a0 <BSP_LCD_WritePixel+0x40>)
 8016868:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 801686c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016870:	f8dc 4008 	ldr.w	r4, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016874:	fb00 1102 	mla	r1, r0, r2, r1
 8016878:	2234      	movs	r2, #52	@ 0x34
 801687a:	480a      	ldr	r0, [pc, #40]	@ (80168a4 <BSP_LCD_WritePixel+0x44>)
 801687c:	fb02 0004 	mla	r0, r2, r4, r0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016880:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016882:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016884:	b92c      	cbnz	r4, 8016892 <BSP_LCD_WritePixel+0x32>
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8016886:	2000      	movs	r0, #0
 8016888:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 801688c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8016890:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016892:	b29b      	uxth	r3, r3
}
 8016894:	2000      	movs	r0, #0
 8016896:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 801689a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 801689e:	4770      	bx	lr
 80168a0:	24009858 	.word	0x24009858
 80168a4:	24009874 	.word	0x24009874

080168a8 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80168a8:	b510      	push	{r4, lr}
 80168aa:	460c      	mov	r4, r1
 80168ac:	b084      	sub	sp, #16
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80168ae:	4601      	mov	r1, r0
 80168b0:	2006      	movs	r0, #6
 80168b2:	9401      	str	r4, [sp, #4]
 80168b4:	9000      	str	r0, [sp, #0]
 80168b6:	9202      	str	r2, [sp, #8]
 80168b8:	4804      	ldr	r0, [pc, #16]	@ (80168cc <DSI_IO_Read+0x24>)
 80168ba:	f003 f933 	bl	8019b24 <HAL_DSI_Read>
  int32_t ret = BSP_ERROR_NONE;
 80168be:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80168c0:	bf14      	ite	ne
 80168c2:	f06f 0007 	mvnne.w	r0, #7
 80168c6:	2000      	moveq	r0, #0
 80168c8:	b004      	add	sp, #16
 80168ca:	bd10      	pop	{r4, pc}
 80168cc:	24009984 	.word	0x24009984

080168d0 <DSI_IO_Write>:
  if(Size <= 1U)
 80168d0:	2b01      	cmp	r3, #1
{
 80168d2:	b530      	push	{r4, r5, lr}
 80168d4:	460c      	mov	r4, r1
 80168d6:	b083      	sub	sp, #12
 80168d8:	4601      	mov	r1, r0
 80168da:	4615      	mov	r5, r2
  if(Size <= 1U)
 80168dc:	d909      	bls.n	80168f2 <DSI_IO_Write+0x22>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80168de:	2239      	movs	r2, #57	@ 0x39
 80168e0:	480a      	ldr	r0, [pc, #40]	@ (801690c <DSI_IO_Write+0x3c>)
 80168e2:	e9cd 4500 	strd	r4, r5, [sp]
 80168e6:	f003 f8b3 	bl	8019a50 <HAL_DSI_LongWrite>
 80168ea:	b958      	cbnz	r0, 8016904 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 80168ec:	2000      	movs	r0, #0
}
 80168ee:	b003      	add	sp, #12
 80168f0:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80168f2:	5cd5      	ldrb	r5, [r2, r3]
 80168f4:	4623      	mov	r3, r4
 80168f6:	2215      	movs	r2, #21
 80168f8:	4804      	ldr	r0, [pc, #16]	@ (801690c <DSI_IO_Write+0x3c>)
 80168fa:	9500      	str	r5, [sp, #0]
 80168fc:	f003 f87c 	bl	80199f8 <HAL_DSI_ShortWrite>
 8016900:	2800      	cmp	r0, #0
 8016902:	d0f3      	beq.n	80168ec <DSI_IO_Write+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 8016904:	f06f 0007 	mvn.w	r0, #7
 8016908:	e7f1      	b.n	80168ee <DSI_IO_Write+0x1e>
 801690a:	bf00      	nop
 801690c:	24009984 	.word	0x24009984

08016910 <BSP_LCD_DrawBitmap>:
{
 8016910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8016914:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8016918:	4e3e      	ldr	r6, [pc, #248]	@ (8016a14 <BSP_LCD_DrawBitmap+0x104>)
{
 801691a:	461f      	mov	r7, r3
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 801691c:	f8d3 400a 	ldr.w	r4, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8016920:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 8016924:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 8016928:	4b3b      	ldr	r3, [pc, #236]	@ (8016a18 <BSP_LCD_DrawBitmap+0x108>)
 801692a:	f04f 0e34 	mov.w	lr, #52	@ 0x34
 801692e:	fb0c 1102 	mla	r1, ip, r2, r1
 8016932:	68aa      	ldr	r2, [r5, #8]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8016934:	f8b7 901c 	ldrh.w	r9, [r7, #28]
{
 8016938:	b085      	sub	sp, #20
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 801693a:	fb0e 3302 	mla	r3, lr, r2, r3
 801693e:	692a      	ldr	r2, [r5, #16]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8016940:	f8d7 a016 	ldr.w	sl, [r7, #22]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8016944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016946:	fb02 3b01 	mla	fp, r2, r1, r3
  if ((bit_pixel/8U) == 4U)
 801694a:	f1a9 0120 	sub.w	r1, r9, #32
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 801694e:	f8d7 3012 	ldr.w	r3, [r7, #18]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8016952:	00c2      	lsls	r2, r0, #3
  if ((bit_pixel/8U) == 4U)
 8016954:	2907      	cmp	r1, #7
 8016956:	d959      	bls.n	8016a0c <BSP_LCD_DrawBitmap+0xfc>
  else if ((bit_pixel/8U) == 2U)
 8016958:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 801695c:	2907      	cmp	r1, #7
 801695e:	bf8c      	ite	hi
 8016960:	f04f 0c01 	movhi.w	ip, #1
 8016964:	f04f 0c02 	movls.w	ip, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8016968:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 801696c:	f10a 31ff 	add.w	r1, sl, #4294967295
 8016970:	fb03 f909 	mul.w	r9, r3, r9
 8016974:	fb09 4401 	mla	r4, r9, r1, r4
 8016978:	4427      	add	r7, r4
  for(index=0; index < height; index++)
 801697a:	f1ba 0f00 	cmp.w	sl, #0
 801697e:	d041      	beq.n	8016a04 <BSP_LCD_DrawBitmap+0xf4>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016980:	1a12      	subs	r2, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8016982:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8016986:	f04f 0800 	mov.w	r8, #0
 801698a:	4c24      	ldr	r4, [pc, #144]	@ (8016a1c <BSP_LCD_DrawBitmap+0x10c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 801698c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  hlcd_dma2d.Instance = DMA2D;
 8016990:	4665      	mov	r5, ip
 8016992:	9303      	str	r3, [sp, #12]
 8016994:	e008      	b.n	80169a8 <BSP_LCD_DrawBitmap+0x98>
  for(index=0; index < height; index++)
 8016996:	f108 0801 	add.w	r8, r8, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 801699a:	6833      	ldr	r3, [r6, #0]
 801699c:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 801699e:	444f      	add	r7, r9
  for(index=0; index < height; index++)
 80169a0:	45c2      	cmp	sl, r8
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80169a2:	fb02 bb03 	mla	fp, r2, r3, fp
  for(index=0; index < height; index++)
 80169a6:	d02d      	beq.n	8016a04 <BSP_LCD_DrawBitmap+0xf4>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80169a8:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80169aa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  hlcd_dma2d.Init.OutputOffset = 0;
 80169ae:	2200      	movs	r2, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80169b0:	21ff      	movs	r1, #255	@ 0xff
  switch(Lcd_Ctx[Instance].PixelFormat)
 80169b2:	f1a3 0302 	sub.w	r3, r3, #2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80169b6:	6060      	str	r0, [r4, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80169b8:	4818      	ldr	r0, [pc, #96]	@ (8016a1c <BSP_LCD_DrawBitmap+0x10c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80169ba:	fab3 f383 	clz	r3, r3
  hlcd_dma2d.Init.OutputOffset = 0;
 80169be:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80169c0:	64e2      	str	r2, [r4, #76]	@ 0x4c
  switch(Lcd_Ctx[Instance].PixelFormat)
 80169c2:	095b      	lsrs	r3, r3, #5
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80169c4:	6521      	str	r1, [r4, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80169c6:	64a5      	str	r5, [r4, #72]	@ 0x48
  switch(Lcd_Ctx[Instance].PixelFormat)
 80169c8:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80169ca:	6462      	str	r2, [r4, #68]	@ 0x44
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80169cc:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 80169ce:	4b14      	ldr	r3, [pc, #80]	@ (8016a20 <BSP_LCD_DrawBitmap+0x110>)
 80169d0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80169d2:	f002 fad1 	bl	8018f78 <HAL_DMA2D_Init>
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d1dd      	bne.n	8016996 <BSP_LCD_DrawBitmap+0x86>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80169da:	2101      	movs	r1, #1
 80169dc:	480f      	ldr	r0, [pc, #60]	@ (8016a1c <BSP_LCD_DrawBitmap+0x10c>)
 80169de:	f002 fd31 	bl	8019444 <HAL_DMA2D_ConfigLayer>
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d1d7      	bne.n	8016996 <BSP_LCD_DrawBitmap+0x86>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80169e6:	2301      	movs	r3, #1
 80169e8:	465a      	mov	r2, fp
 80169ea:	4639      	mov	r1, r7
 80169ec:	480b      	ldr	r0, [pc, #44]	@ (8016a1c <BSP_LCD_DrawBitmap+0x10c>)
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	9b03      	ldr	r3, [sp, #12]
 80169f2:	f002 fb87 	bl	8019104 <HAL_DMA2D_Start>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	d1cd      	bne.n	8016996 <BSP_LCD_DrawBitmap+0x86>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80169fa:	2132      	movs	r1, #50	@ 0x32
 80169fc:	4807      	ldr	r0, [pc, #28]	@ (8016a1c <BSP_LCD_DrawBitmap+0x10c>)
 80169fe:	f002 fbdb 	bl	80191b8 <HAL_DMA2D_PollForTransfer>
 8016a02:	e7c8      	b.n	8016996 <BSP_LCD_DrawBitmap+0x86>
}
 8016a04:	2000      	movs	r0, #0
 8016a06:	b005      	add	sp, #20
 8016a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8016a0c:	f04f 0c00 	mov.w	ip, #0
 8016a10:	e7aa      	b.n	8016968 <BSP_LCD_DrawBitmap+0x58>
 8016a12:	bf00      	nop
 8016a14:	24009858 	.word	0x24009858
 8016a18:	24009874 	.word	0x24009874
 8016a1c:	2400991c 	.word	0x2400991c
 8016a20:	52001000 	.word	0x52001000

08016a24 <BSP_LCD_DrawVLine>:
{
 8016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a28:	4616      	mov	r6, r2
 8016a2a:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a2c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8016a30:	4b35      	ldr	r3, [pc, #212]	@ (8016b08 <BSP_LCD_DrawVLine+0xe4>)
{
 8016a32:	b085      	sub	sp, #20
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a34:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 8016a38:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8016a3c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
{
 8016a40:	9103      	str	r1, [sp, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a42:	00c2      	lsls	r2, r0, #3
 8016a44:	4931      	ldr	r1, [pc, #196]	@ (8016b0c <BSP_LCD_DrawVLine+0xe8>)
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8016a46:	eb06 0e05 	add.w	lr, r6, r5
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a4a:	f8dc 7008 	ldr.w	r7, [ip, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016a4e:	1a12      	subs	r2, r2, r0
{
 8016a50:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a52:	fb0a 1107 	mla	r1, sl, r7, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016a56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016a5a:	f8dc a010 	ldr.w	sl, [ip, #16]
 8016a5e:	f8d1 905c 	ldr.w	r9, [r1, #92]	@ 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8016a62:	f8dc 1004 	ldr.w	r1, [ip, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016a66:	68da      	ldr	r2, [r3, #12]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8016a68:	458e      	cmp	lr, r1
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8016a6a:	bf88      	it	hi
 8016a6c:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016a6e:	2a02      	cmp	r2, #2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8016a70:	f108 31ff 	add.w	r1, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016a74:	d011      	beq.n	8016a9a <BSP_LCD_DrawVLine+0x76>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8016a76:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8016a78:	f8df b098 	ldr.w	fp, [pc, #152]	@ 8016b14 <BSP_LCD_DrawVLine+0xf0>
  hlcd_dma2d.Instance = DMA2D;
 8016a7c:	4b24      	ldr	r3, [pc, #144]	@ (8016b10 <BSP_LCD_DrawVLine+0xec>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016a7e:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8016a80:	e9cb 2102 	strd	r2, r1, [fp, #8]
  hlcd_dma2d.Instance = DMA2D;
 8016a84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8016a88:	e9cb 3200 	strd	r3, r2, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016a8c:	f002 fa74 	bl	8018f78 <HAL_DMA2D_Init>
 8016a90:	b310      	cbz	r0, 8016ad8 <BSP_LCD_DrawVLine+0xb4>
}
 8016a92:	2000      	movs	r0, #0
 8016a94:	b005      	add	sp, #20
 8016a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8016a9a:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8016a9e:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8016aa2:	f004 041f 	and.w	r4, r4, #31
 8016aa6:	eb03 1cc3 	add.w	ip, r3, r3, lsl #7
 8016aaa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016aae:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8016ab2:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8016ab6:	3321      	adds	r3, #33	@ 0x21
 8016ab8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8016abc:	3017      	adds	r0, #23
 8016abe:	099b      	lsrs	r3, r3, #6
 8016ac0:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8016ac4:	0980      	lsrs	r0, r0, #6
 8016ac6:	021b      	lsls	r3, r3, #8
 8016ac8:	3417      	adds	r4, #23
 8016aca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016ace:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 8016ad2:	f043 447f 	orr.w	r4, r3, #4278190080	@ 0xff000000
    break;
 8016ad6:	e7cf      	b.n	8016a78 <BSP_LCD_DrawVLine+0x54>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8016ad8:	2101      	movs	r1, #1
 8016ada:	4658      	mov	r0, fp
 8016adc:	f002 fcb2 	bl	8019444 <HAL_DMA2D_ConfigLayer>
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	d1d6      	bne.n	8016a92 <BSP_LCD_DrawVLine+0x6e>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016ae4:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8016ae6:	4621      	mov	r1, r4
 8016ae8:	4658      	mov	r0, fp
 8016aea:	9500      	str	r5, [sp, #0]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016aec:	fb06 3208 	mla	r2, r6, r8, r3
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8016af0:	2301      	movs	r3, #1
 8016af2:	fb0a 9202 	mla	r2, sl, r2, r9
 8016af6:	f002 fb05 	bl	8019104 <HAL_DMA2D_Start>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d1c9      	bne.n	8016a92 <BSP_LCD_DrawVLine+0x6e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8016afe:	2119      	movs	r1, #25
 8016b00:	4658      	mov	r0, fp
 8016b02:	f002 fb59 	bl	80191b8 <HAL_DMA2D_PollForTransfer>
 8016b06:	e7c4      	b.n	8016a92 <BSP_LCD_DrawVLine+0x6e>
 8016b08:	24009858 	.word	0x24009858
 8016b0c:	24009874 	.word	0x24009874
 8016b10:	52001000 	.word	0x52001000
 8016b14:	2400991c 	.word	0x2400991c

08016b18 <BSP_LCD_FillRGBRect>:
{
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	b083      	sub	sp, #12
 8016b1e:	460c      	mov	r4, r1
 8016b20:	4696      	mov	lr, r2
 8016b22:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
  for(i = 0; i < Height; i++)
 8016b26:	2a00      	cmp	r2, #0
 8016b28:	d03b      	beq.n	8016ba2 <BSP_LCD_FillRGBRect+0x8a>
 8016b2a:	2900      	cmp	r1, #0
 8016b2c:	d039      	beq.n	8016ba2 <BSP_LCD_FillRGBRect+0x8a>
 8016b2e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8016b32:	eb02 0b0e 	add.w	fp, r2, lr
 8016b36:	4a23      	ldr	r2, [pc, #140]	@ (8016bc4 <BSP_LCD_FillRGBRect+0xac>)
 8016b38:	4688      	mov	r8, r1
 8016b3a:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8016b3e:	4e22      	ldr	r6, [pc, #136]	@ (8016bc8 <BSP_LCD_FillRGBRect+0xb0>)
 8016b40:	f10c 0010 	add.w	r0, ip, #16
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016b44:	4494      	add	ip, r2
 8016b46:	4402      	add	r2, r0
 8016b48:	9201      	str	r2, [sp, #4]
    for(j = 0; j < Width; j++)
 8016b4a:	2200      	movs	r2, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b4c:	2534      	movs	r5, #52	@ 0x34
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016b4e:	f8dc 0008 	ldr.w	r0, [ip, #8]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b52:	f8dc 7000 	ldr.w	r7, [ip]
 8016b56:	fb05 6000 	mla	r0, r5, r0, r6
 8016b5a:	6819      	ldr	r1, [r3, #0]
 8016b5c:	fb07 470e 	mla	r7, r7, lr, r4
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016b60:	6c85      	ldr	r5, [r0, #72]	@ 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b62:	eb07 0a02 	add.w	sl, r7, r2
 8016b66:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8016b6a:	b1f5      	cbz	r5, 8016baa <BSP_LCD_FillRGBRect+0x92>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b6c:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 8016b6e:	3201      	adds	r2, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b70:	f829 101a 	strh.w	r1, [r9, sl, lsl #1]
    for(j = 0; j < Width; j++)
 8016b74:	4542      	cmp	r2, r8
      pData += Lcd_Ctx[Instance].BppFactor;
 8016b76:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8016b7a:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 8016b7c:	d00d      	beq.n	8016b9a <BSP_LCD_FillRGBRect+0x82>
 8016b7e:	9901      	ldr	r1, [sp, #4]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b80:	f8d0 a05c 	ldr.w	sl, [r0, #92]	@ 0x5c
 8016b84:	f8d1 9000 	ldr.w	r9, [r1]
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b88:	6819      	ldr	r1, [r3, #0]
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b8a:	18b8      	adds	r0, r7, r2
    for(j = 0; j < Width; j++)
 8016b8c:	3201      	adds	r2, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 8016b8e:	444b      	add	r3, r9
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b90:	b289      	uxth	r1, r1
    for(j = 0; j < Width; j++)
 8016b92:	4590      	cmp	r8, r2
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016b94:	f82a 1010 	strh.w	r1, [sl, r0, lsl #1]
    for(j = 0; j < Width; j++)
 8016b98:	d8f6      	bhi.n	8016b88 <BSP_LCD_FillRGBRect+0x70>
  for(i = 0; i < Height; i++)
 8016b9a:	f10e 0e01 	add.w	lr, lr, #1
 8016b9e:	45de      	cmp	lr, fp
 8016ba0:	d1d3      	bne.n	8016b4a <BSP_LCD_FillRGBRect+0x32>
}
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	b003      	add	sp, #12
 8016ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(j = 0; j < Width; j++)
 8016baa:	3201      	adds	r2, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8016bac:	f849 102a 	str.w	r1, [r9, sl, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 8016bb0:	f8dc 1010 	ldr.w	r1, [ip, #16]
    for(j = 0; j < Width; j++)
 8016bb4:	4590      	cmp	r8, r2
      pData += Lcd_Ctx[Instance].BppFactor;
 8016bb6:	440b      	add	r3, r1
    for(j = 0; j < Width; j++)
 8016bb8:	d1c8      	bne.n	8016b4c <BSP_LCD_FillRGBRect+0x34>
  for(i = 0; i < Height; i++)
 8016bba:	f10e 0e01 	add.w	lr, lr, #1
 8016bbe:	45de      	cmp	lr, fp
 8016bc0:	d1c3      	bne.n	8016b4a <BSP_LCD_FillRGBRect+0x32>
 8016bc2:	e7ee      	b.n	8016ba2 <BSP_LCD_FillRGBRect+0x8a>
 8016bc4:	24009858 	.word	0x24009858
 8016bc8:	24009874 	.word	0x24009874

08016bcc <BSP_LCD_FillRect>:
{
 8016bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bd0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8016bd4:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bd6:	492f      	ldr	r1, [pc, #188]	@ (8016c94 <BSP_LCD_FillRect+0xc8>)
{
 8016bd8:	461e      	mov	r6, r3
 8016bda:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bdc:	2434      	movs	r4, #52	@ 0x34
 8016bde:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8016be2:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8016be6:	4a2c      	ldr	r2, [pc, #176]	@ (8016c98 <BSP_LCD_FillRect+0xcc>)
{
 8016be8:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bea:	6899      	ldr	r1, [r3, #8]
{
 8016bec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bee:	fb04 2201 	mla	r2, r4, r1, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8016bf2:	eba9 0106 	sub.w	r1, r9, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016bf6:	f8d2 a05c 	ldr.w	sl, [r2, #92]	@ 0x5c
 8016bfa:	e9d3 2b03 	ldrd	r2, fp, [r3, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016bfe:	2a02      	cmp	r2, #2
 8016c00:	d010      	beq.n	8016c24 <BSP_LCD_FillRect+0x58>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8016c02:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8016c04:	4c25      	ldr	r4, [pc, #148]	@ (8016c9c <BSP_LCD_FillRect+0xd0>)
  hlcd_dma2d.Instance = DMA2D;
 8016c06:	4b26      	ldr	r3, [pc, #152]	@ (8016ca0 <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016c08:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8016c0a:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 8016c0e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8016c12:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016c16:	f002 f9af 	bl	8018f78 <HAL_DMA2D_Init>
 8016c1a:	b310      	cbz	r0, 8016c62 <BSP_LCD_FillRect+0x96>
}
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	b003      	add	sp, #12
 8016c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8016c24:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8016c28:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 8016c2c:	f005 051f 	and.w	r5, r5, #31
 8016c30:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 8016c34:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016c38:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016c3c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8016c40:	3321      	adds	r3, #33	@ 0x21
 8016c42:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8016c46:	3017      	adds	r0, #23
 8016c48:	099b      	lsrs	r3, r3, #6
 8016c4a:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8016c4e:	0980      	lsrs	r0, r0, #6
 8016c50:	021b      	lsls	r3, r3, #8
 8016c52:	3517      	adds	r5, #23
 8016c54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016c58:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 8016c5c:	f043 457f 	orr.w	r5, r3, #4278190080	@ 0xff000000
    break;
 8016c60:	e7d0      	b.n	8016c04 <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8016c62:	2101      	movs	r1, #1
 8016c64:	4620      	mov	r0, r4
 8016c66:	f002 fbed 	bl	8019444 <HAL_DMA2D_ConfigLayer>
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d1d6      	bne.n	8016c1c <BSP_LCD_FillRect+0x50>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8016c6e:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8016c72:	4629      	mov	r1, r5
 8016c74:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8016c76:	4633      	mov	r3, r6
 8016c78:	fb0b a202 	mla	r2, fp, r2, sl
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	9500      	str	r5, [sp, #0]
 8016c80:	f002 fa40 	bl	8019104 <HAL_DMA2D_Start>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d1c9      	bne.n	8016c1c <BSP_LCD_FillRect+0x50>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8016c88:	2119      	movs	r1, #25
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f002 fa94 	bl	80191b8 <HAL_DMA2D_PollForTransfer>
 8016c90:	e7c4      	b.n	8016c1c <BSP_LCD_FillRect+0x50>
 8016c92:	bf00      	nop
 8016c94:	24009858 	.word	0x24009858
 8016c98:	24009874 	.word	0x24009874
 8016c9c:	2400991c 	.word	0x2400991c
 8016ca0:	52001000 	.word	0x52001000

08016ca4 <BSP_LCD_DrawHLine>:
{
 8016ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca8:	b085      	sub	sp, #20
 8016caa:	461e      	mov	r6, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016cac:	4b38      	ldr	r3, [pc, #224]	@ (8016d90 <BSP_LCD_DrawHLine+0xec>)
{
 8016cae:	460d      	mov	r5, r1
 8016cb0:	9203      	str	r2, [sp, #12]
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016cb2:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8016cb6:	eb05 0c06 	add.w	ip, r5, r6
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016cba:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8016cbe:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8016cc2:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8016cc6:	00c2      	lsls	r2, r0, #3
 8016cc8:	4932      	ldr	r1, [pc, #200]	@ (8016d94 <BSP_LCD_DrawHLine+0xf0>)
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8016cca:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016ccc:	f8de 7008 	ldr.w	r7, [lr, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016cd0:	eba2 0200 	sub.w	r2, r2, r0
{
 8016cd4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016cd6:	fb09 1107 	mla	r1, r9, r7, r1
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8016cda:	bf38      	it	cc
 8016cdc:	eba8 0605 	subcc.w	r6, r8, r5
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016ce0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016ce4:	f8de a010 	ldr.w	sl, [lr, #16]
 8016ce8:	f8d1 905c 	ldr.w	r9, [r1, #92]	@ 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 8016cec:	68da      	ldr	r2, [r3, #12]
 8016cee:	2a02      	cmp	r2, #2
 8016cf0:	d016      	beq.n	8016d20 <BSP_LCD_DrawHLine+0x7c>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8016cf2:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8016cf4:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8016d9c <BSP_LCD_DrawHLine+0xf8>
 8016cf8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8016cfc:	f8cb 3004 	str.w	r3, [fp, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8016d00:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016d02:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8016d04:	f8cb 2008 	str.w	r2, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8016d08:	f8cb 300c 	str.w	r3, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 8016d0c:	4b22      	ldr	r3, [pc, #136]	@ (8016d98 <BSP_LCD_DrawHLine+0xf4>)
 8016d0e:	f8cb 3000 	str.w	r3, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8016d12:	f002 f931 	bl	8018f78 <HAL_DMA2D_Init>
 8016d16:	b310      	cbz	r0, 8016d5e <BSP_LCD_DrawHLine+0xba>
}
 8016d18:	2000      	movs	r0, #0
 8016d1a:	b005      	add	sp, #20
 8016d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8016d20:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8016d24:	f3c4 21c4 	ubfx	r1, r4, #11, #5
 8016d28:	f004 041f 	and.w	r4, r4, #31
 8016d2c:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 8016d30:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8016d34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016d38:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8016d3c:	3321      	adds	r3, #33	@ 0x21
 8016d3e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8016d42:	3117      	adds	r1, #23
 8016d44:	099b      	lsrs	r3, r3, #6
 8016d46:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8016d4a:	0989      	lsrs	r1, r1, #6
 8016d4c:	021b      	lsls	r3, r3, #8
 8016d4e:	3417      	adds	r4, #23
 8016d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016d54:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 8016d58:	f043 447f 	orr.w	r4, r3, #4278190080	@ 0xff000000
    break;
 8016d5c:	e7ca      	b.n	8016cf4 <BSP_LCD_DrawHLine+0x50>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8016d5e:	2101      	movs	r1, #1
 8016d60:	4658      	mov	r0, fp
 8016d62:	f002 fb6f 	bl	8019444 <HAL_DMA2D_ConfigLayer>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d1d6      	bne.n	8016d18 <BSP_LCD_DrawHLine+0x74>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016d6a:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8016d6c:	4621      	mov	r1, r4
 8016d6e:	2401      	movs	r4, #1
 8016d70:	4658      	mov	r0, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8016d72:	fb03 5208 	mla	r2, r3, r8, r5
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8016d76:	4633      	mov	r3, r6
 8016d78:	9400      	str	r4, [sp, #0]
 8016d7a:	fb0a 9202 	mla	r2, sl, r2, r9
 8016d7e:	f002 f9c1 	bl	8019104 <HAL_DMA2D_Start>
 8016d82:	2800      	cmp	r0, #0
 8016d84:	d1c8      	bne.n	8016d18 <BSP_LCD_DrawHLine+0x74>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8016d86:	2119      	movs	r1, #25
 8016d88:	4658      	mov	r0, fp
 8016d8a:	f002 fa15 	bl	80191b8 <HAL_DMA2D_PollForTransfer>
 8016d8e:	e7c3      	b.n	8016d18 <BSP_LCD_DrawHLine+0x74>
 8016d90:	24009858 	.word	0x24009858
 8016d94:	24009874 	.word	0x24009874
 8016d98:	52001000 	.word	0x52001000
 8016d9c:	2400991c 	.word	0x2400991c

08016da0 <MX_DSIHOST_DSI_Init>:
{
 8016da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016da4:	4699      	mov	r9, r3
 8016da6:	b09f      	sub	sp, #124	@ 0x7c
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8016da8:	2300      	movs	r3, #0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8016daa:	f04f 0804 	mov.w	r8, #4
 8016dae:	2501      	movs	r5, #1
{
 8016db0:	4616      	mov	r6, r2
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8016db2:	6043      	str	r3, [r0, #4]
  PLLInit.PLLNDIV = 100;
 8016db4:	2264      	movs	r2, #100	@ 0x64
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8016db6:	9302      	str	r3, [sp, #8]
  hdsi->Instance = DSI;
 8016db8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
{
 8016dbc:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8016dbe:	4669      	mov	r1, sp
  hdsi->Instance = DSI;
 8016dc0:	6003      	str	r3, [r0, #0]
  PLLInit.PLLNDIV = 100;
 8016dc2:	2305      	movs	r3, #5
{
 8016dc4:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8016dc6:	e9c0 8502 	strd	r8, r5, [r0, #8]
  PLLInit.PLLNDIV = 100;
 8016dca:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8016dce:	f002 fba5 	bl	801951c <HAL_DSI_Init>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d151      	bne.n	8016e7a <MX_DSIHOST_DSI_Init+0xda>
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8016dd6:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8016dda:	4b2a      	ldr	r3, [pc, #168]	@ (8016e84 <MX_DSIHOST_DSI_Init+0xe4>)
 8016ddc:	fb02 3307 	mla	r3, r2, r7, r3
 8016de0:	4a29      	ldr	r2, [pc, #164]	@ (8016e88 <MX_DSIHOST_DSI_Init+0xe8>)
 8016de2:	fba2 2303 	umull	r2, r3, r2, r3
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8016de6:	4a29      	ldr	r2, [pc, #164]	@ (8016e8c <MX_DSIHOST_DSI_Init+0xec>)
 8016de8:	7812      	ldrb	r2, [r2, #0]
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8016dea:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8016dec:	e9cd 0903 	strd	r0, r9, [sp, #12]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8016df0:	2a00      	cmp	r2, #0
 8016df2:	d03a      	beq.n	8016e6a <MX_DSIHOST_DSI_Init+0xca>
 8016df4:	46ac      	mov	ip, r5
 8016df6:	4642      	mov	r2, r8
 8016df8:	210f      	movs	r1, #15
 8016dfa:	2510      	movs	r5, #16
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 8016dfc:	9111      	str	r1, [sp, #68]	@ 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8016dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 8016e02:	9005      	str	r0, [sp, #20]
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8016e04:	4620      	mov	r0, r4
    VidCfg.LPVACTLargestPacketSize = 64;
 8016e06:	9216      	str	r2, [sp, #88]	@ 0x58
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8016e08:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  VidCfg.PacketSize = Width;
 8016e0c:	9707      	str	r7, [sp, #28]
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 8016e0e:	e9cd 3c0f 	strd	r3, ip, [sp, #60]	@ 0x3c
  VidCfg.VerticalActive = Height;
 8016e12:	e9cd 5612 	strd	r5, r6, [sp, #72]	@ 0x48
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8016e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8016e1a:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
    VidCfg.LPLargestPacketSize = 64;
 8016e1e:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8016e22:	e9cd 5317 	strd	r5, r3, [sp, #92]	@ 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8016e26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8016e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8016e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8016e32:	e9cd 4119 	strd	r4, r1, [sp, #100]	@ 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8016e36:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  VidCfg.NullPacketSize = 0xFFFU;
 8016e3a:	f640 74ff 	movw	r4, #4095	@ 0xfff
  VidCfg.NumberOfChunks = 0;
 8016e3e:	2300      	movs	r3, #0
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 8016e40:	2204      	movs	r2, #4
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8016e42:	a903      	add	r1, sp, #12
  VidCfg.NumberOfChunks = 0;
 8016e44:	9308      	str	r3, [sp, #32]
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 8016e46:	920d      	str	r2, [sp, #52]	@ 0x34
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 8016e48:	224d      	movs	r2, #77	@ 0x4d
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8016e4a:	931d      	str	r3, [sp, #116]	@ 0x74
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 8016e4c:	920e      	str	r2, [sp, #56]	@ 0x38
  VidCfg.NullPacketSize = 0xFFFU;
 8016e4e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8016e52:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8016e56:	2302      	movs	r3, #2
 8016e58:	9306      	str	r3, [sp, #24]
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8016e5a:	f002 fc97 	bl	801978c <HAL_DSI_ConfigVideoMode>
 8016e5e:	3800      	subs	r0, #0
 8016e60:	bf18      	it	ne
 8016e62:	2001      	movne	r0, #1
}
 8016e64:	b01f      	add	sp, #124	@ 0x7c
 8016e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e6a:	2196      	movs	r1, #150	@ 0x96
 8016e6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8016e70:	f04f 0c78 	mov.w	ip, #120	@ 0x78
 8016e74:	2240      	movs	r2, #64	@ 0x40
 8016e76:	460d      	mov	r5, r1
 8016e78:	e7c0      	b.n	8016dfc <MX_DSIHOST_DSI_Init+0x5c>
    return HAL_ERROR;
 8016e7a:	4628      	mov	r0, r5
}
 8016e7c:	b01f      	add	sp, #124	@ 0x7c
 8016e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e82:	bf00      	nop
 8016e84:	0042c1d8 	.word	0x0042c1d8
 8016e88:	4c751ce3 	.word	0x4c751ce3
 8016e8c:	24009854 	.word	0x24009854

08016e90 <MX_LTDC_Init>:
{
 8016e90:	b470      	push	{r4, r5, r6}
  hltdc->Instance = LTDC;
 8016e92:	4c15      	ldr	r4, [pc, #84]	@ (8016ee8 <MX_LTDC_Init+0x58>)
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8016e94:	2300      	movs	r3, #0
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 8016e96:	f101 0623 	add.w	r6, r1, #35	@ 0x23
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 8016e9a:	3145      	adds	r1, #69	@ 0x45
  hltdc->Instance = LTDC;
 8016e9c:	6004      	str	r4, [r0, #0]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8016e9e:	4c13      	ldr	r4, [pc, #76]	@ (8016eec <MX_LTDC_Init+0x5c>)
 8016ea0:	7824      	ldrb	r4, [r4, #0]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8016ea2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8016ea6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8016eaa:	b9bc      	cbnz	r4, 8016edc <MX_LTDC_Init+0x4c>
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 8016eac:	f202 140d 	addw	r4, r2, #269	@ 0x10d
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 8016eb0:	2377      	movs	r3, #119	@ 0x77
 8016eb2:	f202 12a3 	addw	r2, r2, #419	@ 0x1a3
 8016eb6:	f240 150d 	movw	r5, #269	@ 0x10d
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 8016eba:	6183      	str	r3, [r0, #24]
  hltdc->Init.Backcolor.Blue  = 0x00;
 8016ebc:	2300      	movs	r3, #0
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 8016ebe:	6302      	str	r2, [r0, #48]	@ 0x30
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8016ec0:	2201      	movs	r2, #1
  hltdc->Init.Backcolor.Blue  = 0x00;
 8016ec2:	8683      	strh	r3, [r0, #52]	@ 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8016ec4:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8016ec8:	2323      	movs	r3, #35	@ 0x23
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 8016eca:	6246      	str	r6, [r0, #36]	@ 0x24
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 8016ecc:	6205      	str	r5, [r0, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 8016ece:	6284      	str	r4, [r0, #40]	@ 0x28
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 8016ed0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8016ed2:	6142      	str	r2, [r0, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8016ed4:	61c3      	str	r3, [r0, #28]
}
 8016ed6:	bc70      	pop	{r4, r5, r6}
  return HAL_LTDC_Init(hltdc);
 8016ed8:	f003 befa 	b.w	801acd0 <HAL_LTDC_Init>
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8016edc:	f102 040f 	add.w	r4, r2, #15
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8016ee0:	250f      	movs	r5, #15
 8016ee2:	321f      	adds	r2, #31
 8016ee4:	e7e9      	b.n	8016eba <MX_LTDC_Init+0x2a>
 8016ee6:	bf00      	nop
 8016ee8:	50001000 	.word	0x50001000
 8016eec:	24009854 	.word	0x24009854

08016ef0 <MX_LTDC_ConfigLayer>:
{
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	460a      	mov	r2, r1
 8016ef4:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 8016ef6:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 8016efa:	b08e      	sub	sp, #56	@ 0x38
  pLayerCfg.WindowX0 = Config->X0;
 8016efc:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8016efe:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 8016f00:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8016f02:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8016f04:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 8016f08:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8016f0a:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8016f0c:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8016f0e:	910c      	str	r1, [sp, #48]	@ 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8016f10:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8016f12:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 8016f16:	930a      	str	r3, [sp, #40]	@ 0x28
  pLayerCfg.Alpha = 255;
 8016f18:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8016f1a:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 8016f1c:	24ff      	movs	r4, #255	@ 0xff
  pLayerCfg.Backcolor.Blue = 0;
 8016f1e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Red = 0;
 8016f22:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  pLayerCfg.Alpha = 255;
 8016f26:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8016f2a:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8016f2c:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8016f30:	9309      	str	r3, [sp, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8016f32:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8016f34:	f003 ffa0 	bl	801ae78 <HAL_LTDC_ConfigLayer>
}
 8016f38:	b00e      	add	sp, #56	@ 0x38
 8016f3a:	bd10      	pop	{r4, pc}
 8016f3c:	0000      	movs	r0, r0
	...

08016f40 <MX_LTDC_ClockConfig>:
{
 8016f40:	b500      	push	{lr}
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8016f42:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8016f80 <MX_LTDC_ClockConfig+0x40>
{
 8016f46:	b0b3      	sub	sp, #204	@ 0xcc
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8016f48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8016f4c:	2300      	movs	r3, #0
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8016f4e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8016f50:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8016f54:	2202      	movs	r2, #2
 8016f56:	2302      	movs	r3, #2
 8016f58:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8016f5c:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8016f88 <MX_LTDC_ClockConfig+0x48>
 8016f60:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016f64:	2200      	movs	r2, #0
 8016f66:	2300      	movs	r3, #0
 8016f68:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8016f6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8016f70:	f005 fc34 	bl	801c7dc <HAL_RCCEx_PeriphCLKConfig>
}
 8016f74:	b033      	add	sp, #204	@ 0xcc
 8016f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f7a:	bf00      	nop
 8016f7c:	f3af 8000 	nop.w
 8016f80:	00000005 	.word	0x00000005
 8016f84:	00000084 	.word	0x00000084
 8016f88:	00000018 	.word	0x00000018
 8016f8c:	00000800 	.word	0x00000800

08016f90 <BSP_LCD_InitEx>:
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8016f90:	2901      	cmp	r1, #1
 8016f92:	f200 8178 	bhi.w	8017286 <BSP_LCD_InitEx+0x2f6>
{
 8016f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9a:	468a      	mov	sl, r1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8016f9c:	1e01      	subs	r1, r0, #0
{
 8016f9e:	b095      	sub	sp, #84	@ 0x54
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8016fa0:	bf18      	it	ne
 8016fa2:	2101      	movne	r1, #1
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	f040 816b 	bne.w	8017280 <BSP_LCD_InitEx+0x2f0>
 8016faa:	461e      	mov	r6, r3
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8016fac:	1e53      	subs	r3, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8016fae:	2b01      	cmp	r3, #1
 8016fb0:	f200 8166 	bhi.w	8017280 <BSP_LCD_InitEx+0x2f0>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8016fb4:	2a02      	cmp	r2, #2
 8016fb6:	f000 8102 	beq.w	80171be <BSP_LCD_InitEx+0x22e>
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8016fba:	9100      	str	r1, [sp, #0]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8016fbc:	2304      	movs	r3, #4
      dsi_pixel_format = DSI_RGB888;
 8016fbe:	2105      	movs	r1, #5
 8016fc0:	9101      	str	r1, [sp, #4]
 8016fc2:	4fb2      	ldr	r7, [pc, #712]	@ (801728c <BSP_LCD_InitEx+0x2fc>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8016fc4:	2501      	movs	r5, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8016fc6:	4cb2      	ldr	r4, [pc, #712]	@ (8017290 <BSP_LCD_InitEx+0x300>)
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8016fc8:	f04f 0808 	mov.w	r8, #8
    Lcd_Ctx[Instance].XSize  = Width;
 8016fcc:	603e      	str	r6, [r7, #0]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8016fce:	a90e      	add	r1, sp, #56	@ 0x38
 8016fd0:	48b0      	ldr	r0, [pc, #704]	@ (8017294 <BSP_LCD_InitEx+0x304>)
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8016fd2:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8016fd6:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8016fda:	e9c7 2303 	strd	r2, r3, [r7, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 8016fde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016fe0:	607b      	str	r3, [r7, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 8016fe2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8016fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fea:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8016fee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8016ff2:	9510      	str	r5, [sp, #64]	@ 0x40
  LCD_RESET_GPIO_CLK_ENABLE();
 8016ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ff8:	9308      	str	r3, [sp, #32]
 8016ffa:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ffc:	2303      	movs	r3, #3
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8016ffe:	e9cd 850e 	strd	r8, r5, [sp, #56]	@ 0x38
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017002:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8017004:	f002 fe3a 	bl	8019c7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8017008:	4641      	mov	r1, r8
 801700a:	2200      	movs	r2, #0
 801700c:	48a1      	ldr	r0, [pc, #644]	@ (8017294 <BSP_LCD_InitEx+0x304>)
 801700e:	f003 f96b 	bl	801a2e8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8017012:	2014      	movs	r0, #20
 8017014:	f000 fbfe 	bl	8017814 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8017018:	462a      	mov	r2, r5
 801701a:	4641      	mov	r1, r8
 801701c:	489d      	ldr	r0, [pc, #628]	@ (8017294 <BSP_LCD_InitEx+0x304>)
 801701e:	f003 f963 	bl	801a2e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8017022:	200a      	movs	r0, #10
 8017024:	f000 fbf6 	bl	8017814 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8017028:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801702c:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8017030:	a90e      	add	r1, sp, #56	@ 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8017032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8017036:	4898      	ldr	r0, [pc, #608]	@ (8017298 <BSP_LCD_InitEx+0x308>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8017038:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 801703c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8017040:	950f      	str	r5, [sp, #60]	@ 0x3c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8017042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8017046:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 801704a:	9306      	str	r3, [sp, #24]
 801704c:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801704e:	e9cd 8b10 	strd	r8, fp, [sp, #64]	@ 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8017052:	f002 fe13 	bl	8019c7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8017056:	462a      	mov	r2, r5
 8017058:	4649      	mov	r1, r9
 801705a:	488f      	ldr	r0, [pc, #572]	@ (8017298 <BSP_LCD_InitEx+0x308>)
 801705c:	f003 f944 	bl	801a2e8 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8017060:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8017064:	2204      	movs	r2, #4
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8017066:	a90e      	add	r1, sp, #56	@ 0x38
  LCD_TE_GPIO_CLK_ENABLE();
 8017068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 801706c:	488a      	ldr	r0, [pc, #552]	@ (8017298 <BSP_LCD_InitEx+0x308>)
  LCD_TE_GPIO_CLK_ENABLE();
 801706e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8017072:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8017076:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  LCD_TE_GPIO_CLK_ENABLE();
 801707a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801707e:	9307      	str	r3, [sp, #28]
 8017080:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8017082:	2300      	movs	r3, #0
 8017084:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8017088:	f002 fdf8 	bl	8019c7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 801708c:	462a      	mov	r2, r5
 801708e:	2104      	movs	r1, #4
 8017090:	4881      	ldr	r0, [pc, #516]	@ (8017298 <BSP_LCD_InitEx+0x308>)
 8017092:	f003 f929 	bl	801a2e8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8017096:	4642      	mov	r2, r8
 8017098:	210f      	movs	r1, #15
 801709a:	2058      	movs	r0, #88	@ 0x58
 801709c:	f000 fbec 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80170a0:	2058      	movs	r0, #88	@ 0x58
 80170a2:	f000 fc25 	bl	80178f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 80170a6:	4642      	mov	r2, r8
 80170a8:	210f      	movs	r1, #15
 80170aa:	205a      	movs	r0, #90	@ 0x5a
 80170ac:	f000 fbe4 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80170b0:	205a      	movs	r0, #90	@ 0x5a
 80170b2:	f000 fc1d 	bl	80178f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 80170b6:	4642      	mov	r2, r8
 80170b8:	210f      	movs	r1, #15
 80170ba:	207b      	movs	r0, #123	@ 0x7b
 80170bc:	f000 fbdc 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80170c0:	207b      	movs	r0, #123	@ 0x7b
 80170c2:	f000 fc15 	bl	80178f0 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 80170c6:	4d75      	ldr	r5, [pc, #468]	@ (801729c <BSP_LCD_InitEx+0x30c>)
 80170c8:	4a75      	ldr	r2, [pc, #468]	@ (80172a0 <BSP_LCD_InitEx+0x310>)
    hlcd_dma2d.Instance = DMA2D;
 80170ca:	4976      	ldr	r1, [pc, #472]	@ (80172a4 <BSP_LCD_InitEx+0x314>)
    hlcd_ltdc.Instance = LTDC;
 80170cc:	602a      	str	r2, [r5, #0]
    hlcd_dma2d.Instance = DMA2D;
 80170ce:	4a76      	ldr	r2, [pc, #472]	@ (80172a8 <BSP_LCD_InitEx+0x318>)
    hlcd_dsi.Instance = DSI;
 80170d0:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 80172cc <BSP_LCD_InitEx+0x33c>
    hlcd_dma2d.Instance = DMA2D;
 80170d4:	6011      	str	r1, [r2, #0]
    hlcd_dsi.Instance = DSI;
 80170d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80170da:	9b01      	ldr	r3, [sp, #4]
 80170dc:	4631      	mov	r1, r6
    hlcd_dsi.Instance = DSI;
 80170de:	f8c8 2000 	str.w	r2, [r8]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80170e2:	4640      	mov	r0, r8
    __HAL_RCC_LTDC_CLK_ENABLE();
 80170e4:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 80170e8:	f042 0208 	orr.w	r2, r2, #8
 80170ec:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 80170f0:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 80170f4:	f002 0208 	and.w	r2, r2, #8
 80170f8:	9205      	str	r2, [sp, #20]
 80170fa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 80170fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8017100:	f042 0208 	orr.w	r2, r2, #8
 8017104:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8017108:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 801710c:	f022 0208 	bic.w	r2, r2, #8
 8017110:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8017114:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 8017118:	f042 0210 	orr.w	r2, r2, #16
 801711c:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
 8017120:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
 8017124:	f002 0210 	and.w	r2, r2, #16
 8017128:	9204      	str	r2, [sp, #16]
 801712a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801712c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801712e:	f042 0210 	orr.w	r2, r2, #16
 8017132:	67e2      	str	r2, [r4, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8017134:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017136:	f022 0210 	bic.w	r2, r2, #16
 801713a:	67e2      	str	r2, [r4, #124]	@ 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 801713c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 8017140:	f042 0210 	orr.w	r2, r2, #16
 8017144:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 8017148:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 801714c:	f002 0210 	and.w	r2, r2, #16
 8017150:	9203      	str	r2, [sp, #12]
 8017152:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 8017154:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8017158:	f042 0210 	orr.w	r2, r2, #16
 801715c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8017160:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8017164:	f022 0210 	bic.w	r2, r2, #16
 8017168:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 801716c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801716e:	f7ff fe17 	bl	8016da0 <MX_DSIHOST_DSI_Init>
 8017172:	2800      	cmp	r0, #0
 8017174:	d156      	bne.n	8017224 <BSP_LCD_InitEx+0x294>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8017176:	4628      	mov	r0, r5
 8017178:	f7ff fee2 	bl	8016f40 <MX_LTDC_ClockConfig>
 801717c:	2800      	cmp	r0, #0
 801717e:	d151      	bne.n	8017224 <BSP_LCD_InitEx+0x294>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8017180:	4631      	mov	r1, r6
 8017182:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017184:	4628      	mov	r0, r5
 8017186:	f7ff fe83 	bl	8016e90 <MX_LTDC_Init>
 801718a:	4601      	mov	r1, r0
 801718c:	2800      	cmp	r0, #0
 801718e:	d149      	bne.n	8017224 <BSP_LCD_InitEx+0x294>
      config.Y1          = Height;
 8017190:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8017192:	aa0e      	add	r2, sp, #56	@ 0x38
 8017194:	4628      	mov	r0, r5
      config.X1          = Width;
 8017196:	960f      	str	r6, [sp, #60]	@ 0x3c
      config.Y1          = Height;
 8017198:	9311      	str	r3, [sp, #68]	@ 0x44
      config.PixelFormat = ltdc_pixel_format;
 801719a:	9b00      	ldr	r3, [sp, #0]
      config.X0          = 0;
 801719c:	910e      	str	r1, [sp, #56]	@ 0x38
      config.PixelFormat = ltdc_pixel_format;
 801719e:	9312      	str	r3, [sp, #72]	@ 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 80171a0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
      config.Y0          = 0;
 80171a4:	9110      	str	r1, [sp, #64]	@ 0x40
      config.Address     = LCD_LAYER_0_ADDRESS;
 80171a6:	9313      	str	r3, [sp, #76]	@ 0x4c
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80171a8:	f7ff fea2 	bl	8016ef0 <MX_LTDC_ConfigLayer>
 80171ac:	4604      	mov	r4, r0
 80171ae:	b150      	cbz	r0, 80171c6 <BSP_LCD_InitEx+0x236>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80171b0:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80171b4:	2301      	movs	r3, #1
 80171b6:	61bb      	str	r3, [r7, #24]
}
 80171b8:	b015      	add	sp, #84	@ 0x54
 80171ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 80171be:	4613      	mov	r3, r2
      dsi_pixel_format = DSI_RGB565;
 80171c0:	9101      	str	r1, [sp, #4]
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80171c2:	9200      	str	r2, [sp, #0]
 80171c4:	e6fd      	b.n	8016fc2 <BSP_LCD_InitEx+0x32>
        (void)HAL_DSI_Start(&hlcd_dsi);
 80171c6:	4640      	mov	r0, r8
  static NT35510_Object_t   NT35510Obj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
 80171c8:	4e38      	ldr	r6, [pc, #224]	@ (80172ac <BSP_LCD_InitEx+0x31c>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 80171ca:	f002 fbed 	bl	80199a8 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 80171ce:	4640      	mov	r0, r8
 80171d0:	2104      	movs	r1, #4
  IOCtx.GetTick     = BSP_GetTick;
 80171d2:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 80172d0 <BSP_LCD_InitEx+0x340>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 80171d6:	f002 fbd3 	bl	8019980 <HAL_DSI_ConfigFlowControl>
  uint32_t id = 0;
 80171da:	9409      	str	r4, [sp, #36]	@ 0x24
  IOCtx.Address     = 0;
 80171dc:	f8ad 4028 	strh.w	r4, [sp, #40]	@ 0x28
  IOCtx.ReadReg     = DSI_IO_Read;

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 80171e0:	a90a      	add	r1, sp, #40	@ 0x28
 80171e2:	4c33      	ldr	r4, [pc, #204]	@ (80172b0 <BSP_LCD_InitEx+0x320>)
  IOCtx.ReadReg     = DSI_IO_Read;
 80171e4:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80172d4 <BSP_LCD_InitEx+0x344>
  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 80171e8:	4620      	mov	r0, r4
  IOCtx.GetTick     = BSP_GetTick;
 80171ea:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 80171ee:	960b      	str	r6, [sp, #44]	@ 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 80171f0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 80171f4:	f7fb fff4 	bl	80131e0 <NT35510_RegisterBusIO>
 80171f8:	b9c8      	cbnz	r0, 801722e <BSP_LCD_InitEx+0x29e>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 80171fa:	4d2e      	ldr	r5, [pc, #184]	@ (80172b4 <BSP_LCD_InitEx+0x324>)

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 80171fc:	4620      	mov	r0, r4
 80171fe:	a909      	add	r1, sp, #36	@ 0x24
    Lcd_CompObj = &NT35510Obj;
 8017200:	602c      	str	r4, [r5, #0]
    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 8017202:	f7fb ffd9 	bl	80131b8 <NT35510_ReadID>
 8017206:	b990      	cbnz	r0, 801722e <BSP_LCD_InitEx+0x29e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if (id != NT35510_ID)
 8017208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801720a:	2b80      	cmp	r3, #128	@ 0x80
 801720c:	d10f      	bne.n	801722e <BSP_LCD_InitEx+0x29e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 801720e:	4b2a      	ldr	r3, [pc, #168]	@ (80172b8 <BSP_LCD_InitEx+0x328>)
 8017210:	4a2a      	ldr	r2, [pc, #168]	@ (80172bc <BSP_LCD_InitEx+0x32c>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 8017212:	6828      	ldr	r0, [r5, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 8017214:	6013      	str	r3, [r2, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 8017216:	4652      	mov	r2, sl
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	9900      	ldr	r1, [sp, #0]
 801721c:	4798      	blx	r3
 801721e:	b930      	cbnz	r0, 801722e <BSP_LCD_InitEx+0x29e>
          ret = BSP_ERROR_NONE;
 8017220:	2000      	movs	r0, #0
 8017222:	e7c7      	b.n	80171b4 <BSP_LCD_InitEx+0x224>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8017224:	f06f 0003 	mvn.w	r0, #3
}
 8017228:	b015      	add	sp, #84	@ 0x54
 801722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
  int32_t ret;
  uint32_t id = 0;
 801722e:	2300      	movs	r3, #0
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8017230:	4c23      	ldr	r4, [pc, #140]	@ (80172c0 <BSP_LCD_InitEx+0x330>)
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 8017232:	2201      	movs	r2, #1
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8017234:	a90a      	add	r1, sp, #40	@ 0x28
  uint32_t id = 0;
 8017236:	9309      	str	r3, [sp, #36]	@ 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8017238:	4620      	mov	r0, r4
  IOCtx.Address     = 0;
 801723a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 801723e:	4b21      	ldr	r3, [pc, #132]	@ (80172c4 <BSP_LCD_InitEx+0x334>)
  IOCtx.GetTick     = BSP_GetTick;
 8017240:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 8017244:	960b      	str	r6, [sp, #44]	@ 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 8017246:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 801724a:	701a      	strb	r2, [r3, #0]
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 801724c:	f7fc fcb0 	bl	8013bb0 <OTM8009A_RegisterBusIO>
 8017250:	b998      	cbnz	r0, 801727a <BSP_LCD_InitEx+0x2ea>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8017252:	4d18      	ldr	r5, [pc, #96]	@ (80172b4 <BSP_LCD_InitEx+0x324>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8017254:	4620      	mov	r0, r4
 8017256:	a909      	add	r1, sp, #36	@ 0x24
    Lcd_CompObj = &OTM8009AObj;
 8017258:	602c      	str	r4, [r5, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 801725a:	f7fc fc95 	bl	8013b88 <OTM8009A_ReadID>
 801725e:	b960      	cbnz	r0, 801727a <BSP_LCD_InitEx+0x2ea>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if (id != OTM8009A_ID)
 8017260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017262:	2b40      	cmp	r3, #64	@ 0x40
 8017264:	d109      	bne.n	801727a <BSP_LCD_InitEx+0x2ea>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8017266:	4b18      	ldr	r3, [pc, #96]	@ (80172c8 <BSP_LCD_InitEx+0x338>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8017268:	4652      	mov	r2, sl
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 801726a:	4c14      	ldr	r4, [pc, #80]	@ (80172bc <BSP_LCD_InitEx+0x32c>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 801726c:	9900      	ldr	r1, [sp, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 801726e:	6023      	str	r3, [r4, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8017270:	6828      	ldr	r0, [r5, #0]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	4798      	blx	r3
 8017276:	2800      	cmp	r0, #0
 8017278:	d0d2      	beq.n	8017220 <BSP_LCD_InitEx+0x290>
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801727a:	f06f 0006 	mvn.w	r0, #6
 801727e:	e799      	b.n	80171b4 <BSP_LCD_InitEx+0x224>
    ret = BSP_ERROR_WRONG_PARAM;
 8017280:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8017284:	e798      	b.n	80171b8 <BSP_LCD_InitEx+0x228>
    ret = BSP_ERROR_WRONG_PARAM;
 8017286:	f06f 0001 	mvn.w	r0, #1
}
 801728a:	4770      	bx	lr
 801728c:	24009858 	.word	0x24009858
 8017290:	58024400 	.word	0x58024400
 8017294:	58021800 	.word	0x58021800
 8017298:	58022400 	.word	0x58022400
 801729c:	24009874 	.word	0x24009874
 80172a0:	50001000 	.word	0x50001000
 80172a4:	52001000 	.word	0x52001000
 80172a8:	2400991c 	.word	0x2400991c
 80172ac:	080168d1 	.word	0x080168d1
 80172b0:	24009834 	.word	0x24009834
 80172b4:	240099a0 	.word	0x240099a0
 80172b8:	240081bc 	.word	0x240081bc
 80172bc:	240099a4 	.word	0x240099a4
 80172c0:	24009814 	.word	0x24009814
 80172c4:	24009854 	.word	0x24009854
 80172c8:	24008208 	.word	0x24008208
 80172cc:	24009984 	.word	0x24009984
 80172d0:	08016205 	.word	0x08016205
 80172d4:	080168a9 	.word	0x080168a9

080172d8 <BSP_LCD_Init>:
{
 80172d8:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80172da:	f44f 74f0 	mov.w	r4, #480	@ 0x1e0
{
 80172de:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80172e0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80172e4:	2201      	movs	r2, #1
 80172e6:	9400      	str	r4, [sp, #0]
 80172e8:	f7ff fe52 	bl	8016f90 <BSP_LCD_InitEx>
}
 80172ec:	b002      	add	sp, #8
 80172ee:	bd10      	pop	{r4, pc}

080172f0 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 80172f0:	b948      	cbnz	r0, 8017306 <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 80172f2:	4806      	ldr	r0, [pc, #24]	@ (801730c <BSP_LCD_ConfigLayer+0x1c>)
{
 80172f4:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 80172f6:	f7ff fdfb 	bl	8016ef0 <MX_LTDC_ConfigLayer>
  int32_t ret = BSP_ERROR_NONE;
 80172fa:	2800      	cmp	r0, #0
 80172fc:	bf14      	ite	ne
 80172fe:	f06f 0003 	mvnne.w	r0, #3
 8017302:	2000      	moveq	r0, #0
}
 8017304:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8017306:	f06f 0001 	mvn.w	r0, #1
}
 801730a:	4770      	bx	lr
 801730c:	24009874 	.word	0x24009874

08017310 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8017310:	b410      	push	{r4}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8017312:	4c0b      	ldr	r4, [pc, #44]	@ (8017340 <MX_QSPI_Init+0x30>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8017314:	2200      	movs	r2, #0
  hQspi->Instance                = QUADSPI;
 8017316:	6004      	str	r4, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8017318:	684c      	ldr	r4, [r1, #4]
 801731a:	6044      	str	r4, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 801731c:	2401      	movs	r4, #1
 801731e:	6084      	str	r4, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8017320:	688c      	ldr	r4, [r1, #8]
 8017322:	60c4      	str	r4, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8017324:	680c      	ldr	r4, [r1, #0]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8017326:	68c9      	ldr	r1, [r1, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8017328:	6104      	str	r4, [r0, #16]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 801732a:	6201      	str	r1, [r0, #32]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 801732c:	f44f 7140 	mov.w	r1, #768	@ 0x300

  return HAL_QSPI_Init(hQspi);
}
 8017330:	f85d 4b04 	ldr.w	r4, [sp], #4
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8017334:	6182      	str	r2, [r0, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8017336:	61c2      	str	r2, [r0, #28]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8017338:	6141      	str	r1, [r0, #20]
  return HAL_QSPI_Init(hQspi);
 801733a:	f004 b92b 	b.w	801b594 <HAL_QSPI_Init>
 801733e:	bf00      	nop
 8017340:	52005000 	.word	0x52005000

08017344 <BSP_QSPI_Init>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8017344:	2800      	cmp	r0, #0
 8017346:	f040 81d9 	bne.w	80176fc <BSP_QSPI_Init+0x3b8>
{
 801734a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 801734e:	4c04      	ldr	r4, [pc, #16]	@ (8017360 <BSP_QSPI_Init+0x1c>)
{
 8017350:	b0a4      	sub	sp, #144	@ 0x90
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8017352:	7826      	ldrb	r6, [r4, #0]
 8017354:	b136      	cbz	r6, 8017364 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8017356:	2000      	movs	r0, #0
}
 8017358:	b024      	add	sp, #144	@ 0x90
 801735a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801735e:	bf00      	nop
 8017360:	240099a8 	.word	0x240099a8
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8017364:	4bc8      	ldr	r3, [pc, #800]	@ (8017688 <BSP_QSPI_Init+0x344>)
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8017366:	f04f 0a04 	mov.w	sl, #4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801736a:	2709      	movs	r7, #9
 801736c:	460d      	mov	r5, r1
  QSPI_CLK_ENABLE();
 801736e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8017372:	a916      	add	r1, sp, #88	@ 0x58
 8017374:	48c5      	ldr	r0, [pc, #788]	@ (801768c <BSP_QSPI_Init+0x348>)

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8017376:	f04f 0840 	mov.w	r8, #64	@ 0x40
  QSPI_CLK_ENABLE();
 801737a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801737e:	f04f 090a 	mov.w	r9, #10
  QSPI_CLK_ENABLE();
 8017382:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8017386:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801738a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 801738e:	9201      	str	r2, [sp, #4]
 8017390:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8017392:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8017394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017398:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 801739a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801739c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80173a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 80173a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173a6:	f042 0202 	orr.w	r2, r2, #2
 80173aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80173ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173b2:	f002 0202 	and.w	r2, r2, #2
 80173b6:	9202      	str	r2, [sp, #8]
 80173b8:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80173ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80173c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80173c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173ca:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80173ce:	9203      	str	r2, [sp, #12]
 80173d0:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80173d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173d6:	f042 0208 	orr.w	r2, r2, #8
 80173da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80173de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173e2:	f002 0208 	and.w	r2, r2, #8
 80173e6:	9204      	str	r2, [sp, #16]
 80173e8:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80173ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173ee:	f042 0220 	orr.w	r2, r2, #32
 80173f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80173f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80173fa:	f002 0220 	and.w	r2, r2, #32
 80173fe:	9205      	str	r2, [sp, #20]
 8017400:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8017402:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017406:	f042 0220 	orr.w	r2, r2, #32
 801740a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 801740e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017412:	f002 0220 	and.w	r2, r2, #32
 8017416:	9206      	str	r2, [sp, #24]
 8017418:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 801741a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801741e:	f042 0220 	orr.w	r2, r2, #32
 8017422:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8017426:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801742a:	f002 0220 	and.w	r2, r2, #32
 801742e:	9207      	str	r2, [sp, #28]
 8017430:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8017432:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801743a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 801743e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017442:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8017446:	9208      	str	r2, [sp, #32]
 8017448:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 801744a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801744e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8017452:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8017456:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801745a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 801745e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8017462:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017466:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801746a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 801746e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017472:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017476:	920a      	str	r2, [sp, #40]	@ 0x28
 8017478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 801747a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801747e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017482:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8017486:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801748a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 801748e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017490:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8017492:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8017496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801749a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 801749e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80174a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80174a6:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80174a8:	2302      	movs	r3, #2
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80174aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80174ac:	e9cd a316 	strd	sl, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80174b0:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80174b2:	971a      	str	r7, [sp, #104]	@ 0x68
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80174b4:	e9cd 6318 	strd	r6, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80174b8:	f002 fbe0 	bl	8019c7c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80174bc:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80174be:	a916      	add	r1, sp, #88	@ 0x58
 80174c0:	4873      	ldr	r0, [pc, #460]	@ (8017690 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80174c2:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80174c4:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80174c8:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80174cc:	f002 fbd6 	bl	8019c7c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80174d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80174d4:	a916      	add	r1, sp, #88	@ 0x58
 80174d6:	486f      	ldr	r0, [pc, #444]	@ (8017694 <BSP_QSPI_Init+0x350>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80174d8:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80174da:	9618      	str	r6, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80174dc:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80174de:	f002 fbcd 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80174e2:	a916      	add	r1, sp, #88	@ 0x58
 80174e4:	486c      	ldr	r0, [pc, #432]	@ (8017698 <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80174e6:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80174ea:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80174ec:	f002 fbc6 	bl	8019c7c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80174f0:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80174f4:	f44f 7900 	mov.w	r9, #512	@ 0x200
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80174f8:	a916      	add	r1, sp, #88	@ 0x58
 80174fa:	4868      	ldr	r0, [pc, #416]	@ (801769c <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80174fc:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8017500:	f002 fbbc 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8017504:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8017506:	a916      	add	r1, sp, #88	@ 0x58
 8017508:	4863      	ldr	r0, [pc, #396]	@ (8017698 <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801750a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801750c:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 801750e:	f002 fbb5 	bl	8019c7c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8017512:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8017514:	a916      	add	r1, sp, #88	@ 0x58
 8017516:	4861      	ldr	r0, [pc, #388]	@ (801769c <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8017518:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801751a:	971a      	str	r7, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 801751c:	f002 fbae 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8017520:	a916      	add	r1, sp, #88	@ 0x58
 8017522:	485b      	ldr	r0, [pc, #364]	@ (8017690 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8017524:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8017528:	f002 fba8 	bl	8019c7c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 801752c:	a916      	add	r1, sp, #88	@ 0x58
 801752e:	485b      	ldr	r0, [pc, #364]	@ (801769c <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8017530:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8017534:	f002 fba2 	bl	8019c7c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8017538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 801753c:	a916      	add	r1, sp, #88	@ 0x58
 801753e:	4854      	ldr	r0, [pc, #336]	@ (8017690 <BSP_QSPI_Init+0x34c>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8017540:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8017542:	f002 fb9b 	bl	8019c7c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8017546:	4632      	mov	r2, r6
 8017548:	210f      	movs	r1, #15
 801754a:	205c      	movs	r0, #92	@ 0x5c
 801754c:	f000 f994 	bl	8017878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8017550:	205c      	movs	r0, #92	@ 0x5c
 8017552:	f000 f9cd 	bl	80178f0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8017556:	a811      	add	r0, sp, #68	@ 0x44
 8017558:	f7fb f990 	bl	801287c <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 801755c:	786b      	ldrb	r3, [r5, #1]
 801755e:	4a50      	ldr	r2, [pc, #320]	@ (80176a0 <BSP_QSPI_Init+0x35c>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8017560:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8017564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017568:	920e      	str	r2, [sp, #56]	@ 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801756a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801756c:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8017570:	2a00      	cmp	r2, #0
 8017572:	f000 80bb 	beq.w	80176ec <BSP_QSPI_Init+0x3a8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8017576:	fab2 f282 	clz	r2, r2
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 801757a:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 801757c:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8017580:	4e48      	ldr	r6, [pc, #288]	@ (80176a4 <BSP_QSPI_Init+0x360>)
 8017582:	a90d      	add	r1, sp, #52	@ 0x34
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8017584:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8017586:	095b      	lsrs	r3, r3, #5
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8017588:	4630      	mov	r0, r6
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 801758a:	011b      	lsls	r3, r3, #4
 801758c:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 801758e:	f7ff febf 	bl	8017310 <MX_QSPI_Init>
 8017592:	2800      	cmp	r0, #0
 8017594:	f040 80b5 	bne.w	8017702 <BSP_QSPI_Init+0x3be>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8017598:	2103      	movs	r1, #3
 801759a:	4630      	mov	r0, r6
 801759c:	f7fb fb40 	bl	8012c20 <MT25TL01G_ResetEnable>
 80175a0:	2800      	cmp	r0, #0
 80175a2:	f040 80a0 	bne.w	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80175a6:	2103      	movs	r1, #3
 80175a8:	4630      	mov	r0, r6
 80175aa:	f7fb fb5b 	bl	8012c64 <MT25TL01G_ResetMemory>
 80175ae:	2800      	cmp	r0, #0
 80175b0:	f040 8099 	bne.w	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80175b4:	7861      	ldrb	r1, [r4, #1]
 80175b6:	4630      	mov	r0, r6
 80175b8:	f7fb f976 	bl	80128a8 <MT25TL01G_AutoPollingMemReady>
 80175bc:	4601      	mov	r1, r0
 80175be:	2800      	cmp	r0, #0
 80175c0:	f040 8091 	bne.w	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80175c4:	4630      	mov	r0, r6
 80175c6:	f7fb fb2b 	bl	8012c20 <MT25TL01G_ResetEnable>
 80175ca:	4601      	mov	r1, r0
 80175cc:	2800      	cmp	r0, #0
 80175ce:	f040 808a 	bne.w	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80175d2:	4630      	mov	r0, r6
 80175d4:	f7fb fb46 	bl	8012c64 <MT25TL01G_ResetMemory>
 80175d8:	4601      	mov	r1, r0
 80175da:	2800      	cmp	r0, #0
 80175dc:	f040 8083 	bne.w	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80175e0:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80175e2:	70a0      	strb	r0, [r4, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80175e4:	4630      	mov	r0, r6
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80175e6:	8023      	strh	r3, [r4, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80175e8:	f7fb f95e 	bl	80128a8 <MT25TL01G_AutoPollingMemReady>
 80175ec:	2800      	cmp	r0, #0
 80175ee:	d17a      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80175f0:	7861      	ldrb	r1, [r4, #1]
 80175f2:	4630      	mov	r0, r6
 80175f4:	f7fb f9d0 	bl	8012998 <MT25TL01G_Enter4BytesAddressMode>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d174      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80175fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
  s_command.NbData            = 2;
 8017600:	f04f 7740 	mov.w	r7, #50331648	@ 0x3000000
  uint16_t reg=0;
 8017604:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017608:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801760c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 801760e:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 8017610:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017612:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8017614:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.NbData            = 2;
 8017616:	2302      	movs	r3, #2
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8017618:	9023      	str	r0, [sp, #140]	@ 0x8c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801761a:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 801761e:	e9cd 0021 	strd	r0, r0, [sp, #132]	@ 0x84
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017622:	4630      	mov	r0, r6
  s_command.NbData            = 2;
 8017624:	e9cd 731f 	strd	r7, r3, [sp, #124]	@ 0x7c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017628:	f004 f812 	bl	801b650 <HAL_QSPI_Command>
 801762c:	2800      	cmp	r0, #0
 801762e:	d15a      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017634:	4630      	mov	r0, r6
 8017636:	f10d 0102 	add.w	r1, sp, #2
 801763a:	f004 f905 	bl	801b848 <HAL_QSPI_Receive>
 801763e:	2800      	cmp	r0, #0
 8017640:	d151      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8017642:	7861      	ldrb	r1, [r4, #1]
 8017644:	4817      	ldr	r0, [pc, #92]	@ (80176a4 <BSP_QSPI_Init+0x360>)
 8017646:	f7fb f95f 	bl	8012908 <MT25TL01G_WriteEnable>
 801764a:	2800      	cmp	r0, #0
 801764c:	d14b      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801764e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017652:	f640 720f 	movw	r2, #3855	@ 0xf0f
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017656:	a916      	add	r1, sp, #88	@ 0x58
 8017658:	4812      	ldr	r0, [pc, #72]	@ (80176a4 <BSP_QSPI_Init+0x360>)
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801765a:	401a      	ands	r2, r3
 801765c:	f248 0380 	movw	r3, #32896	@ 0x8080
 8017660:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017662:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8017666:	f8ad 3002 	strh.w	r3, [sp, #2]
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 801766a:	2381      	movs	r3, #129	@ 0x81
 801766c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801766e:	f003 ffef 	bl	801b650 <HAL_QSPI_Command>
 8017672:	2800      	cmp	r0, #0
 8017674:	d137      	bne.n	80176e6 <BSP_QSPI_Init+0x3a2>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017676:	f241 3288 	movw	r2, #5000	@ 0x1388
 801767a:	f10d 0102 	add.w	r1, sp, #2
 801767e:	4809      	ldr	r0, [pc, #36]	@ (80176a4 <BSP_QSPI_Init+0x360>)
 8017680:	f004 f854 	bl	801b72c <HAL_QSPI_Transmit>
 8017684:	bb78      	cbnz	r0, 80176e6 <BSP_QSPI_Init+0x3a2>
 8017686:	e00f      	b.n	80176a8 <BSP_QSPI_Init+0x364>
 8017688:	58024400 	.word	0x58024400
 801768c:	58020400 	.word	0x58020400
 8017690:	58021800 	.word	0x58021800
 8017694:	58020c00 	.word	0x58020c00
 8017698:	58021c00 	.word	0x58021c00
 801769c:	58021400 	.word	0x58021400
 80176a0:	08057e94 	.word	0x08057e94
 80176a4:	240099b4 	.word	0x240099b4
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80176a8:	7823      	ldrb	r3, [r4, #0]
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80176aa:	782f      	ldrb	r7, [r5, #0]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80176ac:	2b02      	cmp	r3, #2
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80176ae:	786d      	ldrb	r5, [r5, #1]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80176b0:	d019      	beq.n	80176e6 <BSP_QSPI_Init+0x3a2>
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80176b2:	fab5 f385 	clz	r3, r5
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80176b6:	4814      	ldr	r0, [pc, #80]	@ (8017708 <BSP_QSPI_Init+0x3c4>)
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80176b8:	095b      	lsrs	r3, r3, #5
 80176ba:	011b      	lsls	r3, r3, #4
 80176bc:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80176be:	f003 ff69 	bl	801b594 <HAL_QSPI_Init>
 80176c2:	b980      	cbnz	r0, 80176e6 <BSP_QSPI_Init+0x3a2>
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80176c4:	7863      	ldrb	r3, [r4, #1]
 80176c6:	2b03      	cmp	r3, #3
 80176c8:	d006      	beq.n	80176d8 <BSP_QSPI_Init+0x394>
          if(Mode == MT25TL01G_QPI_MODE)
 80176ca:	2f03      	cmp	r7, #3
 80176cc:	d010      	beq.n	80176f0 <BSP_QSPI_Init+0x3ac>
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80176ce:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80176d0:	7067      	strb	r7, [r4, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80176d2:	70a5      	strb	r5, [r4, #2]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80176d4:	7023      	strb	r3, [r4, #0]
  return ret;
 80176d6:	e63e      	b.n	8017356 <BSP_QSPI_Init+0x12>
          if(Mode != MT25TL01G_QPI_MODE)
 80176d8:	2f03      	cmp	r7, #3
 80176da:	d0f8      	beq.n	80176ce <BSP_QSPI_Init+0x38a>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80176dc:	480a      	ldr	r0, [pc, #40]	@ (8017708 <BSP_QSPI_Init+0x3c4>)
 80176de:	f7fb f9c7 	bl	8012a70 <MT25TL01G_ExitQPIMode>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d0f3      	beq.n	80176ce <BSP_QSPI_Init+0x38a>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80176e6:	f06f 0004 	mvn.w	r0, #4
 80176ea:	e635      	b.n	8017358 <BSP_QSPI_Init+0x14>
 80176ec:	221f      	movs	r2, #31
 80176ee:	e745      	b.n	801757c <BSP_QSPI_Init+0x238>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80176f0:	4805      	ldr	r0, [pc, #20]	@ (8017708 <BSP_QSPI_Init+0x3c4>)
 80176f2:	f7fb f9a1 	bl	8012a38 <MT25TL01G_EnterQPIMode>
 80176f6:	2800      	cmp	r0, #0
 80176f8:	d0e9      	beq.n	80176ce <BSP_QSPI_Init+0x38a>
 80176fa:	e7f4      	b.n	80176e6 <BSP_QSPI_Init+0x3a2>
    ret = BSP_ERROR_WRONG_PARAM;
 80176fc:	f06f 0001 	mvn.w	r0, #1
}
 8017700:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8017702:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8017706:	e627      	b.n	8017358 <BSP_QSPI_Init+0x14>
 8017708:	240099b4 	.word	0x240099b4

0801770c <BSP_QSPI_EnableMemoryMappedMode>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 801770c:	b998      	cbnz	r0, 8017736 <BSP_QSPI_EnableMemoryMappedMode+0x2a>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801770e:	480b      	ldr	r0, [pc, #44]	@ (801773c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
{
 8017710:	b510      	push	{r4, lr}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8017712:	4c0b      	ldr	r4, [pc, #44]	@ (8017740 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8017714:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8017716:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8017718:	b133      	cbz	r3, 8017728 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801771a:	f7fb f9c5 	bl	8012aa8 <MT25TL01G_EnableMemoryMappedModeDTR>
 801771e:	b938      	cbnz	r0, 8017730 <BSP_QSPI_EnableMemoryMappedMode+0x24>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8017720:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8017722:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8017724:	7023      	strb	r3, [r4, #0]
}
 8017726:	bd10      	pop	{r4, pc}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8017728:	f7fb fa1a 	bl	8012b60 <MT25TL01G_EnableMemoryMappedModeSTR>
 801772c:	2800      	cmp	r0, #0
 801772e:	d0f7      	beq.n	8017720 <BSP_QSPI_EnableMemoryMappedMode+0x14>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8017730:	f06f 0004 	mvn.w	r0, #4
}
 8017734:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8017736:	f06f 0001 	mvn.w	r0, #1
}
 801773a:	4770      	bx	lr
 801773c:	240099b4 	.word	0x240099b4
 8017740:	240099a8 	.word	0x240099a8

08017744 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8017744:	4b0f      	ldr	r3, [pc, #60]	@ (8017784 <HAL_InitTick+0x40>)
 8017746:	781b      	ldrb	r3, [r3, #0]
 8017748:	b90b      	cbnz	r3, 801774e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 801774a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 801774c:	4770      	bx	lr
{
 801774e:	b510      	push	{r4, lr}
 8017750:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8017752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017756:	4a0c      	ldr	r2, [pc, #48]	@ (8017788 <HAL_InitTick+0x44>)
 8017758:	fbb0 f3f3 	udiv	r3, r0, r3
 801775c:	6810      	ldr	r0, [r2, #0]
 801775e:	fbb0 f0f3 	udiv	r0, r0, r3
 8017762:	f000 f8d3 	bl	801790c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017766:	2c0f      	cmp	r4, #15
 8017768:	d800      	bhi.n	801776c <HAL_InitTick+0x28>
 801776a:	b108      	cbz	r0, 8017770 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 801776c:	2001      	movs	r0, #1
}
 801776e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017770:	2200      	movs	r2, #0
 8017772:	4621      	mov	r1, r4
 8017774:	f04f 30ff 	mov.w	r0, #4294967295
 8017778:	f000 f87e 	bl	8017878 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801777c:	4b03      	ldr	r3, [pc, #12]	@ (801778c <HAL_InitTick+0x48>)
 801777e:	2000      	movs	r0, #0
 8017780:	601c      	str	r4, [r3, #0]
}
 8017782:	bd10      	pop	{r4, pc}
 8017784:	240082dc 	.word	0x240082dc
 8017788:	240081b8 	.word	0x240081b8
 801778c:	240082e0 	.word	0x240082e0

08017790 <HAL_Init>:
{
 8017790:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017792:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8017794:	4c12      	ldr	r4, [pc, #72]	@ (80177e0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017796:	f000 f85d 	bl	8017854 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801779a:	f004 fd3f 	bl	801c21c <HAL_RCC_GetSysClockFreq>
 801779e:	4b11      	ldr	r3, [pc, #68]	@ (80177e4 <HAL_Init+0x54>)
 80177a0:	4911      	ldr	r1, [pc, #68]	@ (80177e8 <HAL_Init+0x58>)
 80177a2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177a4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80177a6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177aa:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80177ae:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177b0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80177b2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80177b6:	490d      	ldr	r1, [pc, #52]	@ (80177ec <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177b8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80177bc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177be:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80177c2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80177c4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80177c6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80177c8:	f7ff ffbc 	bl	8017744 <HAL_InitTick>
 80177cc:	b110      	cbz	r0, 80177d4 <HAL_Init+0x44>
    return HAL_ERROR;
 80177ce:	2401      	movs	r4, #1
}
 80177d0:	4620      	mov	r0, r4
 80177d2:	bd10      	pop	{r4, pc}
 80177d4:	4604      	mov	r4, r0
  HAL_MspInit();
 80177d6:	f7fa fea9 	bl	801252c <HAL_MspInit>
}
 80177da:	4620      	mov	r0, r4
 80177dc:	bd10      	pop	{r4, pc}
 80177de:	bf00      	nop
 80177e0:	240081b4 	.word	0x240081b4
 80177e4:	58024400 	.word	0x58024400
 80177e8:	080575bc 	.word	0x080575bc
 80177ec:	240081b8 	.word	0x240081b8

080177f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80177f0:	4a03      	ldr	r2, [pc, #12]	@ (8017800 <HAL_IncTick+0x10>)
 80177f2:	4b04      	ldr	r3, [pc, #16]	@ (8017804 <HAL_IncTick+0x14>)
 80177f4:	6811      	ldr	r1, [r2, #0]
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	440b      	add	r3, r1
 80177fa:	6013      	str	r3, [r2, #0]
}
 80177fc:	4770      	bx	lr
 80177fe:	bf00      	nop
 8017800:	24009a00 	.word	0x24009a00
 8017804:	240082dc 	.word	0x240082dc

08017808 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8017808:	4b01      	ldr	r3, [pc, #4]	@ (8017810 <HAL_GetTick+0x8>)
 801780a:	6818      	ldr	r0, [r3, #0]
}
 801780c:	4770      	bx	lr
 801780e:	bf00      	nop
 8017810:	24009a00 	.word	0x24009a00

08017814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017814:	b538      	push	{r3, r4, r5, lr}
 8017816:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8017818:	f7ff fff6 	bl	8017808 <HAL_GetTick>
 801781c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801781e:	1c63      	adds	r3, r4, #1
 8017820:	d002      	beq.n	8017828 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8017822:	4b04      	ldr	r3, [pc, #16]	@ (8017834 <HAL_Delay+0x20>)
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017828:	f7ff ffee 	bl	8017808 <HAL_GetTick>
 801782c:	1b40      	subs	r0, r0, r5
 801782e:	42a0      	cmp	r0, r4
 8017830:	d3fa      	bcc.n	8017828 <HAL_Delay+0x14>
  {
  }
}
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	240082dc 	.word	0x240082dc

08017838 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8017838:	4b01      	ldr	r3, [pc, #4]	@ (8017840 <HAL_GetREVID+0x8>)
 801783a:	6818      	ldr	r0, [r3, #0]
}
 801783c:	0c00      	lsrs	r0, r0, #16
 801783e:	4770      	bx	lr
 8017840:	5c001000 	.word	0x5c001000

08017844 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8017844:	4a02      	ldr	r2, [pc, #8]	@ (8017850 <HAL_EnableCompensationCell+0xc>)
 8017846:	6a13      	ldr	r3, [r2, #32]
 8017848:	f043 0301 	orr.w	r3, r3, #1
 801784c:	6213      	str	r3, [r2, #32]
}
 801784e:	4770      	bx	lr
 8017850:	58000400 	.word	0x58000400

08017854 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017854:	4906      	ldr	r1, [pc, #24]	@ (8017870 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017856:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801785a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 801785c:	4b05      	ldr	r3, [pc, #20]	@ (8017874 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801785e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017860:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017864:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017868:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 801786a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 801786c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801786e:	4770      	bx	lr
 8017870:	e000ed00 	.word	0xe000ed00
 8017874:	05fa0000 	.word	0x05fa0000

08017878 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017878:	4b1a      	ldr	r3, [pc, #104]	@ (80178e4 <HAL_NVIC_SetPriority+0x6c>)
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017880:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017882:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017886:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801788a:	f1be 0f04 	cmp.w	lr, #4
 801788e:	bf28      	it	cs
 8017890:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017894:	f1bc 0f06 	cmp.w	ip, #6
 8017898:	d91a      	bls.n	80178d0 <HAL_NVIC_SetPriority+0x58>
 801789a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801789e:	f04f 33ff 	mov.w	r3, #4294967295
 80178a2:	fa03 f30c 	lsl.w	r3, r3, ip
 80178a6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80178aa:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80178ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80178b0:	fa03 f30e 	lsl.w	r3, r3, lr
 80178b4:	ea21 0303 	bic.w	r3, r1, r3
 80178b8:	fa03 f30c 	lsl.w	r3, r3, ip
 80178bc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80178c4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80178c6:	db06      	blt.n	80178d6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178c8:	4a07      	ldr	r2, [pc, #28]	@ (80178e8 <HAL_NVIC_SetPriority+0x70>)
 80178ca:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80178cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80178d0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80178d2:	4694      	mov	ip, r2
 80178d4:	e7e9      	b.n	80178aa <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178d6:	f000 000f 	and.w	r0, r0, #15
 80178da:	4a04      	ldr	r2, [pc, #16]	@ (80178ec <HAL_NVIC_SetPriority+0x74>)
 80178dc:	5413      	strb	r3, [r2, r0]
 80178de:	f85d fb04 	ldr.w	pc, [sp], #4
 80178e2:	bf00      	nop
 80178e4:	e000ed00 	.word	0xe000ed00
 80178e8:	e000e400 	.word	0xe000e400
 80178ec:	e000ed14 	.word	0xe000ed14

080178f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80178f0:	2800      	cmp	r0, #0
 80178f2:	db07      	blt.n	8017904 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80178f4:	2301      	movs	r3, #1
 80178f6:	f000 011f 	and.w	r1, r0, #31
 80178fa:	4a03      	ldr	r2, [pc, #12]	@ (8017908 <HAL_NVIC_EnableIRQ+0x18>)
 80178fc:	0940      	lsrs	r0, r0, #5
 80178fe:	408b      	lsls	r3, r1
 8017900:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8017904:	4770      	bx	lr
 8017906:	bf00      	nop
 8017908:	e000e100 	.word	0xe000e100

0801790c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801790c:	1e43      	subs	r3, r0, #1
 801790e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017912:	d301      	bcc.n	8017918 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017914:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8017916:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017918:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801791c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801791e:	4905      	ldr	r1, [pc, #20]	@ (8017934 <HAL_SYSTICK_Config+0x28>)
 8017920:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017924:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017926:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017928:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801792c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801792e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017930:	4770      	bx	lr
 8017932:	bf00      	nop
 8017934:	e000ed00 	.word	0xe000ed00

08017938 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8017938:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801793c:	4b04      	ldr	r3, [pc, #16]	@ (8017950 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801793e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8017940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017942:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8017946:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8017948:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 801794c:	4770      	bx	lr
 801794e:	bf00      	nop
 8017950:	e000ed00 	.word	0xe000ed00

08017954 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8017954:	4b06      	ldr	r3, [pc, #24]	@ (8017970 <HAL_MPU_Enable+0x1c>)
 8017956:	f040 0001 	orr.w	r0, r0, #1
 801795a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801795e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017960:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8017964:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8017966:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801796a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801796e:	4770      	bx	lr
 8017970:	e000ed00 	.word	0xe000ed00

08017974 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8017974:	4a17      	ldr	r2, [pc, #92]	@ (80179d4 <HAL_MPU_ConfigRegion+0x60>)
 8017976:	7843      	ldrb	r3, [r0, #1]
 8017978:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 801797c:	7801      	ldrb	r1, [r0, #0]
 801797e:	b321      	cbz	r1, 80179ca <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8017980:	6843      	ldr	r3, [r0, #4]
{
 8017982:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8017984:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8017988:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801798a:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801798e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8017990:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8017994:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8017998:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801799c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801799e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80179a0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80179a4:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80179a8:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80179ac:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80179b0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80179b4:	7a01      	ldrb	r1, [r0, #8]
 80179b6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80179ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80179be:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80179c2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80179c6:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 80179ca:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80179ce:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 80179d2:	4770      	bx	lr
 80179d4:	e000ed00 	.word	0xe000ed00

080179d8 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 80179d8:	4770      	bx	lr
 80179da:	bf00      	nop

080179dc <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 80179dc:	2800      	cmp	r0, #0
 80179de:	d047      	beq.n	8017a70 <HAL_DCMI_Init+0x94>
{
 80179e0:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80179e2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80179e6:	4604      	mov	r4, r0
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d03e      	beq.n	8017a6a <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80179ec:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80179ee:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80179f0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d134      	bne.n	8017a62 <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80179f8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80179fa:	6861      	ldr	r1, [r4, #4]
 80179fc:	6966      	ldr	r6, [r4, #20]
 80179fe:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8017a00:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8017a02:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8017a04:	ea43 0306 	orr.w	r3, r3, r6
 8017a08:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8017a0a:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8017a0c:	ea43 0306 	orr.w	r3, r3, r6
 8017a10:	6926      	ldr	r6, [r4, #16]
 8017a12:	ea43 0306 	orr.w	r3, r3, r6
 8017a16:	68a6      	ldr	r6, [r4, #8]
 8017a18:	ea43 0306 	orr.w	r3, r3, r6
 8017a1c:	6a26      	ldr	r6, [r4, #32]
 8017a1e:	ea43 0306 	orr.w	r3, r3, r6
 8017a22:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a24:	ea43 0306 	orr.w	r3, r3, r6
 8017a28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a2a:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8017a2e:	4e11      	ldr	r6, [pc, #68]	@ (8017a74 <HAL_DCMI_Init+0x98>)
 8017a30:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8017a34:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8017a36:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8017a38:	ea43 0305 	orr.w	r3, r3, r5
 8017a3c:	6815      	ldr	r5, [r2, #0]
 8017a3e:	ea43 0305 	orr.w	r3, r3, r5
 8017a42:	ea43 0300 	orr.w	r3, r3, r0
 8017a46:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8017a48:	d101      	bne.n	8017a4e <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8017a4a:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8017a4c:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8017a4e:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8017a50:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8017a52:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8017a54:	f043 031e 	orr.w	r3, r3, #30
 8017a58:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8017a5a:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8017a5c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
}
 8017a60:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8017a62:	2200      	movs	r2, #0
 8017a64:	4610      	mov	r0, r2
 8017a66:	6262      	str	r2, [r4, #36]	@ 0x24
 8017a68:	e7c7      	b.n	80179fa <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 8017a6a:	f7ff ffb5 	bl	80179d8 <HAL_DCMI_MspInit>
 8017a6e:	e7bd      	b.n	80179ec <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 8017a70:	2001      	movs	r0, #1
}
 8017a72:	4770      	bx	lr
 8017a74:	ffe0f007 	.word	0xffe0f007

08017a78 <HAL_DCMI_Suspend>:
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8017a78:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8017af8 <HAL_DCMI_Suspend+0x80>)
  __HAL_LOCK(hdcmi);
 8017a7e:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017a80:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(hdcmi);
 8017a82:	d037      	beq.n	8017af4 <HAL_DCMI_Suspend+0x7c>
 8017a84:	4602      	mov	r2, r0
 8017a86:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8017a88:	f892 1035 	ldrb.w	r1, [r2, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8017a8c:	f882 0034 	strb.w	r0, [r2, #52]	@ 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8017a90:	2902      	cmp	r1, #2
 8017a92:	d004      	beq.n	8017a9e <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8017a94:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8017a96:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8017a98:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34

  /* Return function status */
  return status;
}
 8017a9c:	4770      	bx	lr
{
 8017a9e:	b500      	push	{lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017aa0:	4916      	ldr	r1, [pc, #88]	@ (8017afc <HAL_DCMI_Suspend+0x84>)
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8017aa2:	f04f 0e05 	mov.w	lr, #5
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8017aa6:	6810      	ldr	r0, [r2, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017aa8:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 8017aac:	fba1 1303 	umull	r1, r3, r1, r3
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8017ab0:	f882 e035 	strb.w	lr, [r2, #53]	@ 0x35
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8017ab4:	6801      	ldr	r1, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017ab6:	0a5b      	lsrs	r3, r3, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8017ab8:	f021 0101 	bic.w	r1, r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8017abc:	fb0c f303 	mul.w	r3, ip, r3
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8017ac0:	6001      	str	r1, [r0, #0]
 8017ac2:	e002      	b.n	8017aca <HAL_DCMI_Suspend+0x52>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8017ac4:	6801      	ldr	r1, [r0, #0]
 8017ac6:	07c9      	lsls	r1, r1, #31
 8017ac8:	d50e      	bpl.n	8017ae8 <HAL_DCMI_Suspend+0x70>
      if (count == 0U)
 8017aca:	3b01      	subs	r3, #1
 8017acc:	d1fa      	bne.n	8017ac4 <HAL_DCMI_Suspend+0x4c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8017ace:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 8017ad0:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 8017ad2:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8017ad4:	f043 0320 	orr.w	r3, r3, #32
 8017ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  __HAL_UNLOCK(hdcmi);
 8017ada:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 8017adc:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8017ae0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
}
 8017ae4:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_UNLOCK(hdcmi);
 8017ae8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8017aea:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8017aec:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
}
 8017af0:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hdcmi);
 8017af4:	2002      	movs	r0, #2
 8017af6:	4770      	bx	lr
 8017af8:	240081b8 	.word	0x240081b8
 8017afc:	10624dd3 	.word	0x10624dd3

08017b00 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8017b00:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
{
 8017b04:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 8017b06:	2a01      	cmp	r2, #1
 8017b08:	d013      	beq.n	8017b32 <HAL_DCMI_Resume+0x32>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8017b0a:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8017b0e:	2101      	movs	r1, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8017b10:	2a05      	cmp	r2, #5
  __HAL_LOCK(hdcmi);
 8017b12:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8017b16:	d107      	bne.n	8017b28 <HAL_DCMI_Resume+0x28>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8017b18:	6801      	ldr	r1, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8017b1a:	2202      	movs	r2, #2
 8017b1c:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8017b20:	680a      	ldr	r2, [r1, #0]
 8017b22:	f042 0201 	orr.w	r2, r2, #1
 8017b26:	600a      	str	r2, [r1, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8017b28:	2200      	movs	r2, #0

  /* Return function status */
  return HAL_OK;
 8017b2a:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdcmi);
 8017b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8017b30:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8017b32:	2002      	movs	r0, #2
}
 8017b34:	4770      	bx	lr
 8017b36:	bf00      	nop

08017b38 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8017b3a:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8017b3c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8017b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017b40:	2b02      	cmp	r3, #2
 8017b42:	d006      	beq.n	8017b52 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8017b44:	2301      	movs	r3, #1
 8017b46:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8017b4a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b50:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8017b52:	f7fe fe21 	bl	8016798 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8017b56:	bd08      	pop	{r3, pc}

08017b58 <HAL_DCMI_IRQHandler>:
{
 8017b58:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8017b5a:	6803      	ldr	r3, [r0, #0]
{
 8017b5c:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8017b5e:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8017b60:	0769      	lsls	r1, r5, #29
 8017b62:	d437      	bmi.n	8017bd4 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8017b64:	07aa      	lsls	r2, r5, #30
 8017b66:	d425      	bmi.n	8017bb4 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8017b68:	06eb      	lsls	r3, r5, #27
 8017b6a:	d41c      	bmi.n	8017ba6 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8017b6c:	0728      	lsls	r0, r5, #28
 8017b6e:	d413      	bmi.n	8017b98 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8017b70:	07e9      	lsls	r1, r5, #31
 8017b72:	d510      	bpl.n	8017b96 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8017b74:	6823      	ldr	r3, [r4, #0]
 8017b76:	681a      	ldr	r2, [r3, #0]
 8017b78:	0792      	lsls	r2, r2, #30
 8017b7a:	d503      	bpl.n	8017b84 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8017b7c:	68da      	ldr	r2, [r3, #12]
 8017b7e:	f022 021e 	bic.w	r2, r2, #30
 8017b82:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8017b84:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8017b86:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 8017b88:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8017b8a:	f022 0201 	bic.w	r2, r2, #1
 8017b8e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8017b90:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8017b92:	f7fe fdf5 	bl	8016780 <HAL_DCMI_FrameEventCallback>
}
 8017b96:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8017b98:	6823      	ldr	r3, [r4, #0]
 8017b9a:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8017b9c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8017b9e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8017ba0:	f7fe fdf4 	bl	801678c <HAL_DCMI_VsyncEventCallback>
 8017ba4:	e7e4      	b.n	8017b70 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8017ba6:	6823      	ldr	r3, [r4, #0]
 8017ba8:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8017baa:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8017bac:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8017bae:	f7fe fde1 	bl	8016774 <HAL_DCMI_LineEventCallback>
 8017bb2:	e7db      	b.n	8017b6c <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8017bb4:	6823      	ldr	r3, [r4, #0]
 8017bb6:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017bb8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8017bba:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8017bbc:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8017bbe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017bc0:	f043 0301 	orr.w	r3, r3, #1
 8017bc4:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8017bf0 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8017bc8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017bcc:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8017bce:	f000 fef5 	bl	80189bc <HAL_DMA_Abort_IT>
 8017bd2:	e7c9      	b.n	8017b68 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8017bd4:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017bd6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8017bd8:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8017bda:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017bdc:	f043 0302 	orr.w	r3, r3, #2
 8017be0:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017be2:	4b03      	ldr	r3, [pc, #12]	@ (8017bf0 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8017be4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8017be8:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8017bea:	f000 fee7 	bl	80189bc <HAL_DMA_Abort_IT>
 8017bee:	e7b9      	b.n	8017b64 <HAL_DCMI_IRQHandler+0xc>
 8017bf0:	08017b39 	.word	0x08017b39

08017bf4 <HAL_DCMI_ConfigCrop>:
{
 8017bf4:	4684      	mov	ip, r0
  __HAL_LOCK(hdcmi);
 8017bf6:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8017bfa:	2801      	cmp	r0, #1
 8017bfc:	d015      	beq.n	8017c2a <HAL_DCMI_ConfigCrop+0x36>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8017bfe:	2002      	movs	r0, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8017c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 8017c04:	2200      	movs	r2, #0
{
 8017c06:	b510      	push	{r4, lr}
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8017c08:	9c02      	ldr	r4, [sp, #8]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8017c0a:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8017c0e:	f88c 0035 	strb.w	r0, [ip, #53]	@ 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8017c12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017c16:	f8dc 0000 	ldr.w	r0, [ip]
 8017c1a:	6243      	str	r3, [r0, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8017c1c:	6201      	str	r1, [r0, #32]
  return HAL_OK;
 8017c1e:	4610      	mov	r0, r2
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8017c20:	f88c e035 	strb.w	lr, [ip, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8017c24:	f88c 2034 	strb.w	r2, [ip, #52]	@ 0x34
}
 8017c28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdcmi);
 8017c2a:	2002      	movs	r0, #2
}
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop

08017c30 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 8017c30:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
{
 8017c34:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 8017c36:	2a01      	cmp	r2, #1
 8017c38:	d010      	beq.n	8017c5c <HAL_DCMI_EnableCrop+0x2c>
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8017c3a:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8017c3c:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 8017c3e:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 8017c40:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8017c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8017c48:	6802      	ldr	r2, [r0, #0]
 8017c4a:	f042 0204 	orr.w	r2, r2, #4
 8017c4e:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8017c50:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 8017c52:	f883 c035 	strb.w	ip, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8017c56:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
  return HAL_OK;
 8017c5a:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8017c5c:	2002      	movs	r0, #2
}
 8017c5e:	4770      	bx	lr

08017c60 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017c60:	4936      	ldr	r1, [pc, #216]	@ (8017d3c <DMA_CalcBaseAndBitshift+0xdc>)
{
 8017c62:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	428b      	cmp	r3, r1
 8017c68:	d033      	beq.n	8017cd2 <DMA_CalcBaseAndBitshift+0x72>
 8017c6a:	3118      	adds	r1, #24
 8017c6c:	1a59      	subs	r1, r3, r1
 8017c6e:	fab1 f181 	clz	r1, r1
 8017c72:	0949      	lsrs	r1, r1, #5
 8017c74:	bb69      	cbnz	r1, 8017cd2 <DMA_CalcBaseAndBitshift+0x72>
 8017c76:	4832      	ldr	r0, [pc, #200]	@ (8017d40 <DMA_CalcBaseAndBitshift+0xe0>)
 8017c78:	4283      	cmp	r3, r0
 8017c7a:	d03e      	beq.n	8017cfa <DMA_CalcBaseAndBitshift+0x9a>
 8017c7c:	3018      	adds	r0, #24
 8017c7e:	4283      	cmp	r3, r0
 8017c80:	d03e      	beq.n	8017d00 <DMA_CalcBaseAndBitshift+0xa0>
 8017c82:	3018      	adds	r0, #24
 8017c84:	4283      	cmp	r3, r0
 8017c86:	d034      	beq.n	8017cf2 <DMA_CalcBaseAndBitshift+0x92>
 8017c88:	3018      	adds	r0, #24
 8017c8a:	4283      	cmp	r3, r0
 8017c8c:	d03b      	beq.n	8017d06 <DMA_CalcBaseAndBitshift+0xa6>
 8017c8e:	3018      	adds	r0, #24
 8017c90:	4283      	cmp	r3, r0
 8017c92:	d03e      	beq.n	8017d12 <DMA_CalcBaseAndBitshift+0xb2>
 8017c94:	3018      	adds	r0, #24
 8017c96:	4283      	cmp	r3, r0
 8017c98:	d02a      	beq.n	8017cf0 <DMA_CalcBaseAndBitshift+0x90>
 8017c9a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8017c9e:	4283      	cmp	r3, r0
 8017ca0:	d035      	beq.n	8017d0e <DMA_CalcBaseAndBitshift+0xae>
 8017ca2:	4928      	ldr	r1, [pc, #160]	@ (8017d44 <DMA_CalcBaseAndBitshift+0xe4>)
 8017ca4:	428b      	cmp	r3, r1
 8017ca6:	d031      	beq.n	8017d0c <DMA_CalcBaseAndBitshift+0xac>
 8017ca8:	3118      	adds	r1, #24
 8017caa:	428b      	cmp	r3, r1
 8017cac:	d034      	beq.n	8017d18 <DMA_CalcBaseAndBitshift+0xb8>
 8017cae:	3118      	adds	r1, #24
 8017cb0:	428b      	cmp	r3, r1
 8017cb2:	d034      	beq.n	8017d1e <DMA_CalcBaseAndBitshift+0xbe>
 8017cb4:	3118      	adds	r1, #24
 8017cb6:	428b      	cmp	r3, r1
 8017cb8:	d034      	beq.n	8017d24 <DMA_CalcBaseAndBitshift+0xc4>
 8017cba:	3118      	adds	r1, #24
 8017cbc:	428b      	cmp	r3, r1
 8017cbe:	d034      	beq.n	8017d2a <DMA_CalcBaseAndBitshift+0xca>
 8017cc0:	3118      	adds	r1, #24
 8017cc2:	428b      	cmp	r3, r1
 8017cc4:	d034      	beq.n	8017d30 <DMA_CalcBaseAndBitshift+0xd0>
 8017cc6:	3118      	adds	r1, #24
 8017cc8:	428b      	cmp	r3, r1
 8017cca:	d034      	beq.n	8017d36 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8017ccc:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8017cd0:	e011      	b.n	8017cf6 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017cd2:	b2db      	uxtb	r3, r3
 8017cd4:	491c      	ldr	r1, [pc, #112]	@ (8017d48 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8017cd6:	481d      	ldr	r0, [pc, #116]	@ (8017d4c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017cd8:	3b10      	subs	r3, #16
 8017cda:	fba1 1303 	umull	r1, r3, r1, r3
{
 8017cde:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017ce0:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8017ce2:	4c1b      	ldr	r4, [pc, #108]	@ (8017d50 <DMA_CalcBaseAndBitshift+0xf0>)
 8017ce4:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8017ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8017cea:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8017cee:	4770      	bx	lr
 8017cf0:	2116      	movs	r1, #22
 8017cf2:	4818      	ldr	r0, [pc, #96]	@ (8017d54 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8017cf4:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8017cf6:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8017cf8:	4770      	bx	lr
 8017cfa:	2110      	movs	r1, #16
 8017cfc:	4813      	ldr	r0, [pc, #76]	@ (8017d4c <DMA_CalcBaseAndBitshift+0xec>)
 8017cfe:	e7f9      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d00:	2116      	movs	r1, #22
 8017d02:	4812      	ldr	r0, [pc, #72]	@ (8017d4c <DMA_CalcBaseAndBitshift+0xec>)
 8017d04:	e7f6      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d06:	2106      	movs	r1, #6
 8017d08:	4812      	ldr	r0, [pc, #72]	@ (8017d54 <DMA_CalcBaseAndBitshift+0xf4>)
 8017d0a:	e7f3      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d0c:	2106      	movs	r1, #6
 8017d0e:	4812      	ldr	r0, [pc, #72]	@ (8017d58 <DMA_CalcBaseAndBitshift+0xf8>)
 8017d10:	e7f0      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d12:	2110      	movs	r1, #16
 8017d14:	480f      	ldr	r0, [pc, #60]	@ (8017d54 <DMA_CalcBaseAndBitshift+0xf4>)
 8017d16:	e7ed      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d18:	2110      	movs	r1, #16
 8017d1a:	480f      	ldr	r0, [pc, #60]	@ (8017d58 <DMA_CalcBaseAndBitshift+0xf8>)
 8017d1c:	e7ea      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d1e:	2116      	movs	r1, #22
 8017d20:	480d      	ldr	r0, [pc, #52]	@ (8017d58 <DMA_CalcBaseAndBitshift+0xf8>)
 8017d22:	e7e7      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d24:	2100      	movs	r1, #0
 8017d26:	480d      	ldr	r0, [pc, #52]	@ (8017d5c <DMA_CalcBaseAndBitshift+0xfc>)
 8017d28:	e7e4      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d2a:	2106      	movs	r1, #6
 8017d2c:	480b      	ldr	r0, [pc, #44]	@ (8017d5c <DMA_CalcBaseAndBitshift+0xfc>)
 8017d2e:	e7e1      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d30:	2110      	movs	r1, #16
 8017d32:	480a      	ldr	r0, [pc, #40]	@ (8017d5c <DMA_CalcBaseAndBitshift+0xfc>)
 8017d34:	e7de      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d36:	2116      	movs	r1, #22
 8017d38:	4808      	ldr	r0, [pc, #32]	@ (8017d5c <DMA_CalcBaseAndBitshift+0xfc>)
 8017d3a:	e7db      	b.n	8017cf4 <DMA_CalcBaseAndBitshift+0x94>
 8017d3c:	40020010 	.word	0x40020010
 8017d40:	40020040 	.word	0x40020040
 8017d44:	40020428 	.word	0x40020428
 8017d48:	aaaaaaab 	.word	0xaaaaaaab
 8017d4c:	40020000 	.word	0x40020000
 8017d50:	08057e9c 	.word	0x08057e9c
 8017d54:	40020004 	.word	0x40020004
 8017d58:	40020400 	.word	0x40020400
 8017d5c:	40020404 	.word	0x40020404

08017d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8017d60:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017d62:	4b28      	ldr	r3, [pc, #160]	@ (8017e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8017d64:	4928      	ldr	r1, [pc, #160]	@ (8017e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8017d66:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017d68:	4d28      	ldr	r5, [pc, #160]	@ (8017e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8017d6a:	4c29      	ldr	r4, [pc, #164]	@ (8017e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8017d6c:	42aa      	cmp	r2, r5
 8017d6e:	bf18      	it	ne
 8017d70:	429a      	cmpne	r2, r3
 8017d72:	bf0c      	ite	eq
 8017d74:	2301      	moveq	r3, #1
 8017d76:	2300      	movne	r3, #0
 8017d78:	428a      	cmp	r2, r1
 8017d7a:	bf08      	it	eq
 8017d7c:	f043 0301 	orreq.w	r3, r3, #1
 8017d80:	3128      	adds	r1, #40	@ 0x28
 8017d82:	42a2      	cmp	r2, r4
 8017d84:	bf08      	it	eq
 8017d86:	f043 0301 	orreq.w	r3, r3, #1
 8017d8a:	3428      	adds	r4, #40	@ 0x28
 8017d8c:	428a      	cmp	r2, r1
 8017d8e:	bf08      	it	eq
 8017d90:	f043 0301 	orreq.w	r3, r3, #1
 8017d94:	3128      	adds	r1, #40	@ 0x28
 8017d96:	42a2      	cmp	r2, r4
 8017d98:	bf08      	it	eq
 8017d9a:	f043 0301 	orreq.w	r3, r3, #1
 8017d9e:	428a      	cmp	r2, r1
 8017da0:	bf08      	it	eq
 8017da2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017da6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017da8:	b913      	cbnz	r3, 8017db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8017daa:	4b1a      	ldr	r3, [pc, #104]	@ (8017e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d111      	bne.n	8017dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8017db0:	f1a1 0308 	sub.w	r3, r1, #8
 8017db4:	4c18      	ldr	r4, [pc, #96]	@ (8017e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8017db6:	4a19      	ldr	r2, [pc, #100]	@ (8017e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017db8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8017dba:	fba4 4303 	umull	r4, r3, r4, r3
 8017dbe:	4c18      	ldr	r4, [pc, #96]	@ (8017e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8017dc0:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8017dc2:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017dc6:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8017dc8:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017dca:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8017dcc:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8017dd0:	bc30      	pop	{r4, r5}
 8017dd2:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017dd4:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8017dd8:	4912      	ldr	r1, [pc, #72]	@ (8017e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017dda:	4c13      	ldr	r4, [pc, #76]	@ (8017e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8017ddc:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017dde:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8017de2:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017de4:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8017de8:	d908      	bls.n	8017dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017dea:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8017dee:	4a0f      	ldr	r2, [pc, #60]	@ (8017e2c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017df0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8017df2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017df4:	40a1      	lsls	r1, r4
 8017df6:	4c0e      	ldr	r4, [pc, #56]	@ (8017e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8017df8:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017dfa:	e7e6      	b.n	8017dca <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8017dfc:	3308      	adds	r3, #8
 8017dfe:	461c      	mov	r4, r3
 8017e00:	e7f5      	b.n	8017dee <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8017e02:	bf00      	nop
 8017e04:	58025408 	.word	0x58025408
 8017e08:	58025430 	.word	0x58025430
 8017e0c:	5802541c 	.word	0x5802541c
 8017e10:	58025444 	.word	0x58025444
 8017e14:	58025494 	.word	0x58025494
 8017e18:	cccccccd 	.word	0xcccccccd
 8017e1c:	16009600 	.word	0x16009600
 8017e20:	58025880 	.word	0x58025880
 8017e24:	bffdfbf0 	.word	0xbffdfbf0
 8017e28:	aaaaaaab 	.word	0xaaaaaaab
 8017e2c:	10008200 	.word	0x10008200
 8017e30:	40020880 	.word	0x40020880

08017e34 <HAL_DMA_Init>:
{
 8017e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e38:	4605      	mov	r5, r0
 8017e3a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8017e3c:	f7ff fce4 	bl	8017808 <HAL_GetTick>
  if(hdma == NULL)
 8017e40:	2d00      	cmp	r5, #0
 8017e42:	f000 81a1 	beq.w	8018188 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017e46:	682c      	ldr	r4, [r5, #0]
 8017e48:	4606      	mov	r6, r0
 8017e4a:	4bac      	ldr	r3, [pc, #688]	@ (80180fc <HAL_DMA_Init+0x2c8>)
 8017e4c:	4aac      	ldr	r2, [pc, #688]	@ (8018100 <HAL_DMA_Init+0x2cc>)
 8017e4e:	4294      	cmp	r4, r2
 8017e50:	bf18      	it	ne
 8017e52:	429c      	cmpne	r4, r3
 8017e54:	f102 0218 	add.w	r2, r2, #24
 8017e58:	bf0c      	ite	eq
 8017e5a:	2301      	moveq	r3, #1
 8017e5c:	2300      	movne	r3, #0
 8017e5e:	4294      	cmp	r4, r2
 8017e60:	bf08      	it	eq
 8017e62:	f043 0301 	orreq.w	r3, r3, #1
 8017e66:	3218      	adds	r2, #24
 8017e68:	4294      	cmp	r4, r2
 8017e6a:	bf08      	it	eq
 8017e6c:	f043 0301 	orreq.w	r3, r3, #1
 8017e70:	3218      	adds	r2, #24
 8017e72:	4294      	cmp	r4, r2
 8017e74:	bf08      	it	eq
 8017e76:	f043 0301 	orreq.w	r3, r3, #1
 8017e7a:	3218      	adds	r2, #24
 8017e7c:	4294      	cmp	r4, r2
 8017e7e:	bf08      	it	eq
 8017e80:	f043 0301 	orreq.w	r3, r3, #1
 8017e84:	3218      	adds	r2, #24
 8017e86:	4294      	cmp	r4, r2
 8017e88:	bf08      	it	eq
 8017e8a:	f043 0301 	orreq.w	r3, r3, #1
 8017e8e:	3218      	adds	r2, #24
 8017e90:	4294      	cmp	r4, r2
 8017e92:	bf08      	it	eq
 8017e94:	f043 0301 	orreq.w	r3, r3, #1
 8017e98:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8017e9c:	4294      	cmp	r4, r2
 8017e9e:	bf08      	it	eq
 8017ea0:	f043 0301 	orreq.w	r3, r3, #1
 8017ea4:	3218      	adds	r2, #24
 8017ea6:	4294      	cmp	r4, r2
 8017ea8:	bf08      	it	eq
 8017eaa:	f043 0301 	orreq.w	r3, r3, #1
 8017eae:	3218      	adds	r2, #24
 8017eb0:	4294      	cmp	r4, r2
 8017eb2:	bf08      	it	eq
 8017eb4:	f043 0301 	orreq.w	r3, r3, #1
 8017eb8:	3218      	adds	r2, #24
 8017eba:	4294      	cmp	r4, r2
 8017ebc:	bf08      	it	eq
 8017ebe:	f043 0301 	orreq.w	r3, r3, #1
 8017ec2:	3218      	adds	r2, #24
 8017ec4:	4294      	cmp	r4, r2
 8017ec6:	bf08      	it	eq
 8017ec8:	f043 0301 	orreq.w	r3, r3, #1
 8017ecc:	3218      	adds	r2, #24
 8017ece:	4294      	cmp	r4, r2
 8017ed0:	bf08      	it	eq
 8017ed2:	f043 0301 	orreq.w	r3, r3, #1
 8017ed6:	3218      	adds	r2, #24
 8017ed8:	4294      	cmp	r4, r2
 8017eda:	bf08      	it	eq
 8017edc:	f043 0301 	orreq.w	r3, r3, #1
 8017ee0:	b91b      	cbnz	r3, 8017eea <HAL_DMA_Init+0xb6>
 8017ee2:	4b88      	ldr	r3, [pc, #544]	@ (8018104 <HAL_DMA_Init+0x2d0>)
 8017ee4:	429c      	cmp	r4, r3
 8017ee6:	f040 8196 	bne.w	8018216 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8017eea:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8017eec:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8017eee:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8017ef2:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8017ef6:	6823      	ldr	r3, [r4, #0]
 8017ef8:	f023 0301 	bic.w	r3, r3, #1
 8017efc:	6023      	str	r3, [r4, #0]
 8017efe:	e006      	b.n	8017f0e <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017f00:	f7ff fc82 	bl	8017808 <HAL_GetTick>
 8017f04:	1b80      	subs	r0, r0, r6
 8017f06:	2805      	cmp	r0, #5
 8017f08:	f200 8142 	bhi.w	8018190 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017f0c:	682c      	ldr	r4, [r5, #0]
 8017f0e:	6823      	ldr	r3, [r4, #0]
 8017f10:	07df      	lsls	r7, r3, #31
 8017f12:	d4f5      	bmi.n	8017f00 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8017f14:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017f18:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8017f1a:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017f1c:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8017f1e:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017f20:	430b      	orrs	r3, r1
 8017f22:	6969      	ldr	r1, [r5, #20]
 8017f24:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017f26:	69e9      	ldr	r1, [r5, #28]
 8017f28:	4313      	orrs	r3, r2
 8017f2a:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017f2c:	4976      	ldr	r1, [pc, #472]	@ (8018108 <HAL_DMA_Init+0x2d4>)
 8017f2e:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8017f30:	6a28      	ldr	r0, [r5, #32]
 8017f32:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8017f34:	4875      	ldr	r0, [pc, #468]	@ (801810c <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8017f36:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017f38:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017f3a:	2904      	cmp	r1, #4
 8017f3c:	f000 813d 	beq.w	80181ba <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8017f40:	6800      	ldr	r0, [r0, #0]
 8017f42:	f36f 000f 	bfc	r0, #0, #16
 8017f46:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8017f4a:	f080 80f1 	bcs.w	8018130 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017f4e:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8017f50:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017f52:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8017f56:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8017f58:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017f5a:	4628      	mov	r0, r5
 8017f5c:	f7ff fe80 	bl	8017c60 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017f60:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8017f62:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017f64:	496a      	ldr	r1, [pc, #424]	@ (8018110 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017f66:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017f6a:	4f6a      	ldr	r7, [pc, #424]	@ (8018114 <HAL_DMA_Init+0x2e0>)
 8017f6c:	1a61      	subs	r1, r4, r1
 8017f6e:	4e6a      	ldr	r6, [pc, #424]	@ (8018118 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017f70:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017f72:	4a6a      	ldr	r2, [pc, #424]	@ (801811c <HAL_DMA_Init+0x2e8>)
 8017f74:	fab1 f181 	clz	r1, r1
 8017f78:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017f7a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017f7c:	eba4 0a02 	sub.w	sl, r4, r2
 8017f80:	4b67      	ldr	r3, [pc, #412]	@ (8018120 <HAL_DMA_Init+0x2ec>)
 8017f82:	0949      	lsrs	r1, r1, #5
 8017f84:	4a5e      	ldr	r2, [pc, #376]	@ (8018100 <HAL_DMA_Init+0x2cc>)
 8017f86:	faba fa8a 	clz	sl, sl
 8017f8a:	eba4 0903 	sub.w	r9, r4, r3
 8017f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80180fc <HAL_DMA_Init+0x2c8>)
 8017f90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017f94:	fab7 f787 	clz	r7, r7
 8017f98:	4294      	cmp	r4, r2
 8017f9a:	bf18      	it	ne
 8017f9c:	429c      	cmpne	r4, r3
 8017f9e:	f102 0218 	add.w	r2, r2, #24
 8017fa2:	fab9 f989 	clz	r9, r9
 8017fa6:	eba4 0606 	sub.w	r6, r4, r6
 8017faa:	bf0c      	ite	eq
 8017fac:	2301      	moveq	r3, #1
 8017fae:	2300      	movne	r3, #0
 8017fb0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017fb4:	fab6 f686 	clz	r6, r6
 8017fb8:	4294      	cmp	r4, r2
 8017fba:	bf08      	it	eq
 8017fbc:	f043 0301 	orreq.w	r3, r3, #1
 8017fc0:	3218      	adds	r2, #24
 8017fc2:	097f      	lsrs	r7, r7, #5
 8017fc4:	4294      	cmp	r4, r2
 8017fc6:	bf08      	it	eq
 8017fc8:	f043 0301 	orreq.w	r3, r3, #1
 8017fcc:	3218      	adds	r2, #24
 8017fce:	0976      	lsrs	r6, r6, #5
 8017fd0:	4294      	cmp	r4, r2
 8017fd2:	bf08      	it	eq
 8017fd4:	f043 0301 	orreq.w	r3, r3, #1
 8017fd8:	3218      	adds	r2, #24
 8017fda:	4294      	cmp	r4, r2
 8017fdc:	bf08      	it	eq
 8017fde:	f043 0301 	orreq.w	r3, r3, #1
 8017fe2:	3218      	adds	r2, #24
 8017fe4:	4294      	cmp	r4, r2
 8017fe6:	bf08      	it	eq
 8017fe8:	f043 0301 	orreq.w	r3, r3, #1
 8017fec:	3218      	adds	r2, #24
 8017fee:	4294      	cmp	r4, r2
 8017ff0:	bf08      	it	eq
 8017ff2:	f043 0301 	orreq.w	r3, r3, #1
 8017ff6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8017ffa:	4294      	cmp	r4, r2
 8017ffc:	bf08      	it	eq
 8017ffe:	f043 0301 	orreq.w	r3, r3, #1
 8018002:	3218      	adds	r2, #24
 8018004:	4294      	cmp	r4, r2
 8018006:	bf08      	it	eq
 8018008:	f043 0301 	orreq.w	r3, r3, #1
 801800c:	3218      	adds	r2, #24
 801800e:	4294      	cmp	r4, r2
 8018010:	bf08      	it	eq
 8018012:	f043 0301 	orreq.w	r3, r3, #1
 8018016:	3218      	adds	r2, #24
 8018018:	4294      	cmp	r4, r2
 801801a:	bf08      	it	eq
 801801c:	f043 0301 	orreq.w	r3, r3, #1
 8018020:	3218      	adds	r2, #24
 8018022:	4294      	cmp	r4, r2
 8018024:	bf08      	it	eq
 8018026:	f043 0301 	orreq.w	r3, r3, #1
 801802a:	3218      	adds	r2, #24
 801802c:	4294      	cmp	r4, r2
 801802e:	bf08      	it	eq
 8018030:	f043 0301 	orreq.w	r3, r3, #1
 8018034:	3218      	adds	r2, #24
 8018036:	4294      	cmp	r4, r2
 8018038:	bf08      	it	eq
 801803a:	f043 0301 	orreq.w	r3, r3, #1
 801803e:	3218      	adds	r2, #24
 8018040:	4294      	cmp	r4, r2
 8018042:	bf08      	it	eq
 8018044:	f043 0301 	orreq.w	r3, r3, #1
 8018048:	4a36      	ldr	r2, [pc, #216]	@ (8018124 <HAL_DMA_Init+0x2f0>)
 801804a:	ea4a 0303 	orr.w	r3, sl, r3
 801804e:	eba4 0802 	sub.w	r8, r4, r2
 8018052:	323c      	adds	r2, #60	@ 0x3c
 8018054:	430b      	orrs	r3, r1
 8018056:	fab8 f888 	clz	r8, r8
 801805a:	eba4 0b02 	sub.w	fp, r4, r2
 801805e:	3214      	adds	r2, #20
 8018060:	ea49 0303 	orr.w	r3, r9, r3
 8018064:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018068:	fabb fb8b 	clz	fp, fp
 801806c:	1aa2      	subs	r2, r4, r2
 801806e:	ea48 0303 	orr.w	r3, r8, r3
 8018072:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018076:	fab2 f282 	clz	r2, r2
 801807a:	433b      	orrs	r3, r7
 801807c:	0952      	lsrs	r2, r2, #5
 801807e:	4333      	orrs	r3, r6
 8018080:	9201      	str	r2, [sp, #4]
 8018082:	ea5b 0303 	orrs.w	r3, fp, r3
 8018086:	d100      	bne.n	801808a <HAL_DMA_Init+0x256>
 8018088:	b382      	cbz	r2, 80180ec <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801808a:	4628      	mov	r0, r5
 801808c:	9100      	str	r1, [sp, #0]
 801808e:	f7ff fe67 	bl	8017d60 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018092:	68ab      	ldr	r3, [r5, #8]
 8018094:	9900      	ldr	r1, [sp, #0]
 8018096:	2b80      	cmp	r3, #128	@ 0x80
 8018098:	f000 8083 	beq.w	80181a2 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801809c:	686a      	ldr	r2, [r5, #4]
 801809e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80180a0:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80180a2:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80180a4:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80180a8:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80180aa:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80180ac:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80180b0:	d87e      	bhi.n	80181b0 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80180b2:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80180b6:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80180b8:	ea49 090a 	orr.w	r9, r9, sl
 80180bc:	ea48 0809 	orr.w	r8, r8, r9
 80180c0:	ea47 0708 	orr.w	r7, r7, r8
 80180c4:	433e      	orrs	r6, r7
 80180c6:	ea5b 0606 	orrs.w	r6, fp, r6
 80180ca:	d103      	bne.n	80180d4 <HAL_DMA_Init+0x2a0>
 80180cc:	9b01      	ldr	r3, [sp, #4]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	f000 811d 	beq.w	801830e <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80180d4:	4a14      	ldr	r2, [pc, #80]	@ (8018128 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80180d6:	4915      	ldr	r1, [pc, #84]	@ (801812c <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80180d8:	4402      	add	r2, r0
 80180da:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80180dc:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80180de:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80180e0:	40a3      	lsls	r3, r4
 80180e2:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 80180e6:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80180e8:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80180ea:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80180ec:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80180ee:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80180f0:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80180f2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 80180f6:	b003      	add	sp, #12
 80180f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180fc:	40020010 	.word	0x40020010
 8018100:	40020028 	.word	0x40020028
 8018104:	400204b8 	.word	0x400204b8
 8018108:	fe10803f 	.word	0xfe10803f
 801810c:	5c001000 	.word	0x5c001000
 8018110:	5802541c 	.word	0x5802541c
 8018114:	58025458 	.word	0x58025458
 8018118:	5802546c 	.word	0x5802546c
 801811c:	58025408 	.word	0x58025408
 8018120:	58025430 	.word	0x58025430
 8018124:	58025444 	.word	0x58025444
 8018128:	1600963f 	.word	0x1600963f
 801812c:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8018130:	6868      	ldr	r0, [r5, #4]
 8018132:	282e      	cmp	r0, #46	@ 0x2e
 8018134:	d932      	bls.n	801819c <HAL_DMA_Init+0x368>
 8018136:	383f      	subs	r0, #63	@ 0x3f
 8018138:	2813      	cmp	r0, #19
 801813a:	d806      	bhi.n	801814a <HAL_DMA_Init+0x316>
 801813c:	4e7a      	ldr	r6, [pc, #488]	@ (8018328 <HAL_DMA_Init+0x4f4>)
 801813e:	fa26 f000 	lsr.w	r0, r6, r0
 8018142:	07c0      	lsls	r0, r0, #31
 8018144:	d501      	bpl.n	801814a <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8018146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801814a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801814c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801814e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018150:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8018154:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018158:	f47f aefe 	bne.w	8017f58 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801815c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 801815e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8018160:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018162:	2800      	cmp	r0, #0
 8018164:	f43f aef8 	beq.w	8017f58 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018168:	2a00      	cmp	r2, #0
 801816a:	d138      	bne.n	80181de <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 801816c:	2901      	cmp	r1, #1
 801816e:	d04d      	beq.n	801820c <HAL_DMA_Init+0x3d8>
 8018170:	f031 0202 	bics.w	r2, r1, #2
 8018174:	f47f aef0 	bne.w	8017f58 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018178:	01c2      	lsls	r2, r0, #7
 801817a:	f57f aeed 	bpl.w	8017f58 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801817e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8018180:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018182:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8018184:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8018188:	2001      	movs	r0, #1
}
 801818a:	b003      	add	sp, #12
 801818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018190:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8018192:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018194:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8018196:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 801819a:	e7f5      	b.n	8018188 <HAL_DMA_Init+0x354>
 801819c:	2828      	cmp	r0, #40	@ 0x28
 801819e:	d9d4      	bls.n	801814a <HAL_DMA_Init+0x316>
 80181a0:	e7d1      	b.n	8018146 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80181a2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80181a4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80181a6:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80181aa:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80181ac:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80181ae:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80181b0:	2300      	movs	r3, #0
 80181b2:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80181b6:	676b      	str	r3, [r5, #116]	@ 0x74
 80181b8:	e798      	b.n	80180ec <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80181ba:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80181bc:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80181c0:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80181c4:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80181c6:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80181ca:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80181ce:	d2af      	bcs.n	8018130 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80181d0:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80181d2:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80181d4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80181d8:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80181dc:	e7bf      	b.n	801815e <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80181de:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80181e2:	d004      	beq.n	80181ee <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 80181e4:	2902      	cmp	r1, #2
 80181e6:	d9ca      	bls.n	801817e <HAL_DMA_Init+0x34a>
 80181e8:	2903      	cmp	r1, #3
 80181ea:	d0c5      	beq.n	8018178 <HAL_DMA_Init+0x344>
 80181ec:	e6b4      	b.n	8017f58 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 80181ee:	2903      	cmp	r1, #3
 80181f0:	f63f aeb2 	bhi.w	8017f58 <HAL_DMA_Init+0x124>
 80181f4:	a201      	add	r2, pc, #4	@ (adr r2, 80181fc <HAL_DMA_Init+0x3c8>)
 80181f6:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80181fa:	bf00      	nop
 80181fc:	0801817f 	.word	0x0801817f
 8018200:	08018179 	.word	0x08018179
 8018204:	0801817f 	.word	0x0801817f
 8018208:	0801820d 	.word	0x0801820d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801820c:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8018210:	f47f aea2 	bne.w	8017f58 <HAL_DMA_Init+0x124>
 8018214:	e7b3      	b.n	801817e <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8018216:	4a45      	ldr	r2, [pc, #276]	@ (801832c <HAL_DMA_Init+0x4f8>)
 8018218:	4945      	ldr	r1, [pc, #276]	@ (8018330 <HAL_DMA_Init+0x4fc>)
 801821a:	4b46      	ldr	r3, [pc, #280]	@ (8018334 <HAL_DMA_Init+0x500>)
 801821c:	eba4 0a02 	sub.w	sl, r4, r2
 8018220:	1a61      	subs	r1, r4, r1
 8018222:	4f45      	ldr	r7, [pc, #276]	@ (8018338 <HAL_DMA_Init+0x504>)
 8018224:	eba4 0903 	sub.w	r9, r4, r3
 8018228:	faba fa8a 	clz	sl, sl
 801822c:	3314      	adds	r3, #20
 801822e:	fab1 f181 	clz	r1, r1
 8018232:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018236:	fab9 f989 	clz	r9, r9
 801823a:	eba4 0803 	sub.w	r8, r4, r3
 801823e:	0949      	lsrs	r1, r1, #5
 8018240:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018244:	1be7      	subs	r7, r4, r7
 8018246:	fab8 f888 	clz	r8, r8
 801824a:	ea4a 0301 	orr.w	r3, sl, r1
 801824e:	4e3b      	ldr	r6, [pc, #236]	@ (801833c <HAL_DMA_Init+0x508>)
 8018250:	3278      	adds	r2, #120	@ 0x78
 8018252:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018256:	ea49 0303 	orr.w	r3, r9, r3
 801825a:	fab7 f787 	clz	r7, r7
 801825e:	1ba6      	subs	r6, r4, r6
 8018260:	eba4 0b02 	sub.w	fp, r4, r2
 8018264:	ea48 0303 	orr.w	r3, r8, r3
 8018268:	097f      	lsrs	r7, r7, #5
 801826a:	fab6 f686 	clz	r6, r6
 801826e:	3214      	adds	r2, #20
 8018270:	fabb fb8b 	clz	fp, fp
 8018274:	433b      	orrs	r3, r7
 8018276:	0976      	lsrs	r6, r6, #5
 8018278:	1aa2      	subs	r2, r4, r2
 801827a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801827e:	4333      	orrs	r3, r6
 8018280:	fab2 f282 	clz	r2, r2
 8018284:	ea5b 0303 	orrs.w	r3, fp, r3
 8018288:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801828c:	9201      	str	r2, [sp, #4]
 801828e:	d101      	bne.n	8018294 <HAL_DMA_Init+0x460>
 8018290:	2a00      	cmp	r2, #0
 8018292:	d043      	beq.n	801831c <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8018294:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8018296:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8018350 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 801829a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 801829e:	2300      	movs	r3, #0
 80182a0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80182a4:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80182a6:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80182a8:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80182aa:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80182ae:	d033      	beq.n	8018318 <HAL_DMA_Init+0x4e4>
 80182b0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80182b4:	fab3 f383 	clz	r3, r3
 80182b8:	095b      	lsrs	r3, r3, #5
 80182ba:	0398      	lsls	r0, r3, #14
 80182bc:	9100      	str	r1, [sp, #0]
 80182be:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80182c2:	ea43 0c02 	orr.w	ip, r3, r2
 80182c6:	696a      	ldr	r2, [r5, #20]
 80182c8:	69ab      	ldr	r3, [r5, #24]
 80182ca:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80182ce:	4a1c      	ldr	r2, [pc, #112]	@ (8018340 <HAL_DMA_Init+0x50c>)
 80182d0:	ea4c 0c03 	orr.w	ip, ip, r3
 80182d4:	69eb      	ldr	r3, [r5, #28]
 80182d6:	4422      	add	r2, r4
 80182d8:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80182dc:	6a2b      	ldr	r3, [r5, #32]
 80182de:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 80182e2:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80182e6:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80182e8:	4b16      	ldr	r3, [pc, #88]	@ (8018344 <HAL_DMA_Init+0x510>)
 80182ea:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80182ee:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80182f0:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80182f2:	091b      	lsrs	r3, r3, #4
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80182f8:	f7ff fcb2 	bl	8017c60 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80182fc:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80182fe:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018300:	9900      	ldr	r1, [sp, #0]
 8018302:	f003 001f 	and.w	r0, r3, #31
 8018306:	2301      	movs	r3, #1
 8018308:	4083      	lsls	r3, r0
 801830a:	6053      	str	r3, [r2, #4]
 801830c:	e6bd      	b.n	801808a <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801830e:	4a0e      	ldr	r2, [pc, #56]	@ (8018348 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8018310:	490e      	ldr	r1, [pc, #56]	@ (801834c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8018312:	4402      	add	r2, r0
 8018314:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8018316:	e6e1      	b.n	80180dc <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8018318:	2010      	movs	r0, #16
 801831a:	e7cf      	b.n	80182bc <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801831c:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 801831e:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018320:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8018322:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8018326:	e72f      	b.n	8018188 <HAL_DMA_Init+0x354>
 8018328:	000f030f 	.word	0x000f030f
 801832c:	58025408 	.word	0x58025408
 8018330:	5802541c 	.word	0x5802541c
 8018334:	58025430 	.word	0x58025430
 8018338:	58025458 	.word	0x58025458
 801833c:	5802546c 	.word	0x5802546c
 8018340:	a7fdabf8 	.word	0xa7fdabf8
 8018344:	cccccccd 	.word	0xcccccccd
 8018348:	1000823f 	.word	0x1000823f
 801834c:	40020940 	.word	0x40020940
 8018350:	fffe000f 	.word	0xfffe000f

08018354 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8018354:	2800      	cmp	r0, #0
 8018356:	f000 8221 	beq.w	801879c <HAL_DMA_Start_IT+0x448>
{
 801835a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 801835e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8018362:	2c01      	cmp	r4, #1
 8018364:	f000 8217 	beq.w	8018796 <HAL_DMA_Start_IT+0x442>
 8018368:	2401      	movs	r4, #1
 801836a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 801836e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8018372:	2c01      	cmp	r4, #1
 8018374:	d008      	beq.n	8018388 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 801837a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801837c:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801837e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8018382:	2001      	movs	r0, #1
}
 8018384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8018388:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801838a:	4e69      	ldr	r6, [pc, #420]	@ (8018530 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801838c:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 8018538 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8018390:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018394:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8018396:	4d67      	ldr	r5, [pc, #412]	@ (8018534 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018398:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 801839a:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801839c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801854c <HAL_DMA_Start_IT+0x1f8>
 80183a0:	4574      	cmp	r4, lr
 80183a2:	bf18      	it	ne
 80183a4:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 80183a6:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8018550 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80183aa:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 80183ae:	bf0c      	ite	eq
 80183b0:	2601      	moveq	r6, #1
 80183b2:	2600      	movne	r6, #0
 80183b4:	4544      	cmp	r4, r8
 80183b6:	bf14      	ite	ne
 80183b8:	46b1      	movne	r9, r6
 80183ba:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 80183be:	42ac      	cmp	r4, r5
 80183c0:	bf18      	it	ne
 80183c2:	4564      	cmpne	r4, ip
 80183c4:	bf0c      	ite	eq
 80183c6:	2501      	moveq	r5, #1
 80183c8:	2500      	movne	r5, #0
 80183ca:	f040 80c3 	bne.w	8018554 <HAL_DMA_Start_IT+0x200>
 80183ce:	f8d4 c000 	ldr.w	ip, [r4]
 80183d2:	f02c 0c01 	bic.w	ip, ip, #1
 80183d6:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 80183da:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80183de:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 80183e2:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80183e4:	f1bc 0f00 	cmp.w	ip, #0
 80183e8:	d007      	beq.n	80183fa <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80183ea:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80183ee:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80183f0:	b91d      	cbnz	r5, 80183fa <HAL_DMA_Start_IT+0xa6>
 80183f2:	f1b9 0f00 	cmp.w	r9, #0
 80183f6:	f000 8130 	beq.w	801865a <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80183fa:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 80183fc:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8018400:	f007 081f 	and.w	r8, r7, #31
 8018404:	fa0e fe08 	lsl.w	lr, lr, r8
 8018408:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801840c:	6827      	ldr	r7, [r4, #0]
 801840e:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8018412:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8018414:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018416:	6883      	ldr	r3, [r0, #8]
 8018418:	2b40      	cmp	r3, #64	@ 0x40
 801841a:	f000 81c1 	beq.w	80187a0 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801841e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8018420:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8018422:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018424:	2d00      	cmp	r5, #0
 8018426:	f040 81a1 	bne.w	801876c <HAL_DMA_Start_IT+0x418>
 801842a:	4b43      	ldr	r3, [pc, #268]	@ (8018538 <HAL_DMA_Start_IT+0x1e4>)
 801842c:	429c      	cmp	r4, r3
 801842e:	f000 81de 	beq.w	80187ee <HAL_DMA_Start_IT+0x49a>
 8018432:	3318      	adds	r3, #24
 8018434:	429c      	cmp	r4, r3
 8018436:	f000 81f6 	beq.w	8018826 <HAL_DMA_Start_IT+0x4d2>
 801843a:	f1b9 0f00 	cmp.w	r9, #0
 801843e:	f040 81c7 	bne.w	80187d0 <HAL_DMA_Start_IT+0x47c>
 8018442:	4b3e      	ldr	r3, [pc, #248]	@ (801853c <HAL_DMA_Start_IT+0x1e8>)
 8018444:	429c      	cmp	r4, r3
 8018446:	f000 8201 	beq.w	801884c <HAL_DMA_Start_IT+0x4f8>
 801844a:	4b3d      	ldr	r3, [pc, #244]	@ (8018540 <HAL_DMA_Start_IT+0x1ec>)
 801844c:	429c      	cmp	r4, r3
 801844e:	f000 8209 	beq.w	8018864 <HAL_DMA_Start_IT+0x510>
 8018452:	3318      	adds	r3, #24
 8018454:	429c      	cmp	r4, r3
 8018456:	f000 8223 	beq.w	80188a0 <HAL_DMA_Start_IT+0x54c>
 801845a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 801845e:	429c      	cmp	r4, r3
 8018460:	f000 8233 	beq.w	80188ca <HAL_DMA_Start_IT+0x576>
 8018464:	3318      	adds	r3, #24
 8018466:	429c      	cmp	r4, r3
 8018468:	f000 8242 	beq.w	80188f0 <HAL_DMA_Start_IT+0x59c>
 801846c:	3318      	adds	r3, #24
 801846e:	429c      	cmp	r4, r3
 8018470:	f000 8249 	beq.w	8018906 <HAL_DMA_Start_IT+0x5b2>
 8018474:	3318      	adds	r3, #24
 8018476:	429c      	cmp	r4, r3
 8018478:	f000 8250 	beq.w	801891c <HAL_DMA_Start_IT+0x5c8>
 801847c:	3318      	adds	r3, #24
 801847e:	429c      	cmp	r4, r3
 8018480:	f000 8257 	beq.w	8018932 <HAL_DMA_Start_IT+0x5de>
 8018484:	3318      	adds	r3, #24
 8018486:	429c      	cmp	r4, r3
 8018488:	f000 8267 	beq.w	801895a <HAL_DMA_Start_IT+0x606>
 801848c:	3318      	adds	r3, #24
 801848e:	429c      	cmp	r4, r3
 8018490:	f000 8265 	beq.w	801895e <HAL_DMA_Start_IT+0x60a>
 8018494:	3318      	adds	r3, #24
 8018496:	429c      	cmp	r4, r3
 8018498:	f000 8275 	beq.w	8018986 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801849c:	6823      	ldr	r3, [r4, #0]
 801849e:	f023 030e 	bic.w	r3, r3, #14
 80184a2:	f043 030a 	orr.w	r3, r3, #10
 80184a6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80184a8:	b11a      	cbz	r2, 80184b2 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80184aa:	6823      	ldr	r3, [r4, #0]
 80184ac:	f043 0304 	orr.w	r3, r3, #4
 80184b0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80184b2:	4b24      	ldr	r3, [pc, #144]	@ (8018544 <HAL_DMA_Start_IT+0x1f0>)
 80184b4:	4a24      	ldr	r2, [pc, #144]	@ (8018548 <HAL_DMA_Start_IT+0x1f4>)
 80184b6:	4294      	cmp	r4, r2
 80184b8:	bf18      	it	ne
 80184ba:	429c      	cmpne	r4, r3
 80184bc:	f102 0214 	add.w	r2, r2, #20
 80184c0:	bf0c      	ite	eq
 80184c2:	2301      	moveq	r3, #1
 80184c4:	2300      	movne	r3, #0
 80184c6:	4294      	cmp	r4, r2
 80184c8:	bf08      	it	eq
 80184ca:	f043 0301 	orreq.w	r3, r3, #1
 80184ce:	3214      	adds	r2, #20
 80184d0:	4294      	cmp	r4, r2
 80184d2:	bf08      	it	eq
 80184d4:	f043 0301 	orreq.w	r3, r3, #1
 80184d8:	3214      	adds	r2, #20
 80184da:	4294      	cmp	r4, r2
 80184dc:	bf08      	it	eq
 80184de:	f043 0301 	orreq.w	r3, r3, #1
 80184e2:	3214      	adds	r2, #20
 80184e4:	4294      	cmp	r4, r2
 80184e6:	bf08      	it	eq
 80184e8:	f043 0301 	orreq.w	r3, r3, #1
 80184ec:	3214      	adds	r2, #20
 80184ee:	4294      	cmp	r4, r2
 80184f0:	bf08      	it	eq
 80184f2:	f043 0301 	orreq.w	r3, r3, #1
 80184f6:	3214      	adds	r2, #20
 80184f8:	4294      	cmp	r4, r2
 80184fa:	bf08      	it	eq
 80184fc:	f043 0301 	orreq.w	r3, r3, #1
 8018500:	b17b      	cbz	r3, 8018522 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8018502:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8018504:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8018508:	681a      	ldr	r2, [r3, #0]
 801850a:	03d2      	lsls	r2, r2, #15
 801850c:	f100 813e 	bmi.w	801878c <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8018510:	f1bc 0f00 	cmp.w	ip, #0
 8018514:	d005      	beq.n	8018522 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018516:	f8dc 3000 	ldr.w	r3, [ip]
 801851a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801851e:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8018522:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018524:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8018526:	f043 0301 	orr.w	r3, r3, #1
 801852a:	6023      	str	r3, [r4, #0]
}
 801852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018530:	40020070 	.word	0x40020070
 8018534:	40020028 	.word	0x40020028
 8018538:	40020040 	.word	0x40020040
 801853c:	40020088 	.word	0x40020088
 8018540:	400200a0 	.word	0x400200a0
 8018544:	58025408 	.word	0x58025408
 8018548:	5802541c 	.word	0x5802541c
 801854c:	40020058 	.word	0x40020058
 8018550:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8018554:	4574      	cmp	r4, lr
 8018556:	f000 8154 	beq.w	8018802 <HAL_DMA_Start_IT+0x4ae>
 801855a:	4544      	cmp	r4, r8
 801855c:	f000 815a 	beq.w	8018814 <HAL_DMA_Start_IT+0x4c0>
 8018560:	f1b9 0f00 	cmp.w	r9, #0
 8018564:	f040 811f 	bne.w	80187a6 <HAL_DMA_Start_IT+0x452>
 8018568:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 80189a0 <HAL_DMA_Start_IT+0x64c>
 801856c:	4564      	cmp	r4, ip
 801856e:	f000 8164 	beq.w	801883a <HAL_DMA_Start_IT+0x4e6>
 8018572:	f10c 0c18 	add.w	ip, ip, #24
 8018576:	4564      	cmp	r4, ip
 8018578:	f000 8180 	beq.w	801887c <HAL_DMA_Start_IT+0x528>
 801857c:	f10c 0c18 	add.w	ip, ip, #24
 8018580:	4564      	cmp	r4, ip
 8018582:	f000 8184 	beq.w	801888e <HAL_DMA_Start_IT+0x53a>
 8018586:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 801858a:	4564      	cmp	r4, ip
 801858c:	f000 8194 	beq.w	80188b8 <HAL_DMA_Start_IT+0x564>
 8018590:	f10c 0c18 	add.w	ip, ip, #24
 8018594:	4564      	cmp	r4, ip
 8018596:	f000 81a2 	beq.w	80188de <HAL_DMA_Start_IT+0x58a>
 801859a:	f10c 0c18 	add.w	ip, ip, #24
 801859e:	4564      	cmp	r4, ip
 80185a0:	f000 81b3 	beq.w	801890a <HAL_DMA_Start_IT+0x5b6>
 80185a4:	f10c 0c18 	add.w	ip, ip, #24
 80185a8:	4564      	cmp	r4, ip
 80185aa:	f000 81b9 	beq.w	8018920 <HAL_DMA_Start_IT+0x5cc>
 80185ae:	f10c 0c18 	add.w	ip, ip, #24
 80185b2:	4564      	cmp	r4, ip
 80185b4:	f000 81bf 	beq.w	8018936 <HAL_DMA_Start_IT+0x5e2>
 80185b8:	f10c 0c18 	add.w	ip, ip, #24
 80185bc:	4564      	cmp	r4, ip
 80185be:	f000 81c3 	beq.w	8018948 <HAL_DMA_Start_IT+0x5f4>
 80185c2:	f10c 0c18 	add.w	ip, ip, #24
 80185c6:	4564      	cmp	r4, ip
 80185c8:	f000 81cb 	beq.w	8018962 <HAL_DMA_Start_IT+0x60e>
 80185cc:	f10c 0c18 	add.w	ip, ip, #24
 80185d0:	4564      	cmp	r4, ip
 80185d2:	f000 81cf 	beq.w	8018974 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80185d6:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 80189a4 <HAL_DMA_Start_IT+0x650>
 80185da:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 80189a8 <HAL_DMA_Start_IT+0x654>
 80185de:	4574      	cmp	r4, lr
 80185e0:	bf18      	it	ne
 80185e2:	4564      	cmpne	r4, ip
 80185e4:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 80185e8:	bf0c      	ite	eq
 80185ea:	f04f 0c01 	moveq.w	ip, #1
 80185ee:	f04f 0c00 	movne.w	ip, #0
 80185f2:	4574      	cmp	r4, lr
 80185f4:	bf08      	it	eq
 80185f6:	f04c 0c01 	orreq.w	ip, ip, #1
 80185fa:	f10e 0e14 	add.w	lr, lr, #20
 80185fe:	4574      	cmp	r4, lr
 8018600:	bf08      	it	eq
 8018602:	f04c 0c01 	orreq.w	ip, ip, #1
 8018606:	f10e 0e14 	add.w	lr, lr, #20
 801860a:	4574      	cmp	r4, lr
 801860c:	bf08      	it	eq
 801860e:	f04c 0c01 	orreq.w	ip, ip, #1
 8018612:	f10e 0e14 	add.w	lr, lr, #20
 8018616:	4574      	cmp	r4, lr
 8018618:	bf08      	it	eq
 801861a:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 801861e:	f8d4 e000 	ldr.w	lr, [r4]
 8018622:	f02e 0e01 	bic.w	lr, lr, #1
 8018626:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801862a:	f8df e380 	ldr.w	lr, [pc, #896]	@ 80189ac <HAL_DMA_Start_IT+0x658>
 801862e:	4574      	cmp	r4, lr
 8018630:	bf08      	it	eq
 8018632:	f04c 0c01 	orreq.w	ip, ip, #1
 8018636:	f1bc 0f00 	cmp.w	ip, #0
 801863a:	d103      	bne.n	8018644 <HAL_DMA_Start_IT+0x2f0>
 801863c:	f8df c370 	ldr.w	ip, [pc, #880]	@ 80189b0 <HAL_DMA_Start_IT+0x65c>
 8018640:	4564      	cmp	r4, ip
 8018642:	d14f      	bne.n	80186e4 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8018644:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018648:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 801864c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 801864e:	f1bc 0f00 	cmp.w	ip, #0
 8018652:	d002      	beq.n	801865a <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018654:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8018658:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801865a:	f8df e344 	ldr.w	lr, [pc, #836]	@ 80189a0 <HAL_DMA_Start_IT+0x64c>
 801865e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 80189b4 <HAL_DMA_Start_IT+0x660>
 8018662:	4544      	cmp	r4, r8
 8018664:	bf18      	it	ne
 8018666:	4574      	cmpne	r4, lr
 8018668:	f108 0818 	add.w	r8, r8, #24
 801866c:	bf0c      	ite	eq
 801866e:	f04f 0e01 	moveq.w	lr, #1
 8018672:	f04f 0e00 	movne.w	lr, #0
 8018676:	4544      	cmp	r4, r8
 8018678:	bf08      	it	eq
 801867a:	f04e 0e01 	orreq.w	lr, lr, #1
 801867e:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8018682:	4544      	cmp	r4, r8
 8018684:	bf08      	it	eq
 8018686:	f04e 0e01 	orreq.w	lr, lr, #1
 801868a:	f108 0818 	add.w	r8, r8, #24
 801868e:	4544      	cmp	r4, r8
 8018690:	bf08      	it	eq
 8018692:	f04e 0e01 	orreq.w	lr, lr, #1
 8018696:	f108 0818 	add.w	r8, r8, #24
 801869a:	4544      	cmp	r4, r8
 801869c:	bf08      	it	eq
 801869e:	f04e 0e01 	orreq.w	lr, lr, #1
 80186a2:	f108 0818 	add.w	r8, r8, #24
 80186a6:	4544      	cmp	r4, r8
 80186a8:	bf08      	it	eq
 80186aa:	f04e 0e01 	orreq.w	lr, lr, #1
 80186ae:	f108 0818 	add.w	r8, r8, #24
 80186b2:	4544      	cmp	r4, r8
 80186b4:	bf08      	it	eq
 80186b6:	f04e 0e01 	orreq.w	lr, lr, #1
 80186ba:	f108 0818 	add.w	r8, r8, #24
 80186be:	4544      	cmp	r4, r8
 80186c0:	bf08      	it	eq
 80186c2:	f04e 0e01 	orreq.w	lr, lr, #1
 80186c6:	f108 0818 	add.w	r8, r8, #24
 80186ca:	4544      	cmp	r4, r8
 80186cc:	bf08      	it	eq
 80186ce:	f04e 0e01 	orreq.w	lr, lr, #1
 80186d2:	f1be 0f00 	cmp.w	lr, #0
 80186d6:	f47f ae90 	bne.w	80183fa <HAL_DMA_Start_IT+0xa6>
 80186da:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 80189b8 <HAL_DMA_Start_IT+0x664>
 80186de:	4574      	cmp	r4, lr
 80186e0:	f43f ae8b 	beq.w	80183fa <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80186e4:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80189a8 <HAL_DMA_Start_IT+0x654>
 80186e8:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 80189a4 <HAL_DMA_Start_IT+0x650>
 80186ec:	4574      	cmp	r4, lr
 80186ee:	bf18      	it	ne
 80186f0:	4564      	cmpne	r4, ip
 80186f2:	f10e 0e14 	add.w	lr, lr, #20
 80186f6:	bf0c      	ite	eq
 80186f8:	f04f 0c01 	moveq.w	ip, #1
 80186fc:	f04f 0c00 	movne.w	ip, #0
 8018700:	4574      	cmp	r4, lr
 8018702:	bf08      	it	eq
 8018704:	f04c 0c01 	orreq.w	ip, ip, #1
 8018708:	f10e 0e14 	add.w	lr, lr, #20
 801870c:	4574      	cmp	r4, lr
 801870e:	bf08      	it	eq
 8018710:	f04c 0c01 	orreq.w	ip, ip, #1
 8018714:	f10e 0e14 	add.w	lr, lr, #20
 8018718:	4574      	cmp	r4, lr
 801871a:	bf08      	it	eq
 801871c:	f04c 0c01 	orreq.w	ip, ip, #1
 8018720:	f10e 0e14 	add.w	lr, lr, #20
 8018724:	4574      	cmp	r4, lr
 8018726:	bf08      	it	eq
 8018728:	f04c 0c01 	orreq.w	ip, ip, #1
 801872c:	f10e 0e14 	add.w	lr, lr, #20
 8018730:	4574      	cmp	r4, lr
 8018732:	bf08      	it	eq
 8018734:	f04c 0c01 	orreq.w	ip, ip, #1
 8018738:	f1bc 0f00 	cmp.w	ip, #0
 801873c:	d104      	bne.n	8018748 <HAL_DMA_Start_IT+0x3f4>
 801873e:	f8df c270 	ldr.w	ip, [pc, #624]	@ 80189b0 <HAL_DMA_Start_IT+0x65c>
 8018742:	4564      	cmp	r4, ip
 8018744:	f040 8125 	bne.w	8018992 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018748:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 801874a:	f04f 0c01 	mov.w	ip, #1
 801874e:	f006 0e1f 	and.w	lr, r6, #31
 8018752:	fa0c fc0e 	lsl.w	ip, ip, lr
 8018756:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801875a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801875c:	6883      	ldr	r3, [r0, #8]
 801875e:	2b40      	cmp	r3, #64	@ 0x40
 8018760:	f000 8113 	beq.w	801898a <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8018764:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8018766:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018768:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801876a:	e65e      	b.n	801842a <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801876c:	6823      	ldr	r3, [r4, #0]
 801876e:	f023 031e 	bic.w	r3, r3, #30
 8018772:	f043 0316 	orr.w	r3, r3, #22
 8018776:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8018778:	b11a      	cbz	r2, 8018782 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801877a:	6823      	ldr	r3, [r4, #0]
 801877c:	f043 0308 	orr.w	r3, r3, #8
 8018780:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8018782:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8018784:	681a      	ldr	r2, [r3, #0]
 8018786:	03d2      	lsls	r2, r2, #15
 8018788:	f57f aec2 	bpl.w	8018510 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801878c:	681a      	ldr	r2, [r3, #0]
 801878e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018792:	601a      	str	r2, [r3, #0]
 8018794:	e6bc      	b.n	8018510 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 8018796:	2002      	movs	r0, #2
}
 8018798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 801879c:	2001      	movs	r0, #1
}
 801879e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80187a0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80187a2:	60e1      	str	r1, [r4, #12]
 80187a4:	e63d      	b.n	8018422 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 80187a6:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 80187aa:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80187ae:	f02c 0c01 	bic.w	ip, ip, #1
 80187b2:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 80187b6:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80187ba:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 80187be:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80187c0:	f1bc 0f00 	cmp.w	ip, #0
 80187c4:	f43f ae19 	beq.w	80183fa <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80187c8:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80187cc:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80187ce:	e614      	b.n	80183fa <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80187d0:	4971      	ldr	r1, [pc, #452]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 80187d2:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80187d4:	f023 031e 	bic.w	r3, r3, #30
 80187d8:	f043 0316 	orr.w	r3, r3, #22
 80187dc:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80187de:	2a00      	cmp	r2, #0
 80187e0:	f43f ae8f 	beq.w	8018502 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80187e4:	6823      	ldr	r3, [r4, #0]
 80187e6:	f043 0308 	orr.w	r3, r3, #8
 80187ea:	6023      	str	r3, [r4, #0]
 80187ec:	e689      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80187ee:	496a      	ldr	r1, [pc, #424]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 80187f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80187f2:	f023 031e 	bic.w	r3, r3, #30
 80187f6:	f043 0316 	orr.w	r3, r3, #22
 80187fa:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80187fc:	2a00      	cmp	r2, #0
 80187fe:	d1f1      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 8018800:	e67f      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8018802:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 8018806:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 801880a:	f02c 0c01 	bic.w	ip, ip, #1
 801880e:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018812:	e5e2      	b.n	80183da <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8018814:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 8018818:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 801881c:	f02c 0c01 	bic.w	ip, ip, #1
 8018820:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018824:	e7c7      	b.n	80187b6 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018826:	495c      	ldr	r1, [pc, #368]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 8018828:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 801882a:	f023 031e 	bic.w	r3, r3, #30
 801882e:	f043 0316 	orr.w	r3, r3, #22
 8018832:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8018834:	2a00      	cmp	r2, #0
 8018836:	d1d5      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 8018838:	e663      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 801883a:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 801883e:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8018842:	f02c 0c01 	bic.w	ip, ip, #1
 8018846:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801884a:	e6fb      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801884c:	4952      	ldr	r1, [pc, #328]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 801884e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8018852:	f023 031e 	bic.w	r3, r3, #30
 8018856:	f043 0316 	orr.w	r3, r3, #22
 801885a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 801885e:	2a00      	cmp	r2, #0
 8018860:	d1c0      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 8018862:	e64e      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018864:	494c      	ldr	r1, [pc, #304]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 8018866:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 801886a:	f023 031e 	bic.w	r3, r3, #30
 801886e:	f043 0316 	orr.w	r3, r3, #22
 8018872:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8018876:	2a00      	cmp	r2, #0
 8018878:	d1b4      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 801887a:	e642      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 801887c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 8018880:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8018884:	f02c 0c01 	bic.w	ip, ip, #1
 8018888:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801888c:	e6da      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 801888e:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8018998 <HAL_DMA_Start_IT+0x644>
 8018892:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8018896:	f02c 0c01 	bic.w	ip, ip, #1
 801889a:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801889e:	e6d1      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80188a0:	493d      	ldr	r1, [pc, #244]	@ (8018998 <HAL_DMA_Start_IT+0x644>)
 80188a2:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 80188a6:	f023 031e 	bic.w	r3, r3, #30
 80188aa:	f043 0316 	orr.w	r3, r3, #22
 80188ae:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 80188b2:	2a00      	cmp	r2, #0
 80188b4:	d196      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 80188b6:	e624      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80188b8:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 801899c <HAL_DMA_Start_IT+0x648>
 80188bc:	f8de c010 	ldr.w	ip, [lr, #16]
 80188c0:	f02c 0c01 	bic.w	ip, ip, #1
 80188c4:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80188c8:	e6bc      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80188ca:	4934      	ldr	r1, [pc, #208]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 80188cc:	690b      	ldr	r3, [r1, #16]
 80188ce:	f023 031e 	bic.w	r3, r3, #30
 80188d2:	f043 0316 	orr.w	r3, r3, #22
 80188d6:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 80188d8:	2a00      	cmp	r2, #0
 80188da:	d183      	bne.n	80187e4 <HAL_DMA_Start_IT+0x490>
 80188dc:	e611      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80188de:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 801899c <HAL_DMA_Start_IT+0x648>
 80188e2:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 80188e6:	f02c 0c01 	bic.w	ip, ip, #1
 80188ea:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80188ee:	e6a9      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80188f0:	492a      	ldr	r1, [pc, #168]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 80188f2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80188f4:	f023 031e 	bic.w	r3, r3, #30
 80188f8:	f043 0316 	orr.w	r3, r3, #22
 80188fc:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80188fe:	2a00      	cmp	r2, #0
 8018900:	f47f af70 	bne.w	80187e4 <HAL_DMA_Start_IT+0x490>
 8018904:	e5fd      	b.n	8018502 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018906:	4925      	ldr	r1, [pc, #148]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 8018908:	e772      	b.n	80187f0 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 801890a:	f8df e090 	ldr.w	lr, [pc, #144]	@ 801899c <HAL_DMA_Start_IT+0x648>
 801890e:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8018912:	f02c 0c01 	bic.w	ip, ip, #1
 8018916:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801891a:	e693      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801891c:	491f      	ldr	r1, [pc, #124]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 801891e:	e783      	b.n	8018828 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8018920:	f8df e078 	ldr.w	lr, [pc, #120]	@ 801899c <HAL_DMA_Start_IT+0x648>
 8018924:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8018928:	f02c 0c01 	bic.w	ip, ip, #1
 801892c:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018930:	e688      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018932:	491a      	ldr	r1, [pc, #104]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 8018934:	e74d      	b.n	80187d2 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 8018936:	f8df e064 	ldr.w	lr, [pc, #100]	@ 801899c <HAL_DMA_Start_IT+0x648>
 801893a:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 801893e:	f02c 0c01 	bic.w	ip, ip, #1
 8018942:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018946:	e67d      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8018948:	f8df e050 	ldr.w	lr, [pc, #80]	@ 801899c <HAL_DMA_Start_IT+0x648>
 801894c:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8018950:	f02c 0c01 	bic.w	ip, ip, #1
 8018954:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018958:	e674      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801895a:	4910      	ldr	r1, [pc, #64]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 801895c:	e777      	b.n	801884e <HAL_DMA_Start_IT+0x4fa>
 801895e:	490f      	ldr	r1, [pc, #60]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 8018960:	e781      	b.n	8018866 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8018962:	f8df e038 	ldr.w	lr, [pc, #56]	@ 801899c <HAL_DMA_Start_IT+0x648>
 8018966:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 801896a:	f02c 0c01 	bic.w	ip, ip, #1
 801896e:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018972:	e667      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8018974:	f8df e024 	ldr.w	lr, [pc, #36]	@ 801899c <HAL_DMA_Start_IT+0x648>
 8018978:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 801897c:	f02c 0c01 	bic.w	ip, ip, #1
 8018980:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018984:	e65e      	b.n	8018644 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8018986:	4905      	ldr	r1, [pc, #20]	@ (801899c <HAL_DMA_Start_IT+0x648>)
 8018988:	e78b      	b.n	80188a2 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801898a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801898c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801898e:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018990:	e54b      	b.n	801842a <HAL_DMA_Start_IT+0xd6>
 8018992:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018994:	e555      	b.n	8018442 <HAL_DMA_Start_IT+0xee>
 8018996:	bf00      	nop
 8018998:	40020000 	.word	0x40020000
 801899c:	40020400 	.word	0x40020400
 80189a0:	40020088 	.word	0x40020088
 80189a4:	5802541c 	.word	0x5802541c
 80189a8:	58025408 	.word	0x58025408
 80189ac:	58025480 	.word	0x58025480
 80189b0:	58025494 	.word	0x58025494
 80189b4:	400200a0 	.word	0x400200a0
 80189b8:	400204b8 	.word	0x400204b8

080189bc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80189bc:	2800      	cmp	r0, #0
 80189be:	d062      	beq.n	8018a86 <HAL_DMA_Abort_IT+0xca>
{
 80189c0:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80189c2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80189c6:	2b02      	cmp	r3, #2
 80189c8:	d159      	bne.n	8018a7e <HAL_DMA_Abort_IT+0xc2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80189ca:	6802      	ldr	r2, [r0, #0]
 80189cc:	4b57      	ldr	r3, [pc, #348]	@ (8018b2c <HAL_DMA_Abort_IT+0x170>)
 80189ce:	4c58      	ldr	r4, [pc, #352]	@ (8018b30 <HAL_DMA_Abort_IT+0x174>)
 80189d0:	4958      	ldr	r1, [pc, #352]	@ (8018b34 <HAL_DMA_Abort_IT+0x178>)
 80189d2:	42a2      	cmp	r2, r4
 80189d4:	bf18      	it	ne
 80189d6:	429a      	cmpne	r2, r3
 80189d8:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 80189dc:	bf0c      	ite	eq
 80189de:	2301      	moveq	r3, #1
 80189e0:	2300      	movne	r3, #0
 80189e2:	428a      	cmp	r2, r1
 80189e4:	bf08      	it	eq
 80189e6:	f043 0301 	orreq.w	r3, r3, #1
 80189ea:	3130      	adds	r1, #48	@ 0x30
 80189ec:	42a2      	cmp	r2, r4
 80189ee:	bf08      	it	eq
 80189f0:	f043 0301 	orreq.w	r3, r3, #1
 80189f4:	3430      	adds	r4, #48	@ 0x30
 80189f6:	428a      	cmp	r2, r1
 80189f8:	bf08      	it	eq
 80189fa:	f043 0301 	orreq.w	r3, r3, #1
 80189fe:	3130      	adds	r1, #48	@ 0x30
 8018a00:	42a2      	cmp	r2, r4
 8018a02:	bf08      	it	eq
 8018a04:	f043 0301 	orreq.w	r3, r3, #1
 8018a08:	3430      	adds	r4, #48	@ 0x30
 8018a0a:	428a      	cmp	r2, r1
 8018a0c:	bf08      	it	eq
 8018a0e:	f043 0301 	orreq.w	r3, r3, #1
 8018a12:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 8018a16:	42a2      	cmp	r2, r4
 8018a18:	bf08      	it	eq
 8018a1a:	f043 0301 	orreq.w	r3, r3, #1
 8018a1e:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 8018a22:	428a      	cmp	r2, r1
 8018a24:	bf08      	it	eq
 8018a26:	f043 0301 	orreq.w	r3, r3, #1
 8018a2a:	3130      	adds	r1, #48	@ 0x30
 8018a2c:	42a2      	cmp	r2, r4
 8018a2e:	bf08      	it	eq
 8018a30:	f043 0301 	orreq.w	r3, r3, #1
 8018a34:	3430      	adds	r4, #48	@ 0x30
 8018a36:	428a      	cmp	r2, r1
 8018a38:	bf08      	it	eq
 8018a3a:	f043 0301 	orreq.w	r3, r3, #1
 8018a3e:	3130      	adds	r1, #48	@ 0x30
 8018a40:	42a2      	cmp	r2, r4
 8018a42:	bf08      	it	eq
 8018a44:	f043 0301 	orreq.w	r3, r3, #1
 8018a48:	3430      	adds	r4, #48	@ 0x30
 8018a4a:	428a      	cmp	r2, r1
 8018a4c:	bf08      	it	eq
 8018a4e:	f043 0301 	orreq.w	r3, r3, #1
 8018a52:	3130      	adds	r1, #48	@ 0x30
 8018a54:	42a2      	cmp	r2, r4
 8018a56:	bf08      	it	eq
 8018a58:	f043 0301 	orreq.w	r3, r3, #1
 8018a5c:	428a      	cmp	r2, r1
 8018a5e:	bf08      	it	eq
 8018a60:	f043 0301 	orreq.w	r3, r3, #1
 8018a64:	b913      	cbnz	r3, 8018a6c <HAL_DMA_Abort_IT+0xb0>
 8018a66:	4b34      	ldr	r3, [pc, #208]	@ (8018b38 <HAL_DMA_Abort_IT+0x17c>)
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	d10e      	bne.n	8018a8a <HAL_DMA_Abort_IT+0xce>
      hdma->State = HAL_DMA_STATE_ABORT;
 8018a6c:	2304      	movs	r3, #4
 8018a6e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8018a72:	6813      	ldr	r3, [r2, #0]
 8018a74:	f023 0301 	bic.w	r3, r3, #1
 8018a78:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8018a7a:	2000      	movs	r0, #0
}
 8018a7c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018a7e:	2380      	movs	r3, #128	@ 0x80
 8018a80:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8018a82:	2001      	movs	r0, #1
}
 8018a84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8018a86:	2001      	movs	r0, #1
}
 8018a88:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8018b3c <HAL_DMA_Abort_IT+0x180>)
 8018a8c:	4d2c      	ldr	r5, [pc, #176]	@ (8018b40 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8018a8e:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018a90:	42aa      	cmp	r2, r5
 8018a92:	bf18      	it	ne
 8018a94:	429a      	cmpne	r2, r3
 8018a96:	4c2b      	ldr	r4, [pc, #172]	@ (8018b44 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8018a98:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018a9c:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8018aa0:	bf0c      	ite	eq
 8018aa2:	2301      	moveq	r3, #1
 8018aa4:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8018aa6:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018aa8:	42a2      	cmp	r2, r4
 8018aaa:	bf08      	it	eq
 8018aac:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8018ab0:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018ab2:	3428      	adds	r4, #40	@ 0x28
 8018ab4:	42aa      	cmp	r2, r5
 8018ab6:	bf08      	it	eq
 8018ab8:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8018abc:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018ac0:	42a2      	cmp	r2, r4
 8018ac2:	bf08      	it	eq
 8018ac4:	f043 0301 	orreq.w	r3, r3, #1
 8018ac8:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8018aca:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018acc:	42a2      	cmp	r2, r4
 8018ace:	bf08      	it	eq
 8018ad0:	f043 0301 	orreq.w	r3, r3, #1
 8018ad4:	491c      	ldr	r1, [pc, #112]	@ (8018b48 <HAL_DMA_Abort_IT+0x18c>)
 8018ad6:	428a      	cmp	r2, r1
 8018ad8:	bf08      	it	eq
 8018ada:	f043 0301 	orreq.w	r3, r3, #1
 8018ade:	b913      	cbnz	r3, 8018ae6 <HAL_DMA_Abort_IT+0x12a>
 8018ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8018b4c <HAL_DMA_Abort_IT+0x190>)
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d117      	bne.n	8018b16 <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018ae6:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018ae8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018aea:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018aee:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018af0:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018af8:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018afa:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018afc:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8018afe:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018b00:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8018b04:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8018b06:	b133      	cbz	r3, 8018b16 <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8018b08:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018b0a:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8018b0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018b12:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018b14:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8018b16:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8018b18:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8018b1a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8018b1c:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8018b20:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d0a8      	beq.n	8018a7a <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 8018b28:	4798      	blx	r3
 8018b2a:	e7a6      	b.n	8018a7a <HAL_DMA_Abort_IT+0xbe>
 8018b2c:	40020010 	.word	0x40020010
 8018b30:	40020028 	.word	0x40020028
 8018b34:	40020040 	.word	0x40020040
 8018b38:	400204b8 	.word	0x400204b8
 8018b3c:	5802541c 	.word	0x5802541c
 8018b40:	58025408 	.word	0x58025408
 8018b44:	58025430 	.word	0x58025430
 8018b48:	58025480 	.word	0x58025480
 8018b4c:	58025494 	.word	0x58025494

08018b50 <HAL_DMA_IRQHandler>:
{
 8018b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8018b52:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8018b54:	4b94      	ldr	r3, [pc, #592]	@ (8018da8 <HAL_DMA_IRQHandler+0x258>)
{
 8018b56:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018b58:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 8018b5a:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8018b5c:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8018b5e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018b60:	4b92      	ldr	r3, [pc, #584]	@ (8018dac <HAL_DMA_IRQHandler+0x25c>)
 8018b62:	6802      	ldr	r2, [r0, #0]
 8018b64:	4892      	ldr	r0, [pc, #584]	@ (8018db0 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8018b66:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018b68:	4282      	cmp	r2, r0
 8018b6a:	bf18      	it	ne
 8018b6c:	429a      	cmpne	r2, r3
 8018b6e:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8018b72:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018b74:	bf0c      	ite	eq
 8018b76:	2301      	moveq	r3, #1
 8018b78:	2300      	movne	r3, #0
 8018b7a:	4282      	cmp	r2, r0
 8018b7c:	bf08      	it	eq
 8018b7e:	f043 0301 	orreq.w	r3, r3, #1
 8018b82:	3018      	adds	r0, #24
 8018b84:	4282      	cmp	r2, r0
 8018b86:	bf08      	it	eq
 8018b88:	f043 0301 	orreq.w	r3, r3, #1
 8018b8c:	3018      	adds	r0, #24
 8018b8e:	4282      	cmp	r2, r0
 8018b90:	bf08      	it	eq
 8018b92:	f043 0301 	orreq.w	r3, r3, #1
 8018b96:	3018      	adds	r0, #24
 8018b98:	4282      	cmp	r2, r0
 8018b9a:	bf08      	it	eq
 8018b9c:	f043 0301 	orreq.w	r3, r3, #1
 8018ba0:	3018      	adds	r0, #24
 8018ba2:	4282      	cmp	r2, r0
 8018ba4:	bf08      	it	eq
 8018ba6:	f043 0301 	orreq.w	r3, r3, #1
 8018baa:	3018      	adds	r0, #24
 8018bac:	4282      	cmp	r2, r0
 8018bae:	bf08      	it	eq
 8018bb0:	f043 0301 	orreq.w	r3, r3, #1
 8018bb4:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8018bb8:	4282      	cmp	r2, r0
 8018bba:	bf08      	it	eq
 8018bbc:	f043 0301 	orreq.w	r3, r3, #1
 8018bc0:	3018      	adds	r0, #24
 8018bc2:	4282      	cmp	r2, r0
 8018bc4:	bf08      	it	eq
 8018bc6:	f043 0301 	orreq.w	r3, r3, #1
 8018bca:	3018      	adds	r0, #24
 8018bcc:	4282      	cmp	r2, r0
 8018bce:	bf08      	it	eq
 8018bd0:	f043 0301 	orreq.w	r3, r3, #1
 8018bd4:	3018      	adds	r0, #24
 8018bd6:	4282      	cmp	r2, r0
 8018bd8:	bf08      	it	eq
 8018bda:	f043 0301 	orreq.w	r3, r3, #1
 8018bde:	3018      	adds	r0, #24
 8018be0:	4282      	cmp	r2, r0
 8018be2:	bf08      	it	eq
 8018be4:	f043 0301 	orreq.w	r3, r3, #1
 8018be8:	3018      	adds	r0, #24
 8018bea:	4282      	cmp	r2, r0
 8018bec:	bf08      	it	eq
 8018bee:	f043 0301 	orreq.w	r3, r3, #1
 8018bf2:	3018      	adds	r0, #24
 8018bf4:	4282      	cmp	r2, r0
 8018bf6:	bf08      	it	eq
 8018bf8:	f043 0301 	orreq.w	r3, r3, #1
 8018bfc:	b91b      	cbnz	r3, 8018c06 <HAL_DMA_IRQHandler+0xb6>
 8018bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8018db4 <HAL_DMA_IRQHandler+0x264>)
 8018c00:	429a      	cmp	r2, r3
 8018c02:	f040 812f 	bne.w	8018e64 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018c08:	2108      	movs	r1, #8
 8018c0a:	f003 031f 	and.w	r3, r3, #31
 8018c0e:	4099      	lsls	r1, r3
 8018c10:	4221      	tst	r1, r4
 8018c12:	d00b      	beq.n	8018c2c <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8018c14:	6810      	ldr	r0, [r2, #0]
 8018c16:	0740      	lsls	r0, r0, #29
 8018c18:	d508      	bpl.n	8018c2c <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8018c1a:	6810      	ldr	r0, [r2, #0]
 8018c1c:	f020 0004 	bic.w	r0, r0, #4
 8018c20:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018c22:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018c26:	f041 0101 	orr.w	r1, r1, #1
 8018c2a:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c2c:	fa24 f103 	lsr.w	r1, r4, r3
 8018c30:	07c8      	lsls	r0, r1, #31
 8018c32:	d509      	bpl.n	8018c48 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8018c34:	6951      	ldr	r1, [r2, #20]
 8018c36:	0609      	lsls	r1, r1, #24
 8018c38:	d506      	bpl.n	8018c48 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018c3a:	2101      	movs	r1, #1
 8018c3c:	4099      	lsls	r1, r3
 8018c3e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018c40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018c42:	f041 0102 	orr.w	r1, r1, #2
 8018c46:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c48:	2104      	movs	r1, #4
 8018c4a:	4099      	lsls	r1, r3
 8018c4c:	4221      	tst	r1, r4
 8018c4e:	d007      	beq.n	8018c60 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8018c50:	6810      	ldr	r0, [r2, #0]
 8018c52:	0780      	lsls	r0, r0, #30
 8018c54:	d504      	bpl.n	8018c60 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018c56:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018c58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018c5a:	f041 0104 	orr.w	r1, r1, #4
 8018c5e:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c60:	2110      	movs	r1, #16
 8018c62:	4099      	lsls	r1, r3
 8018c64:	4221      	tst	r1, r4
 8018c66:	f000 80b0 	beq.w	8018dca <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8018c6a:	6810      	ldr	r0, [r2, #0]
 8018c6c:	0700      	lsls	r0, r0, #28
 8018c6e:	f140 80ac 	bpl.w	8018dca <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018c72:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018c74:	6811      	ldr	r1, [r2, #0]
 8018c76:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018c7a:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018c7c:	f040 809e 	bne.w	8018dbc <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018c80:	05c9      	lsls	r1, r1, #23
 8018c82:	d403      	bmi.n	8018c8c <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018c84:	6811      	ldr	r1, [r2, #0]
 8018c86:	f021 0108 	bic.w	r1, r1, #8
 8018c8a:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8018c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018c8e:	2900      	cmp	r1, #0
 8018c90:	f000 809b 	beq.w	8018dca <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8018c94:	4638      	mov	r0, r7
 8018c96:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018c9a:	2120      	movs	r1, #32
 8018c9c:	f003 031f 	and.w	r3, r3, #31
 8018ca0:	4099      	lsls	r1, r3
 8018ca2:	4221      	tst	r1, r4
 8018ca4:	d053      	beq.n	8018d4e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8018ca6:	683a      	ldr	r2, [r7, #0]
 8018ca8:	4840      	ldr	r0, [pc, #256]	@ (8018dac <HAL_DMA_IRQHandler+0x25c>)
 8018caa:	4c41      	ldr	r4, [pc, #260]	@ (8018db0 <HAL_DMA_IRQHandler+0x260>)
 8018cac:	42a2      	cmp	r2, r4
 8018cae:	bf18      	it	ne
 8018cb0:	4282      	cmpne	r2, r0
 8018cb2:	f104 0418 	add.w	r4, r4, #24
 8018cb6:	bf0c      	ite	eq
 8018cb8:	2001      	moveq	r0, #1
 8018cba:	2000      	movne	r0, #0
 8018cbc:	42a2      	cmp	r2, r4
 8018cbe:	bf08      	it	eq
 8018cc0:	f040 0001 	orreq.w	r0, r0, #1
 8018cc4:	3418      	adds	r4, #24
 8018cc6:	42a2      	cmp	r2, r4
 8018cc8:	bf08      	it	eq
 8018cca:	f040 0001 	orreq.w	r0, r0, #1
 8018cce:	3418      	adds	r4, #24
 8018cd0:	42a2      	cmp	r2, r4
 8018cd2:	bf08      	it	eq
 8018cd4:	f040 0001 	orreq.w	r0, r0, #1
 8018cd8:	3418      	adds	r4, #24
 8018cda:	42a2      	cmp	r2, r4
 8018cdc:	bf08      	it	eq
 8018cde:	f040 0001 	orreq.w	r0, r0, #1
 8018ce2:	3418      	adds	r4, #24
 8018ce4:	42a2      	cmp	r2, r4
 8018ce6:	bf08      	it	eq
 8018ce8:	f040 0001 	orreq.w	r0, r0, #1
 8018cec:	3418      	adds	r4, #24
 8018cee:	42a2      	cmp	r2, r4
 8018cf0:	bf08      	it	eq
 8018cf2:	f040 0001 	orreq.w	r0, r0, #1
 8018cf6:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8018cfa:	42a2      	cmp	r2, r4
 8018cfc:	bf08      	it	eq
 8018cfe:	f040 0001 	orreq.w	r0, r0, #1
 8018d02:	3418      	adds	r4, #24
 8018d04:	42a2      	cmp	r2, r4
 8018d06:	bf08      	it	eq
 8018d08:	f040 0001 	orreq.w	r0, r0, #1
 8018d0c:	3418      	adds	r4, #24
 8018d0e:	42a2      	cmp	r2, r4
 8018d10:	bf08      	it	eq
 8018d12:	f040 0001 	orreq.w	r0, r0, #1
 8018d16:	3418      	adds	r4, #24
 8018d18:	42a2      	cmp	r2, r4
 8018d1a:	bf08      	it	eq
 8018d1c:	f040 0001 	orreq.w	r0, r0, #1
 8018d20:	3418      	adds	r4, #24
 8018d22:	42a2      	cmp	r2, r4
 8018d24:	bf08      	it	eq
 8018d26:	f040 0001 	orreq.w	r0, r0, #1
 8018d2a:	3418      	adds	r4, #24
 8018d2c:	42a2      	cmp	r2, r4
 8018d2e:	bf08      	it	eq
 8018d30:	f040 0001 	orreq.w	r0, r0, #1
 8018d34:	3418      	adds	r4, #24
 8018d36:	42a2      	cmp	r2, r4
 8018d38:	bf08      	it	eq
 8018d3a:	f040 0001 	orreq.w	r0, r0, #1
 8018d3e:	2800      	cmp	r0, #0
 8018d40:	d147      	bne.n	8018dd2 <HAL_DMA_IRQHandler+0x282>
 8018d42:	481c      	ldr	r0, [pc, #112]	@ (8018db4 <HAL_DMA_IRQHandler+0x264>)
 8018d44:	4282      	cmp	r2, r0
 8018d46:	d044      	beq.n	8018dd2 <HAL_DMA_IRQHandler+0x282>
 8018d48:	6810      	ldr	r0, [r2, #0]
 8018d4a:	0780      	lsls	r0, r0, #30
 8018d4c:	d444      	bmi.n	8018dd8 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d070      	beq.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8018d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d56:	07dc      	lsls	r4, r3, #31
 8018d58:	d51e      	bpl.n	8018d98 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8018d5a:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8018d5c:	2104      	movs	r1, #4
 8018d5e:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8018d62:	4915      	ldr	r1, [pc, #84]	@ (8018db8 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8018d64:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018d66:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8018d6a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8018d6e:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8018d70:	6013      	str	r3, [r2, #0]
 8018d72:	e002      	b.n	8018d7a <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8018d74:	6813      	ldr	r3, [r2, #0]
 8018d76:	07d8      	lsls	r0, r3, #31
 8018d78:	d504      	bpl.n	8018d84 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8018d7a:	9b01      	ldr	r3, [sp, #4]
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	428b      	cmp	r3, r1
 8018d80:	9301      	str	r3, [sp, #4]
 8018d82:	d9f7      	bls.n	8018d74 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018d84:	6813      	ldr	r3, [r2, #0]
 8018d86:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8018d88:	bf4c      	ite	mi
 8018d8a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8018d8c:	2301      	movpl	r3, #1
 8018d8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8018d92:	2300      	movs	r3, #0
 8018d94:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8018d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d04b      	beq.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8018d9e:	4638      	mov	r0, r7
}
 8018da0:	b003      	add	sp, #12
 8018da2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8018da6:	4718      	bx	r3
 8018da8:	240081b8 	.word	0x240081b8
 8018dac:	40020010 	.word	0x40020010
 8018db0:	40020028 	.word	0x40020028
 8018db4:	400204b8 	.word	0x400204b8
 8018db8:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018dbc:	0308      	lsls	r0, r1, #12
 8018dbe:	f57f af65 	bpl.w	8018c8c <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8018dc2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8018dc4:	2900      	cmp	r1, #0
 8018dc6:	f47f af65 	bne.w	8018c94 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018dca:	2120      	movs	r1, #32
 8018dcc:	4099      	lsls	r1, r3
 8018dce:	420c      	tst	r4, r1
 8018dd0:	d0bd      	beq.n	8018d4e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8018dd2:	6810      	ldr	r0, [r2, #0]
 8018dd4:	06c4      	lsls	r4, r0, #27
 8018dd6:	d5ba      	bpl.n	8018d4e <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018dd8:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8018dda:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8018dde:	2904      	cmp	r1, #4
 8018de0:	d00e      	beq.n	8018e00 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018de2:	6813      	ldr	r3, [r2, #0]
 8018de4:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018de8:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018dea:	d026      	beq.n	8018e3a <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018dec:	031d      	lsls	r5, r3, #12
 8018dee:	d531      	bpl.n	8018e54 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8018df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d0ab      	beq.n	8018d4e <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8018df6:	4638      	mov	r0, r7
 8018df8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dfc:	b1db      	cbz	r3, 8018e36 <HAL_DMA_IRQHandler+0x2e6>
 8018dfe:	e7a9      	b.n	8018d54 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018e00:	6811      	ldr	r1, [r2, #0]
 8018e02:	f021 0116 	bic.w	r1, r1, #22
 8018e06:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8018e08:	6951      	ldr	r1, [r2, #20]
 8018e0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8018e0e:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018e12:	b319      	cbz	r1, 8018e5c <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018e14:	6811      	ldr	r1, [r2, #0]
 8018e16:	f021 0108 	bic.w	r1, r1, #8
 8018e1a:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018e1c:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8018e1e:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018e20:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8018e24:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018e26:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8018e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8018e2a:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8018e2e:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d1b3      	bne.n	8018d9e <HAL_DMA_IRQHandler+0x24e>
}
 8018e36:	b003      	add	sp, #12
 8018e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018e3a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8018e3e:	d1d7      	bne.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8018e40:	6811      	ldr	r1, [r2, #0]
 8018e42:	f021 0110 	bic.w	r1, r1, #16
 8018e46:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8018e48:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8018e4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8018e4e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8018e52:	e7cd      	b.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8018e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d1cd      	bne.n	8018df6 <HAL_DMA_IRQHandler+0x2a6>
 8018e5a:	e778      	b.n	8018d4e <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018e5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8018e5e:	2900      	cmp	r1, #0
 8018e60:	d1d8      	bne.n	8018e14 <HAL_DMA_IRQHandler+0x2c4>
 8018e62:	e7db      	b.n	8018e1c <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018e64:	4b40      	ldr	r3, [pc, #256]	@ (8018f68 <HAL_DMA_IRQHandler+0x418>)
 8018e66:	4841      	ldr	r0, [pc, #260]	@ (8018f6c <HAL_DMA_IRQHandler+0x41c>)
 8018e68:	4282      	cmp	r2, r0
 8018e6a:	bf18      	it	ne
 8018e6c:	429a      	cmpne	r2, r3
 8018e6e:	f100 0014 	add.w	r0, r0, #20
 8018e72:	bf0c      	ite	eq
 8018e74:	2301      	moveq	r3, #1
 8018e76:	2300      	movne	r3, #0
 8018e78:	4282      	cmp	r2, r0
 8018e7a:	bf08      	it	eq
 8018e7c:	f043 0301 	orreq.w	r3, r3, #1
 8018e80:	3014      	adds	r0, #20
 8018e82:	4282      	cmp	r2, r0
 8018e84:	bf08      	it	eq
 8018e86:	f043 0301 	orreq.w	r3, r3, #1
 8018e8a:	3014      	adds	r0, #20
 8018e8c:	4282      	cmp	r2, r0
 8018e8e:	bf08      	it	eq
 8018e90:	f043 0301 	orreq.w	r3, r3, #1
 8018e94:	3014      	adds	r0, #20
 8018e96:	4282      	cmp	r2, r0
 8018e98:	bf08      	it	eq
 8018e9a:	f043 0301 	orreq.w	r3, r3, #1
 8018e9e:	3014      	adds	r0, #20
 8018ea0:	4282      	cmp	r2, r0
 8018ea2:	bf08      	it	eq
 8018ea4:	f043 0301 	orreq.w	r3, r3, #1
 8018ea8:	b913      	cbnz	r3, 8018eb0 <HAL_DMA_IRQHandler+0x360>
 8018eaa:	4b31      	ldr	r3, [pc, #196]	@ (8018f70 <HAL_DMA_IRQHandler+0x420>)
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d1c2      	bne.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018eb0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8018eb2:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018eb4:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018eb6:	f000 001f 	and.w	r0, r0, #31
 8018eba:	4084      	lsls	r4, r0
 8018ebc:	420c      	tst	r4, r1
 8018ebe:	d00b      	beq.n	8018ed8 <HAL_DMA_IRQHandler+0x388>
 8018ec0:	075e      	lsls	r6, r3, #29
 8018ec2:	d509      	bpl.n	8018ed8 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ec4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018ec6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ec8:	d532      	bpl.n	8018f30 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018eca:	03da      	lsls	r2, r3, #15
 8018ecc:	d436      	bmi.n	8018f3c <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	f47f af64 	bne.w	8018d9e <HAL_DMA_IRQHandler+0x24e>
 8018ed6:	e7ae      	b.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018ed8:	2402      	movs	r4, #2
 8018eda:	4084      	lsls	r4, r0
 8018edc:	420c      	tst	r4, r1
 8018ede:	d00b      	beq.n	8018ef8 <HAL_DMA_IRQHandler+0x3a8>
 8018ee0:	079e      	lsls	r6, r3, #30
 8018ee2:	d509      	bpl.n	8018ef8 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ee4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018ee6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ee8:	d52d      	bpl.n	8018f46 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018eea:	03da      	lsls	r2, r3, #15
 8018eec:	d437      	bmi.n	8018f5e <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8018eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f47f af54 	bne.w	8018d9e <HAL_DMA_IRQHandler+0x24e>
 8018ef6:	e79e      	b.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018ef8:	2408      	movs	r4, #8
 8018efa:	4084      	lsls	r4, r0
 8018efc:	420c      	tst	r4, r1
 8018efe:	d09a      	beq.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
 8018f00:	071b      	lsls	r3, r3, #28
 8018f02:	d598      	bpl.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018f04:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8018f06:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018f08:	f023 030e 	bic.w	r3, r3, #14
 8018f0c:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018f0e:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8018f10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018f12:	fa03 f000 	lsl.w	r0, r3, r0
 8018f16:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018f18:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8018f1a:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8018f1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8018f22:	2a00      	cmp	r2, #0
 8018f24:	d087      	beq.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8018f26:	4638      	mov	r0, r7
}
 8018f28:	b003      	add	sp, #12
 8018f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8018f2e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018f30:	069b      	lsls	r3, r3, #26
 8018f32:	d403      	bmi.n	8018f3c <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018f34:	6813      	ldr	r3, [r2, #0]
 8018f36:	f023 0304 	bic.w	r3, r3, #4
 8018f3a:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8018f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	f47f af2d 	bne.w	8018d9e <HAL_DMA_IRQHandler+0x24e>
 8018f44:	e777      	b.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018f46:	f013 0320 	ands.w	r3, r3, #32
 8018f4a:	d108      	bne.n	8018f5e <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018f4c:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8018f4e:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018f50:	f021 010a 	bic.w	r1, r1, #10
 8018f54:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8018f56:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8018f5a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8018f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	f47f af1c 	bne.w	8018d9e <HAL_DMA_IRQHandler+0x24e>
 8018f66:	e766      	b.n	8018e36 <HAL_DMA_IRQHandler+0x2e6>
 8018f68:	58025408 	.word	0x58025408
 8018f6c:	5802541c 	.word	0x5802541c
 8018f70:	58025494 	.word	0x58025494

08018f74 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop

08018f78 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d035      	beq.n	8018fe8 <HAL_DMA2D_Init+0x70>
{
 8018f7c:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8018f7e:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8018f82:	4604      	mov	r4, r0
 8018f84:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8018f88:	b34b      	cbz	r3, 8018fde <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8018f8a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8018f8c:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8018f8e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8018f90:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8018f94:	69e1      	ldr	r1, [r4, #28]
 8018f96:	681d      	ldr	r5, [r3, #0]
 8018f98:	4814      	ldr	r0, [pc, #80]	@ (8018fec <HAL_DMA2D_Init+0x74>)
 8018f9a:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8018f9c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8018f9e:	4028      	ands	r0, r5
 8018fa0:	4301      	orrs	r1, r0
 8018fa2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8018fa4:	69a1      	ldr	r1, [r4, #24]
 8018fa6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8018fa8:	430a      	orrs	r2, r1
 8018faa:	4911      	ldr	r1, [pc, #68]	@ (8018ff0 <HAL_DMA2D_Init+0x78>)
 8018fac:	4001      	ands	r1, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8018fae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8018fb0:	430a      	orrs	r2, r1
 8018fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8018fb4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8018fb6:	f36f 010f 	bfc	r1, #0, #16
 8018fba:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8018fbc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8018fc0:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8018fc2:	0552      	lsls	r2, r2, #21
 8018fc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018fc6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8018fca:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8018fce:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8018fd0:	430a      	orrs	r2, r1
 8018fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8018fd4:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8018fd6:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8018fd8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8018fdc:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8018fde:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8018fe2:	f7ff ffc7 	bl	8018f74 <HAL_DMA2D_MspInit>
 8018fe6:	e7d0      	b.n	8018f8a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8018fe8:	2001      	movs	r0, #1
}
 8018fea:	4770      	bx	lr
 8018fec:	fff8ffbf 	.word	0xfff8ffbf
 8018ff0:	fffffef8 	.word	0xfffffef8

08018ff4 <HAL_DMA2D_MspDeInit>:
  * @brief  DeInitializes the DMA2D MSP.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef *hdma2d)
 8018ff4:	4770      	bx	lr
 8018ff6:	bf00      	nop

08018ff8 <HAL_DMA2D_DeInit>:
  if (hdma2d == NULL)
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d07e      	beq.n	80190fa <HAL_DMA2D_DeInit+0x102>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8018ffc:	4b40      	ldr	r3, [pc, #256]	@ (8019100 <HAL_DMA2D_DeInit+0x108>)
 8018ffe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
{
 8019002:	b570      	push	{r4, r5, r6, lr}
 8019004:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8019006:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8019008:	06d8      	lsls	r0, r3, #27
 801900a:	d508      	bpl.n	801901e <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 801900c:	6823      	ldr	r3, [r4, #0]
 801900e:	07d9      	lsls	r1, r3, #31
 8019010:	d418      	bmi.n	8019044 <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8019012:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019014:	069a      	lsls	r2, r3, #26
 8019016:	d45d      	bmi.n	80190d4 <HAL_DMA2D_DeInit+0xdc>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8019018:	69e3      	ldr	r3, [r4, #28]
 801901a:	069b      	lsls	r3, r3, #26
 801901c:	d431      	bmi.n	8019082 <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 801901e:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 8019020:	233f      	movs	r3, #63	@ 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 8019022:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 8019024:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8019026:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 8019028:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 801902a:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 801902c:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 801902e:	6266      	str	r6, [r4, #36]	@ 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8019030:	6366      	str	r6, [r4, #52]	@ 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 8019032:	f7ff ffdf 	bl	8018ff4 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8019036:	666e      	str	r6, [r5, #100]	@ 0x64
  return HAL_OK;
 8019038:	4630      	mov	r0, r6
  __HAL_UNLOCK(hdma2d);
 801903a:	f885 6060 	strb.w	r6, [r5, #96]	@ 0x60
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 801903e:	f885 6061 	strb.w	r6, [r5, #97]	@ 0x61
}
 8019042:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 8019044:	6823      	ldr	r3, [r4, #0]
 8019046:	f023 0305 	bic.w	r3, r3, #5
 801904a:	f043 0304 	orr.w	r3, r3, #4
 801904e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019050:	f7fe fbda 	bl	8017808 <HAL_GetTick>
 8019054:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8019056:	e005      	b.n	8019064 <HAL_DMA2D_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 8019058:	f7fe fbd6 	bl	8017808 <HAL_GetTick>
 801905c:	1b80      	subs	r0, r0, r6
 801905e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8019062:	d82b      	bhi.n	80190bc <HAL_DMA2D_DeInit+0xc4>
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8019064:	682c      	ldr	r4, [r5, #0]
 8019066:	6823      	ldr	r3, [r4, #0]
 8019068:	f013 0301 	ands.w	r3, r3, #1
 801906c:	d1f4      	bne.n	8019058 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 801906e:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8019070:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 8019072:	f422 520c 	bic.w	r2, r2, #8960	@ 0x2300
 8019076:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8019078:	f885 1061 	strb.w	r1, [r5, #97]	@ 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 801907c:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60

  return HAL_OK;
 8019080:	e7cd      	b.n	801901e <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8019082:	6823      	ldr	r3, [r4, #0]
 8019084:	f043 0304 	orr.w	r3, r3, #4
 8019088:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 801908a:	f7fe fbbd 	bl	8017808 <HAL_GetTick>
 801908e:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 8019090:	e005      	b.n	801909e <HAL_DMA2D_DeInit+0xa6>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 8019092:	f7fe fbb9 	bl	8017808 <HAL_GetTick>
 8019096:	1b80      	subs	r0, r0, r6
 8019098:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 801909c:	d80e      	bhi.n	80190bc <HAL_DMA2D_DeInit+0xc4>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 801909e:	69e3      	ldr	r3, [r4, #28]
 80190a0:	f013 0320 	ands.w	r3, r3, #32
 80190a4:	d1f5      	bne.n	8019092 <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 80190a6:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80190a8:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 80190aa:	6822      	ldr	r2, [r4, #0]
 80190ac:	f422 5264 	bic.w	r2, r2, #14592	@ 0x3900
 80190b0:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80190b2:	f885 1061 	strb.w	r1, [r5, #97]	@ 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80190b6:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60

  return HAL_OK;
 80190ba:	e7b0      	b.n	801901e <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80190bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80190be:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 80190c0:	2100      	movs	r1, #0
    return HAL_ERROR;
 80190c2:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80190c4:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 80190c8:	f885 1060 	strb.w	r1, [r5, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80190cc:	666b      	str	r3, [r5, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80190ce:	f885 2061 	strb.w	r2, [r5, #97]	@ 0x61
}
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80190d4:	6823      	ldr	r3, [r4, #0]
 80190d6:	f043 0304 	orr.w	r3, r3, #4
 80190da:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80190dc:	f7fe fb94 	bl	8017808 <HAL_GetTick>
 80190e0:	4606      	mov	r6, r0
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 80190e2:	e005      	b.n	80190f0 <HAL_DMA2D_DeInit+0xf8>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 80190e4:	f7fe fb90 	bl	8017808 <HAL_GetTick>
 80190e8:	1b80      	subs	r0, r0, r6
 80190ea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80190ee:	d8e5      	bhi.n	80190bc <HAL_DMA2D_DeInit+0xc4>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 80190f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80190f2:	f013 0320 	ands.w	r3, r3, #32
 80190f6:	d1f5      	bne.n	80190e4 <HAL_DMA2D_DeInit+0xec>
 80190f8:	e7d5      	b.n	80190a6 <HAL_DMA2D_DeInit+0xae>
    return HAL_ERROR;
 80190fa:	2001      	movs	r0, #1
}
 80190fc:	4770      	bx	lr
 80190fe:	bf00      	nop
 8019100:	58024400 	.word	0x58024400

08019104 <HAL_DMA2D_Start>:
{
 8019104:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8019106:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 801910a:	2c01      	cmp	r4, #1
 801910c:	d039      	beq.n	8019182 <HAL_DMA2D_Start+0x7e>
 801910e:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019110:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8019112:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019116:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019118:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801911c:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019120:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019124:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019126:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 801912a:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 801912e:	ea43 030c 	orr.w	r3, r3, ip
 8019132:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8019134:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019136:	d00a      	beq.n	801914e <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8019138:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 801913c:	d024      	beq.n	8019188 <HAL_DMA2D_Start+0x84>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 801913e:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8019140:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8019142:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8019144:	f043 0301 	orr.w	r3, r3, #1
 8019148:	6023      	str	r3, [r4, #0]
}
 801914a:	bc70      	pop	{r4, r5, r6}
 801914c:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 801914e:	6882      	ldr	r2, [r0, #8]
 8019150:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8019154:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8019158:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 801915c:	b2c8      	uxtb	r0, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 801915e:	2a03      	cmp	r2, #3
 8019160:	d81f      	bhi.n	80191a2 <HAL_DMA2D_Start+0x9e>
 8019162:	e8df f002 	tbb	[pc, r2]
 8019166:	1b0c      	.short	0x1b0c
 8019168:	0213      	.short	0x0213
      tmp2 = (tmp2 >> 19U);
 801916a:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 801916c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 801916e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8019170:	0ff6      	lsrs	r6, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8019172:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8019176:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 801917a:	ea43 31c6 	orr.w	r1, r3, r6, lsl #15
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 801917e:	63a1      	str	r1, [r4, #56]	@ 0x38
 8019180:	e7de      	b.n	8019140 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 8019182:	2002      	movs	r0, #2
}
 8019184:	bc70      	pop	{r4, r5, r6}
 8019186:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8019188:	6161      	str	r1, [r4, #20]
 801918a:	e7d9      	b.n	8019140 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 801918c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 801918e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8019190:	02db      	lsls	r3, r3, #11
 8019192:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8019196:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 801919a:	e7f0      	b.n	801917e <HAL_DMA2D_Start+0x7a>
      tmp = (tmp3 | tmp2 | tmp4);
 801919c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80191a0:	e7ed      	b.n	801917e <HAL_DMA2D_Start+0x7a>
      tmp2 = (tmp2 >> 20U);
 80191a2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80191a4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80191a6:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80191a8:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80191aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80191ae:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80191b2:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
 80191b6:	e7e2      	b.n	801917e <HAL_DMA2D_Start+0x7a>

080191b8 <HAL_DMA2D_PollForTransfer>:
{
 80191b8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80191ba:	2300      	movs	r3, #0
{
 80191bc:	b082      	sub	sp, #8
 80191be:	4604      	mov	r4, r0
 80191c0:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80191c2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80191c4:	6803      	ldr	r3, [r0, #0]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	07d2      	lsls	r2, r2, #31
 80191ca:	d420      	bmi.n	801920e <HAL_DMA2D_PollForTransfer+0x56>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80191cc:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80191ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80191d0:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 80191d2:	0696      	lsls	r6, r2, #26
 80191d4:	d40a      	bmi.n	80191ec <HAL_DMA2D_PollForTransfer+0x34>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80191d6:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80191d8:	2201      	movs	r2, #1
  return HAL_OK;
 80191da:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80191dc:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80191de:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 80191e2:	2300      	movs	r3, #0
 80191e4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 80191e8:	b002      	add	sp, #8
 80191ea:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80191ec:	f7fe fb0c 	bl	8017808 <HAL_GetTick>
 80191f0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80191f2:	1c68      	adds	r0, r5, #1
 80191f4:	d17a      	bne.n	80192ec <HAL_DMA2D_PollForTransfer+0x134>
 80191f6:	6823      	ldr	r3, [r4, #0]
 80191f8:	e005      	b.n	8019206 <HAL_DMA2D_PollForTransfer+0x4e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80191fa:	685a      	ldr	r2, [r3, #4]
 80191fc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80191fe:	9a01      	ldr	r2, [sp, #4]
 8019200:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8019204:	d134      	bne.n	8019270 <HAL_DMA2D_PollForTransfer+0xb8>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8019206:	685a      	ldr	r2, [r3, #4]
 8019208:	06d1      	lsls	r1, r2, #27
 801920a:	d4e4      	bmi.n	80191d6 <HAL_DMA2D_PollForTransfer+0x1e>
 801920c:	e7f5      	b.n	80191fa <HAL_DMA2D_PollForTransfer+0x42>
    tickstart = HAL_GetTick();
 801920e:	f7fe fafb 	bl	8017808 <HAL_GetTick>
 8019212:	1c6b      	adds	r3, r5, #1
 8019214:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8019216:	d146      	bne.n	80192a6 <HAL_DMA2D_PollForTransfer+0xee>
 8019218:	6823      	ldr	r3, [r4, #0]
 801921a:	e005      	b.n	8019228 <HAL_DMA2D_PollForTransfer+0x70>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 801921c:	685a      	ldr	r2, [r3, #4]
 801921e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8019220:	9a01      	ldr	r2, [sp, #4]
 8019222:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8019226:	d10a      	bne.n	801923e <HAL_DMA2D_PollForTransfer+0x86>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8019228:	685a      	ldr	r2, [r3, #4]
 801922a:	0795      	lsls	r5, r2, #30
 801922c:	d5f6      	bpl.n	801921c <HAL_DMA2D_PollForTransfer+0x64>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 801922e:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8019230:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8019232:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8019234:	0691      	lsls	r1, r2, #26
 8019236:	d5ce      	bpl.n	80191d6 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 8019238:	f7fe fae6 	bl	8017808 <HAL_GetTick>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 801923c:	e7db      	b.n	80191f6 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 801923e:	9a01      	ldr	r2, [sp, #4]
 8019240:	0690      	lsls	r0, r2, #26
 8019242:	d503      	bpl.n	801924c <HAL_DMA2D_PollForTransfer+0x94>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8019244:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019246:	f042 0202 	orr.w	r2, r2, #2
 801924a:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 801924c:	9a01      	ldr	r2, [sp, #4]
 801924e:	07d1      	lsls	r1, r2, #31
 8019250:	d503      	bpl.n	801925a <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8019252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019254:	f042 0201 	orr.w	r2, r2, #1
 8019258:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801925a:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801925c:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801925e:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019260:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 8019264:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 8019266:	2300      	movs	r3, #0
 8019268:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 801926c:	b002      	add	sp, #8
 801926e:	bd70      	pop	{r4, r5, r6, pc}
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8019270:	9a01      	ldr	r2, [sp, #4]
 8019272:	0712      	lsls	r2, r2, #28
 8019274:	d503      	bpl.n	801927e <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8019276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019278:	f042 0204 	orr.w	r2, r2, #4
 801927c:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 801927e:	9a01      	ldr	r2, [sp, #4]
 8019280:	0696      	lsls	r6, r2, #26
 8019282:	d503      	bpl.n	801928c <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8019284:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019286:	f042 0202 	orr.w	r2, r2, #2
 801928a:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 801928c:	9a01      	ldr	r2, [sp, #4]
 801928e:	07d5      	lsls	r5, r2, #31
 8019290:	d503      	bpl.n	801929a <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8019292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019294:	f042 0201 	orr.w	r2, r2, #1
 8019298:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801929a:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801929c:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801929e:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80192a0:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 80192a4:	e7de      	b.n	8019264 <HAL_DMA2D_PollForTransfer+0xac>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80192a6:	6823      	ldr	r3, [r4, #0]
 80192a8:	685a      	ldr	r2, [r3, #4]
 80192aa:	0792      	lsls	r2, r2, #30
 80192ac:	d415      	bmi.n	80192da <HAL_DMA2D_PollForTransfer+0x122>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80192ae:	685a      	ldr	r2, [r3, #4]
 80192b0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80192b2:	9a01      	ldr	r2, [sp, #4]
 80192b4:	f012 0f21 	tst.w	r2, #33	@ 0x21
 80192b8:	d1c1      	bne.n	801923e <HAL_DMA2D_PollForTransfer+0x86>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80192ba:	f7fe faa5 	bl	8017808 <HAL_GetTick>
 80192be:	1b83      	subs	r3, r0, r6
 80192c0:	42ab      	cmp	r3, r5
 80192c2:	d801      	bhi.n	80192c8 <HAL_DMA2D_PollForTransfer+0x110>
 80192c4:	2d00      	cmp	r5, #0
 80192c6:	d1ee      	bne.n	80192a6 <HAL_DMA2D_PollForTransfer+0xee>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80192c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80192ca:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 80192cc:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80192ce:	f043 0320 	orr.w	r3, r3, #32
 80192d2:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80192d4:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 80192d8:	e783      	b.n	80191e2 <HAL_DMA2D_PollForTransfer+0x2a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80192da:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80192dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80192de:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 80192e0:	0692      	lsls	r2, r2, #26
 80192e2:	f57f af78 	bpl.w	80191d6 <HAL_DMA2D_PollForTransfer+0x1e>
    tickstart = HAL_GetTick();
 80192e6:	f7fe fa8f 	bl	8017808 <HAL_GetTick>
 80192ea:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80192ec:	6823      	ldr	r3, [r4, #0]
 80192ee:	685a      	ldr	r2, [r3, #4]
 80192f0:	06d0      	lsls	r0, r2, #27
 80192f2:	f53f af70 	bmi.w	80191d6 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80192f6:	685a      	ldr	r2, [r3, #4]
 80192f8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80192fa:	9a01      	ldr	r2, [sp, #4]
 80192fc:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8019300:	d1b6      	bne.n	8019270 <HAL_DMA2D_PollForTransfer+0xb8>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019302:	f7fe fa81 	bl	8017808 <HAL_GetTick>
 8019306:	1b83      	subs	r3, r0, r6
 8019308:	42ab      	cmp	r3, r5
 801930a:	d8dd      	bhi.n	80192c8 <HAL_DMA2D_PollForTransfer+0x110>
 801930c:	2d00      	cmp	r5, #0
 801930e:	d1ed      	bne.n	80192ec <HAL_DMA2D_PollForTransfer+0x134>
 8019310:	e7da      	b.n	80192c8 <HAL_DMA2D_PollForTransfer+0x110>
 8019312:	bf00      	nop

08019314 <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8019314:	4770      	bx	lr
 8019316:	bf00      	nop

08019318 <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8019318:	4770      	bx	lr
 801931a:	bf00      	nop

0801931c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 801931c:	6803      	ldr	r3, [r0, #0]
{
 801931e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8019320:	685d      	ldr	r5, [r3, #4]
{
 8019322:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8019324:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8019326:	07ea      	lsls	r2, r5, #31
 8019328:	d501      	bpl.n	801932e <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 801932a:	05f1      	lsls	r1, r6, #23
 801932c:	d456      	bmi.n	80193dc <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 801932e:	06aa      	lsls	r2, r5, #26
 8019330:	d501      	bpl.n	8019336 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8019332:	04b3      	lsls	r3, r6, #18
 8019334:	d43b      	bmi.n	80193ae <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8019336:	0728      	lsls	r0, r5, #28
 8019338:	d501      	bpl.n	801933e <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 801933a:	0531      	lsls	r1, r6, #20
 801933c:	d421      	bmi.n	8019382 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 801933e:	076a      	lsls	r2, r5, #29
 8019340:	d501      	bpl.n	8019346 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8019342:	0573      	lsls	r3, r6, #21
 8019344:	d472      	bmi.n	801942c <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8019346:	07a8      	lsls	r0, r5, #30
 8019348:	d501      	bpl.n	801934e <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 801934a:	05b1      	lsls	r1, r6, #22
 801934c:	d404      	bmi.n	8019358 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 801934e:	06ea      	lsls	r2, r5, #27
 8019350:	d501      	bpl.n	8019356 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8019352:	04f3      	lsls	r3, r6, #19
 8019354:	d457      	bmi.n	8019406 <HAL_DMA2D_IRQHandler+0xea>
}
 8019356:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8019358:	6823      	ldr	r3, [r4, #0]
 801935a:	681a      	ldr	r2, [r3, #0]
 801935c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8019360:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8019362:	2202      	movs	r2, #2
 8019364:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8019366:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8019368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801936a:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 801936c:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801936e:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8019372:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8019376:	6a23      	ldr	r3, [r4, #32]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d0e8      	beq.n	801934e <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 801937c:	4620      	mov	r0, r4
 801937e:	4798      	blx	r3
 8019380:	e7e5      	b.n	801934e <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8019382:	6823      	ldr	r3, [r4, #0]
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801938a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 801938c:	2208      	movs	r2, #8
 801938e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019390:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8019392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019394:	4313      	orrs	r3, r2
 8019396:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019398:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 801939c:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 801939e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 80193a0:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d0ca      	beq.n	801933e <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 80193a8:	4620      	mov	r0, r4
 80193aa:	4798      	blx	r3
 80193ac:	e7c7      	b.n	801933e <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80193ae:	6823      	ldr	r3, [r4, #0]
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80193b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80193b8:	2220      	movs	r2, #32
 80193ba:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80193bc:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80193be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80193c0:	f043 0302 	orr.w	r3, r3, #2
 80193c4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80193c6:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80193ca:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 80193cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 80193ce:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d0af      	beq.n	8019336 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 80193d6:	4620      	mov	r0, r4
 80193d8:	4798      	blx	r3
 80193da:	e7ac      	b.n	8019336 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80193dc:	681a      	ldr	r2, [r3, #0]
 80193de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80193e2:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80193e4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80193e6:	f042 0201 	orr.w	r2, r2, #1
 80193ea:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80193ec:	2201      	movs	r2, #1
 80193ee:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80193f0:	2304      	movs	r3, #4
 80193f2:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80193f6:	2300      	movs	r3, #0
 80193f8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80193fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d095      	beq.n	801932e <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 8019402:	4798      	blx	r3
 8019404:	e793      	b.n	801932e <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8019406:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8019408:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801940a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 801940c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 801940e:	681a      	ldr	r2, [r3, #0]
 8019410:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8019414:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8019416:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8019418:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 801941a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 801941c:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8019420:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8019422:	f884 1061 	strb.w	r1, [r4, #97]	@ 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8019426:	f7ff ff77 	bl	8019318 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 801942a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801942c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 801942e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8019430:	681a      	ldr	r2, [r3, #0]
 8019432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019436:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8019438:	2204      	movs	r2, #4
 801943a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 801943c:	f7ff ff6a 	bl	8019314 <HAL_DMA2D_LineEventCallback>
 8019440:	e781      	b.n	8019346 <HAL_DMA2D_IRQHandler+0x2a>
 8019442:	bf00      	nop

08019444 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8019444:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8019448:	2a01      	cmp	r2, #1
 801944a:	d05f      	beq.n	801950c <HAL_DMA2D_ConfigLayer+0xc8>
 801944c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 801944e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019452:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019454:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8019458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 801945c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 801945e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019460:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 8019464:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8019468:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 801946a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801946c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 801946e:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8019470:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019472:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8019476:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 801947a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 801947c:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 801947e:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019482:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8019486:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8019488:	d923      	bls.n	80194d2 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 801948a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 801948e:	b971      	cbnz	r1, 80194ae <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8019490:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8019492:	491f      	ldr	r1, [pc, #124]	@ (8019510 <HAL_DMA2D_ConfigLayer+0xcc>)
 8019494:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8019496:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8019498:	4311      	orrs	r1, r2
 801949a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 801949c:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 801949e:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80194a0:	2101      	movs	r1, #1
  return HAL_OK;
 80194a2:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80194a4:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 80194a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 80194ac:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80194ae:	2d0b      	cmp	r5, #11
 80194b0:	d12a      	bne.n	8019508 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80194b2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80194b4:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 80194b8:	4816      	ldr	r0, [pc, #88]	@ (8019514 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80194ba:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194be:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80194c0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194c4:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80194c6:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194ca:	430a      	orrs	r2, r1
 80194cc:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80194ce:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80194d0:	e7e5      	b.n	801949e <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80194d2:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 80194d6:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80194d8:	b959      	cbnz	r1, 80194f2 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80194da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80194dc:	490c      	ldr	r1, [pc, #48]	@ (8019510 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80194de:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80194e0:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80194e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80194e4:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80194e6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80194ea:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80194ec:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80194ee:	62a0      	str	r0, [r4, #40]	@ 0x28
 80194f0:	e7d5      	b.n	801949e <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194f2:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80194f4:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194f8:	4905      	ldr	r1, [pc, #20]	@ (8019510 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80194fa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80194fc:	4029      	ands	r1, r5
 80194fe:	4311      	orrs	r1, r2
 8019500:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8019502:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8019504:	6226      	str	r6, [r4, #32]
 8019506:	e7ca      	b.n	801949e <HAL_DMA2D_ConfigLayer+0x5a>
 8019508:	4801      	ldr	r0, [pc, #4]	@ (8019510 <HAL_DMA2D_ConfigLayer+0xcc>)
 801950a:	e7d6      	b.n	80194ba <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 801950c:	2002      	movs	r0, #2
}
 801950e:	4770      	bx	lr
 8019510:	00ccfff0 	.word	0x00ccfff0
 8019514:	00c0fff0 	.word	0x00c0fff0

08019518 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8019518:	4770      	bx	lr
 801951a:	bf00      	nop

0801951c <HAL_DSI_Init>:
  if (hdsi == NULL)
 801951c:	2800      	cmp	r0, #0
 801951e:	f000 80b2 	beq.w	8019686 <HAL_DSI_Init+0x16a>
{
 8019522:	b570      	push	{r4, r5, r6, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8019524:	7c43      	ldrb	r3, [r0, #17]
{
 8019526:	b082      	sub	sp, #8
 8019528:	4604      	mov	r4, r0
 801952a:	460d      	mov	r5, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 801952c:	2b00      	cmp	r3, #0
 801952e:	f000 80a7 	beq.w	8019680 <HAL_DSI_Init+0x164>
  __HAL_DSI_REG_ENABLE(hdsi);
 8019532:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8019534:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8019536:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8019538:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 801953a:	9200      	str	r2, [sp, #0]
 801953c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8019540:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8019544:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8019548:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 801954c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019550:	9300      	str	r3, [sp, #0]
 8019552:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8019554:	f7fe f958 	bl	8017808 <HAL_GetTick>
 8019558:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 801955a:	e006      	b.n	801956a <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 801955c:	f7fe f954 	bl	8017808 <HAL_GetTick>
 8019560:	1b80      	subs	r0, r0, r6
 8019562:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8019566:	f200 8088 	bhi.w	801967a <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 801956a:	6823      	ldr	r3, [r4, #0]
 801956c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8019570:	04d1      	lsls	r1, r2, #19
 8019572:	d5f3      	bpl.n	801955c <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8019574:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8019578:	4a44      	ldr	r2, [pc, #272]	@ (801968c <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 801957a:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 801957c:	400a      	ands	r2, r1
 801957e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8019582:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8019584:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8019588:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 801958a:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 801958e:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8019590:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  HAL_Delay(1);
 8019594:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8019596:	430a      	orrs	r2, r1
  __HAL_DSI_PLL_ENABLE(hdsi);
 8019598:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 801959a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 801959e:	9101      	str	r1, [sp, #4]
 80195a0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80195a4:	4302      	orrs	r2, r0
 80195a6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80195aa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80195ae:	4003      	ands	r3, r0
 80195b0:	9301      	str	r3, [sp, #4]
 80195b2:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80195b4:	f7fe f92e 	bl	8017814 <HAL_Delay>
  tickstart = HAL_GetTick();
 80195b8:	f7fe f926 	bl	8017808 <HAL_GetTick>
 80195bc:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80195be:	e005      	b.n	80195cc <HAL_DSI_Init+0xb0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80195c0:	f7fe f922 	bl	8017808 <HAL_GetTick>
 80195c4:	1b80      	subs	r0, r0, r6
 80195c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80195ca:	d856      	bhi.n	801967a <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80195cc:	6823      	ldr	r3, [r4, #0]
 80195ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80195d2:	05d2      	lsls	r2, r2, #23
 80195d4:	d5f4      	bpl.n	80195c0 <HAL_DSI_Init+0xa4>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80195d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80195da:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80195dc:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80195e0:	68a0      	ldr	r0, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80195e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80195e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80195ea:	f022 0203 	bic.w	r2, r2, #3
 80195ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80195f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80195f6:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80195f8:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80195fa:	f042 0201 	orr.w	r2, r2, #1
 80195fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8019602:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8019606:	f022 0203 	bic.w	r2, r2, #3
 801960a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 801960e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8019612:	430a      	orrs	r2, r1
 8019614:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8019618:	689a      	ldr	r2, [r3, #8]
 801961a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801961e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8019620:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8019622:	6899      	ldr	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8019624:	2a01      	cmp	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8019626:	ea41 0100 	orr.w	r1, r1, r0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 801962a:	6828      	ldr	r0, [r5, #0]
 801962c:	bf38      	it	cc
 801962e:	2201      	movcc	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8019630:	6099      	str	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8019632:	68a9      	ldr	r1, [r5, #8]
 8019634:	4d16      	ldr	r5, [pc, #88]	@ (8019690 <HAL_DSI_Init+0x174>)
 8019636:	f001 0103 	and.w	r1, r1, #3
 801963a:	fb05 f202 	mul.w	r2, r5, r2
 801963e:	408a      	lsls	r2, r1
 8019640:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8019644:	fb01 f000 	mul.w	r0, r1, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8019648:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 801964c:	fbb2 f2f0 	udiv	r2, r2, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8019650:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8019654:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8019658:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 801965a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 801965e:	4302      	orrs	r2, r0
  return HAL_OK;
 8019660:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8019662:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->State = HAL_DSI_STATE_READY;
 8019666:	2201      	movs	r2, #1
  hdsi->Instance->IER[0U] = 0U;
 8019668:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 801966c:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8019670:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8019672:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8019674:	7462      	strb	r2, [r4, #17]
}
 8019676:	b002      	add	sp, #8
 8019678:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 801967a:	2003      	movs	r0, #3
}
 801967c:	b002      	add	sp, #8
 801967e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8019680:	f7ff ff4a 	bl	8019518 <HAL_DSI_MspInit>
 8019684:	e755      	b.n	8019532 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8019686:	2001      	movs	r0, #1
}
 8019688:	4770      	bx	lr
 801968a:	bf00      	nop
 801968c:	fffc8603 	.word	0xfffc8603
 8019690:	003d0900 	.word	0x003d0900

08019694 <HAL_DSI_TearingEffectCallback>:
  * @brief  Tearing Effect DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
 8019694:	4770      	bx	lr
 8019696:	bf00      	nop

08019698 <HAL_DSI_EndOfRefreshCallback>:
  * @brief  End of Refresh DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
 8019698:	4770      	bx	lr
 801969a:	bf00      	nop

0801969c <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 801969c:	4770      	bx	lr
 801969e:	bf00      	nop

080196a0 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80196a0:	6803      	ldr	r3, [r0, #0]
 80196a2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80196a6:	07d1      	lsls	r1, r2, #31
{
 80196a8:	b510      	push	{r4, lr}
 80196aa:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80196ac:	d503      	bpl.n	80196b6 <HAL_DSI_IRQHandler+0x16>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80196ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80196b2:	07d2      	lsls	r2, r2, #31
 80196b4:	d462      	bmi.n	801977c <HAL_DSI_IRQHandler+0xdc>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80196b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80196ba:	0791      	lsls	r1, r2, #30
 80196bc:	d503      	bpl.n	80196c6 <HAL_DSI_IRQHandler+0x26>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80196be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80196c2:	0792      	lsls	r2, r2, #30
 80196c4:	d44f      	bmi.n	8019766 <HAL_DSI_IRQHandler+0xc6>
  if (hdsi->ErrorMsk != 0U)
 80196c6:	69a3      	ldr	r3, [r4, #24]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d04b      	beq.n	8019764 <HAL_DSI_IRQHandler+0xc4>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80196cc:	6821      	ldr	r1, [r4, #0]
 80196ce:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80196d2:	f8d1 00c4 	ldr.w	r0, [r1, #196]	@ 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80196d6:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80196da:	4002      	ands	r2, r0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80196dc:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 80196e0:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80196e2:	b291      	uxth	r1, r2
 80196e4:	b119      	cbz	r1, 80196ee <HAL_DSI_IRQHandler+0x4e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80196e6:	6961      	ldr	r1, [r4, #20]
 80196e8:	f041 0101 	orr.w	r1, r1, #1
 80196ec:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80196ee:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 80196f2:	d003      	beq.n	80196fc <HAL_DSI_IRQHandler+0x5c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80196f4:	6962      	ldr	r2, [r4, #20]
 80196f6:	f042 0202 	orr.w	r2, r2, #2
 80196fa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80196fc:	07d8      	lsls	r0, r3, #31
 80196fe:	d503      	bpl.n	8019708 <HAL_DSI_IRQHandler+0x68>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8019700:	6962      	ldr	r2, [r4, #20]
 8019702:	f042 0204 	orr.w	r2, r2, #4
 8019706:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8019708:	0799      	lsls	r1, r3, #30
 801970a:	d503      	bpl.n	8019714 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 801970c:	6962      	ldr	r2, [r4, #20]
 801970e:	f042 0208 	orr.w	r2, r2, #8
 8019712:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8019714:	f013 0f0c 	tst.w	r3, #12
 8019718:	d003      	beq.n	8019722 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 801971a:	6962      	ldr	r2, [r4, #20]
 801971c:	f042 0210 	orr.w	r2, r2, #16
 8019720:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8019722:	06da      	lsls	r2, r3, #27
 8019724:	d503      	bpl.n	801972e <HAL_DSI_IRQHandler+0x8e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8019726:	6962      	ldr	r2, [r4, #20]
 8019728:	f042 0220 	orr.w	r2, r2, #32
 801972c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 801972e:	0698      	lsls	r0, r3, #26
 8019730:	d503      	bpl.n	801973a <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8019732:	6962      	ldr	r2, [r4, #20]
 8019734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019738:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 801973a:	0659      	lsls	r1, r3, #25
 801973c:	d503      	bpl.n	8019746 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 801973e:	6962      	ldr	r2, [r4, #20]
 8019740:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8019744:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8019746:	061a      	lsls	r2, r3, #24
 8019748:	d503      	bpl.n	8019752 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 801974a:	6962      	ldr	r2, [r4, #20]
 801974c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019750:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8019752:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8019756:	d003      	beq.n	8019760 <HAL_DSI_IRQHandler+0xc0>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8019758:	6963      	ldr	r3, [r4, #20]
 801975a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801975e:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8019760:	6963      	ldr	r3, [r4, #20]
 8019762:	b93b      	cbnz	r3, 8019774 <HAL_DSI_IRQHandler+0xd4>
}
 8019764:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8019766:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8019768:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 801976a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 801976e:	f7ff ff93 	bl	8019698 <HAL_DSI_EndOfRefreshCallback>
 8019772:	e7a8      	b.n	80196c6 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8019774:	4620      	mov	r0, r4
 8019776:	f7ff ff91 	bl	801969c <HAL_DSI_ErrorCallback>
}
 801977a:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 801977c:	2201      	movs	r2, #1
 801977e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8019782:	f7ff ff87 	bl	8019694 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8019786:	6823      	ldr	r3, [r4, #0]
 8019788:	e795      	b.n	80196b6 <HAL_DSI_IRQHandler+0x16>
 801978a:	bf00      	nop

0801978c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 801978c:	7c03      	ldrb	r3, [r0, #16]
 801978e:	2b01      	cmp	r3, #1
 8019790:	f000 80ee 	beq.w	8019970 <HAL_DSI_ConfigVideoMode+0x1e4>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8019794:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8019796:	2201      	movs	r2, #1
 8019798:	4684      	mov	ip, r0
{
 801979a:	b410      	push	{r4}
  __HAL_LOCK(hdsi);
 801979c:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 801979e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80197a0:	68c8      	ldr	r0, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80197a2:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80197a6:	694c      	ldr	r4, [r1, #20]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80197a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80197aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80197ae:	f022 0201 	bic.w	r2, r2, #1
 80197b2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80197b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80197b8:	f022 0203 	bic.w	r2, r2, #3
 80197bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80197be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80197c0:	4302      	orrs	r2, r0
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80197c2:	6908      	ldr	r0, [r1, #16]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80197c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80197c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80197c8:	f36f 020d 	bfc	r2, #0, #14
 80197cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80197ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80197d0:	4302      	orrs	r2, r0
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80197d2:	4868      	ldr	r0, [pc, #416]	@ (8019974 <HAL_DSI_ConfigVideoMode+0x1e8>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80197d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80197d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197d8:	4002      	ands	r2, r0
 80197da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80197dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197de:	4322      	orrs	r2, r4
 80197e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80197e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197e4:	4002      	ands	r2, r0
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80197e6:	6988      	ldr	r0, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80197e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80197ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197ec:	4302      	orrs	r2, r0

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80197ee:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80197f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80197f2:	68da      	ldr	r2, [r3, #12]
 80197f4:	f022 0203 	bic.w	r2, r2, #3
 80197f8:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80197fa:	68da      	ldr	r2, [r3, #12]
 80197fc:	4302      	orrs	r2, r0
 80197fe:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8019800:	695a      	ldr	r2, [r3, #20]
 8019802:	f022 0207 	bic.w	r2, r2, #7
 8019806:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8019808:	6958      	ldr	r0, [r3, #20]
 801980a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 801980e:	4322      	orrs	r2, r4
 8019810:	69cc      	ldr	r4, [r1, #28]
 8019812:	4322      	orrs	r2, r4
 8019814:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8019816:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8019818:	615a      	str	r2, [r3, #20]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 801981a:	2803      	cmp	r0, #3
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 801981c:	691a      	ldr	r2, [r3, #16]
 801981e:	f022 020f 	bic.w	r2, r2, #15
 8019822:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8019824:	691a      	ldr	r2, [r3, #16]
 8019826:	ea42 0200 	orr.w	r2, r2, r0
 801982a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 801982c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8019830:	f022 020e 	bic.w	r2, r2, #14
 8019834:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8019838:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 801983c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8019840:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8019844:	d107      	bne.n	8019856 <HAL_DSI_ConfigVideoMode+0xca>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8019846:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8019848:	6888      	ldr	r0, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 801984a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801984e:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8019850:	691a      	ldr	r2, [r3, #16]
 8019852:	4302      	orrs	r2, r0
 8019854:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8019856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019858:	4847      	ldr	r0, [pc, #284]	@ (8019978 <HAL_DSI_ConfigVideoMode+0x1ec>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 801985a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 801985c:	4002      	ands	r2, r0
 801985e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8019860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019862:	4322      	orrs	r2, r4
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8019864:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8019866:	649a      	str	r2, [r3, #72]	@ 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8019868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801986a:	4002      	ands	r2, r0
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 801986c:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 801986e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8019870:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019872:	4302      	orrs	r2, r0
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8019874:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8019876:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8019878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801987a:	f36f 020e 	bfc	r2, #0, #15
 801987e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8019880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019882:	4302      	orrs	r2, r0
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8019884:	483d      	ldr	r0, [pc, #244]	@ (801997c <HAL_DSI_ConfigVideoMode+0x1f0>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8019886:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8019888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801988a:	4002      	ands	r2, r0
 801988c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 801988e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019890:	4322      	orrs	r2, r4

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8019892:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8019894:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8019896:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019898:	4002      	ands	r2, r0
 801989a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 801989c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801989e:	4322      	orrs	r2, r4
 80198a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80198a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80198a4:	4002      	ands	r2, r0
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80198a6:	6bc8      	ldr	r0, [r1, #60]	@ 0x3c
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80198a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80198aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80198ac:	4302      	orrs	r2, r0
 80198ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80198b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80198b2:	f36f 020d 	bfc	r2, #0, #14
 80198b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80198b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80198ba:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80198bc:	4302      	orrs	r2, r0

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80198be:	6c48      	ldr	r0, [r1, #68]	@ 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80198c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80198c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80198c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80198c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80198ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80198cc:	4302      	orrs	r2, r0

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80198ce:	6c88      	ldr	r0, [r1, #72]	@ 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80198d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80198d2:	699a      	ldr	r2, [r3, #24]
 80198d4:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 80198d8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80198da:	699a      	ldr	r2, [r3, #24]
 80198dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80198e0:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80198e2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80198e4:	699a      	ldr	r2, [r3, #24]
 80198e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80198ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80198ec:	699a      	ldr	r2, [r3, #24]
 80198ee:	4302      	orrs	r2, r0

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80198f0:	6d08      	ldr	r0, [r1, #80]	@ 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80198f2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80198f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80198f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80198fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80198fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80198fe:	4302      	orrs	r2, r0

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8019900:	6d48      	ldr	r0, [r1, #84]	@ 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8019902:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8019904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019906:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801990a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 801990c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801990e:	4302      	orrs	r2, r0

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8019910:	6d88      	ldr	r0, [r1, #88]	@ 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8019912:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8019914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801991a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 801991c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801991e:	4302      	orrs	r2, r0
 8019920:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8019922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8019924:	6dc8      	ldr	r0, [r1, #92]	@ 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8019926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801992a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 801992c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801992e:	4302      	orrs	r2, r0

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8019930:	6e08      	ldr	r0, [r1, #96]	@ 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8019932:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8019934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019936:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801993a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 801993c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801993e:	4302      	orrs	r2, r0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8019940:	e9d1 4019 	ldrd	r4, r0, [r1, #100]	@ 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8019944:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8019946:	2100      	movs	r1, #0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8019948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801994a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801994e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8019950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019952:	4322      	orrs	r2, r4
 8019954:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8019956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019958:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801995c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 801995e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019960:	4302      	orrs	r2, r0

  return HAL_OK;
 8019962:	4608      	mov	r0, r1
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8019964:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_UNLOCK(hdsi);
 8019966:	f88c 1010 	strb.w	r1, [ip, #16]
}
 801996a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801996e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8019970:	2002      	movs	r0, #2
}
 8019972:	4770      	bx	lr
 8019974:	ffffe000 	.word	0xffffe000
 8019978:	fffff000 	.word	0xfffff000
 801997c:	fffffc00 	.word	0xfffffc00

08019980 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8019980:	7c02      	ldrb	r2, [r0, #16]
{
 8019982:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8019984:	2a01      	cmp	r2, #1
 8019986:	d00d      	beq.n	80199a4 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8019988:	6802      	ldr	r2, [r0, #0]
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801998a:	f04f 0c00 	mov.w	ip, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 801998e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8019990:	f020 001f 	bic.w	r0, r0, #31
 8019994:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8019996:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8019998:	4301      	orrs	r1, r0

  return HAL_OK;
 801999a:	4660      	mov	r0, ip
  hdsi->Instance->PCR |= FlowControl;
 801999c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 801999e:	f883 c010 	strb.w	ip, [r3, #16]
  return HAL_OK;
 80199a2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80199a4:	2002      	movs	r0, #2
}
 80199a6:	4770      	bx	lr

080199a8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80199a8:	7c03      	ldrb	r3, [r0, #16]
 80199aa:	2b01      	cmp	r3, #1
 80199ac:	d021      	beq.n	80199f2 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80199ae:	6803      	ldr	r3, [r0, #0]
 80199b0:	2100      	movs	r1, #0
 80199b2:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80199b4:	4608      	mov	r0, r1
{
 80199b6:	b410      	push	{r4}
 80199b8:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 80199ba:	9100      	str	r1, [sp, #0]
 80199bc:	685c      	ldr	r4, [r3, #4]
 80199be:	f044 0401 	orr.w	r4, r4, #1
 80199c2:	605c      	str	r4, [r3, #4]
 80199c4:	685c      	ldr	r4, [r3, #4]
 80199c6:	f004 0401 	and.w	r4, r4, #1
 80199ca:	9400      	str	r4, [sp, #0]
 80199cc:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80199ce:	9101      	str	r1, [sp, #4]
 80199d0:	f8d3 4404 	ldr.w	r4, [r3, #1028]	@ 0x404
 80199d4:	f044 0408 	orr.w	r4, r4, #8
 80199d8:	f8c3 4404 	str.w	r4, [r3, #1028]	@ 0x404
 80199dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 80199e0:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80199e2:	f003 0308 	and.w	r3, r3, #8
 80199e6:	9301      	str	r3, [sp, #4]
 80199e8:	9b01      	ldr	r3, [sp, #4]
}
 80199ea:	b003      	add	sp, #12
 80199ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199f0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80199f2:	2002      	movs	r0, #2
}
 80199f4:	4770      	bx	lr
 80199f6:	bf00      	nop

080199f8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80199f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199fc:	4699      	mov	r9, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80199fe:	7c03      	ldrb	r3, [r0, #16]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d022      	beq.n	8019a4a <HAL_DSI_ShortWrite+0x52>
 8019a04:	2301      	movs	r3, #1
 8019a06:	4605      	mov	r5, r0
 8019a08:	4688      	mov	r8, r1
 8019a0a:	4617      	mov	r7, r2
 8019a0c:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8019a0e:	f7fd fefb 	bl	8017808 <HAL_GetTick>
 8019a12:	4606      	mov	r6, r0
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019a14:	e006      	b.n	8019a24 <HAL_DSI_ShortWrite+0x2c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8019a16:	f7fd fef7 	bl	8017808 <HAL_GetTick>
 8019a1a:	eba0 0c06 	sub.w	ip, r0, r6
 8019a1e:	f5bc 7f7a 	cmp.w	ip, #1000	@ 0x3e8
 8019a22:	d810      	bhi.n	8019a46 <HAL_DSI_ShortWrite+0x4e>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019a24:	682c      	ldr	r4, [r5, #0]
 8019a26:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8019a28:	07db      	lsls	r3, r3, #31
 8019a2a:	d5f4      	bpl.n	8019a16 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8019a2c:	ea47 2309 	orr.w	r3, r7, r9, lsl #8
 8019a30:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 8019a32:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8019a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019a38:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
 8019a3c:	66e3      	str	r3, [r4, #108]	@ 0x6c

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8019a3e:	2300      	movs	r3, #0
 8019a40:	742b      	strb	r3, [r5, #16]

  return status;
}
 8019a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8019a46:	2003      	movs	r0, #3
 8019a48:	e7f9      	b.n	8019a3e <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 8019a4a:	2002      	movs	r0, #2
}
 8019a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019a50 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8019a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a54:	461f      	mov	r7, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8019a56:	7c03      	ldrb	r3, [r0, #16]
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d05c      	beq.n	8019b16 <HAL_DSI_LongWrite+0xc6>
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	4605      	mov	r5, r0
 8019a60:	4688      	mov	r8, r1
 8019a62:	4691      	mov	r9, r2
 8019a64:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8019a66:	f7fd fecf 	bl	8017808 <HAL_GetTick>
 8019a6a:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019a6c:	e006      	b.n	8019a7c <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8019a6e:	f7fd fecb 	bl	8017808 <HAL_GetTick>
 8019a72:	eba0 0c06 	sub.w	ip, r0, r6
 8019a76:	f5bc 7f7a 	cmp.w	ip, #1000	@ 0x3e8
 8019a7a:	d848      	bhi.n	8019b0e <HAL_DSI_LongWrite+0xbe>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019a7c:	6829      	ldr	r1, [r5, #0]
 8019a7e:	6f4c      	ldr	r4, [r1, #116]	@ 0x74
 8019a80:	f014 0401 	ands.w	r4, r4, #1
 8019a84:	d0f3      	beq.n	8019a6e <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8019a86:	2f03      	cmp	r7, #3
 8019a88:	463b      	mov	r3, r7
 8019a8a:	bf28      	it	cs
 8019a8c:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 8019a8e:	2f00      	cmp	r7, #0
 8019a90:	d044      	beq.n	8019b1c <HAL_DSI_LongWrite+0xcc>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8019a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  for (count = 0U; count < nbBytes; count++)
 8019a94:	2f01      	cmp	r7, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8019a96:	9808      	ldr	r0, [sp, #32]
 8019a98:	7812      	ldrb	r2, [r2, #0]
 8019a9a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
  for (count = 0U; count < nbBytes; count++)
 8019a9e:	d909      	bls.n	8019ab4 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8019aa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
  for (count = 0U; count < nbBytes; count++)
 8019aa2:	2f02      	cmp	r7, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8019aa4:	7840      	ldrb	r0, [r0, #1]
 8019aa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 8019aaa:	d903      	bls.n	8019ab4 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8019aac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019aae:	7880      	ldrb	r0, [r0, #2]
 8019ab0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 8019ab4:	670a      	str	r2, [r1, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8019ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ab8:	18d0      	adds	r0, r2, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8019aba:	1afb      	subs	r3, r7, r3
 8019abc:	d017      	beq.n	8019aee <HAL_DSI_LongWrite+0x9e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8019abe:	2b04      	cmp	r3, #4
 8019ac0:	461c      	mov	r4, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019ac2:	7802      	ldrb	r2, [r0, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8019ac4:	bf28      	it	cs
 8019ac6:	2404      	movcs	r4, #4
    for (count = 0U; count < nbBytes; count++)
 8019ac8:	2b01      	cmp	r3, #1
 8019aca:	d90c      	bls.n	8019ae6 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019acc:	7846      	ldrb	r6, [r0, #1]
    for (count = 0U; count < nbBytes; count++)
 8019ace:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019ad0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    for (count = 0U; count < nbBytes; count++)
 8019ad4:	d907      	bls.n	8019ae6 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019ad6:	7886      	ldrb	r6, [r0, #2]
    for (count = 0U; count < nbBytes; count++)
 8019ad8:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019ada:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    for (count = 0U; count < nbBytes; count++)
 8019ade:	d902      	bls.n	8019ae6 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8019ae0:	78c6      	ldrb	r6, [r0, #3]
 8019ae2:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  while (uicounter != 0U)
 8019ae6:	1b1b      	subs	r3, r3, r4
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8019ae8:	4420      	add	r0, r4
    hdsi->Instance->GPDR = fifoword;
 8019aea:	670a      	str	r2, [r1, #112]	@ 0x70
  while (uicounter != 0U)
 8019aec:	d1e7      	bne.n	8019abe <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8019aee:	3701      	adds	r7, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019af0:	ea49 1388 	orr.w	r3, r9, r8, lsl #6
 8019af4:	023a      	lsls	r2, r7, #8
 8019af6:	4617      	mov	r7, r2
 8019af8:	b292      	uxth	r2, r2
 8019afa:	f407 077f 	and.w	r7, r7, #16711680	@ 0xff0000
 8019afe:	4313      	orrs	r3, r2
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8019b00:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b02:	433b      	orrs	r3, r7

  return HAL_OK;
 8019b04:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b06:	66cb      	str	r3, [r1, #108]	@ 0x6c
  __HAL_UNLOCK(hdsi);
 8019b08:	742a      	strb	r2, [r5, #16]
}
 8019b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8019b0e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8019b10:	742c      	strb	r4, [r5, #16]
}
 8019b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 8019b16:	2002      	movs	r0, #2
}
 8019b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 8019b1c:	9b08      	ldr	r3, [sp, #32]
 8019b1e:	670b      	str	r3, [r1, #112]	@ 0x70
  while (uicounter != 0U)
 8019b20:	e7e5      	b.n	8019aee <HAL_DSI_LongWrite+0x9e>
 8019b22:	bf00      	nop

08019b24 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8019b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b28:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8019b2a:	7c03      	ldrb	r3, [r0, #16]
{
 8019b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	f000 80a0 	beq.w	8019c76 <HAL_DSI_Read+0x152>
 8019b36:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8019b38:	2c02      	cmp	r4, #2
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	460f      	mov	r7, r1
 8019b3e:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 8019b40:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8019b42:	d85f      	bhi.n	8019c04 <HAL_DSI_Read+0xe0>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8019b44:	f1b9 0f14 	cmp.w	r9, #20
 8019b48:	d07b      	beq.n	8019c42 <HAL_DSI_Read+0x11e>
 8019b4a:	d80f      	bhi.n	8019b6c <HAL_DSI_Read+0x48>
 8019b4c:	f1b9 0f04 	cmp.w	r9, #4
 8019b50:	f000 808b 	beq.w	8019c6a <HAL_DSI_Read+0x146>
 8019b54:	f1b9 0f06 	cmp.w	r9, #6
 8019b58:	d17d      	bne.n	8019c56 <HAL_DSI_Read+0x132>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8019b5c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b5e:	021b      	lsls	r3, r3, #8
 8019b60:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8019b64:	f043 0306 	orr.w	r3, r3, #6
 8019b68:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 8019b6a:	e00f      	b.n	8019b8c <HAL_DSI_Read+0x68>
 8019b6c:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8019b70:	d171      	bne.n	8019c56 <HAL_DSI_Read+0x132>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8019b72:	990a      	ldr	r1, [sp, #40]	@ 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b74:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8019b76:	682a      	ldr	r2, [r5, #0]
 8019b78:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8019b7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019b80:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019b82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019b86:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8019b8a:	66d3      	str	r3, [r2, #108]	@ 0x6c

    return HAL_ERROR;
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8019b8c:	f7fd fe3c 	bl	8017808 <HAL_GetTick>

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8019b90:	2c00      	cmp	r4, #0
  tickstart = HAL_GetTick();
 8019b92:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 8019b94:	dd64      	ble.n	8019c60 <HAL_DSI_Read+0x13c>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8019b96:	6829      	ldr	r1, [r5, #0]
 8019b98:	e00f      	b.n	8019bba <HAL_DSI_Read+0x96>
        datasize--;
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8019b9a:	f7fd fe35 	bl	8017808 <HAL_GetTick>
 8019b9e:	1bc0      	subs	r0, r0, r7
 8019ba0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8019ba4:	d829      	bhi.n	8019bfa <HAL_DSI_Read+0xd6>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8019ba6:	6829      	ldr	r1, [r5, #0]
 8019ba8:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
 8019baa:	065a      	lsls	r2, r3, #25
 8019bac:	d403      	bmi.n	8019bb6 <HAL_DSI_Read+0x92>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8019bae:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
 8019bb2:	069b      	lsls	r3, r3, #26
 8019bb4:	d44f      	bmi.n	8019c56 <HAL_DSI_Read+0x132>
  while (((int32_t)(datasize)) > 0)
 8019bb6:	2c00      	cmp	r4, #0
 8019bb8:	dd52      	ble.n	8019c60 <HAL_DSI_Read+0x13c>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8019bba:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
 8019bbc:	06d8      	lsls	r0, r3, #27
 8019bbe:	d4ec      	bmi.n	8019b9a <HAL_DSI_Read+0x76>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8019bc0:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 8019bc2:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8019bc4:	4622      	mov	r2, r4
 8019bc6:	bf28      	it	cs
 8019bc8:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 8019bca:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8019bcc:	ea4f 2113 	mov.w	r1, r3, lsr #8
 8019bd0:	7033      	strb	r3, [r6, #0]
 8019bd2:	ea4f 4013 	mov.w	r0, r3, lsr #16
 8019bd6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 8019bda:	d906      	bls.n	8019bea <HAL_DSI_Read+0xc6>
 8019bdc:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8019bde:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 8019be0:	d903      	bls.n	8019bea <HAL_DSI_Read+0xc6>
 8019be2:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8019be4:	70b0      	strb	r0, [r6, #2]
 8019be6:	bf88      	it	hi
 8019be8:	70f3      	strbhi	r3, [r6, #3]
      for (count = 0U; count < nbbytes; count++)
 8019bea:	4416      	add	r6, r2
 8019bec:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8019bee:	f7fd fe0b 	bl	8017808 <HAL_GetTick>
 8019bf2:	1bc0      	subs	r0, r0, r7
 8019bf4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8019bf8:	d9d5      	bls.n	8019ba6 <HAL_DSI_Read+0x82>
      __HAL_UNLOCK(hdsi);
 8019bfa:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8019bfc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8019bfe:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8019c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 8019c04:	f7fd fe00 	bl	8017808 <HAL_GetTick>
 8019c08:	4680      	mov	r8, r0
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019c0a:	e006      	b.n	8019c1a <HAL_DSI_Read+0xf6>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8019c0c:	f7fd fdfc 	bl	8017808 <HAL_GetTick>
 8019c10:	eba0 0008 	sub.w	r0, r0, r8
 8019c14:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8019c18:	d81d      	bhi.n	8019c56 <HAL_DSI_Read+0x132>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8019c1a:	682b      	ldr	r3, [r5, #0]
 8019c1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8019c1e:	07d2      	lsls	r2, r2, #31
 8019c20:	d5f4      	bpl.n	8019c0c <HAL_DSI_Read+0xe8>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8019c22:	0222      	lsls	r2, r4, #8
 8019c24:	f1b9 0f14 	cmp.w	r9, #20
 8019c28:	ea4f 2104 	mov.w	r1, r4, lsl #8
 8019c2c:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8019c30:	b289      	uxth	r1, r1
 8019c32:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8019c36:	ea42 0201 	orr.w	r2, r2, r1
 8019c3a:	f042 0237 	orr.w	r2, r2, #55	@ 0x37
 8019c3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8019c40:	d183      	bne.n	8019b4a <HAL_DSI_Read+0x26>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8019c42:	990a      	ldr	r1, [sp, #40]	@ 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019c44:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8019c46:	682a      	ldr	r2, [r5, #0]
 8019c48:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019c4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019c4e:	f043 0314 	orr.w	r3, r3, #20
 8019c52:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 8019c54:	e79a      	b.n	8019b8c <HAL_DSI_Read+0x68>
    __HAL_UNLOCK(hdsi);
 8019c56:	2300      	movs	r3, #0
      return HAL_ERROR;
 8019c58:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdsi);
 8019c5a:	742b      	strb	r3, [r5, #16]
}
 8019c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 8019c60:	2300      	movs	r3, #0
  return HAL_OK;
 8019c62:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8019c64:	742b      	strb	r3, [r5, #16]
}
 8019c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019c6a:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8019c6c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8019c6e:	f047 0704 	orr.w	r7, r7, #4
 8019c72:	66df      	str	r7, [r3, #108]	@ 0x6c
}
 8019c74:	e78a      	b.n	8019b8c <HAL_DSI_Read+0x68>
  __HAL_LOCK(hdsi);
 8019c76:	2002      	movs	r0, #2
}
 8019c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019c7c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019c7c:	680b      	ldr	r3, [r1, #0]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	f000 81dc 	beq.w	801a03c <HAL_GPIO_Init+0x3c0>
 8019c84:	4ab4      	ldr	r2, [pc, #720]	@ (8019f58 <HAL_GPIO_Init+0x2dc>)
 8019c86:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8019c88:	f04f 0200 	mov.w	r2, #0
{
 8019c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8019c90:	f04f 0b01 	mov.w	fp, #1
{
 8019c94:	b085      	sub	sp, #20
 8019c96:	f000 8105 	beq.w	8019ea4 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8019c9a:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019c9e:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8019ca0:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8019ca4:	9b00      	ldr	r3, [sp, #0]
 8019ca6:	ea1c 0a03 	ands.w	sl, ip, r3
 8019caa:	f000 814b 	beq.w	8019f44 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019cae:	684d      	ldr	r5, [r1, #4]
 8019cb0:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019cb2:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019cb4:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019cb8:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019cbc:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019cc0:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019cc2:	f1b8 0f01 	cmp.w	r8, #1
 8019cc6:	f240 815d 	bls.w	8019f84 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019cca:	2f03      	cmp	r7, #3
 8019ccc:	f040 81cf 	bne.w	801a06e <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019cd0:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8019cd4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019cd6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8019cda:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019cde:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8019ce2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019ce4:	f000 812e 	beq.w	8019f44 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019ce8:	4e9c      	ldr	r6, [pc, #624]	@ (8019f5c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019cea:	f002 0703 	and.w	r7, r2, #3
 8019cee:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019cf0:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019cf4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019cf6:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019cfa:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019cfe:	4b98      	ldr	r3, [pc, #608]	@ (8019f60 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019d00:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8019d04:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8019d08:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019d0c:	4298      	cmp	r0, r3
 8019d0e:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019d12:	f004 0402 	and.w	r4, r4, #2
 8019d16:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8019d1a:	9403      	str	r4, [sp, #12]
 8019d1c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8019d1e:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019d20:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019d24:	f000 8178 	beq.w	801a018 <HAL_GPIO_Init+0x39c>
 8019d28:	4b8e      	ldr	r3, [pc, #568]	@ (8019f64 <HAL_GPIO_Init+0x2e8>)
 8019d2a:	4298      	cmp	r0, r3
 8019d2c:	f000 80de 	beq.w	8019eec <HAL_GPIO_Init+0x270>
 8019d30:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8019f68 <HAL_GPIO_Init+0x2ec>
 8019d34:	4560      	cmp	r0, ip
 8019d36:	f000 817b 	beq.w	801a030 <HAL_GPIO_Init+0x3b4>
 8019d3a:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8019f6c <HAL_GPIO_Init+0x2f0>
 8019d3e:	4560      	cmp	r0, ip
 8019d40:	f000 817d 	beq.w	801a03e <HAL_GPIO_Init+0x3c2>
 8019d44:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8019f70 <HAL_GPIO_Init+0x2f4>
 8019d48:	4560      	cmp	r0, ip
 8019d4a:	f000 816b 	beq.w	801a024 <HAL_GPIO_Init+0x3a8>
 8019d4e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8019f74 <HAL_GPIO_Init+0x2f8>
 8019d52:	4560      	cmp	r0, ip
 8019d54:	f000 8179 	beq.w	801a04a <HAL_GPIO_Init+0x3ce>
 8019d58:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8019f78 <HAL_GPIO_Init+0x2fc>
 8019d5c:	4560      	cmp	r0, ip
 8019d5e:	f000 817a 	beq.w	801a056 <HAL_GPIO_Init+0x3da>
 8019d62:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8019f7c <HAL_GPIO_Init+0x300>
 8019d66:	4560      	cmp	r0, ip
 8019d68:	f000 817b 	beq.w	801a062 <HAL_GPIO_Init+0x3e6>
 8019d6c:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8019f80 <HAL_GPIO_Init+0x304>
 8019d70:	4560      	cmp	r0, ip
 8019d72:	bf0c      	ite	eq
 8019d74:	f04f 0c09 	moveq.w	ip, #9
 8019d78:	f04f 0c0a 	movne.w	ip, #10
 8019d7c:	fa0c f707 	lsl.w	r7, ip, r7
 8019d80:	433c      	orrs	r4, r7
 8019d82:	e0b8      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8019d84:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019d88:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019d8a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019d8c:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019d90:	fa06 f807 	lsl.w	r8, r6, r7
 8019d94:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8019d98:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019d9c:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8019da0:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019da4:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8019da8:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019dac:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8019db0:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8019db4:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019db8:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019dba:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019dbe:	fa06 fe07 	lsl.w	lr, r6, r7
 8019dc2:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8019dc6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019dca:	d117      	bne.n	8019dfc <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019dcc:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019dd0:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8019dd2:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019dd6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019dda:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019dde:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8019de2:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019de6:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019de8:	260f      	movs	r6, #15
 8019dea:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019dee:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019df0:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019df4:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8019df8:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019dfc:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8019dfe:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019e00:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8019e04:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019e08:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8019e0c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019e0e:	d045      	beq.n	8019e9c <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019e10:	4f52      	ldr	r7, [pc, #328]	@ (8019f5c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019e12:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019e14:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8019e18:	f044 0402 	orr.w	r4, r4, #2
 8019e1c:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8019e20:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8019e24:	f022 0703 	bic.w	r7, r2, #3
 8019e28:	f004 0402 	and.w	r4, r4, #2
 8019e2c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8019e30:	9403      	str	r4, [sp, #12]
 8019e32:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8019e36:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019e38:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8019e3c:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019e40:	00a4      	lsls	r4, r4, #2
 8019e42:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019e46:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019e48:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019e4c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8019e4e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8019e52:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8019e56:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019e58:	f100 80d2 	bmi.w	801a000 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8019e5c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8019e5e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8019e62:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8019e64:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019e66:	02ae      	lsls	r6, r5, #10
 8019e68:	f100 80d3 	bmi.w	801a012 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8019e6c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8019e6e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8019e72:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8019e74:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019e78:	03ae      	lsls	r6, r5, #14
 8019e7a:	f100 80c7 	bmi.w	801a00c <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8019e7e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8019e80:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019e84:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8019e86:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8019e8a:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019e8e:	f100 80ba 	bmi.w	801a006 <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8019e92:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8019e94:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8019e98:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8019e9c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019e9e:	fa33 f402 	lsrs.w	r4, r3, r2
 8019ea2:	d055      	beq.n	8019f50 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8019ea4:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8019ea8:	ea13 0c0e 	ands.w	ip, r3, lr
 8019eac:	d0f6      	beq.n	8019e9c <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019eae:	684d      	ldr	r5, [r1, #4]
 8019eb0:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019eb2:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019eb4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019eb8:	fa06 f807 	lsl.w	r8, r6, r7
 8019ebc:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019ec0:	f104 38ff 	add.w	r8, r4, #4294967295
 8019ec4:	f1b8 0f01 	cmp.w	r8, #1
 8019ec8:	f67f af5c 	bls.w	8019d84 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019ecc:	2c03      	cmp	r4, #3
 8019ece:	d095      	beq.n	8019dfc <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8019ed0:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8019f58 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019ed4:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8019ed6:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019eda:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019ede:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019ee2:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8019ee6:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019eea:	e787      	b.n	8019dfc <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019eec:	f04f 0c02 	mov.w	ip, #2
 8019ef0:	fa0c f707 	lsl.w	r7, ip, r7
 8019ef4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019ef6:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019ef8:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8019efa:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8019efe:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8019f02:	bf4c      	ite	mi
 8019f04:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8019f08:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019f0a:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8019f0c:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8019f10:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8019f14:	bf54      	ite	pl
 8019f16:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8019f18:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019f1c:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8019f1e:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8019f22:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8019f26:	bf54      	ite	pl
 8019f28:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8019f2a:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019f2e:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8019f30:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8019f34:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8019f38:	bf54      	ite	pl
 8019f3a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8019f3c:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8019f40:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8019f44:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019f46:	9b00      	ldr	r3, [sp, #0]
 8019f48:	fa33 f402 	lsrs.w	r4, r3, r2
 8019f4c:	f47f aea8 	bne.w	8019ca0 <HAL_GPIO_Init+0x24>
  }
}
 8019f50:	b005      	add	sp, #20
 8019f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f56:	bf00      	nop
 8019f58:	58020000 	.word	0x58020000
 8019f5c:	58024400 	.word	0x58024400
 8019f60:	58020400 	.word	0x58020400
 8019f64:	58020800 	.word	0x58020800
 8019f68:	58020c00 	.word	0x58020c00
 8019f6c:	58021000 	.word	0x58021000
 8019f70:	58021400 	.word	0x58021400
 8019f74:	58021800 	.word	0x58021800
 8019f78:	58021c00 	.word	0x58021c00
 8019f7c:	58022000 	.word	0x58022000
 8019f80:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8019f84:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019f88:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019f8a:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019f8c:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019f90:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019f94:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019f96:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8019f9a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019f9e:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8019fa2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019fa6:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8019faa:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019fae:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8019fb2:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019fb6:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8019fba:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019fbe:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019fc2:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8019fc6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019fca:	f47f ae81 	bne.w	8019cd0 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019fce:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019fd2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8019fd4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019fd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8019fdc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019fe0:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8019fe4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019fe8:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019fea:	230f      	movs	r3, #15
 8019fec:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019ff0:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019ff2:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019ff6:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8019ffa:	f8c8 c020 	str.w	ip, [r8, #32]
 8019ffe:	e667      	b.n	8019cd0 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 801a000:	ea44 040c 	orr.w	r4, r4, ip
 801a004:	e72b      	b.n	8019e5e <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 801a006:	ea44 040c 	orr.w	r4, r4, ip
 801a00a:	e743      	b.n	8019e94 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 801a00c:	ea4c 0404 	orr.w	r4, ip, r4
 801a010:	e736      	b.n	8019e80 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 801a012:	ea44 040c 	orr.w	r4, r4, ip
 801a016:	e72a      	b.n	8019e6e <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801a018:	f04f 0c01 	mov.w	ip, #1
 801a01c:	fa0c f707 	lsl.w	r7, ip, r7
 801a020:	433c      	orrs	r4, r7
 801a022:	e768      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a024:	f04f 0c05 	mov.w	ip, #5
 801a028:	fa0c f707 	lsl.w	r7, ip, r7
 801a02c:	433c      	orrs	r4, r7
 801a02e:	e762      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a030:	f04f 0c03 	mov.w	ip, #3
 801a034:	fa0c f707 	lsl.w	r7, ip, r7
 801a038:	433c      	orrs	r4, r7
 801a03a:	e75c      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a03c:	4770      	bx	lr
 801a03e:	f04f 0c04 	mov.w	ip, #4
 801a042:	fa0c f707 	lsl.w	r7, ip, r7
 801a046:	433c      	orrs	r4, r7
 801a048:	e755      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a04a:	f04f 0c06 	mov.w	ip, #6
 801a04e:	fa0c f707 	lsl.w	r7, ip, r7
 801a052:	433c      	orrs	r4, r7
 801a054:	e74f      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a056:	f04f 0c07 	mov.w	ip, #7
 801a05a:	fa0c f707 	lsl.w	r7, ip, r7
 801a05e:	433c      	orrs	r4, r7
 801a060:	e749      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
 801a062:	f04f 0c08 	mov.w	ip, #8
 801a066:	fa0c f707 	lsl.w	r7, ip, r7
 801a06a:	433c      	orrs	r4, r7
 801a06c:	e743      	b.n	8019ef6 <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 801a06e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a072:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a074:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a078:	fa03 fc04 	lsl.w	ip, r3, r4
 801a07c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 801a080:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a084:	e624      	b.n	8019cd0 <HAL_GPIO_Init+0x54>
 801a086:	bf00      	nop

0801a088 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 801a088:	2900      	cmp	r1, #0
 801a08a:	f000 810c 	beq.w	801a2a6 <HAL_GPIO_DeInit+0x21e>
 801a08e:	4b8b      	ldr	r3, [pc, #556]	@ (801a2bc <HAL_GPIO_DeInit+0x234>)
 801a090:	4298      	cmp	r0, r3
{
 801a092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a096:	f000 809a 	beq.w	801a1ce <HAL_GPIO_DeInit+0x146>
  uint32_t position = 0x00U;
 801a09a:	2300      	movs	r3, #0
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a09c:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a0a0:	f04f 0a03 	mov.w	sl, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801a0a4:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    iocurrent = GPIO_Pin & (1UL << position) ;
 801a0a8:	2201      	movs	r2, #1
 801a0aa:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 801a0ac:	ea12 0e01 	ands.w	lr, r2, r1
 801a0b0:	d077      	beq.n	801a1a2 <HAL_GPIO_DeInit+0x11a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 801a0b2:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a0b6:	f003 0403 	and.w	r4, r3, #3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a0ba:	4f81      	ldr	r7, [pc, #516]	@ (801a2c0 <HAL_GPIO_DeInit+0x238>)
 801a0bc:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a0c0:	00a4      	lsls	r4, r4, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a0c2:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a0c4:	fa09 f804 	lsl.w	r8, r9, r4
      tmp = SYSCFG->EXTICR[position >> 2U];
 801a0c8:	f8d5 c408 	ldr.w	ip, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a0cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a0d0:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a0d4:	d027      	beq.n	801a126 <HAL_GPIO_DeInit+0x9e>
 801a0d6:	4f7b      	ldr	r7, [pc, #492]	@ (801a2c4 <HAL_GPIO_DeInit+0x23c>)
 801a0d8:	42b8      	cmp	r0, r7
 801a0da:	d06e      	beq.n	801a1ba <HAL_GPIO_DeInit+0x132>
 801a0dc:	4f7a      	ldr	r7, [pc, #488]	@ (801a2c8 <HAL_GPIO_DeInit+0x240>)
 801a0de:	42b8      	cmp	r0, r7
 801a0e0:	d070      	beq.n	801a1c4 <HAL_GPIO_DeInit+0x13c>
 801a0e2:	4f7a      	ldr	r7, [pc, #488]	@ (801a2cc <HAL_GPIO_DeInit+0x244>)
 801a0e4:	42b8      	cmp	r0, r7
 801a0e6:	d063      	beq.n	801a1b0 <HAL_GPIO_DeInit+0x128>
 801a0e8:	f8df b1e8 	ldr.w	fp, [pc, #488]	@ 801a2d4 <HAL_GPIO_DeInit+0x24c>
 801a0ec:	4558      	cmp	r0, fp
 801a0ee:	f000 80d5 	beq.w	801a29c <HAL_GPIO_DeInit+0x214>
 801a0f2:	f8df b1e4 	ldr.w	fp, [pc, #484]	@ 801a2d8 <HAL_GPIO_DeInit+0x250>
 801a0f6:	4558      	cmp	r0, fp
 801a0f8:	f000 80d6 	beq.w	801a2a8 <HAL_GPIO_DeInit+0x220>
 801a0fc:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 801a2dc <HAL_GPIO_DeInit+0x254>
 801a100:	4558      	cmp	r0, fp
 801a102:	f000 80c6 	beq.w	801a292 <HAL_GPIO_DeInit+0x20a>
 801a106:	f8df b1d8 	ldr.w	fp, [pc, #472]	@ 801a2e0 <HAL_GPIO_DeInit+0x258>
 801a10a:	4558      	cmp	r0, fp
 801a10c:	f000 80d1 	beq.w	801a2b2 <HAL_GPIO_DeInit+0x22a>
 801a110:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 801a2e4 <HAL_GPIO_DeInit+0x25c>
 801a114:	4558      	cmp	r0, fp
 801a116:	bf0c      	ite	eq
 801a118:	f04f 0b09 	moveq.w	fp, #9
 801a11c:	f04f 0b0a 	movne.w	fp, #10
 801a120:	fa0b f404 	lsl.w	r4, fp, r4
 801a124:	e002      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a126:	2701      	movs	r7, #1
 801a128:	fa07 f404 	lsl.w	r4, r7, r4
 801a12c:	45a4      	cmp	ip, r4
 801a12e:	d117      	bne.n	801a160 <HAL_GPIO_DeInit+0xd8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801a130:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
 801a134:	ea24 040e 	bic.w	r4, r4, lr
 801a138:	f8c6 4080 	str.w	r4, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 801a13c:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
 801a140:	ea24 040e 	bic.w	r4, r4, lr
 801a144:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 801a148:	6874      	ldr	r4, [r6, #4]
 801a14a:	ea24 040e 	bic.w	r4, r4, lr
 801a14e:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801a150:	6834      	ldr	r4, [r6, #0]
 801a152:	ea24 040e 	bic.w	r4, r4, lr
 801a156:	6034      	str	r4, [r6, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801a158:	68ac      	ldr	r4, [r5, #8]
 801a15a:	ea24 0408 	bic.w	r4, r4, r8
 801a15e:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a160:	005d      	lsls	r5, r3, #1
 801a162:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801a164:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a168:	fa0a f505 	lsl.w	r5, sl, r5
 801a16c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801a170:	432c      	orrs	r4, r5
 801a172:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801a174:	f003 0407 	and.w	r4, r3, #7
 801a178:	f8dc e020 	ldr.w	lr, [ip, #32]
 801a17c:	00a4      	lsls	r4, r4, #2
 801a17e:	fa09 f404 	lsl.w	r4, r9, r4
 801a182:	ea2e 0404 	bic.w	r4, lr, r4
 801a186:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a18a:	68c4      	ldr	r4, [r0, #12]
 801a18c:	ea24 0405 	bic.w	r4, r4, r5
 801a190:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801a192:	6844      	ldr	r4, [r0, #4]
 801a194:	ea24 0202 	bic.w	r2, r4, r2
 801a198:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a19a:	6882      	ldr	r2, [r0, #8]
 801a19c:	ea22 0205 	bic.w	r2, r2, r5
 801a1a0:	6082      	str	r2, [r0, #8]
    }

    position++;
 801a1a2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 801a1a4:	fa31 f203 	lsrs.w	r2, r1, r3
 801a1a8:	f47f af7e 	bne.w	801a0a8 <HAL_GPIO_DeInit+0x20>
  }
}
 801a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a1b0:	f04f 0b04 	mov.w	fp, #4
 801a1b4:	fa0b f404 	lsl.w	r4, fp, r4
 801a1b8:	e7b8      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a1ba:	f04f 0b02 	mov.w	fp, #2
 801a1be:	fa0b f404 	lsl.w	r4, fp, r4
 801a1c2:	e7b3      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a1c4:	f04f 0b03 	mov.w	fp, #3
 801a1c8:	fa0b f404 	lsl.w	r4, fp, r4
 801a1cc:	e7ae      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
  uint32_t position = 0x00U;
 801a1ce:	2200      	movs	r2, #0
    iocurrent = GPIO_Pin & (1UL << position) ;
 801a1d0:	f04f 0c01 	mov.w	ip, #1
 801a1d4:	4f3e      	ldr	r7, [pc, #248]	@ (801a2d0 <HAL_GPIO_DeInit+0x248>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a1d6:	250f      	movs	r5, #15
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801a1d8:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a1dc:	f04f 0e03 	mov.w	lr, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a1e0:	f002 0303 	and.w	r3, r2, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 801a1e4:	fa0c f402 	lsl.w	r4, ip, r2
    if (iocurrent != 0x00U)
 801a1e8:	f022 0803 	bic.w	r8, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a1ec:	009b      	lsls	r3, r3, #2
    if (iocurrent != 0x00U)
 801a1ee:	ea11 0904 	ands.w	r9, r1, r4
 801a1f2:	44b8      	add	r8, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801a1f4:	fa05 f303 	lsl.w	r3, r5, r3
    if (iocurrent != 0x00U)
 801a1f8:	d045      	beq.n	801a286 <HAL_GPIO_DeInit+0x1fe>
      tmp = SYSCFG->EXTICR[position >> 2U];
 801a1fa:	f8d8 a008 	ldr.w	sl, [r8, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a1fe:	ea13 0f0a 	tst.w	r3, sl
 801a202:	d11d      	bne.n	801a240 <HAL_GPIO_DeInit+0x1b8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801a204:	f8d6 a080 	ldr.w	sl, [r6, #128]	@ 0x80
 801a208:	ea2a 0a09 	bic.w	sl, sl, r9
 801a20c:	f8c6 a080 	str.w	sl, [r6, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 801a210:	f8d6 a084 	ldr.w	sl, [r6, #132]	@ 0x84
 801a214:	ea2a 0a09 	bic.w	sl, sl, r9
 801a218:	f8c6 a084 	str.w	sl, [r6, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 801a21c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 801a220:	ea2a 0a09 	bic.w	sl, sl, r9
 801a224:	f8c6 a004 	str.w	sl, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801a228:	f8d6 a000 	ldr.w	sl, [r6]
 801a22c:	ea2a 0909 	bic.w	r9, sl, r9
 801a230:	f8c6 9000 	str.w	r9, [r6]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801a234:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801a238:	ea29 0303 	bic.w	r3, r9, r3
 801a23c:	f8c8 3008 	str.w	r3, [r8, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a240:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a244:	6803      	ldr	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801a246:	ea4f 09d2 	mov.w	r9, r2, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801a24a:	fa0e f808 	lsl.w	r8, lr, r8
 801a24e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 801a252:	ea43 0308 	orr.w	r3, r3, r8
 801a256:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801a258:	f002 0307 	and.w	r3, r2, #7
 801a25c:	f8d9 a020 	ldr.w	sl, [r9, #32]
 801a260:	009b      	lsls	r3, r3, #2
 801a262:	fa05 f303 	lsl.w	r3, r5, r3
 801a266:	ea2a 0303 	bic.w	r3, sl, r3
 801a26a:	f8c9 3020 	str.w	r3, [r9, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a26e:	68c3      	ldr	r3, [r0, #12]
 801a270:	ea23 0308 	bic.w	r3, r3, r8
 801a274:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801a276:	6843      	ldr	r3, [r0, #4]
 801a278:	ea23 0304 	bic.w	r3, r3, r4
 801a27c:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a27e:	6883      	ldr	r3, [r0, #8]
 801a280:	ea23 0308 	bic.w	r3, r3, r8
 801a284:	6083      	str	r3, [r0, #8]
    position++;
 801a286:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00U)
 801a288:	fa31 f302 	lsrs.w	r3, r1, r2
 801a28c:	d1a8      	bne.n	801a1e0 <HAL_GPIO_DeInit+0x158>
}
 801a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801a292:	f04f 0b07 	mov.w	fp, #7
 801a296:	fa0b f404 	lsl.w	r4, fp, r4
 801a29a:	e747      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a29c:	f04f 0b05 	mov.w	fp, #5
 801a2a0:	fa0b f404 	lsl.w	r4, fp, r4
 801a2a4:	e742      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a2a6:	4770      	bx	lr
 801a2a8:	f04f 0b06 	mov.w	fp, #6
 801a2ac:	fa0b f404 	lsl.w	r4, fp, r4
 801a2b0:	e73c      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a2b2:	f04f 0b08 	mov.w	fp, #8
 801a2b6:	fa0b f404 	lsl.w	r4, fp, r4
 801a2ba:	e737      	b.n	801a12c <HAL_GPIO_DeInit+0xa4>
 801a2bc:	58020000 	.word	0x58020000
 801a2c0:	58020400 	.word	0x58020400
 801a2c4:	58020800 	.word	0x58020800
 801a2c8:	58020c00 	.word	0x58020c00
 801a2cc:	58021000 	.word	0x58021000
 801a2d0:	58000400 	.word	0x58000400
 801a2d4:	58021400 	.word	0x58021400
 801a2d8:	58021800 	.word	0x58021800
 801a2dc:	58021c00 	.word	0x58021c00
 801a2e0:	58022000 	.word	0x58022000
 801a2e4:	58022400 	.word	0x58022400

0801a2e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801a2e8:	b902      	cbnz	r2, 801a2ec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801a2ea:	0409      	lsls	r1, r1, #16
 801a2ec:	6181      	str	r1, [r0, #24]
  }
}
 801a2ee:	4770      	bx	lr

0801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a2f4:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a2f6:	2710      	movs	r7, #16
{
 801a2f8:	4605      	mov	r5, r0
 801a2fa:	460e      	mov	r6, r1
 801a2fc:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a2fe:	699a      	ldr	r2, [r3, #24]
 801a300:	f012 0202 	ands.w	r2, r2, #2
 801a304:	d168      	bne.n	801a3d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 801a306:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801a308:	f011 0c10 	ands.w	ip, r1, #16
 801a30c:	d062      	beq.n	801a3d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a30e:	1c74      	adds	r4, r6, #1
 801a310:	61df      	str	r7, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a312:	d166      	bne.n	801a3e2 <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
 801a314:	699c      	ldr	r4, [r3, #24]
 801a316:	f014 0420 	ands.w	r4, r4, #32
 801a31a:	d160      	bne.n	801a3de <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 801a31c:	699a      	ldr	r2, [r3, #24]
 801a31e:	0691      	lsls	r1, r2, #26
 801a320:	d5fc      	bpl.n	801a31c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a322:	2220      	movs	r2, #32
 801a324:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801a326:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 801a32a:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801a32c:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801a32e:	05d0      	lsls	r0, r2, #23
 801a330:	d532      	bpl.n	801a398 <I2C_WaitOnTXISFlagUntilTimeout+0xa8>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a332:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a336:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 801a338:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a33c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a33e:	d504      	bpl.n	801a34a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a340:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 801a344:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a348:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a34a:	0596      	lsls	r6, r2, #22
 801a34c:	d504      	bpl.n	801a358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a34e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 801a352:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a356:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a358:	699a      	ldr	r2, [r3, #24]
 801a35a:	0790      	lsls	r0, r2, #30
 801a35c:	d501      	bpl.n	801a362 <I2C_WaitOnTXISFlagUntilTimeout+0x72>
    hi2c->Instance->TXDR = 0x00U;
 801a35e:	2200      	movs	r2, #0
 801a360:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a362:	699a      	ldr	r2, [r3, #24]
 801a364:	07d1      	lsls	r1, r2, #31
 801a366:	d403      	bmi.n	801a370 <I2C_WaitOnTXISFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a368:	699a      	ldr	r2, [r3, #24]
 801a36a:	f042 0201 	orr.w	r2, r2, #1
 801a36e:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a370:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 801a372:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 801a374:	4c38      	ldr	r4, [pc, #224]	@ (801a458 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a376:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 801a378:	4022      	ands	r2, r4
 801a37a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 801a37c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801a37e:	ea43 030c 	orr.w	r3, r3, ip
 801a382:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a384:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a388:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 801a38c:	2300      	movs	r3, #0
      return HAL_ERROR;
 801a38e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 801a390:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 801a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a398:	0550      	lsls	r0, r2, #21
 801a39a:	d4d1      	bmi.n	801a340 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a39c:	0594      	lsls	r4, r2, #22
 801a39e:	d4d6      	bmi.n	801a34e <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  if (status != HAL_OK)
 801a3a0:	2900      	cmp	r1, #0
 801a3a2:	d1d9      	bne.n	801a358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    if (Timeout != HAL_MAX_DELAY)
 801a3a4:	1c72      	adds	r2, r6, #1
 801a3a6:	d0aa      	beq.n	801a2fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a3a8:	f7fd fa2e 	bl	8017808 <HAL_GetTick>
 801a3ac:	eba0 0308 	sub.w	r3, r0, r8
 801a3b0:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801a3b2:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a3b4:	d801      	bhi.n	801a3ba <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 801a3b6:	2e00      	cmp	r6, #0
 801a3b8:	d1a1      	bne.n	801a2fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801a3ba:	699a      	ldr	r2, [r3, #24]
 801a3bc:	f012 0202 	ands.w	r2, r2, #2
 801a3c0:	d19d      	bne.n	801a2fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a3c2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a3c4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a3c6:	430b      	orrs	r3, r1
 801a3c8:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a3ca:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a3ce:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 801a3d2:	e7db      	b.n	801a38c <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
  HAL_StatusTypeDef status = HAL_OK;
 801a3d4:	4661      	mov	r1, ip
 801a3d6:	e7a9      	b.n	801a32c <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
  return HAL_OK;
 801a3d8:	2000      	movs	r0, #0
}
 801a3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a3de:	4614      	mov	r4, r2
 801a3e0:	e79f      	b.n	801a322 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a3e2:	4614      	mov	r4, r2
 801a3e4:	46c1      	mov	r9, r8
 801a3e6:	4692      	mov	sl, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a3e8:	699a      	ldr	r2, [r3, #24]
 801a3ea:	0692      	lsls	r2, r2, #26
 801a3ec:	d40e      	bmi.n	801a40c <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
 801a3ee:	f1ba 0f00 	cmp.w	sl, #0
 801a3f2:	d198      	bne.n	801a326 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a3f4:	f7fd fa08 	bl	8017808 <HAL_GetTick>
 801a3f8:	eba0 0309 	sub.w	r3, r0, r9
 801a3fc:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a3fe:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a400:	d308      	bcc.n	801a414 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 801a402:	b13e      	cbz	r6, 801a414 <I2C_WaitOnTXISFlagUntilTimeout+0x124>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a404:	699a      	ldr	r2, [r3, #24]
 801a406:	0690      	lsls	r0, r2, #26
 801a408:	d5f4      	bpl.n	801a3f4 <I2C_WaitOnTXISFlagUntilTimeout+0x104>
 801a40a:	e78a      	b.n	801a322 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 801a40c:	f1ba 0f00 	cmp.w	sl, #0
 801a410:	d189      	bne.n	801a326 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 801a412:	e786      	b.n	801a322 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a414:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 801a416:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a41a:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 801a41c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a41e:	0409      	lsls	r1, r1, #16
 801a420:	d50b      	bpl.n	801a43a <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 801a422:	0441      	lsls	r1, r0, #17
 801a424:	d409      	bmi.n	801a43a <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
 801a426:	2a20      	cmp	r2, #32
 801a428:	d007      	beq.n	801a43a <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801a42a:	685a      	ldr	r2, [r3, #4]
 801a42c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a430:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 801a432:	f7fd f9e9 	bl	8017808 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a436:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 801a438:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a43a:	699a      	ldr	r2, [r3, #24]
 801a43c:	0690      	lsls	r0, r2, #26
 801a43e:	d4d3      	bmi.n	801a3e8 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a440:	f7fd f9e2 	bl	8017808 <HAL_GetTick>
 801a444:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a448:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a44a:	2819      	cmp	r0, #25
 801a44c:	d9f5      	bls.n	801a43a <I2C_WaitOnTXISFlagUntilTimeout+0x14a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801a44e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 801a450:	f04f 0a01 	mov.w	sl, #1
 801a454:	e7c8      	b.n	801a3e8 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
 801a456:	bf00      	nop
 801a458:	fe00e800 	.word	0xfe00e800

0801a45c <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a45c:	6803      	ldr	r3, [r0, #0]
{
 801a45e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a462:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a464:	699a      	ldr	r2, [r3, #24]
 801a466:	0695      	lsls	r5, r2, #26
 801a468:	d461      	bmi.n	801a52e <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
 801a46a:	4605      	mov	r5, r0
 801a46c:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a46e:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 801a472:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801a474:	f012 0c10 	ands.w	ip, r2, #16
 801a478:	d05c      	beq.n	801a534 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a47a:	1c74      	adds	r4, r6, #1
 801a47c:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a480:	d165      	bne.n	801a54e <I2C_WaitOnSTOPFlagUntilTimeout+0xf2>
 801a482:	699c      	ldr	r4, [r3, #24]
 801a484:	f014 0420 	ands.w	r4, r4, #32
 801a488:	d15f      	bne.n	801a54a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 801a48a:	699a      	ldr	r2, [r3, #24]
 801a48c:	0691      	lsls	r1, r2, #26
 801a48e:	d5fc      	bpl.n	801a48a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a490:	2220      	movs	r2, #32
 801a492:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 801a494:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 801a498:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 801a49a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801a49c:	05d0      	lsls	r0, r2, #23
 801a49e:	d532      	bpl.n	801a506 <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a4a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a4a4:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 801a4a6:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a4aa:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a4ac:	d504      	bpl.n	801a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a4ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 801a4b2:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a4b6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a4b8:	0596      	lsls	r6, r2, #22
 801a4ba:	d504      	bpl.n	801a4c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a4bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 801a4c0:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a4c4:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a4c6:	699a      	ldr	r2, [r3, #24]
 801a4c8:	0790      	lsls	r0, r2, #30
 801a4ca:	d501      	bpl.n	801a4d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    hi2c->Instance->TXDR = 0x00U;
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a4d0:	699a      	ldr	r2, [r3, #24]
 801a4d2:	07d1      	lsls	r1, r2, #31
 801a4d4:	d403      	bmi.n	801a4de <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a4d6:	699a      	ldr	r2, [r3, #24]
 801a4d8:	f042 0201 	orr.w	r2, r2, #1
 801a4dc:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 801a4de:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801a4e0:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 801a4e2:	4c38      	ldr	r4, [pc, #224]	@ (801a5c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x168>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a4e4:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 801a4e6:	4022      	ands	r2, r4
 801a4e8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 801a4ea:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801a4ec:	ea43 030c 	orr.w	r3, r3, ip
 801a4f0:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a4f2:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a4f6:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 801a4fa:	2300      	movs	r3, #0
      return HAL_ERROR;
 801a4fc:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 801a4fe:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 801a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a506:	0550      	lsls	r0, r2, #21
 801a508:	d4d1      	bmi.n	801a4ae <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a50a:	0594      	lsls	r4, r2, #22
 801a50c:	d4d6      	bmi.n	801a4bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  if (status != HAL_OK)
 801a50e:	2900      	cmp	r1, #0
 801a510:	d1d9      	bne.n	801a4c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a512:	f7fd f979 	bl	8017808 <HAL_GetTick>
 801a516:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801a518:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a51a:	42b0      	cmp	r0, r6
 801a51c:	d800      	bhi.n	801a520 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>
 801a51e:	b91e      	cbnz	r6, 801a528 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801a520:	699a      	ldr	r2, [r3, #24]
 801a522:	f012 0220 	ands.w	r2, r2, #32
 801a526:	d007      	beq.n	801a538 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a528:	699a      	ldr	r2, [r3, #24]
 801a52a:	0692      	lsls	r2, r2, #26
 801a52c:	d5a1      	bpl.n	801a472 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 801a52e:	2000      	movs	r0, #0
}
 801a530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 801a534:	4661      	mov	r1, ip
 801a536:	e7b0      	b.n	801a49a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a538:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a53a:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a53c:	430b      	orrs	r3, r1
 801a53e:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a540:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a544:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 801a548:	e7d7      	b.n	801a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a54a:	2400      	movs	r4, #0
 801a54c:	e7a0      	b.n	801a490 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a54e:	2400      	movs	r4, #0
 801a550:	46b9      	mov	r9, r7
 801a552:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a554:	699a      	ldr	r2, [r3, #24]
 801a556:	0692      	lsls	r2, r2, #26
 801a558:	d42f      	bmi.n	801a5ba <I2C_WaitOnSTOPFlagUntilTimeout+0x15e>
 801a55a:	f1ba 0f00 	cmp.w	sl, #0
 801a55e:	d199      	bne.n	801a494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a560:	f7fd f952 	bl	8017808 <HAL_GetTick>
 801a564:	eba0 0309 	sub.w	r3, r0, r9
 801a568:	429e      	cmp	r6, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a56a:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a56c:	d304      	bcc.n	801a578 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
 801a56e:	b11e      	cbz	r6, 801a578 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a570:	699a      	ldr	r2, [r3, #24]
 801a572:	0690      	lsls	r0, r2, #26
 801a574:	d5f4      	bpl.n	801a560 <I2C_WaitOnSTOPFlagUntilTimeout+0x104>
 801a576:	e78b      	b.n	801a490 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a578:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 801a57a:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a57e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 801a580:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a582:	0409      	lsls	r1, r1, #16
 801a584:	d50b      	bpl.n	801a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              (tmp1 != I2C_CR2_STOP) && \
 801a586:	0441      	lsls	r1, r0, #17
 801a588:	d409      	bmi.n	801a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
 801a58a:	2a20      	cmp	r2, #32
 801a58c:	d007      	beq.n	801a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801a58e:	685a      	ldr	r2, [r3, #4]
 801a590:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a594:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 801a596:	f7fd f937 	bl	8017808 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a59a:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 801a59c:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a59e:	699a      	ldr	r2, [r3, #24]
 801a5a0:	0690      	lsls	r0, r2, #26
 801a5a2:	d4d7      	bmi.n	801a554 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a5a4:	f7fd f930 	bl	8017808 <HAL_GetTick>
 801a5a8:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a5ac:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a5ae:	2819      	cmp	r0, #25
 801a5b0:	d9f5      	bls.n	801a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x142>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801a5b2:	2420      	movs	r4, #32
              status = HAL_ERROR;
 801a5b4:	f04f 0a01 	mov.w	sl, #1
 801a5b8:	e7cc      	b.n	801a554 <I2C_WaitOnSTOPFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 801a5ba:	f1ba 0f00 	cmp.w	sl, #0
 801a5be:	f47f af69 	bne.w	801a494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801a5c2:	e765      	b.n	801a490 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 801a5c4:	fe00e800 	.word	0xfe00e800

0801a5c8 <HAL_I2C_MspInit>:
}
 801a5c8:	4770      	bx	lr
 801a5ca:	bf00      	nop

0801a5cc <HAL_I2C_Init>:
  if (hi2c == NULL)
 801a5cc:	2800      	cmp	r0, #0
 801a5ce:	d04e      	beq.n	801a66e <HAL_I2C_Init+0xa2>
{
 801a5d0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a5d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 801a5d6:	4604      	mov	r4, r0
 801a5d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d041      	beq.n	801a664 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 801a5e0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801a5e2:	2124      	movs	r1, #36	@ 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a5e4:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801a5e6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 801a5ea:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a5ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a5f0:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 801a5f2:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a5f6:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 801a5f8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a5fa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a5fc:	689a      	ldr	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a5fe:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a600:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801a604:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a606:	d029      	beq.n	801a65c <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a608:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a60c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a60e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a610:	d102      	bne.n	801a618 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801a612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a616:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a618:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 801a61a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a61e:	4915      	ldr	r1, [pc, #84]	@ (801a674 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a620:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a622:	4301      	orrs	r1, r0
 801a624:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801a626:	68d9      	ldr	r1, [r3, #12]
 801a628:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 801a62c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 801a62e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a632:	4302      	orrs	r2, r0
 801a634:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a638:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a63c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a63e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a640:	4301      	orrs	r1, r0
  return HAL_OK;
 801a642:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a644:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 801a646:	6819      	ldr	r1, [r3, #0]
 801a648:	f041 0101 	orr.w	r1, r1, #1
 801a64c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a64e:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801a650:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a654:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a656:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 801a65a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a65c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801a660:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a662:	e7d9      	b.n	801a618 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 801a664:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 801a668:	f7ff ffae 	bl	801a5c8 <HAL_I2C_MspInit>
 801a66c:	e7b8      	b.n	801a5e0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 801a66e:	2001      	movs	r0, #1
}
 801a670:	4770      	bx	lr
 801a672:	bf00      	nop
 801a674:	02008000 	.word	0x02008000

0801a678 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 801a678:	4770      	bx	lr
 801a67a:	bf00      	nop

0801a67c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 801a67c:	b1b0      	cbz	r0, 801a6ac <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 801a67e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801a680:	2324      	movs	r3, #36	@ 0x24
{
 801a682:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 801a684:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 801a688:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 801a68a:	6813      	ldr	r3, [r2, #0]
 801a68c:	f023 0301 	bic.w	r3, r3, #1
 801a690:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 801a692:	f7ff fff1 	bl	801a678 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a696:	2300      	movs	r3, #0
 801a698:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 801a69a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 801a69c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 801a6a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 801a6a4:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a6a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 801a6aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801a6ac:	2001      	movs	r0, #1
}
 801a6ae:	4770      	bx	lr

0801a6b0 <HAL_I2C_Mem_Write>:
{
 801a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6b4:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 801a6ba:	f8bd 9024 	ldrh.w	r9, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6be:	2b20      	cmp	r3, #32
 801a6c0:	d130      	bne.n	801a724 <HAL_I2C_Mem_Write+0x74>
    if ((pData == NULL) || (Size == 0U))
 801a6c2:	9b08      	ldr	r3, [sp, #32]
 801a6c4:	4604      	mov	r4, r0
 801a6c6:	b33b      	cbz	r3, 801a718 <HAL_I2C_Mem_Write+0x68>
 801a6c8:	f1b9 0f00 	cmp.w	r9, #0
 801a6cc:	d024      	beq.n	801a718 <HAL_I2C_Mem_Write+0x68>
    __HAL_LOCK(hi2c);
 801a6ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801a6d2:	2b01      	cmp	r3, #1
 801a6d4:	d026      	beq.n	801a724 <HAL_I2C_Mem_Write+0x74>
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	460e      	mov	r6, r1
 801a6da:	4690      	mov	r8, r2
 801a6dc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 801a6e0:	f7fd f892 	bl	8017808 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a6e4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 801a6e6:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a6e8:	699a      	ldr	r2, [r3, #24]
 801a6ea:	0411      	lsls	r1, r2, #16
 801a6ec:	d51d      	bpl.n	801a72a <HAL_I2C_Mem_Write+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a6ee:	f7fd f88b 	bl	8017808 <HAL_GetTick>
 801a6f2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a6f4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a6f6:	2819      	cmp	r0, #25
 801a6f8:	d9f6      	bls.n	801a6e8 <HAL_I2C_Mem_Write+0x38>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a6fa:	699a      	ldr	r2, [r3, #24]
 801a6fc:	0412      	lsls	r2, r2, #16
 801a6fe:	d5f3      	bpl.n	801a6e8 <HAL_I2C_Mem_Write+0x38>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a700:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a702:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a704:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a706:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 801a708:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a70c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a70e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a712:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 801a716:	e002      	b.n	801a71e <HAL_I2C_Mem_Write+0x6e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801a718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a71c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 801a71e:	2001      	movs	r0, #1
}
 801a720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 801a724:	2002      	movs	r0, #2
}
 801a726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->pBuffPtr  = pData;
 801a72a:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801a72c:	2121      	movs	r1, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a72e:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a732:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801a734:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a738:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 801a73a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a73c:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a73e:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 801a742:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a744:	6462      	str	r2, [r4, #68]	@ 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801a746:	498c      	ldr	r1, [pc, #560]	@ (801a978 <HAL_I2C_Mem_Write+0x2c8>)
    hi2c->XferCount = Size;
 801a748:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801a74c:	685a      	ldr	r2, [r3, #4]
 801a74e:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a750:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 801a752:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a756:	4989      	ldr	r1, [pc, #548]	@ (801a97c <HAL_I2C_Mem_Write+0x2cc>)
 801a758:	4332      	orrs	r2, r6
 801a75a:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a75c:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 801a75e:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a762:	f7ff fdc5 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801a766:	2800      	cmp	r0, #0
 801a768:	d16d      	bne.n	801a846 <HAL_I2C_Mem_Write+0x196>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a76a:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a76c:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a76e:	f040 80cf 	bne.w	801a910 <HAL_I2C_Mem_Write+0x260>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a772:	fa5f f388 	uxtb.w	r3, r8
 801a776:	6293      	str	r3, [r2, #40]	@ 0x28
 801a778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a77a:	3301      	adds	r3, #1
 801a77c:	d14b      	bne.n	801a816 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a77e:	6993      	ldr	r3, [r2, #24]
 801a780:	0618      	lsls	r0, r3, #24
 801a782:	d5fc      	bpl.n	801a77e <HAL_I2C_Mem_Write+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a784:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a786:	b29b      	uxth	r3, r3
 801a788:	2bff      	cmp	r3, #255	@ 0xff
 801a78a:	f240 80b3 	bls.w	801a8f4 <HAL_I2C_Mem_Write+0x244>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a78e:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 801a790:	497b      	ldr	r1, [pc, #492]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a792:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801a794:	6853      	ldr	r3, [r2, #4]
 801a796:	400b      	ands	r3, r1
 801a798:	497a      	ldr	r1, [pc, #488]	@ (801a984 <HAL_I2C_Mem_Write+0x2d4>)
 801a79a:	4333      	orrs	r3, r6
 801a79c:	4319      	orrs	r1, r3
 801a79e:	6051      	str	r1, [r2, #4]
 801a7a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a7a2:	3301      	adds	r3, #1
 801a7a4:	d005      	beq.n	801a7b2 <HAL_I2C_Mem_Write+0x102>
 801a7a6:	e064      	b.n	801a872 <HAL_I2C_Mem_Write+0x1c2>
    } while (hi2c->XferCount > 0U);
 801a7a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80be 	beq.w	801a92e <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a7b2:	462a      	mov	r2, r5
 801a7b4:	f04f 31ff 	mov.w	r1, #4294967295
 801a7b8:	4620      	mov	r0, r4
 801a7ba:	f7ff fd99 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801a7be:	2800      	cmp	r0, #0
 801a7c0:	d1ad      	bne.n	801a71e <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a7c2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801a7c4:	6821      	ldr	r1, [r4, #0]
 801a7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 801a7ca:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a7cc:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 801a7ce:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801a7d0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 801a7d2:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 801a7d4:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 801a7d6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 801a7d8:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 801a7da:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 801a7dc:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a7de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 801a7e0:	b292      	uxth	r2, r2
 801a7e2:	2a00      	cmp	r2, #0
 801a7e4:	d0e0      	beq.n	801a7a8 <HAL_I2C_Mem_Write+0xf8>
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d1de      	bne.n	801a7a8 <HAL_I2C_Mem_Write+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a7ea:	698b      	ldr	r3, [r1, #24]
 801a7ec:	061a      	lsls	r2, r3, #24
 801a7ee:	d5fc      	bpl.n	801a7ea <HAL_I2C_Mem_Write+0x13a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a7f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	2bff      	cmp	r3, #255	@ 0xff
 801a7f6:	d873      	bhi.n	801a8e0 <HAL_I2C_Mem_Write+0x230>
          hi2c->XferSize = hi2c->XferCount;
 801a7f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801a7fa:	4861      	ldr	r0, [pc, #388]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 801a7fc:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 801a7fe:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 801a800:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a802:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 801a804:	4002      	ands	r2, r0
 801a806:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 801a80a:	4313      	orrs	r3, r2
 801a80c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a810:	604b      	str	r3, [r1, #4]
 801a812:	e7c9      	b.n	801a7a8 <HAL_I2C_Mem_Write+0xf8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a814:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a816:	6993      	ldr	r3, [r2, #24]
 801a818:	0619      	lsls	r1, r3, #24
 801a81a:	d4b3      	bmi.n	801a784 <HAL_I2C_Mem_Write+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a81c:	f7fc fff4 	bl	8017808 <HAL_GetTick>
 801a820:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a822:	1b43      	subs	r3, r0, r5
 801a824:	429a      	cmp	r2, r3
 801a826:	d301      	bcc.n	801a82c <HAL_I2C_Mem_Write+0x17c>
 801a828:	2a00      	cmp	r2, #0
 801a82a:	d1f3      	bne.n	801a814 <HAL_I2C_Mem_Write+0x164>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a82c:	6822      	ldr	r2, [r4, #0]
 801a82e:	6991      	ldr	r1, [r2, #24]
 801a830:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801a834:	d1ef      	bne.n	801a816 <HAL_I2C_Mem_Write+0x166>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a836:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a838:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a83a:	4313      	orrs	r3, r2
 801a83c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a83e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a842:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801a846:	2300      	movs	r3, #0
 801a848:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 801a84c:	e767      	b.n	801a71e <HAL_I2C_Mem_Write+0x6e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a84e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a850:	b29b      	uxth	r3, r3
 801a852:	2bff      	cmp	r3, #255	@ 0xff
 801a854:	f240 8081 	bls.w	801a95a <HAL_I2C_Mem_Write+0x2aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a858:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 801a85a:	4a49      	ldr	r2, [pc, #292]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a85c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801a85e:	684b      	ldr	r3, [r1, #4]
 801a860:	4013      	ands	r3, r2
 801a862:	4a48      	ldr	r2, [pc, #288]	@ (801a984 <HAL_I2C_Mem_Write+0x2d4>)
 801a864:	4333      	orrs	r3, r6
 801a866:	431a      	orrs	r2, r3
 801a868:	604a      	str	r2, [r1, #4]
    } while (hi2c->XferCount > 0U);
 801a86a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a86c:	b29b      	uxth	r3, r3
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d05d      	beq.n	801a92e <HAL_I2C_Mem_Write+0x27e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a872:	462a      	mov	r2, r5
 801a874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a876:	4620      	mov	r0, r4
 801a878:	f7ff fd3a 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801a87c:	2800      	cmp	r0, #0
 801a87e:	f47f af4e 	bne.w	801a71e <HAL_I2C_Mem_Write+0x6e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a882:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801a884:	6821      	ldr	r1, [r4, #0]
 801a886:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 801a88a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a88c:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->pBuffPtr++;
 801a88e:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 801a890:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 801a892:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801a894:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 801a896:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 801a898:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 801a89a:	b292      	uxth	r2, r2
 801a89c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a89e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 801a8a0:	b292      	uxth	r2, r2
 801a8a2:	2a00      	cmp	r2, #0
 801a8a4:	d0e1      	beq.n	801a86a <HAL_I2C_Mem_Write+0x1ba>
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d1df      	bne.n	801a86a <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a8aa:	698b      	ldr	r3, [r1, #24]
 801a8ac:	061b      	lsls	r3, r3, #24
 801a8ae:	d4ce      	bmi.n	801a84e <HAL_I2C_Mem_Write+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a8b0:	f7fc ffaa 	bl	8017808 <HAL_GetTick>
 801a8b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a8b6:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a8b8:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d301      	bcc.n	801a8c2 <HAL_I2C_Mem_Write+0x212>
 801a8be:	2a00      	cmp	r2, #0
 801a8c0:	d1f3      	bne.n	801a8aa <HAL_I2C_Mem_Write+0x1fa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a8c2:	698b      	ldr	r3, [r1, #24]
 801a8c4:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 801a8c8:	d1ef      	bne.n	801a8aa <HAL_I2C_Mem_Write+0x1fa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a8ca:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a8cc:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 801a8ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a8d2:	430a      	orrs	r2, r1
 801a8d4:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a8d6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a8da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 801a8de:	e71e      	b.n	801a71e <HAL_I2C_Mem_Write+0x6e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a8e0:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 801a8e2:	4a27      	ldr	r2, [pc, #156]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a8e4:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801a8e6:	684b      	ldr	r3, [r1, #4]
 801a8e8:	4013      	ands	r3, r2
 801a8ea:	4a26      	ldr	r2, [pc, #152]	@ (801a984 <HAL_I2C_Mem_Write+0x2d4>)
 801a8ec:	4333      	orrs	r3, r6
 801a8ee:	431a      	orrs	r2, r3
 801a8f0:	604a      	str	r2, [r1, #4]
 801a8f2:	e759      	b.n	801a7a8 <HAL_I2C_Mem_Write+0xf8>
      hi2c->XferSize = hi2c->XferCount;
 801a8f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801a8f6:	4822      	ldr	r0, [pc, #136]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
      hi2c->XferSize = hi2c->XferCount;
 801a8f8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a8fa:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 801a8fc:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801a8fe:	6853      	ldr	r3, [r2, #4]
 801a900:	4003      	ands	r3, r0
 801a902:	4333      	orrs	r3, r6
 801a904:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a908:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a90c:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801a90e:	e747      	b.n	801a7a0 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801a910:	ea4f 2318 	mov.w	r3, r8, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a914:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a916:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801a918:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a91a:	462a      	mov	r2, r5
 801a91c:	f7ff fce8 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801a920:	2800      	cmp	r0, #0
 801a922:	d190      	bne.n	801a846 <HAL_I2C_Mem_Write+0x196>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a924:	6822      	ldr	r2, [r4, #0]
 801a926:	fa5f f388 	uxtb.w	r3, r8
 801a92a:	6293      	str	r3, [r2, #40]	@ 0x28
 801a92c:	e724      	b.n	801a778 <HAL_I2C_Mem_Write+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a92e:	462a      	mov	r2, r5
 801a930:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a932:	4620      	mov	r0, r4
 801a934:	f7ff fd92 	bl	801a45c <I2C_WaitOnSTOPFlagUntilTimeout>
 801a938:	2800      	cmp	r0, #0
 801a93a:	f47f aef0 	bne.w	801a71e <HAL_I2C_Mem_Write+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a93e:	6823      	ldr	r3, [r4, #0]
 801a940:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 801a942:	4d11      	ldr	r5, [pc, #68]	@ (801a988 <HAL_I2C_Mem_Write+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a944:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801a946:	685a      	ldr	r2, [r3, #4]
 801a948:	402a      	ands	r2, r5
 801a94a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801a94c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801a950:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a954:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 801a958:	e6e2      	b.n	801a720 <HAL_I2C_Mem_Write+0x70>
          hi2c->XferSize = hi2c->XferCount;
 801a95a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801a95c:	4808      	ldr	r0, [pc, #32]	@ (801a980 <HAL_I2C_Mem_Write+0x2d0>)
          hi2c->XferSize = hi2c->XferCount;
 801a95e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a960:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 801a962:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801a964:	684b      	ldr	r3, [r1, #4]
 801a966:	4003      	ands	r3, r0
 801a968:	4333      	orrs	r3, r6
 801a96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a96e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a972:	604b      	str	r3, [r1, #4]
}
 801a974:	e779      	b.n	801a86a <HAL_I2C_Mem_Write+0x1ba>
 801a976:	bf00      	nop
 801a978:	fc009800 	.word	0xfc009800
 801a97c:	01002000 	.word	0x01002000
 801a980:	fc009c00 	.word	0xfc009c00
 801a984:	01ff0000 	.word	0x01ff0000
 801a988:	fe00e800 	.word	0xfe00e800

0801a98c <HAL_I2C_Mem_Read>:
{
 801a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a990:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a992:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 801a996:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a99a:	2b20      	cmp	r3, #32
{
 801a99c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a9a0:	d130      	bne.n	801aa04 <HAL_I2C_Mem_Read+0x78>
    if ((pData == NULL) || (Size == 0U))
 801a9a2:	9b08      	ldr	r3, [sp, #32]
 801a9a4:	4604      	mov	r4, r0
 801a9a6:	b33b      	cbz	r3, 801a9f8 <HAL_I2C_Mem_Read+0x6c>
 801a9a8:	f1ba 0f00 	cmp.w	sl, #0
 801a9ac:	d024      	beq.n	801a9f8 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 801a9ae:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801a9b2:	2b01      	cmp	r3, #1
 801a9b4:	d026      	beq.n	801aa04 <HAL_I2C_Mem_Read+0x78>
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	460e      	mov	r6, r1
 801a9ba:	4691      	mov	r9, r2
 801a9bc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 801a9c0:	f7fc ff22 	bl	8017808 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a9c4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 801a9c6:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a9c8:	699a      	ldr	r2, [r3, #24]
 801a9ca:	0410      	lsls	r0, r2, #16
 801a9cc:	d51d      	bpl.n	801aa0a <HAL_I2C_Mem_Read+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a9ce:	f7fc ff1b 	bl	8017808 <HAL_GetTick>
 801a9d2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a9d4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a9d6:	2819      	cmp	r0, #25
 801a9d8:	d9f6      	bls.n	801a9c8 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a9da:	699a      	ldr	r2, [r3, #24]
 801a9dc:	0411      	lsls	r1, r2, #16
 801a9de:	d5f3      	bpl.n	801a9c8 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a9e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a9e2:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a9e4:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a9e6:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 801a9e8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a9ec:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a9ee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a9f2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 801a9f6:	e002      	b.n	801a9fe <HAL_I2C_Mem_Read+0x72>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801a9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a9fc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 801a9fe:	2001      	movs	r0, #1
}
 801aa00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 801aa04:	2002      	movs	r0, #2
}
 801aa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
 801aa0a:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801aa0c:	2122      	movs	r1, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801aa0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801aa12:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801aa14:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801aa18:	2140      	movs	r1, #64	@ 0x40
    hi2c->pBuffPtr  = pData;
 801aa1a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801aa1c:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801aa1e:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->XferISR   = NULL;
 801aa22:	6362      	str	r2, [r4, #52]	@ 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801aa24:	6462      	str	r2, [r4, #68]	@ 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa26:	4975      	ldr	r1, [pc, #468]	@ (801abfc <HAL_I2C_Mem_Read+0x270>)
    hi2c->XferCount = Size;
 801aa28:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa2c:	685a      	ldr	r2, [r3, #4]
 801aa2e:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801aa30:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801aa36:	4641      	mov	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa38:	4332      	orrs	r2, r6
 801aa3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801aa3e:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801aa40:	462a      	mov	r2, r5
 801aa42:	f7ff fc55 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801aa46:	2800      	cmp	r0, #0
 801aa48:	d152      	bne.n	801aaf0 <HAL_I2C_Mem_Read+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801aa4a:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801aa4c:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801aa4e:	f040 80b0 	bne.w	801abb2 <HAL_I2C_Mem_Read+0x226>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801aa52:	fa5f f389 	uxtb.w	r3, r9
 801aa56:	628b      	str	r3, [r1, #40]	@ 0x28
 801aa58:	f1b8 3fff 	cmp.w	r8, #4294967295
 801aa5c:	d130      	bne.n	801aac0 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aa5e:	698b      	ldr	r3, [r1, #24]
 801aa60:	065a      	lsls	r2, r3, #25
 801aa62:	d5fc      	bpl.n	801aa5e <HAL_I2C_Mem_Read+0xd2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801aa64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	2bff      	cmp	r3, #255	@ 0xff
 801aa6a:	f240 8094 	bls.w	801ab96 <HAL_I2C_Mem_Read+0x20a>
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa6e:	684b      	ldr	r3, [r1, #4]
 801aa70:	4a62      	ldr	r2, [pc, #392]	@ (801abfc <HAL_I2C_Mem_Read+0x270>)
 801aa72:	4013      	ands	r3, r2
 801aa74:	4a62      	ldr	r2, [pc, #392]	@ (801ac00 <HAL_I2C_Mem_Read+0x274>)
 801aa76:	4333      	orrs	r3, r6
 801aa78:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801aa7a:	23ff      	movs	r3, #255	@ 0xff
 801aa7c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801aa7e:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aa80:	f1b8 3fff 	cmp.w	r8, #4294967295
 801aa84:	d13f      	bne.n	801ab06 <HAL_I2C_Mem_Read+0x17a>
 801aa86:	698b      	ldr	r3, [r1, #24]
 801aa88:	075f      	lsls	r7, r3, #29
 801aa8a:	d5fc      	bpl.n	801aa86 <HAL_I2C_Mem_Read+0xfa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801aa8c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801aa8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801aa90:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 801aa92:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801aa94:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 801aa96:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 801aa98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 801aa9a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 801aa9c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 801aa9e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 801aaa0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 801aaa2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801aaa4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 801aaa6:	6261      	str	r1, [r4, #36]	@ 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801aaa8:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 801aaaa:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801aaac:	b10a      	cbz	r2, 801aab2 <HAL_I2C_Mem_Read+0x126>
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d04e      	beq.n	801ab50 <HAL_I2C_Mem_Read+0x1c4>
    } while (hi2c->XferCount > 0U);
 801aab2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	f000 808a 	beq.w	801abd0 <HAL_I2C_Mem_Read+0x244>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aabc:	6821      	ldr	r1, [r4, #0]
 801aabe:	e7df      	b.n	801aa80 <HAL_I2C_Mem_Read+0xf4>
 801aac0:	698b      	ldr	r3, [r1, #24]
 801aac2:	065b      	lsls	r3, r3, #25
 801aac4:	d4ce      	bmi.n	801aa64 <HAL_I2C_Mem_Read+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aac6:	f7fc fe9f 	bl	8017808 <HAL_GetTick>
 801aaca:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801aacc:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aace:	4598      	cmp	r8, r3
 801aad0:	d302      	bcc.n	801aad8 <HAL_I2C_Mem_Read+0x14c>
 801aad2:	f1b8 0f00 	cmp.w	r8, #0
 801aad6:	d1f3      	bne.n	801aac0 <HAL_I2C_Mem_Read+0x134>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801aad8:	698b      	ldr	r3, [r1, #24]
 801aada:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 801aade:	d1ef      	bne.n	801aac0 <HAL_I2C_Mem_Read+0x134>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aae0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801aae2:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aae4:	430a      	orrs	r2, r1
 801aae6:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801aae8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801aaec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 801aaf6:	e782      	b.n	801a9fe <HAL_I2C_Mem_Read+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aaf8:	f1b8 0f00 	cmp.w	r8, #0
 801aafc:	d103      	bne.n	801ab06 <HAL_I2C_Mem_Read+0x17a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801aafe:	698b      	ldr	r3, [r1, #24]
 801ab00:	f013 0304 	ands.w	r3, r3, #4
 801ab04:	d019      	beq.n	801ab3a <HAL_I2C_Mem_Read+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ab06:	698b      	ldr	r3, [r1, #24]
 801ab08:	0758      	lsls	r0, r3, #29
 801ab0a:	d4bf      	bmi.n	801aa8c <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab0c:	f7fc fe7c 	bl	8017808 <HAL_GetTick>
 801ab10:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801ab12:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab14:	4598      	cmp	r8, r3
 801ab16:	d2ef      	bcs.n	801aaf8 <HAL_I2C_Mem_Read+0x16c>
 801ab18:	e7f1      	b.n	801aafe <HAL_I2C_Mem_Read+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ab1a:	6993      	ldr	r3, [r2, #24]
 801ab1c:	061b      	lsls	r3, r3, #24
 801ab1e:	d41e      	bmi.n	801ab5e <HAL_I2C_Mem_Read+0x1d2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab20:	f7fc fe72 	bl	8017808 <HAL_GetTick>
 801ab24:	1b43      	subs	r3, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801ab26:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab28:	4598      	cmp	r8, r3
 801ab2a:	d302      	bcc.n	801ab32 <HAL_I2C_Mem_Read+0x1a6>
 801ab2c:	f1b8 0f00 	cmp.w	r8, #0
 801ab30:	d1f3      	bne.n	801ab1a <HAL_I2C_Mem_Read+0x18e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801ab32:	6993      	ldr	r3, [r2, #24]
 801ab34:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 801ab38:	d1ef      	bne.n	801ab1a <HAL_I2C_Mem_Read+0x18e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ab3a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801ab3c:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 801ab3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ab42:	430a      	orrs	r2, r1
 801ab44:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801ab46:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ab4a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 801ab4e:	e756      	b.n	801a9fe <HAL_I2C_Mem_Read+0x72>
 801ab50:	f1b8 3fff 	cmp.w	r8, #4294967295
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ab54:	6822      	ldr	r2, [r4, #0]
 801ab56:	d1e0      	bne.n	801ab1a <HAL_I2C_Mem_Read+0x18e>
 801ab58:	6993      	ldr	r3, [r2, #24]
 801ab5a:	0619      	lsls	r1, r3, #24
 801ab5c:	d5fc      	bpl.n	801ab58 <HAL_I2C_Mem_Read+0x1cc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801ab5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801ab60:	b29b      	uxth	r3, r3
 801ab62:	2bff      	cmp	r3, #255	@ 0xff
 801ab64:	d909      	bls.n	801ab7a <HAL_I2C_Mem_Read+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
 801ab66:	6853      	ldr	r3, [r2, #4]
 801ab68:	4926      	ldr	r1, [pc, #152]	@ (801ac04 <HAL_I2C_Mem_Read+0x278>)
 801ab6a:	400b      	ands	r3, r1
 801ab6c:	4926      	ldr	r1, [pc, #152]	@ (801ac08 <HAL_I2C_Mem_Read+0x27c>)
 801ab6e:	4333      	orrs	r3, r6
 801ab70:	4319      	orrs	r1, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801ab72:	23ff      	movs	r3, #255	@ 0xff
 801ab74:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801ab76:	6051      	str	r1, [r2, #4]
}
 801ab78:	e79b      	b.n	801aab2 <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 801ab7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801ab7c:	4821      	ldr	r0, [pc, #132]	@ (801ac04 <HAL_I2C_Mem_Read+0x278>)
          hi2c->XferSize = hi2c->XferCount;
 801ab7e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801ab80:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 801ab82:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801ab84:	6853      	ldr	r3, [r2, #4]
 801ab86:	4003      	ands	r3, r0
 801ab88:	4333      	orrs	r3, r6
 801ab8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ab8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801ab92:	6053      	str	r3, [r2, #4]
}
 801ab94:	e78d      	b.n	801aab2 <HAL_I2C_Mem_Read+0x126>
      hi2c->XferSize = hi2c->XferCount;
 801ab96:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801ab98:	4818      	ldr	r0, [pc, #96]	@ (801abfc <HAL_I2C_Mem_Read+0x270>)
      hi2c->XferSize = hi2c->XferCount;
 801ab9a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801ab9c:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
 801ab9e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 801aba0:	684b      	ldr	r3, [r1, #4]
 801aba2:	4003      	ands	r3, r0
 801aba4:	4333      	orrs	r3, r6
 801aba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801abaa:	4a18      	ldr	r2, [pc, #96]	@ (801ac0c <HAL_I2C_Mem_Read+0x280>)
 801abac:	431a      	orrs	r2, r3
 801abae:	604a      	str	r2, [r1, #4]
}
 801abb0:	e766      	b.n	801aa80 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801abb2:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801abb6:	462a      	mov	r2, r5
 801abb8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801abba:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801abbc:	4641      	mov	r1, r8
 801abbe:	f7ff fb97 	bl	801a2f0 <I2C_WaitOnTXISFlagUntilTimeout>
 801abc2:	2800      	cmp	r0, #0
 801abc4:	d194      	bne.n	801aaf0 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801abc6:	fa5f f389 	uxtb.w	r3, r9
 801abca:	6821      	ldr	r1, [r4, #0]
 801abcc:	628b      	str	r3, [r1, #40]	@ 0x28
 801abce:	e743      	b.n	801aa58 <HAL_I2C_Mem_Read+0xcc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801abd0:	462a      	mov	r2, r5
 801abd2:	4641      	mov	r1, r8
 801abd4:	4620      	mov	r0, r4
 801abd6:	f7ff fc41 	bl	801a45c <I2C_WaitOnSTOPFlagUntilTimeout>
 801abda:	2800      	cmp	r0, #0
 801abdc:	f47f af0f 	bne.w	801a9fe <HAL_I2C_Mem_Read+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801abe0:	6823      	ldr	r3, [r4, #0]
 801abe2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 801abe4:	4d0a      	ldr	r5, [pc, #40]	@ (801ac10 <HAL_I2C_Mem_Read+0x284>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801abe6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801abe8:	685a      	ldr	r2, [r3, #4]
 801abea:	402a      	ands	r2, r5
 801abec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801abee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801abf2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801abf6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 801abfa:	e701      	b.n	801aa00 <HAL_I2C_Mem_Read+0x74>
 801abfc:	fc009800 	.word	0xfc009800
 801ac00:	01ff2400 	.word	0x01ff2400
 801ac04:	fc009c00 	.word	0xfc009c00
 801ac08:	01ff0000 	.word	0x01ff0000
 801ac0c:	02002400 	.word	0x02002400
 801ac10:	fe00e800 	.word	0xfe00e800

0801ac14 <HAL_I2C_GetState>:
  return hi2c->State;
 801ac14:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 801ac18:	4770      	bx	lr
 801ac1a:	bf00      	nop

0801ac1c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 801ac1c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 801ac1e:	4770      	bx	lr

0801ac20 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ac20:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 801ac24:	2a20      	cmp	r2, #32
 801ac26:	d123      	bne.n	801ac70 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 801ac28:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ac2c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 801ac30:	4603      	mov	r3, r0
 801ac32:	2a01      	cmp	r2, #1
 801ac34:	d01c      	beq.n	801ac70 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ac36:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ac38:	2024      	movs	r0, #36	@ 0x24
{
 801ac3a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ac3c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ac40:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 801ac44:	6810      	ldr	r0, [r2, #0]
 801ac46:	f020 0001 	bic.w	r0, r0, #1
 801ac4a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ac4c:	6810      	ldr	r0, [r2, #0]
 801ac4e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 801ac52:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 801ac54:	6810      	ldr	r0, [r2, #0]
 801ac56:	4301      	orrs	r1, r0

    return HAL_OK;
 801ac58:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 801ac5a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801ac5c:	6811      	ldr	r1, [r2, #0]
 801ac5e:	f041 0101 	orr.w	r1, r1, #1
 801ac62:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801ac64:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801ac68:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801ac6c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 801ac70:	2002      	movs	r0, #2
}
 801ac72:	4770      	bx	lr

0801ac74 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ac74:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 801ac78:	2a20      	cmp	r2, #32
 801ac7a:	d122      	bne.n	801acc2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 801ac7c:	4603      	mov	r3, r0
{
 801ac7e:	b500      	push	{lr}
 801ac80:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ac84:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 801ac88:	2a01      	cmp	r2, #1
 801ac8a:	d01c      	beq.n	801acc6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ac8c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ac8e:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ac90:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ac94:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 801ac98:	6810      	ldr	r0, [r2, #0]
 801ac9a:	f020 0001 	bic.w	r0, r0, #1
 801ac9e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 801aca0:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 801aca2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 801aca6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 801acaa:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 801acac:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801acae:	6811      	ldr	r1, [r2, #0]
 801acb0:	f041 0101 	orr.w	r1, r1, #1
 801acb4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801acb6:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801acba:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801acbe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 801acc2:	2002      	movs	r0, #2
}
 801acc4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 801acc6:	2002      	movs	r0, #2
}
 801acc8:	f85d fb04 	ldr.w	pc, [sp], #4

0801accc <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop

0801acd0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 801acd0:	2800      	cmp	r0, #0
 801acd2:	d067      	beq.n	801ada4 <HAL_LTDC_Init+0xd4>
{
 801acd4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801acd6:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 801acda:	4604      	mov	r4, r0
 801acdc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d05a      	beq.n	801ad9a <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801ace4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801ace6:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801ace8:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801acec:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801acf0:	4302      	orrs	r2, r0
 801acf2:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801acf4:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801acf6:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801acf8:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801acfa:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801acfe:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801ad00:	4929      	ldr	r1, [pc, #164]	@ (801ada8 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801ad02:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801ad04:	6998      	ldr	r0, [r3, #24]
 801ad06:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801ad08:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801ad0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801ad0c:	689a      	ldr	r2, [r3, #8]
 801ad0e:	400a      	ands	r2, r1
 801ad10:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801ad12:	689a      	ldr	r2, [r3, #8]
 801ad14:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801ad18:	69a0      	ldr	r0, [r4, #24]
 801ad1a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801ad1c:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801ad1e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 801ad20:	68da      	ldr	r2, [r3, #12]
 801ad22:	400a      	ands	r2, r1
 801ad24:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801ad26:	68da      	ldr	r2, [r3, #12]
 801ad28:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801ad2c:	6a20      	ldr	r0, [r4, #32]
 801ad2e:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 801ad30:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801ad32:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 801ad34:	691a      	ldr	r2, [r3, #16]
 801ad36:	400a      	ands	r2, r1
 801ad38:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801ad3a:	691a      	ldr	r2, [r3, #16]
 801ad3c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801ad40:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ad42:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 801ad44:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801ad46:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 801ad48:	695a      	ldr	r2, [r3, #20]
 801ad4a:	400a      	ands	r2, r1
 801ad4c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801ad4e:	695a      	ldr	r2, [r3, #20]
 801ad50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ad52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801ad56:	430a      	orrs	r2, r1
 801ad58:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801ad5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 801ad5c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801ad60:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801ad64:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801ad68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801ad6a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 801ad6c:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 801ad70:	432a      	orrs	r2, r5
 801ad72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801ad76:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801ad78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801ad7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801ad7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ad80:	f042 0206 	orr.w	r2, r2, #6
 801ad84:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 801ad86:	699a      	ldr	r2, [r3, #24]
 801ad88:	f042 0201 	orr.w	r2, r2, #1
 801ad8c:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 801ad8e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801ad90:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 801ad94:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 801ad98:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 801ad9a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 801ad9e:	f7ff ff95 	bl	801accc <HAL_LTDC_MspInit>
 801ada2:	e79f      	b.n	801ace4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 801ada4:	2001      	movs	r0, #1
}
 801ada6:	4770      	bx	lr
 801ada8:	f000f800 	.word	0xf000f800

0801adac <HAL_LTDC_ErrorCallback>:
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 801adac:	4770      	bx	lr
 801adae:	bf00      	nop

0801adb0 <HAL_LTDC_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 801adb0:	4770      	bx	lr
 801adb2:	bf00      	nop

0801adb4 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801adb4:	6803      	ldr	r3, [r0, #0]
{
 801adb6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801adb8:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
{
 801adba:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 801adbc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 801adbe:	076a      	lsls	r2, r5, #29
 801adc0:	d501      	bpl.n	801adc6 <HAL_LTDC_IRQHandler+0x12>
 801adc2:	0771      	lsls	r1, r6, #29
 801adc4:	d41d      	bmi.n	801ae02 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801adc6:	07aa      	lsls	r2, r5, #30
 801adc8:	d501      	bpl.n	801adce <HAL_LTDC_IRQHandler+0x1a>
 801adca:	07b3      	lsls	r3, r6, #30
 801adcc:	d42d      	bmi.n	801ae2a <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 801adce:	07e8      	lsls	r0, r5, #31
 801add0:	d501      	bpl.n	801add6 <HAL_LTDC_IRQHandler+0x22>
 801add2:	07f1      	lsls	r1, r6, #31
 801add4:	d440      	bmi.n	801ae58 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 801add6:	072a      	lsls	r2, r5, #28
 801add8:	d501      	bpl.n	801adde <HAL_LTDC_IRQHandler+0x2a>
 801adda:	0733      	lsls	r3, r6, #28
 801addc:	d400      	bmi.n	801ade0 <HAL_LTDC_IRQHandler+0x2c>
}
 801adde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 801ade0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801ade2:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 801ade4:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 801ade6:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 801ade8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801adea:	f022 0208 	bic.w	r2, r2, #8
 801adee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801adf0:	63d8      	str	r0, [r3, #60]	@ 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 801adf2:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 801adf4:	f884 50a1 	strb.w	r5, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801adf8:	f884 10a0 	strb.w	r1, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 801adfc:	f7f7 f828 	bl	8011e50 <HAL_LTDC_ReloadEventCallback>
}
 801ae00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 801ae02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ae04:	f022 0204 	bic.w	r2, r2, #4
 801ae08:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 801ae0a:	2204      	movs	r2, #4
 801ae0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 801ae0e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801ae12:	f043 0301 	orr.w	r3, r3, #1
 801ae16:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 801ae1a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801ae1c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801ae20:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801ae24:	f7ff ffc2 	bl	801adac <HAL_LTDC_ErrorCallback>
 801ae28:	e7cd      	b.n	801adc6 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801ae2a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 801ae2c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801ae2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ae30:	f022 0202 	bic.w	r2, r2, #2
 801ae34:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801ae36:	2202      	movs	r2, #2
 801ae38:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801ae3a:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 801ae3c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 801ae40:	f043 0302 	orr.w	r3, r3, #2
 801ae44:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 801ae48:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801ae4a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801ae4e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801ae52:	f7ff ffab 	bl	801adac <HAL_LTDC_ErrorCallback>
 801ae56:	e7ba      	b.n	801adce <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801ae58:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 801ae5a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801ae5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ae5e:	f022 0201 	bic.w	r2, r2, #1
 801ae62:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 801ae64:	2201      	movs	r2, #1
 801ae66:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 801ae68:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 801ae6a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801ae6e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 801ae72:	f7ff ff9d 	bl	801adb0 <HAL_LTDC_LineEventCallback>
 801ae76:	e7ae      	b.n	801add6 <HAL_LTDC_IRQHandler+0x22>

0801ae78 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 801ae78:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 801ae7c:	2b01      	cmp	r3, #1
 801ae7e:	f000 80c3 	beq.w	801b008 <HAL_LTDC_ConfigLayer+0x190>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801ae82:	2302      	movs	r3, #2
{
 801ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801ae88:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801ae8c:	f8d0 9000 	ldr.w	r9, [r0]
{
 801ae90:	b083      	sub	sp, #12
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801ae92:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801ae96:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801ae9a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801ae9c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801aea0:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801aea2:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 801aea6:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801aea8:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 801aeac:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801aeae:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801aeb2:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801aeb6:	f8df a158 	ldr.w	sl, [pc, #344]	@ 801b010 <HAL_LTDC_ConfigLayer+0x198>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801aeba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801aebe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 801aec2:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801aec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aec6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aeca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801aecc:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801aece:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aed4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aed8:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801aeda:	44bb      	add	fp, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801aedc:	682a      	ldr	r2, [r5, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801aede:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801aee2:	9b01      	ldr	r3, [sp, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801aee4:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801aee6:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801aee8:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801aeec:	f8d9 300c 	ldr.w	r3, [r9, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801aef0:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801aef4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 801aef8:	440b      	add	r3, r1
 801aefa:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801aefe:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801af02:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801af06:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801af0a:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801af0e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801af12:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801af14:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801af18:	68ab      	ldr	r3, [r5, #8]
 801af1a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 801af1e:	3301      	adds	r3, #1
 801af20:	f3c0 000a 	ubfx	r0, r0, #0, #11
 801af24:	4403      	add	r3, r0
 801af26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801af2a:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801af2c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801af30:	2907      	cmp	r1, #7
 801af32:	f8dc 3010 	ldr.w	r3, [ip, #16]
 801af36:	f023 0307 	bic.w	r3, r3, #7
 801af3a:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801af3e:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 801af42:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801af46:	f04f 0300 	mov.w	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 801af4a:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801af4e:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 801af52:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801af56:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 801af5a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 801af5e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 801af62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801af66:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801af6a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 801af6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801af72:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801af76:	696b      	ldr	r3, [r5, #20]
 801af78:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801af7c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801af80:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801af82:	ea00 0a0a 	and.w	sl, r0, sl
 801af86:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801af8a:	6a28      	ldr	r0, [r5, #32]
 801af8c:	ea43 0300 	orr.w	r3, r3, r0
 801af90:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801af94:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801af98:	f04f 0300 	mov.w	r3, #0
 801af9c:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801afa0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801afa2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 801afa6:	d82d      	bhi.n	801b004 <HAL_LTDC_ConfigLayer+0x18c>
 801afa8:	4b18      	ldr	r3, [pc, #96]	@ (801b00c <HAL_LTDC_ConfigLayer+0x194>)
 801afaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801afae:	1abf      	subs	r7, r7, r2
 801afb0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 801afb2:	fb03 f707 	mul.w	r7, r3, r7
 801afb6:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801afba:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801afbc:	3707      	adds	r7, #7
 801afbe:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801afc2:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 801afc6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 801afca:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801afce:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801afd2:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 801afd6:	f36f 030a 	bfc	r3, #0, #11
 801afda:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801afde:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801afe2:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801afe4:	f859 3006 	ldr.w	r3, [r9, r6]
 801afe8:	4313      	orrs	r3, r2
 801afea:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 801afee:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801aff0:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 801aff4:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 801aff6:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 801affa:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 801affe:	b003      	add	sp, #12
 801b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801b004:	2301      	movs	r3, #1
 801b006:	e7d2      	b.n	801afae <HAL_LTDC_ConfigLayer+0x136>
  __HAL_LOCK(hltdc);
 801b008:	2002      	movs	r0, #2
}
 801b00a:	4770      	bx	lr
 801b00c:	08057ea4 	.word	0x08057ea4
 801b010:	fffff8f8 	.word	0xfffff8f8

0801b014 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 801b014:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 801b018:	2a01      	cmp	r2, #1
 801b01a:	d015      	beq.n	801b048 <HAL_LTDC_Reload+0x34>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 801b01c:	6802      	ldr	r2, [r0, #0]
 801b01e:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801b020:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 801b022:	f04f 0c00 	mov.w	ip, #0
{
 801b026:	b500      	push	{lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801b028:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 801b02c:	f04f 0e01 	mov.w	lr, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 801b030:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801b032:	f040 0008 	orr.w	r0, r0, #8
 801b036:	6350      	str	r0, [r2, #52]	@ 0x34
  return HAL_OK;
 801b038:	4660      	mov	r0, ip
  hltdc->Instance->SRCR = ReloadType;
 801b03a:	6251      	str	r1, [r2, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 801b03c:	f883 e0a1 	strb.w	lr, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 801b040:	f883 c0a0 	strb.w	ip, [r3, #160]	@ 0xa0
}
 801b044:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hltdc);
 801b048:	2002      	movs	r0, #2
}
 801b04a:	4770      	bx	lr

0801b04c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 801b04c:	b538      	push	{r3, r4, r5, lr}
 801b04e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801b050:	f7fc fbda 	bl	8017808 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 801b054:	2c00      	cmp	r4, #0
 801b056:	d058      	beq.n	801b10a <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 801b058:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 801b05a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 801b05c:	2100      	movs	r1, #0
 801b05e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 801b060:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 801b064:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 801b068:	68da      	ldr	r2, [r3, #12]
 801b06a:	f022 0201 	bic.w	r2, r2, #1
 801b06e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801b070:	e005      	b.n	801b07e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801b072:	f7fc fbc9 	bl	8017808 <HAL_GetTick>
 801b076:	1b43      	subs	r3, r0, r5
 801b078:	2b05      	cmp	r3, #5
 801b07a:	d841      	bhi.n	801b100 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801b07c:	6823      	ldr	r3, [r4, #0]
 801b07e:	68da      	ldr	r2, [r3, #12]
 801b080:	07d2      	lsls	r2, r2, #31
 801b082:	d4f6      	bmi.n	801b072 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801b084:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801b088:	69e0      	ldr	r0, [r4, #28]
 801b08a:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801b08c:	68e1      	ldr	r1, [r4, #12]
 801b08e:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801b090:	4302      	orrs	r2, r0
 801b092:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801b094:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801b096:	4302      	orrs	r2, r0
 801b098:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801b09a:	4302      	orrs	r2, r0
 801b09c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801b09e:	4302      	orrs	r2, r0
 801b0a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b0a2:	4302      	orrs	r2, r0
 801b0a4:	68a0      	ldr	r0, [r4, #8]
 801b0a6:	4302      	orrs	r2, r0
 801b0a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801b0aa:	3801      	subs	r0, #1
 801b0ac:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b0b0:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801b0b2:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b0b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801b0b8:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b0ba:	d103      	bne.n	801b0c4 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801b0bc:	691a      	ldr	r2, [r3, #16]
 801b0be:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801b0c2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801b0c4:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801b0c6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b0c8:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 801b0ca:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801b0cc:	db1f      	blt.n	801b10e <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801b0ce:	b292      	uxth	r2, r2
 801b0d0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801b0d2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b0d4:	2a00      	cmp	r2, #0
 801b0d6:	db24      	blt.n	801b122 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801b0d8:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801b0da:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801b0de:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801b0e2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801b0e4:	d029      	beq.n	801b13a <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801b0e6:	b2c0      	uxtb	r0, r0
 801b0e8:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 801b0ea:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 801b0ec:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 801b0ee:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 801b0f0:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801b0f2:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 801b0f4:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 801b0f6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 801b0fa:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 801b0fe:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 801b100:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801b102:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 801b104:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801b106:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 801b10a:	2001      	movs	r0, #1
}
 801b10c:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801b10e:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801b110:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801b112:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801b116:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801b118:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801b11a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801b11c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b11e:	2a00      	cmp	r2, #0
 801b120:	dada      	bge.n	801b0d8 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801b122:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 801b124:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801b126:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801b12a:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 801b12e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801b130:	6a19      	ldr	r1, [r3, #32]
 801b132:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801b136:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801b138:	d1d5      	bne.n	801b0e6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 801b13a:	2200      	movs	r2, #0
 801b13c:	629a      	str	r2, [r3, #40]	@ 0x28
 801b13e:	e7d4      	b.n	801b0ea <HAL_MDMA_Init+0x9e>

0801b140 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 801b140:	2800      	cmp	r0, #0
 801b142:	d066      	beq.n	801b212 <HAL_MDMA_Start_IT+0xd2>
{
 801b144:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 801b146:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 801b14a:	2c01      	cmp	r4, #1
 801b14c:	d009      	beq.n	801b162 <HAL_MDMA_Start_IT+0x22>
 801b14e:	2401      	movs	r4, #1
 801b150:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 801b154:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 801b158:	2c01      	cmp	r4, #1
 801b15a:	d005      	beq.n	801b168 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 801b15c:	2300      	movs	r3, #0
 801b15e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 801b162:	2002      	movs	r0, #2
}
 801b164:	bc70      	pop	{r4, r5, r6}
 801b166:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 801b168:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801b16a:	9d03      	ldr	r5, [sp, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 801b16c:	261f      	movs	r6, #31
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801b16e:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->State = HAL_MDMA_STATE_BUSY;
 801b172:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801b176:	f04f 0400 	mov.w	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801b17a:	f105 3cff 	add.w	ip, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801b17e:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 801b180:	6804      	ldr	r4, [r0, #0]
 801b182:	68e5      	ldr	r5, [r4, #12]
 801b184:	f025 0501 	bic.w	r5, r5, #1
 801b188:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 801b18a:	6965      	ldr	r5, [r4, #20]
 801b18c:	f363 0510 	bfi	r5, r3, #0, #17
 801b190:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 801b192:	6963      	ldr	r3, [r4, #20]
 801b194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b198:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 801b19c:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 801b19e:	6066      	str	r6, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 801b1a0:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 801b1a2:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 801b1a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b1a6:	bf0c      	ite	eq
 801b1a8:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 801b1ac:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801b1b0:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 801b1b4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 801b1b6:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 801b1b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b1ba:	bf0c      	ite	eq
 801b1bc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 801b1c0:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 801b1c4:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801b1c6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801b1c8:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801b1ca:	68e3      	ldr	r3, [r4, #12]
 801b1cc:	f043 0306 	orr.w	r3, r3, #6
 801b1d0:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 801b1d2:	b11a      	cbz	r2, 801b1dc <HAL_MDMA_Start_IT+0x9c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 801b1d4:	68e3      	ldr	r3, [r4, #12]
 801b1d6:	f043 0310 	orr.w	r3, r3, #16
 801b1da:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801b1dc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801b1de:	b11b      	cbz	r3, 801b1e8 <HAL_MDMA_Start_IT+0xa8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 801b1e0:	68e3      	ldr	r3, [r4, #12]
 801b1e2:	f043 0308 	orr.w	r3, r3, #8
 801b1e6:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 801b1e8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801b1ea:	b11b      	cbz	r3, 801b1f4 <HAL_MDMA_Start_IT+0xb4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 801b1ec:	68e3      	ldr	r3, [r4, #12]
 801b1ee:	f043 0320 	orr.w	r3, r3, #32
 801b1f2:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 801b1f4:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b1f6:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 801b1f8:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b1fc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 801b200:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801b202:	d103      	bne.n	801b20c <HAL_MDMA_Start_IT+0xcc>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801b204:	68e3      	ldr	r3, [r4, #12]
 801b206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b20a:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 801b20c:	2000      	movs	r0, #0
}
 801b20e:	bc70      	pop	{r4, r5, r6}
 801b210:	4770      	bx	lr
    return HAL_ERROR;
 801b212:	2001      	movs	r0, #1
}
 801b214:	4770      	bx	lr
 801b216:	bf00      	nop

0801b218 <HAL_MDMA_IRQHandler>:
{
 801b218:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 801b21a:	2300      	movs	r3, #0
{
 801b21c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801b21e:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 801b222:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 801b224:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 801b226:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 801b228:	4b57      	ldr	r3, [pc, #348]	@ (801b388 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801b22a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 801b22c:	4a57      	ldr	r2, [pc, #348]	@ (801b38c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 801b22e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 801b230:	6823      	ldr	r3, [r4, #0]
 801b232:	441a      	add	r2, r3
 801b234:	f3c2 1284 	ubfx	r2, r2, #6, #5
 801b238:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801b23c:	4202      	tst	r2, r0
 801b23e:	f000 80a0 	beq.w	801b382 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	07d1      	lsls	r1, r2, #31
 801b246:	d529      	bpl.n	801b29c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 801b248:	68da      	ldr	r2, [r3, #12]
 801b24a:	0792      	lsls	r2, r2, #30
 801b24c:	d526      	bpl.n	801b29c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 801b24e:	68da      	ldr	r2, [r3, #12]
 801b250:	f022 0202 	bic.w	r2, r2, #2
 801b254:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 801b256:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801b258:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 801b25a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801b25c:	bf54      	ite	pl
 801b25e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 801b262:	f041 0102 	orrmi.w	r1, r1, #2
 801b266:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 801b268:	0591      	lsls	r1, r2, #22
 801b26a:	d503      	bpl.n	801b274 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 801b26c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801b26e:	f041 0104 	orr.w	r1, r1, #4
 801b272:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 801b274:	05d0      	lsls	r0, r2, #23
 801b276:	d503      	bpl.n	801b280 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 801b278:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801b27a:	f041 0108 	orr.w	r1, r1, #8
 801b27e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 801b280:	0551      	lsls	r1, r2, #21
 801b282:	d503      	bpl.n	801b28c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 801b284:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801b286:	f041 0110 	orr.w	r1, r1, #16
 801b28a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 801b28c:	0510      	lsls	r0, r2, #20
 801b28e:	d503      	bpl.n	801b298 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 801b290:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801b292:	f042 0220 	orr.w	r2, r2, #32
 801b296:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 801b298:	2201      	movs	r2, #1
 801b29a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 801b29c:	681a      	ldr	r2, [r3, #0]
 801b29e:	06d1      	lsls	r1, r2, #27
 801b2a0:	d509      	bpl.n	801b2b6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 801b2a2:	68da      	ldr	r2, [r3, #12]
 801b2a4:	0692      	lsls	r2, r2, #26
 801b2a6:	d506      	bpl.n	801b2b6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 801b2a8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 801b2aa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 801b2ac:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 801b2ae:	b112      	cbz	r2, 801b2b6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 801b2b4:	6823      	ldr	r3, [r4, #0]
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	0710      	lsls	r0, r2, #28
 801b2ba:	d509      	bpl.n	801b2d0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 801b2bc:	68da      	ldr	r2, [r3, #12]
 801b2be:	06d1      	lsls	r1, r2, #27
 801b2c0:	d506      	bpl.n	801b2d0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 801b2c2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 801b2c4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 801b2c6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 801b2c8:	b112      	cbz	r2, 801b2d0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 801b2ca:	4620      	mov	r0, r4
 801b2cc:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801b2ce:	6823      	ldr	r3, [r4, #0]
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	0752      	lsls	r2, r2, #29
 801b2d4:	d509      	bpl.n	801b2ea <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801b2d6:	68da      	ldr	r2, [r3, #12]
 801b2d8:	0710      	lsls	r0, r2, #28
 801b2da:	d506      	bpl.n	801b2ea <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801b2dc:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801b2de:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801b2e0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801b2e2:	b112      	cbz	r2, 801b2ea <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801b2e4:	4620      	mov	r0, r4
 801b2e6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 801b2e8:	6823      	ldr	r3, [r4, #0]
 801b2ea:	681a      	ldr	r2, [r3, #0]
 801b2ec:	0791      	lsls	r1, r2, #30
 801b2ee:	d516      	bpl.n	801b31e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 801b2f0:	68da      	ldr	r2, [r3, #12]
 801b2f2:	0752      	lsls	r2, r2, #29
 801b2f4:	d513      	bpl.n	801b31e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801b2f6:	68da      	ldr	r2, [r3, #12]
 801b2f8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 801b2fc:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 801b2fe:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 801b302:	2a04      	cmp	r2, #4
 801b304:	d034      	beq.n	801b370 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801b306:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 801b308:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801b30a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 801b30c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 801b30e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 801b310:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 801b314:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 801b318:	b10b      	cbz	r3, 801b31e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 801b31a:	4620      	mov	r0, r4
 801b31c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 801b31e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801b320:	2b00      	cmp	r3, #0
 801b322:	d02e      	beq.n	801b382 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 801b324:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801b326:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 801b328:	4b19      	ldr	r3, [pc, #100]	@ (801b390 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801b32a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 801b32e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 801b332:	68cb      	ldr	r3, [r1, #12]
 801b334:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 801b338:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 801b33a:	60cb      	str	r3, [r1, #12]
 801b33c:	e002      	b.n	801b344 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 801b33e:	68cb      	ldr	r3, [r1, #12]
 801b340:	07d8      	lsls	r0, r3, #31
 801b342:	d504      	bpl.n	801b34e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 801b344:	9b01      	ldr	r3, [sp, #4]
 801b346:	3301      	adds	r3, #1
 801b348:	4293      	cmp	r3, r2
 801b34a:	9301      	str	r3, [sp, #4]
 801b34c:	d9f7      	bls.n	801b33e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 801b34e:	2300      	movs	r3, #0
 801b350:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801b354:	68cb      	ldr	r3, [r1, #12]
 801b356:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801b358:	bf4c      	ite	mi
 801b35a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 801b35c:	2301      	movpl	r3, #1
 801b35e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 801b362:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801b364:	b16b      	cbz	r3, 801b382 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 801b366:	4620      	mov	r0, r4
}
 801b368:	b003      	add	sp, #12
 801b36a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 801b36e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 801b370:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 801b372:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 801b374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 801b376:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 801b37a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d1f1      	bne.n	801b366 <HAL_MDMA_IRQHandler+0x14e>
}
 801b382:	b003      	add	sp, #12
 801b384:	bd30      	pop	{r4, r5, pc}
 801b386:	bf00      	nop
 801b388:	240081b8 	.word	0x240081b8
 801b38c:	adffffc0 	.word	0xadffffc0
 801b390:	1b4e81b5 	.word	0x1b4e81b5

0801b394 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b394:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801b396:	4c1b      	ldr	r4, [pc, #108]	@ (801b404 <HAL_PWREx_ConfigSupply+0x70>)
{
 801b398:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801b39a:	68e3      	ldr	r3, [r4, #12]
 801b39c:	f003 0307 	and.w	r3, r3, #7
 801b3a0:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b3a2:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801b3a4:	d005      	beq.n	801b3b2 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b3a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b3aa:	1a18      	subs	r0, r3, r0
 801b3ac:	bf18      	it	ne
 801b3ae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 801b3b0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b3b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b3b6:	4303      	orrs	r3, r0
 801b3b8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 801b3ba:	f7fc fa25 	bl	8017808 <HAL_GetTick>
 801b3be:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b3c0:	e005      	b.n	801b3ce <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b3c2:	f7fc fa21 	bl	8017808 <HAL_GetTick>
 801b3c6:	1b83      	subs	r3, r0, r6
 801b3c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b3cc:	d818      	bhi.n	801b400 <HAL_PWREx_ConfigSupply+0x6c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b3ce:	6863      	ldr	r3, [r4, #4]
 801b3d0:	049a      	lsls	r2, r3, #18
 801b3d2:	d5f6      	bpl.n	801b3c2 <HAL_PWREx_ConfigSupply+0x2e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801b3d4:	f1a5 031d 	sub.w	r3, r5, #29
 801b3d8:	2b01      	cmp	r3, #1
 801b3da:	d904      	bls.n	801b3e6 <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801b3dc:	3d2d      	subs	r5, #45	@ 0x2d
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801b3de:	2d01      	cmp	r5, #1
 801b3e0:	d901      	bls.n	801b3e6 <HAL_PWREx_ConfigSupply+0x52>
      return HAL_OK;
 801b3e2:	2000      	movs	r0, #0
}
 801b3e4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 801b3e6:	f7fc fa0f 	bl	8017808 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801b3ea:	4d06      	ldr	r5, [pc, #24]	@ (801b404 <HAL_PWREx_ConfigSupply+0x70>)
    tickstart = HAL_GetTick ();
 801b3ec:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801b3ee:	68eb      	ldr	r3, [r5, #12]
 801b3f0:	03db      	lsls	r3, r3, #15
 801b3f2:	d4f6      	bmi.n	801b3e2 <HAL_PWREx_ConfigSupply+0x4e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b3f4:	f7fc fa08 	bl	8017808 <HAL_GetTick>
 801b3f8:	1b00      	subs	r0, r0, r4
 801b3fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 801b3fe:	d9f6      	bls.n	801b3ee <HAL_PWREx_ConfigSupply+0x5a>
      return HAL_ERROR;
 801b400:	2001      	movs	r0, #1
}
 801b402:	bd70      	pop	{r4, r5, r6, pc}
 801b404:	58024800 	.word	0x58024800

0801b408 <QSPI_Config>:
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801b408:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 801b40c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 801b40e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801b412:	d001      	beq.n	801b418 <QSPI_Config+0x10>
 801b414:	2b00      	cmp	r3, #0
 801b416:	d153      	bne.n	801b4c0 <QSPI_Config+0xb8>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 801b418:	698c      	ldr	r4, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801b41a:	e9d1 9707 	ldrd	r9, r7, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 801b41e:	b364      	cbz	r4, 801b47a <QSPI_Config+0x72>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801b420:	4323      	orrs	r3, r4
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 801b422:	6804      	ldr	r4, [r0, #0]
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b424:	6948      	ldr	r0, [r1, #20]
 801b426:	4313      	orrs	r3, r2
 801b428:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 801b42a:	ea4f 4c80 	mov.w	ip, r0, lsl #18
 801b42e:	6808      	ldr	r0, [r1, #0]
 801b430:	e9d1 860b 	ldrd	r8, r6, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801b434:	2f00      	cmp	r7, #0
 801b436:	d066      	beq.n	801b506 <QSPI_Config+0xfe>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801b438:	ea43 0e07 	orr.w	lr, r3, r7
 801b43c:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b43e:	690f      	ldr	r7, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801b440:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801b442:	f1b9 0f00 	cmp.w	r9, #0
 801b446:	d075      	beq.n	801b534 <QSPI_Config+0x12c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b448:	ea40 0309 	orr.w	r3, r0, r9
 801b44c:	68c8      	ldr	r0, [r1, #12]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b44e:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b452:	ea43 0308 	orr.w	r3, r3, r8
 801b456:	ea43 0306 	orr.w	r3, r3, r6
 801b45a:	ea43 0305 	orr.w	r3, r3, r5
 801b45e:	ea43 0307 	orr.w	r3, r3, r7
 801b462:	ea43 0300 	orr.w	r3, r3, r0
 801b466:	ea43 030c 	orr.w	r3, r3, ip
 801b46a:	ea43 030e 	orr.w	r3, r3, lr
 801b46e:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b470:	d06a      	beq.n	801b548 <QSPI_Config+0x140>
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801b472:	684b      	ldr	r3, [r1, #4]
 801b474:	61a3      	str	r3, [r4, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 801b476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801b47a:	b337      	cbz	r7, 801b4ca <QSPI_Config+0xc2>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801b47c:	433b      	orrs	r3, r7
 801b47e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b480:	694d      	ldr	r5, [r1, #20]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801b482:	6888      	ldr	r0, [r1, #8]
 801b484:	4313      	orrs	r3, r2
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b486:	04ad      	lsls	r5, r5, #18
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b488:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801b48a:	61e0      	str	r0, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b48c:	6908      	ldr	r0, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b48e:	e9d1 c70b 	ldrd	ip, r7, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801b492:	f1b9 0f00 	cmp.w	r9, #0
 801b496:	d063      	beq.n	801b560 <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b498:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b49c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b4a0:	ea40 000c 	orr.w	r0, r0, ip
 801b4a4:	ea40 0007 	orr.w	r0, r0, r7
 801b4a8:	ea40 0006 	orr.w	r0, r0, r6
 801b4ac:	68ce      	ldr	r6, [r1, #12]
 801b4ae:	ea40 0006 	orr.w	r0, r0, r6
 801b4b2:	ea40 0005 	orr.w	r0, r0, r5
 801b4b6:	ea43 0300 	orr.w	r3, r3, r0
 801b4ba:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b4bc:	d1d9      	bne.n	801b472 <QSPI_Config+0x6a>
 801b4be:	e043      	b.n	801b548 <QSPI_Config+0x140>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 801b4c0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b4c2:	6805      	ldr	r5, [r0, #0]
 801b4c4:	3c01      	subs	r4, #1
 801b4c6:	612c      	str	r4, [r5, #16]
 801b4c8:	e7a6      	b.n	801b418 <QSPI_Config+0x10>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801b4ca:	f1b9 0f00 	cmp.w	r9, #0
 801b4ce:	d050      	beq.n	801b572 <QSPI_Config+0x16a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b4d0:	ea43 0309 	orr.w	r3, r3, r9
 801b4d4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 801b4d6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b4d8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b4dc:	ea43 0302 	orr.w	r3, r3, r2
 801b4e0:	ea43 0304 	orr.w	r3, r3, r4
 801b4e4:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 801b4e6:	ea43 0304 	orr.w	r3, r3, r4
 801b4ea:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 801b4ec:	ea43 0304 	orr.w	r3, r3, r4
 801b4f0:	68cc      	ldr	r4, [r1, #12]
 801b4f2:	ea43 0304 	orr.w	r3, r3, r4
 801b4f6:	694c      	ldr	r4, [r1, #20]
 801b4f8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 801b4fc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b4fe:	d023      	beq.n	801b548 <QSPI_Config+0x140>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801b500:	684b      	ldr	r3, [r1, #4]
 801b502:	6183      	str	r3, [r0, #24]
 801b504:	e020      	b.n	801b548 <QSPI_Config+0x140>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801b506:	f1b9 0f00 	cmp.w	r9, #0
 801b50a:	d01f      	beq.n	801b54c <QSPI_Config+0x144>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b50c:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b510:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b514:	ea40 0008 	orr.w	r0, r0, r8
 801b518:	ea40 0006 	orr.w	r0, r0, r6
 801b51c:	ea40 0005 	orr.w	r0, r0, r5
 801b520:	68cd      	ldr	r5, [r1, #12]
 801b522:	ea40 0005 	orr.w	r0, r0, r5
 801b526:	ea40 000c 	orr.w	r0, r0, ip
 801b52a:	ea43 0300 	orr.w	r3, r3, r0
 801b52e:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801b530:	d19f      	bne.n	801b472 <QSPI_Config+0x6a>
 801b532:	e009      	b.n	801b548 <QSPI_Config+0x140>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b534:	ea40 0308 	orr.w	r3, r0, r8
 801b538:	4333      	orrs	r3, r6
 801b53a:	432b      	orrs	r3, r5
 801b53c:	433b      	orrs	r3, r7
 801b53e:	ea43 030c 	orr.w	r3, r3, ip
 801b542:	ea43 030e 	orr.w	r3, r3, lr
 801b546:	6163      	str	r3, [r4, #20]
}
 801b548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b54c:	ea40 0208 	orr.w	r2, r0, r8
 801b550:	4332      	orrs	r2, r6
 801b552:	432a      	orrs	r2, r5
 801b554:	ea42 020c 	orr.w	r2, r2, ip
 801b558:	4313      	orrs	r3, r2
 801b55a:	6163      	str	r3, [r4, #20]
}
 801b55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b560:	ea40 020c 	orr.w	r2, r0, ip
 801b564:	433a      	orrs	r2, r7
 801b566:	4332      	orrs	r2, r6
 801b568:	432a      	orrs	r2, r5
 801b56a:	4313      	orrs	r3, r2
 801b56c:	6163      	str	r3, [r4, #20]
}
 801b56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (cmd->DataMode != QSPI_DATA_NONE)
 801b572:	2b00      	cmp	r3, #0
 801b574:	d0e8      	beq.n	801b548 <QSPI_Config+0x140>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801b576:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 801b578:	6800      	ldr	r0, [r0, #0]
 801b57a:	4323      	orrs	r3, r4
 801b57c:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 801b57e:	4313      	orrs	r3, r2
 801b580:	694a      	ldr	r2, [r1, #20]
 801b582:	4323      	orrs	r3, r4
 801b584:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 801b586:	4323      	orrs	r3, r4
 801b588:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801b58c:	6143      	str	r3, [r0, #20]
}
 801b58e:	e7db      	b.n	801b548 <QSPI_Config+0x140>

0801b590 <HAL_QSPI_MspInit>:
}
 801b590:	4770      	bx	lr
 801b592:	bf00      	nop

0801b594 <HAL_QSPI_Init>:
{
 801b594:	b570      	push	{r4, r5, r6, lr}
 801b596:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801b598:	f7fc f936 	bl	8017808 <HAL_GetTick>
  if(hqspi == NULL)
 801b59c:	2c00      	cmp	r4, #0
 801b59e:	d050      	beq.n	801b642 <HAL_QSPI_Init+0xae>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 801b5a0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801b5a4:	4605      	mov	r5, r0
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d03c      	beq.n	801b624 <HAL_QSPI_Init+0x90>
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801b5aa:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 801b5ac:	6822      	ldr	r2, [r4, #0]
 801b5ae:	68a1      	ldr	r1, [r4, #8]
 801b5b0:	6813      	ldr	r3, [r2, #0]
 801b5b2:	3901      	subs	r1, #1
 801b5b4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 801b5b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801b5bc:	6013      	str	r3, [r2, #0]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b5be:	6893      	ldr	r3, [r2, #8]
 801b5c0:	069b      	lsls	r3, r3, #26
 801b5c2:	d504      	bpl.n	801b5ce <HAL_QSPI_Init+0x3a>
    if (Timeout != HAL_MAX_DELAY)
 801b5c4:	1c70      	adds	r0, r6, #1
 801b5c6:	d125      	bne.n	801b614 <HAL_QSPI_Init+0x80>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b5c8:	6893      	ldr	r3, [r2, #8]
 801b5ca:	0699      	lsls	r1, r3, #26
 801b5cc:	d4fc      	bmi.n	801b5c8 <HAL_QSPI_Init+0x34>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801b5ce:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 801b5d2:	68e3      	ldr	r3, [r4, #12]
 801b5d4:	6811      	ldr	r1, [r2, #0]
 801b5d6:	432b      	orrs	r3, r5
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b5d8:	2500      	movs	r5, #0
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801b5da:	4303      	orrs	r3, r0
 801b5dc:	6860      	ldr	r0, [r4, #4]
 801b5de:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801b5e2:	4819      	ldr	r0, [pc, #100]	@ (801b648 <HAL_QSPI_Init+0xb4>)
 801b5e4:	4008      	ands	r0, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801b5e6:	6961      	ldr	r1, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801b5e8:	4303      	orrs	r3, r0
 801b5ea:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801b5ec:	69a3      	ldr	r3, [r4, #24]
 801b5ee:	6850      	ldr	r0, [r2, #4]
 801b5f0:	430b      	orrs	r3, r1
 801b5f2:	6921      	ldr	r1, [r4, #16]
 801b5f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801b5f8:	4914      	ldr	r1, [pc, #80]	@ (801b64c <HAL_QSPI_Init+0xb8>)
 801b5fa:	4001      	ands	r1, r0
  return status;
 801b5fc:	4628      	mov	r0, r5
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801b5fe:	430b      	orrs	r3, r1
 801b600:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 801b602:	6813      	ldr	r3, [r2, #0]
 801b604:	f043 0301 	orr.w	r3, r3, #1
 801b608:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 801b60a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b60c:	6465      	str	r5, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 801b60e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 801b612:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b614:	f7fc f8f8 	bl	8017808 <HAL_GetTick>
 801b618:	1b40      	subs	r0, r0, r5
 801b61a:	42b0      	cmp	r0, r6
 801b61c:	d80a      	bhi.n	801b634 <HAL_QSPI_Init+0xa0>
 801b61e:	b14e      	cbz	r6, 801b634 <HAL_QSPI_Init+0xa0>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b620:	6822      	ldr	r2, [r4, #0]
 801b622:	e7cc      	b.n	801b5be <HAL_QSPI_Init+0x2a>
    HAL_QSPI_MspInit(hqspi);
 801b624:	4620      	mov	r0, r4
 801b626:	f7ff ffb3 	bl	801b590 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 801b62a:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 801b62e:	461e      	mov	r6, r3
  hqspi->Timeout = Timeout;
 801b630:	64a3      	str	r3, [r4, #72]	@ 0x48
}
 801b632:	e7bb      	b.n	801b5ac <HAL_QSPI_Init+0x18>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801b634:	2304      	movs	r3, #4
 801b636:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801b63a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b63c:	f043 0301 	orr.w	r3, r3, #1
 801b640:	6463      	str	r3, [r4, #68]	@ 0x44
    return HAL_ERROR;
 801b642:	2001      	movs	r0, #1
}
 801b644:	bd70      	pop	{r4, r5, r6, pc}
 801b646:	bf00      	nop
 801b648:	00ffff2f 	.word	0x00ffff2f
 801b64c:	ffe0f8fe 	.word	0xffe0f8fe

0801b650 <HAL_QSPI_Command>:
{
 801b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b654:	4604      	mov	r4, r0
 801b656:	460f      	mov	r7, r1
 801b658:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 801b65a:	f7fc f8d5 	bl	8017808 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 801b65e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801b662:	2b01      	cmp	r3, #1
 801b664:	d033      	beq.n	801b6ce <HAL_QSPI_Command+0x7e>
 801b666:	2301      	movs	r3, #1
 801b668:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 801b66c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801b670:	2b01      	cmp	r3, #1
 801b672:	fa5f f883 	uxtb.w	r8, r3
 801b676:	d007      	beq.n	801b688 <HAL_QSPI_Command+0x38>
    status = HAL_BUSY;
 801b678:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 801b67c:	2300      	movs	r3, #0
}
 801b67e:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 801b680:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 801b684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b688:	2300      	movs	r3, #0
 801b68a:	1c71      	adds	r1, r6, #1
 801b68c:	4681      	mov	r9, r0
 801b68e:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 801b690:	f04f 0302 	mov.w	r3, #2
 801b694:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b698:	d11e      	bne.n	801b6d8 <HAL_QSPI_Command+0x88>
 801b69a:	6825      	ldr	r5, [r4, #0]
 801b69c:	68aa      	ldr	r2, [r5, #8]
 801b69e:	f012 0220 	ands.w	r2, r2, #32
 801b6a2:	d1fb      	bne.n	801b69c <HAL_QSPI_Command+0x4c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801b6a4:	4639      	mov	r1, r7
 801b6a6:	4620      	mov	r0, r4
 801b6a8:	f7ff feae 	bl	801b408 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 801b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6ae:	b12b      	cbz	r3, 801b6bc <HAL_QSPI_Command+0x6c>
        hqspi->State = HAL_QSPI_STATE_READY;
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801b6b6:	f04f 0800 	mov.w	r8, #0
 801b6ba:	e7df      	b.n	801b67c <HAL_QSPI_Command+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b6bc:	68ab      	ldr	r3, [r5, #8]
 801b6be:	079a      	lsls	r2, r3, #30
 801b6c0:	d5fc      	bpl.n	801b6bc <HAL_QSPI_Command+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b6c2:	2202      	movs	r2, #2
          hqspi->State = HAL_QSPI_STATE_READY;
 801b6c4:	2301      	movs	r3, #1
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b6c6:	60ea      	str	r2, [r5, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 801b6c8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801b6cc:	e7f3      	b.n	801b6b6 <HAL_QSPI_Command+0x66>
  __HAL_LOCK(hqspi);
 801b6ce:	f04f 0802 	mov.w	r8, #2
}
 801b6d2:	4640      	mov	r0, r8
 801b6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b6d8:	6825      	ldr	r5, [r4, #0]
 801b6da:	68aa      	ldr	r2, [r5, #8]
 801b6dc:	f012 0220 	ands.w	r2, r2, #32
 801b6e0:	d00f      	beq.n	801b702 <HAL_QSPI_Command+0xb2>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b6e2:	f7fc f891 	bl	8017808 <HAL_GetTick>
 801b6e6:	eba0 0309 	sub.w	r3, r0, r9
 801b6ea:	429e      	cmp	r6, r3
 801b6ec:	d301      	bcc.n	801b6f2 <HAL_QSPI_Command+0xa2>
 801b6ee:	2e00      	cmp	r6, #0
 801b6f0:	d1f2      	bne.n	801b6d8 <HAL_QSPI_Command+0x88>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801b6f2:	2304      	movs	r3, #4
 801b6f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801b6f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b6fa:	f043 0301 	orr.w	r3, r3, #1
 801b6fe:	6463      	str	r3, [r4, #68]	@ 0x44
        if (status == HAL_OK)
 801b700:	e7bc      	b.n	801b67c <HAL_QSPI_Command+0x2c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801b702:	4639      	mov	r1, r7
 801b704:	4620      	mov	r0, r4
 801b706:	f7ff fe7f 	bl	801b408 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 801b70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d1cf      	bne.n	801b6b0 <HAL_QSPI_Command+0x60>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b710:	68ab      	ldr	r3, [r5, #8]
 801b712:	079b      	lsls	r3, r3, #30
 801b714:	d4d5      	bmi.n	801b6c2 <HAL_QSPI_Command+0x72>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b716:	f7fc f877 	bl	8017808 <HAL_GetTick>
 801b71a:	eba0 0309 	sub.w	r3, r0, r9
 801b71e:	429e      	cmp	r6, r3
 801b720:	d3e7      	bcc.n	801b6f2 <HAL_QSPI_Command+0xa2>
 801b722:	2e00      	cmp	r6, #0
 801b724:	d0e5      	beq.n	801b6f2 <HAL_QSPI_Command+0xa2>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b726:	6825      	ldr	r5, [r4, #0]
 801b728:	e7f2      	b.n	801b710 <HAL_QSPI_Command+0xc0>
 801b72a:	bf00      	nop

0801b72c <HAL_QSPI_Transmit>:
{
 801b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b730:	4604      	mov	r4, r0
 801b732:	460e      	mov	r6, r1
 801b734:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 801b736:	f7fc f867 	bl	8017808 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 801b73a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801b73e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 801b740:	2b01      	cmp	r3, #1
 801b742:	d038      	beq.n	801b7b6 <HAL_QSPI_Transmit+0x8a>
 801b744:	2301      	movs	r3, #1
 801b746:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 801b74a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801b74e:	2b01      	cmp	r3, #1
 801b750:	fa5f f883 	uxtb.w	r8, r3
 801b754:	d007      	beq.n	801b766 <HAL_QSPI_Transmit+0x3a>
    status = HAL_BUSY;
 801b756:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 801b75a:	2300      	movs	r3, #0
}
 801b75c:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 801b75e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 801b762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b766:	2300      	movs	r3, #0
 801b768:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 801b76a:	b34e      	cbz	r6, 801b7c0 <HAL_QSPI_Transmit+0x94>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801b76c:	2312      	movs	r3, #18
 801b76e:	4681      	mov	r9, r0
 801b770:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801b774:	692b      	ldr	r3, [r5, #16]
 801b776:	3301      	adds	r3, #1
 801b778:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801b77a:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 801b77c:	6266      	str	r6, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801b77e:	3301      	adds	r3, #1
 801b780:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801b782:	696b      	ldr	r3, [r5, #20]
 801b784:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 801b788:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 801b78a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b78c:	b34b      	cbz	r3, 801b7e2 <HAL_QSPI_Transmit+0xb6>
 801b78e:	1c7b      	adds	r3, r7, #1
 801b790:	d13e      	bne.n	801b810 <HAL_QSPI_Transmit+0xe4>
 801b792:	4631      	mov	r1, r6
 801b794:	462a      	mov	r2, r5
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b796:	6893      	ldr	r3, [r2, #8]
 801b798:	075e      	lsls	r6, r3, #29
 801b79a:	d5fc      	bpl.n	801b796 <HAL_QSPI_Transmit+0x6a>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801b79c:	780b      	ldrb	r3, [r1, #0]
 801b79e:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->TxXferCount--;
 801b7a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 801b7a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 801b7a6:	3b01      	subs	r3, #1
        hqspi->pTxBuffPtr++;
 801b7a8:	3101      	adds	r1, #1
        hqspi->TxXferCount--;
 801b7aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 801b7ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 801b7ae:	6261      	str	r1, [r4, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 801b7b0:	b15b      	cbz	r3, 801b7ca <HAL_QSPI_Transmit+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b7b2:	6822      	ldr	r2, [r4, #0]
 801b7b4:	e7ef      	b.n	801b796 <HAL_QSPI_Transmit+0x6a>
  __HAL_LOCK(hqspi);
 801b7b6:	f04f 0802 	mov.w	r8, #2
}
 801b7ba:	4640      	mov	r0, r8
 801b7bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801b7c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b7c2:	f043 0308 	orr.w	r3, r3, #8
 801b7c6:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 801b7c8:	e7c7      	b.n	801b75a <HAL_QSPI_Transmit+0x2e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b7ca:	6825      	ldr	r5, [r4, #0]
 801b7cc:	68ab      	ldr	r3, [r5, #8]
 801b7ce:	079a      	lsls	r2, r3, #30
 801b7d0:	d5fc      	bpl.n	801b7cc <HAL_QSPI_Transmit+0xa0>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b7d2:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801b7d4:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b7d8:	60eb      	str	r3, [r5, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 801b7da:	2301      	movs	r3, #1
 801b7dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801b7e0:	e7bb      	b.n	801b75a <HAL_QSPI_Transmit+0x2e>
 801b7e2:	1c79      	adds	r1, r7, #1
 801b7e4:	d0f2      	beq.n	801b7cc <HAL_QSPI_Transmit+0xa0>
 801b7e6:	e007      	b.n	801b7f8 <HAL_QSPI_Transmit+0xcc>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b7e8:	f7fc f80e 	bl	8017808 <HAL_GetTick>
 801b7ec:	eba0 0309 	sub.w	r3, r0, r9
 801b7f0:	429f      	cmp	r7, r3
 801b7f2:	d305      	bcc.n	801b800 <HAL_QSPI_Transmit+0xd4>
 801b7f4:	b127      	cbz	r7, 801b800 <HAL_QSPI_Transmit+0xd4>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b7f6:	6825      	ldr	r5, [r4, #0]
 801b7f8:	68ab      	ldr	r3, [r5, #8]
 801b7fa:	079b      	lsls	r3, r3, #30
 801b7fc:	d5f4      	bpl.n	801b7e8 <HAL_QSPI_Transmit+0xbc>
 801b7fe:	e7e8      	b.n	801b7d2 <HAL_QSPI_Transmit+0xa6>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801b800:	2304      	movs	r3, #4
 801b802:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801b806:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b808:	f043 0301 	orr.w	r3, r3, #1
 801b80c:	6463      	str	r3, [r4, #68]	@ 0x44
        if (status == HAL_OK)
 801b80e:	e7e4      	b.n	801b7da <HAL_QSPI_Transmit+0xae>
      while(hqspi->TxXferCount > 0U)
 801b810:	462b      	mov	r3, r5
 801b812:	e008      	b.n	801b826 <HAL_QSPI_Transmit+0xfa>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b814:	f7fb fff8 	bl	8017808 <HAL_GetTick>
 801b818:	eba0 0309 	sub.w	r3, r0, r9
 801b81c:	429f      	cmp	r7, r3
 801b81e:	d3ef      	bcc.n	801b800 <HAL_QSPI_Transmit+0xd4>
 801b820:	2f00      	cmp	r7, #0
 801b822:	d0ed      	beq.n	801b800 <HAL_QSPI_Transmit+0xd4>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b824:	6823      	ldr	r3, [r4, #0]
 801b826:	689b      	ldr	r3, [r3, #8]
 801b828:	0758      	lsls	r0, r3, #29
 801b82a:	d5f3      	bpl.n	801b814 <HAL_QSPI_Transmit+0xe8>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801b82c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b82e:	781b      	ldrb	r3, [r3, #0]
 801b830:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->TxXferCount--;
 801b834:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 801b836:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 801b838:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
 801b83a:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
 801b83c:	62e2      	str	r2, [r4, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 801b83e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hqspi->pTxBuffPtr++;
 801b840:	6263      	str	r3, [r4, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 801b842:	2a00      	cmp	r2, #0
 801b844:	d1ee      	bne.n	801b824 <HAL_QSPI_Transmit+0xf8>
 801b846:	e7d6      	b.n	801b7f6 <HAL_QSPI_Transmit+0xca>

0801b848 <HAL_QSPI_Receive>:
{
 801b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b84c:	4604      	mov	r4, r0
 801b84e:	4617      	mov	r7, r2
 801b850:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 801b852:	f7fb ffd9 	bl	8017808 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801b856:	6825      	ldr	r5, [r4, #0]
 801b858:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 801b85a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801b85e:	2b01      	cmp	r3, #1
 801b860:	d03c      	beq.n	801b8dc <HAL_QSPI_Receive+0x94>
 801b862:	2301      	movs	r3, #1
 801b864:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 801b868:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801b86c:	2b01      	cmp	r3, #1
 801b86e:	fa5f f883 	uxtb.w	r8, r3
 801b872:	d007      	beq.n	801b884 <HAL_QSPI_Receive+0x3c>
    status = HAL_BUSY;
 801b874:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 801b878:	2300      	movs	r3, #0
}
 801b87a:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 801b87c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 801b880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b884:	2300      	movs	r3, #0
 801b886:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 801b888:	b36e      	cbz	r6, 801b8e6 <HAL_QSPI_Receive+0x9e>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801b88a:	2322      	movs	r3, #34	@ 0x22
 801b88c:	4681      	mov	r9, r0
 801b88e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801b892:	692b      	ldr	r3, [r5, #16]
 801b894:	3301      	adds	r3, #1
 801b896:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801b898:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 801b89a:	6326      	str	r6, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801b89c:	3301      	adds	r3, #1
 801b89e:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801b8a0:	696b      	ldr	r3, [r5, #20]
 801b8a2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 801b8a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801b8aa:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 801b8ac:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 801b8ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b8b0:	b353      	cbz	r3, 801b908 <HAL_QSPI_Receive+0xc0>
 801b8b2:	1c78      	adds	r0, r7, #1
 801b8b4:	d13f      	bne.n	801b936 <HAL_QSPI_Receive+0xee>
 801b8b6:	4631      	mov	r1, r6
 801b8b8:	462a      	mov	r2, r5
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b8ba:	6893      	ldr	r3, [r2, #8]
 801b8bc:	f013 0f06 	tst.w	r3, #6
 801b8c0:	d0fb      	beq.n	801b8ba <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801b8c2:	f895 3020 	ldrb.w	r3, [r5, #32]
 801b8c6:	700b      	strb	r3, [r1, #0]
        hqspi->RxXferCount--;
 801b8c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 801b8ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 801b8cc:	3b01      	subs	r3, #1
        hqspi->pRxBuffPtr++;
 801b8ce:	3101      	adds	r1, #1
        hqspi->RxXferCount--;
 801b8d0:	63a3      	str	r3, [r4, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 801b8d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 801b8d4:	6321      	str	r1, [r4, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 801b8d6:	b15b      	cbz	r3, 801b8f0 <HAL_QSPI_Receive+0xa8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b8d8:	6822      	ldr	r2, [r4, #0]
 801b8da:	e7ee      	b.n	801b8ba <HAL_QSPI_Receive+0x72>
  __HAL_LOCK(hqspi);
 801b8dc:	f04f 0802 	mov.w	r8, #2
}
 801b8e0:	4640      	mov	r0, r8
 801b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801b8e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b8e8:	f043 0308 	orr.w	r3, r3, #8
 801b8ec:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 801b8ee:	e7c3      	b.n	801b878 <HAL_QSPI_Receive+0x30>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b8f0:	6825      	ldr	r5, [r4, #0]
 801b8f2:	68ab      	ldr	r3, [r5, #8]
 801b8f4:	079a      	lsls	r2, r3, #30
 801b8f6:	d5fc      	bpl.n	801b8f2 <HAL_QSPI_Receive+0xaa>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b8f8:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801b8fa:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801b8fe:	60eb      	str	r3, [r5, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 801b900:	2301      	movs	r3, #1
 801b902:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801b906:	e7b7      	b.n	801b878 <HAL_QSPI_Receive+0x30>
 801b908:	1c79      	adds	r1, r7, #1
 801b90a:	d0f2      	beq.n	801b8f2 <HAL_QSPI_Receive+0xaa>
 801b90c:	e007      	b.n	801b91e <HAL_QSPI_Receive+0xd6>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b90e:	f7fb ff7b 	bl	8017808 <HAL_GetTick>
 801b912:	eba0 0309 	sub.w	r3, r0, r9
 801b916:	429f      	cmp	r7, r3
 801b918:	d305      	bcc.n	801b926 <HAL_QSPI_Receive+0xde>
 801b91a:	b127      	cbz	r7, 801b926 <HAL_QSPI_Receive+0xde>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b91c:	6825      	ldr	r5, [r4, #0]
 801b91e:	68ab      	ldr	r3, [r5, #8]
 801b920:	079b      	lsls	r3, r3, #30
 801b922:	d5f4      	bpl.n	801b90e <HAL_QSPI_Receive+0xc6>
 801b924:	e7e8      	b.n	801b8f8 <HAL_QSPI_Receive+0xb0>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801b926:	2304      	movs	r3, #4
 801b928:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801b92c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b92e:	f043 0301 	orr.w	r3, r3, #1
 801b932:	6463      	str	r3, [r4, #68]	@ 0x44
        if  (status == HAL_OK)
 801b934:	e7e4      	b.n	801b900 <HAL_QSPI_Receive+0xb8>
      while(hqspi->RxXferCount > 0U)
 801b936:	462b      	mov	r3, r5
 801b938:	e008      	b.n	801b94c <HAL_QSPI_Receive+0x104>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b93a:	f7fb ff65 	bl	8017808 <HAL_GetTick>
 801b93e:	eba0 0309 	sub.w	r3, r0, r9
 801b942:	429f      	cmp	r7, r3
 801b944:	d3ef      	bcc.n	801b926 <HAL_QSPI_Receive+0xde>
 801b946:	2f00      	cmp	r7, #0
 801b948:	d0ed      	beq.n	801b926 <HAL_QSPI_Receive+0xde>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b94a:	6823      	ldr	r3, [r4, #0]
 801b94c:	689b      	ldr	r3, [r3, #8]
 801b94e:	f013 0f06 	tst.w	r3, #6
 801b952:	d0f2      	beq.n	801b93a <HAL_QSPI_Receive+0xf2>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801b954:	f895 2020 	ldrb.w	r2, [r5, #32]
 801b958:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b95a:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 801b95c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 801b95e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 801b960:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
 801b962:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
 801b964:	63a2      	str	r2, [r4, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 801b966:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hqspi->pRxBuffPtr++;
 801b968:	6323      	str	r3, [r4, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 801b96a:	2a00      	cmp	r2, #0
 801b96c:	d1ed      	bne.n	801b94a <HAL_QSPI_Receive+0x102>
 801b96e:	e7d5      	b.n	801b91c <HAL_QSPI_Receive+0xd4>

0801b970 <HAL_QSPI_AutoPolling>:
{
 801b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b974:	4604      	mov	r4, r0
 801b976:	4698      	mov	r8, r3
 801b978:	460f      	mov	r7, r1
 801b97a:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 801b97c:	f7fb ff44 	bl	8017808 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 801b980:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801b984:	2b01      	cmp	r3, #1
 801b986:	d03f      	beq.n	801ba08 <HAL_QSPI_AutoPolling+0x98>
 801b988:	2301      	movs	r3, #1
 801b98a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 801b98e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801b992:	2b01      	cmp	r3, #1
 801b994:	fa5f f983 	uxtb.w	r9, r3
 801b998:	d007      	beq.n	801b9aa <HAL_QSPI_AutoPolling+0x3a>
    status = HAL_BUSY;
 801b99a:	f04f 0902 	mov.w	r9, #2
  __HAL_UNLOCK(hqspi);
 801b99e:	2300      	movs	r3, #0
}
 801b9a0:	4648      	mov	r0, r9
  __HAL_UNLOCK(hqspi);
 801b9a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 801b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b9b0:	4682      	mov	sl, r0
 801b9b2:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 801b9b4:	f04f 0342 	mov.w	r3, #66	@ 0x42
 801b9b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b9bc:	d129      	bne.n	801ba12 <HAL_QSPI_AutoPolling+0xa2>
 801b9be:	6825      	ldr	r5, [r4, #0]
 801b9c0:	68ab      	ldr	r3, [r5, #8]
 801b9c2:	0698      	lsls	r0, r3, #26
 801b9c4:	d4fc      	bmi.n	801b9c0 <HAL_QSPI_AutoPolling+0x50>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801b9c6:	6833      	ldr	r3, [r6, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801b9c8:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801b9ca:	6932      	ldr	r2, [r6, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801b9cc:	62ab      	str	r3, [r5, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801b9ce:	6873      	ldr	r3, [r6, #4]
      cmd->NbData = cfg->StatusBytesSize;
 801b9d0:	68f1      	ldr	r1, [r6, #12]
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801b9d2:	626b      	str	r3, [r5, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 801b9d4:	68b3      	ldr	r3, [r6, #8]
 801b9d6:	62eb      	str	r3, [r5, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801b9d8:	682b      	ldr	r3, [r5, #0]
 801b9da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 801b9de:	4313      	orrs	r3, r2
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801b9e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801b9e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801b9e8:	602b      	str	r3, [r5, #0]
      cmd->NbData = cfg->StatusBytesSize;
 801b9ea:	62b9      	str	r1, [r7, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801b9ec:	4639      	mov	r1, r7
 801b9ee:	f7ff fd0b 	bl	801b408 <QSPI_Config>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801b9f2:	68ab      	ldr	r3, [r5, #8]
 801b9f4:	071a      	lsls	r2, r3, #28
 801b9f6:	d5fc      	bpl.n	801b9f2 <HAL_QSPI_AutoPolling+0x82>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 801b9f8:	2208      	movs	r2, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 801b9fa:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 801b9fc:	f04f 0900 	mov.w	r9, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 801ba00:	60ea      	str	r2, [r5, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 801ba02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801ba06:	e7ca      	b.n	801b99e <HAL_QSPI_AutoPolling+0x2e>
  __HAL_LOCK(hqspi);
 801ba08:	f04f 0902 	mov.w	r9, #2
}
 801ba0c:	4648      	mov	r0, r9
 801ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801ba12:	6825      	ldr	r5, [r4, #0]
 801ba14:	68ab      	ldr	r3, [r5, #8]
 801ba16:	0699      	lsls	r1, r3, #26
 801ba18:	d510      	bpl.n	801ba3c <HAL_QSPI_AutoPolling+0xcc>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ba1a:	f7fb fef5 	bl	8017808 <HAL_GetTick>
 801ba1e:	eba0 030a 	sub.w	r3, r0, sl
 801ba22:	4598      	cmp	r8, r3
 801ba24:	d302      	bcc.n	801ba2c <HAL_QSPI_AutoPolling+0xbc>
 801ba26:	f1b8 0f00 	cmp.w	r8, #0
 801ba2a:	d1f2      	bne.n	801ba12 <HAL_QSPI_AutoPolling+0xa2>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801ba2c:	2304      	movs	r3, #4
 801ba2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801ba32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801ba34:	f043 0301 	orr.w	r3, r3, #1
 801ba38:	6463      	str	r3, [r4, #68]	@ 0x44
      if (status == HAL_OK)
 801ba3a:	e7b0      	b.n	801b99e <HAL_QSPI_AutoPolling+0x2e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801ba3c:	6833      	ldr	r3, [r6, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801ba3e:	4639      	mov	r1, r7
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801ba40:	6932      	ldr	r2, [r6, #16]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801ba42:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801ba44:	62ab      	str	r3, [r5, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801ba46:	6873      	ldr	r3, [r6, #4]
 801ba48:	626b      	str	r3, [r5, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 801ba4a:	68b3      	ldr	r3, [r6, #8]
 801ba4c:	62eb      	str	r3, [r5, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801ba4e:	682b      	ldr	r3, [r5, #0]
 801ba50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 801ba54:	4313      	orrs	r3, r2
      cmd->NbData = cfg->StatusBytesSize;
 801ba56:	68f2      	ldr	r2, [r6, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801ba58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801ba5c:	602b      	str	r3, [r5, #0]
      cmd->NbData = cfg->StatusBytesSize;
 801ba5e:	62ba      	str	r2, [r7, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801ba60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801ba64:	f7ff fcd0 	bl	801b408 <QSPI_Config>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801ba68:	68ab      	ldr	r3, [r5, #8]
 801ba6a:	071b      	lsls	r3, r3, #28
 801ba6c:	d4c4      	bmi.n	801b9f8 <HAL_QSPI_AutoPolling+0x88>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ba6e:	f7fb fecb 	bl	8017808 <HAL_GetTick>
 801ba72:	eba0 030a 	sub.w	r3, r0, sl
 801ba76:	4598      	cmp	r8, r3
 801ba78:	d3d8      	bcc.n	801ba2c <HAL_QSPI_AutoPolling+0xbc>
 801ba7a:	f1b8 0f00 	cmp.w	r8, #0
 801ba7e:	d0d5      	beq.n	801ba2c <HAL_QSPI_AutoPolling+0xbc>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801ba80:	6825      	ldr	r5, [r4, #0]
 801ba82:	68ab      	ldr	r3, [r5, #8]
 801ba84:	071b      	lsls	r3, r3, #28
 801ba86:	d5f2      	bpl.n	801ba6e <HAL_QSPI_AutoPolling+0xfe>
 801ba88:	e7b6      	b.n	801b9f8 <HAL_QSPI_AutoPolling+0x88>
 801ba8a:	bf00      	nop

0801ba8c <HAL_QSPI_MemoryMapped>:
{
 801ba8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba90:	4604      	mov	r4, r0
 801ba92:	b083      	sub	sp, #12
 801ba94:	460f      	mov	r7, r1
 801ba96:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 801ba98:	f7fb feb6 	bl	8017808 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 801ba9c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801baa0:	2b01      	cmp	r3, #1
 801baa2:	d030      	beq.n	801bb06 <HAL_QSPI_MemoryMapped+0x7a>
 801baa4:	2301      	movs	r3, #1
 801baa6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 801baaa:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801baae:	2b01      	cmp	r3, #1
 801bab0:	fa5f f883 	uxtb.w	r8, r3
 801bab4:	d008      	beq.n	801bac8 <HAL_QSPI_MemoryMapped+0x3c>
    status = HAL_BUSY;
 801bab6:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 801baba:	2300      	movs	r3, #0
}
 801babc:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 801babe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 801bac2:	b003      	add	sp, #12
 801bac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801bac8:	2300      	movs	r3, #0
 801baca:	4681      	mov	r9, r0
 801bacc:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 801bace:	2382      	movs	r3, #130	@ 0x82
 801bad0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801bad4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801bad6:	1c58      	adds	r0, r3, #1
 801bad8:	d11b      	bne.n	801bb12 <HAL_QSPI_MemoryMapped+0x86>
 801bada:	6825      	ldr	r5, [r4, #0]
 801badc:	68ab      	ldr	r3, [r5, #8]
 801bade:	0699      	lsls	r1, r3, #26
 801bae0:	d4fc      	bmi.n	801badc <HAL_QSPI_MemoryMapped+0x50>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 801bae2:	682b      	ldr	r3, [r5, #0]
 801bae4:	6872      	ldr	r2, [r6, #4]
 801bae6:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 801baea:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 801baec:	ea43 0302 	orr.w	r3, r3, r2
 801baf0:	602b      	str	r3, [r5, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 801baf2:	d024      	beq.n	801bb3e <HAL_QSPI_MemoryMapped+0xb2>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 801baf4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 801baf8:	4639      	mov	r1, r7
 801bafa:	4620      	mov	r0, r4
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801bafc:	f04f 0800 	mov.w	r8, #0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 801bb00:	f7ff fc82 	bl	801b408 <QSPI_Config>
 801bb04:	e7d9      	b.n	801baba <HAL_QSPI_MemoryMapped+0x2e>
  __HAL_LOCK(hqspi);
 801bb06:	f04f 0802 	mov.w	r8, #2
}
 801bb0a:	4640      	mov	r0, r8
 801bb0c:	b003      	add	sp, #12
 801bb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801bb12:	6825      	ldr	r5, [r4, #0]
 801bb14:	68aa      	ldr	r2, [r5, #8]
 801bb16:	0692      	lsls	r2, r2, #26
 801bb18:	d5e3      	bpl.n	801bae2 <HAL_QSPI_MemoryMapped+0x56>
 801bb1a:	9301      	str	r3, [sp, #4]
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bb1c:	f7fb fe74 	bl	8017808 <HAL_GetTick>
 801bb20:	9b01      	ldr	r3, [sp, #4]
 801bb22:	eba0 0209 	sub.w	r2, r0, r9
 801bb26:	4293      	cmp	r3, r2
 801bb28:	d301      	bcc.n	801bb2e <HAL_QSPI_MemoryMapped+0xa2>
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d1f1      	bne.n	801bb12 <HAL_QSPI_MemoryMapped+0x86>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801bb2e:	2304      	movs	r3, #4
 801bb30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801bb34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801bb36:	f043 0301 	orr.w	r3, r3, #1
 801bb3a:	6463      	str	r3, [r4, #68]	@ 0x44
    if (status == HAL_OK)
 801bb3c:	e7bd      	b.n	801baba <HAL_QSPI_MemoryMapped+0x2e>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 801bb3e:	6832      	ldr	r2, [r6, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 801bb40:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 801bb42:	632a      	str	r2, [r5, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 801bb44:	60eb      	str	r3, [r5, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 801bb46:	682b      	ldr	r3, [r5, #0]
 801bb48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bb4c:	602b      	str	r3, [r5, #0]
 801bb4e:	e7d1      	b.n	801baf4 <HAL_QSPI_MemoryMapped+0x68>

0801bb50 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bb50:	4b33      	ldr	r3, [pc, #204]	@ (801bc20 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 801bb52:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bb54:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bb56:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bb58:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 801bb5a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bb5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bb60:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 801bb64:	d036      	beq.n	801bbd4 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bb66:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bb6a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bb6e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb72:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bb76:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 801bb7a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bb80:	ee06 2a90 	vmov	s13, r2
 801bb84:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 801bb88:	d002      	beq.n	801bb90 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 801bb8a:	2902      	cmp	r1, #2
 801bb8c:	d042      	beq.n	801bc14 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 801bb8e:	b319      	cbz	r1, 801bbd8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb90:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801bc24 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 801bb94:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801bb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb9e:	ee07 3a90 	vmov	s15, r3
 801bba2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801bba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801bbb2:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bbb6:	4b1a      	ldr	r3, [pc, #104]	@ (801bc20 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 801bbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bbba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 801bbbe:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bbc0:	ee07 3a10 	vmov	s14, r3
 801bbc4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801bbc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801bbcc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801bbd0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 801bbd4:	bc30      	pop	{r4, r5}
 801bbd6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bbd8:	681a      	ldr	r2, [r3, #0]
 801bbda:	0692      	lsls	r2, r2, #26
 801bbdc:	d51d      	bpl.n	801bc1a <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bbde:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbe0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bbe4:	4a10      	ldr	r2, [pc, #64]	@ (801bc28 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bbe8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bbf0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbf2:	ee07 3a90 	vmov	s15, r3
 801bbf6:	ee06 2a10 	vmov	s12, r2
 801bbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbfe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bc02:	ee77 6aa6 	vadd.f32	s13, s15, s13
 801bc06:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801bc0a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 801bc0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bc12:	e7d0      	b.n	801bbb6 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc14:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801bc2c <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 801bc18:	e7bc      	b.n	801bb94 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc1a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801bc30 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 801bc1e:	e7b9      	b.n	801bb94 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 801bc20:	58024400 	.word	0x58024400
 801bc24:	4a742400 	.word	0x4a742400
 801bc28:	03d09000 	.word	0x03d09000
 801bc2c:	4bbebc20 	.word	0x4bbebc20
 801bc30:	4c742400 	.word	0x4c742400

0801bc34 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 801bc34:	2800      	cmp	r0, #0
 801bc36:	f000 82ed 	beq.w	801c214 <HAL_RCC_OscConfig+0x5e0>
{
 801bc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bc3c:	6803      	ldr	r3, [r0, #0]
 801bc3e:	4604      	mov	r4, r0
 801bc40:	07d8      	lsls	r0, r3, #31
 801bc42:	d530      	bpl.n	801bca6 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bc44:	4998      	ldr	r1, [pc, #608]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801bc46:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bc48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bc4a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801bc4e:	2a10      	cmp	r2, #16
 801bc50:	f000 80f0 	beq.w	801be34 <HAL_RCC_OscConfig+0x200>
 801bc54:	2a18      	cmp	r2, #24
 801bc56:	f000 80e8 	beq.w	801be2a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bc5a:	6863      	ldr	r3, [r4, #4]
 801bc5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc60:	f000 8113 	beq.w	801be8a <HAL_RCC_OscConfig+0x256>
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	f000 816a 	beq.w	801bf3e <HAL_RCC_OscConfig+0x30a>
 801bc6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801bc6e:	4b8e      	ldr	r3, [pc, #568]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	f000 828e 	beq.w	801c192 <HAL_RCC_OscConfig+0x55e>
 801bc76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801bc7a:	601a      	str	r2, [r3, #0]
 801bc7c:	681a      	ldr	r2, [r3, #0]
 801bc7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801bc82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801bc84:	f7fb fdc0 	bl	8017808 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bc88:	4e87      	ldr	r6, [pc, #540]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bc8a:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 801bc8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bc90:	e005      	b.n	801bc9e <HAL_RCC_OscConfig+0x6a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bc92:	f7fb fdb9 	bl	8017808 <HAL_GetTick>
 801bc96:	1b40      	subs	r0, r0, r5
 801bc98:	42b8      	cmp	r0, r7
 801bc9a:	f200 814e 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bc9e:	6833      	ldr	r3, [r6, #0]
 801bca0:	039a      	lsls	r2, r3, #14
 801bca2:	d5f6      	bpl.n	801bc92 <HAL_RCC_OscConfig+0x5e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bca4:	6823      	ldr	r3, [r4, #0]
 801bca6:	079d      	lsls	r5, r3, #30
 801bca8:	d470      	bmi.n	801bd8c <HAL_RCC_OscConfig+0x158>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bcaa:	06d9      	lsls	r1, r3, #27
 801bcac:	d533      	bpl.n	801bd16 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bcae:	4a7e      	ldr	r2, [pc, #504]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801bcb0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bcb2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bcb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801bcb8:	2b08      	cmp	r3, #8
 801bcba:	f000 80cb 	beq.w	801be54 <HAL_RCC_OscConfig+0x220>
 801bcbe:	2b18      	cmp	r3, #24
 801bcc0:	f000 80c3 	beq.w	801be4a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801bcc4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 801bcc6:	4d78      	ldr	r5, [pc, #480]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	f000 8172 	beq.w	801bfb2 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_CSI_ENABLE();
 801bcce:	682b      	ldr	r3, [r5, #0]
 801bcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bcd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801bcd6:	f7fb fd97 	bl	8017808 <HAL_GetTick>
 801bcda:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bcdc:	e005      	b.n	801bcea <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bcde:	f7fb fd93 	bl	8017808 <HAL_GetTick>
 801bce2:	1b80      	subs	r0, r0, r6
 801bce4:	2802      	cmp	r0, #2
 801bce6:	f200 8128 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bcea:	682b      	ldr	r3, [r5, #0]
 801bcec:	05db      	lsls	r3, r3, #23
 801bcee:	d5f6      	bpl.n	801bcde <HAL_RCC_OscConfig+0xaa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bcf0:	f7fb fda2 	bl	8017838 <HAL_GetREVID>
 801bcf4:	f241 0303 	movw	r3, #4099	@ 0x1003
 801bcf8:	4298      	cmp	r0, r3
 801bcfa:	f200 826b 	bhi.w	801c1d4 <HAL_RCC_OscConfig+0x5a0>
 801bcfe:	6a22      	ldr	r2, [r4, #32]
 801bd00:	686b      	ldr	r3, [r5, #4]
 801bd02:	2a20      	cmp	r2, #32
 801bd04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801bd08:	bf0c      	ite	eq
 801bd0a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 801bd0e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 801bd12:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd14:	6823      	ldr	r3, [r4, #0]
 801bd16:	071d      	lsls	r5, r3, #28
 801bd18:	d516      	bpl.n	801bd48 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801bd1a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 801bd1c:	4d62      	ldr	r5, [pc, #392]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f000 8125 	beq.w	801bf6e <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_LSI_ENABLE();
 801bd24:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 801bd26:	f043 0301 	orr.w	r3, r3, #1
 801bd2a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 801bd2c:	f7fb fd6c 	bl	8017808 <HAL_GetTick>
 801bd30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801bd32:	e005      	b.n	801bd40 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bd34:	f7fb fd68 	bl	8017808 <HAL_GetTick>
 801bd38:	1b80      	subs	r0, r0, r6
 801bd3a:	2802      	cmp	r0, #2
 801bd3c:	f200 80fd 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801bd40:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 801bd42:	0798      	lsls	r0, r3, #30
 801bd44:	d5f6      	bpl.n	801bd34 <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801bd46:	6823      	ldr	r3, [r4, #0]
 801bd48:	069a      	lsls	r2, r3, #26
 801bd4a:	d516      	bpl.n	801bd7a <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801bd4c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 801bd4e:	4d56      	ldr	r5, [pc, #344]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	f000 811d 	beq.w	801bf90 <HAL_RCC_OscConfig+0x35c>
      __HAL_RCC_HSI48_ENABLE();
 801bd56:	682b      	ldr	r3, [r5, #0]
 801bd58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801bd5c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801bd5e:	f7fb fd53 	bl	8017808 <HAL_GetTick>
 801bd62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bd64:	e005      	b.n	801bd72 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bd66:	f7fb fd4f 	bl	8017808 <HAL_GetTick>
 801bd6a:	1b80      	subs	r0, r0, r6
 801bd6c:	2802      	cmp	r0, #2
 801bd6e:	f200 80e4 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bd72:	682b      	ldr	r3, [r5, #0]
 801bd74:	049f      	lsls	r7, r3, #18
 801bd76:	d5f6      	bpl.n	801bd66 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bd78:	6823      	ldr	r3, [r4, #0]
 801bd7a:	0759      	lsls	r1, r3, #29
 801bd7c:	f100 808b 	bmi.w	801be96 <HAL_RCC_OscConfig+0x262>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bd80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	f040 80bf 	bne.w	801bf06 <HAL_RCC_OscConfig+0x2d2>
  return HAL_OK;
 801bd88:	2000      	movs	r0, #0
}
 801bd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd8c:	4a46      	ldr	r2, [pc, #280]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801bd8e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bd90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bd92:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 801bd96:	d12d      	bne.n	801bdf4 <HAL_RCC_OscConfig+0x1c0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bd98:	4b43      	ldr	r3, [pc, #268]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bd9a:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	0759      	lsls	r1, r3, #29
 801bda0:	d501      	bpl.n	801bda6 <HAL_RCC_OscConfig+0x172>
 801bda2:	2a00      	cmp	r2, #0
 801bda4:	d04f      	beq.n	801be46 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bda6:	4d40      	ldr	r5, [pc, #256]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801bda8:	682b      	ldr	r3, [r5, #0]
 801bdaa:	f023 0319 	bic.w	r3, r3, #25
 801bdae:	4313      	orrs	r3, r2
 801bdb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801bdb2:	f7fb fd29 	bl	8017808 <HAL_GetTick>
 801bdb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bdb8:	e005      	b.n	801bdc6 <HAL_RCC_OscConfig+0x192>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bdba:	f7fb fd25 	bl	8017808 <HAL_GetTick>
 801bdbe:	1b80      	subs	r0, r0, r6
 801bdc0:	2802      	cmp	r0, #2
 801bdc2:	f200 80ba 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bdc6:	682b      	ldr	r3, [r5, #0]
 801bdc8:	075b      	lsls	r3, r3, #29
 801bdca:	d5f6      	bpl.n	801bdba <HAL_RCC_OscConfig+0x186>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bdcc:	f7fb fd34 	bl	8017838 <HAL_GetREVID>
 801bdd0:	f241 0303 	movw	r3, #4099	@ 0x1003
 801bdd4:	4298      	cmp	r0, r3
 801bdd6:	f200 8113 	bhi.w	801c000 <HAL_RCC_OscConfig+0x3cc>
 801bdda:	6922      	ldr	r2, [r4, #16]
 801bddc:	686b      	ldr	r3, [r5, #4]
 801bdde:	2a40      	cmp	r2, #64	@ 0x40
 801bde0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bde4:	bf0c      	ite	eq
 801bde6:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 801bdea:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 801bdee:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bdf0:	6823      	ldr	r3, [r4, #0]
 801bdf2:	e75a      	b.n	801bcaa <HAL_RCC_OscConfig+0x76>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bdf4:	2b18      	cmp	r3, #24
 801bdf6:	f000 80ff 	beq.w	801bff8 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bdfa:	4d2b      	ldr	r5, [pc, #172]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bdfc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bdfe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801be00:	2a00      	cmp	r2, #0
 801be02:	f000 80e8 	beq.w	801bfd6 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801be06:	f023 0319 	bic.w	r3, r3, #25
 801be0a:	4313      	orrs	r3, r2
 801be0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801be0e:	f7fb fcfb 	bl	8017808 <HAL_GetTick>
 801be12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801be14:	e005      	b.n	801be22 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801be16:	f7fb fcf7 	bl	8017808 <HAL_GetTick>
 801be1a:	1b80      	subs	r0, r0, r6
 801be1c:	2802      	cmp	r0, #2
 801be1e:	f200 808c 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801be22:	682b      	ldr	r3, [r5, #0]
 801be24:	075f      	lsls	r7, r3, #29
 801be26:	d5f6      	bpl.n	801be16 <HAL_RCC_OscConfig+0x1e2>
 801be28:	e7d0      	b.n	801bdcc <HAL_RCC_OscConfig+0x198>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801be2a:	f001 0103 	and.w	r1, r1, #3
 801be2e:	2902      	cmp	r1, #2
 801be30:	f47f af13 	bne.w	801bc5a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be34:	4a1c      	ldr	r2, [pc, #112]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801be36:	6812      	ldr	r2, [r2, #0]
 801be38:	0391      	lsls	r1, r2, #14
 801be3a:	f57f af34 	bpl.w	801bca6 <HAL_RCC_OscConfig+0x72>
 801be3e:	6862      	ldr	r2, [r4, #4]
 801be40:	2a00      	cmp	r2, #0
 801be42:	f47f af30 	bne.w	801bca6 <HAL_RCC_OscConfig+0x72>
    return HAL_ERROR;
 801be46:	2001      	movs	r0, #1
}
 801be48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801be4a:	f002 0203 	and.w	r2, r2, #3
 801be4e:	2a01      	cmp	r2, #1
 801be50:	f47f af38 	bne.w	801bcc4 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801be54:	4b14      	ldr	r3, [pc, #80]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	05da      	lsls	r2, r3, #23
 801be5a:	d502      	bpl.n	801be62 <HAL_RCC_OscConfig+0x22e>
 801be5c:	69e3      	ldr	r3, [r4, #28]
 801be5e:	2b80      	cmp	r3, #128	@ 0x80
 801be60:	d1f1      	bne.n	801be46 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801be62:	f7fb fce9 	bl	8017838 <HAL_GetREVID>
 801be66:	f241 0303 	movw	r3, #4099	@ 0x1003
 801be6a:	4298      	cmp	r0, r3
 801be6c:	f200 80d1 	bhi.w	801c012 <HAL_RCC_OscConfig+0x3de>
 801be70:	6a22      	ldr	r2, [r4, #32]
 801be72:	2a20      	cmp	r2, #32
 801be74:	f000 81bd 	beq.w	801c1f2 <HAL_RCC_OscConfig+0x5be>
 801be78:	490b      	ldr	r1, [pc, #44]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801be7a:	684b      	ldr	r3, [r1, #4]
 801be7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801be80:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 801be84:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801be86:	6823      	ldr	r3, [r4, #0]
 801be88:	e745      	b.n	801bd16 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801be8a:	4a07      	ldr	r2, [pc, #28]	@ (801bea8 <HAL_RCC_OscConfig+0x274>)
 801be8c:	6813      	ldr	r3, [r2, #0]
 801be8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801be92:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801be94:	e6f6      	b.n	801bc84 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 801be96:	4d05      	ldr	r5, [pc, #20]	@ (801beac <HAL_RCC_OscConfig+0x278>)
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801be9e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 801bea0:	f7fb fcb2 	bl	8017808 <HAL_GetTick>
 801bea4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bea6:	e008      	b.n	801beba <HAL_RCC_OscConfig+0x286>
 801bea8:	58024400 	.word	0x58024400
 801beac:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801beb0:	f7fb fcaa 	bl	8017808 <HAL_GetTick>
 801beb4:	1b80      	subs	r0, r0, r6
 801beb6:	2864      	cmp	r0, #100	@ 0x64
 801beb8:	d83f      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801beba:	682b      	ldr	r3, [r5, #0]
 801bebc:	05da      	lsls	r2, r3, #23
 801bebe:	d5f7      	bpl.n	801beb0 <HAL_RCC_OscConfig+0x27c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bec0:	68a3      	ldr	r3, [r4, #8]
 801bec2:	2b01      	cmp	r3, #1
 801bec4:	f000 818f 	beq.w	801c1e6 <HAL_RCC_OscConfig+0x5b2>
 801bec8:	2b00      	cmp	r3, #0
 801beca:	f000 816a 	beq.w	801c1a2 <HAL_RCC_OscConfig+0x56e>
 801bece:	2b05      	cmp	r3, #5
 801bed0:	4b87      	ldr	r3, [pc, #540]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
 801bed2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801bed4:	f000 8196 	beq.w	801c204 <HAL_RCC_OscConfig+0x5d0>
 801bed8:	f022 0201 	bic.w	r2, r2, #1
 801bedc:	671a      	str	r2, [r3, #112]	@ 0x70
 801bede:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801bee0:	f022 0204 	bic.w	r2, r2, #4
 801bee4:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 801bee6:	f7fb fc8f 	bl	8017808 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801beea:	4e81      	ldr	r6, [pc, #516]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801beec:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 801bef0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bef2:	e004      	b.n	801befe <HAL_RCC_OscConfig+0x2ca>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bef4:	f7fb fc88 	bl	8017808 <HAL_GetTick>
 801bef8:	1b40      	subs	r0, r0, r5
 801befa:	42b8      	cmp	r0, r7
 801befc:	d81d      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801befe:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801bf00:	079b      	lsls	r3, r3, #30
 801bf02:	d5f7      	bpl.n	801bef4 <HAL_RCC_OscConfig+0x2c0>
 801bf04:	e73c      	b.n	801bd80 <HAL_RCC_OscConfig+0x14c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801bf06:	4d7a      	ldr	r5, [pc, #488]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
 801bf08:	692a      	ldr	r2, [r5, #16]
 801bf0a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 801bf0e:	2a18      	cmp	r2, #24
 801bf10:	f000 80f2 	beq.w	801c0f8 <HAL_RCC_OscConfig+0x4c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bf14:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 801bf16:	682b      	ldr	r3, [r5, #0]
 801bf18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bf1c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bf1e:	f000 8082 	beq.w	801c026 <HAL_RCC_OscConfig+0x3f2>
        tickstart = HAL_GetTick();
 801bf22:	f7fb fc71 	bl	8017808 <HAL_GetTick>
 801bf26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bf28:	682b      	ldr	r3, [r5, #0]
 801bf2a:	019b      	lsls	r3, r3, #6
 801bf2c:	f57f af2c 	bpl.w	801bd88 <HAL_RCC_OscConfig+0x154>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bf30:	f7fb fc6a 	bl	8017808 <HAL_GetTick>
 801bf34:	1b00      	subs	r0, r0, r4
 801bf36:	2802      	cmp	r0, #2
 801bf38:	d9f6      	bls.n	801bf28 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 801bf3a:	2003      	movs	r0, #3
}
 801bf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bf3e:	4d6c      	ldr	r5, [pc, #432]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bf40:	f241 3788 	movw	r7, #5000	@ 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bf44:	682b      	ldr	r3, [r5, #0]
 801bf46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bf4a:	602b      	str	r3, [r5, #0]
 801bf4c:	682b      	ldr	r3, [r5, #0]
 801bf4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bf52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801bf54:	f7fb fc58 	bl	8017808 <HAL_GetTick>
 801bf58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bf5a:	e004      	b.n	801bf66 <HAL_RCC_OscConfig+0x332>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bf5c:	f7fb fc54 	bl	8017808 <HAL_GetTick>
 801bf60:	1b80      	subs	r0, r0, r6
 801bf62:	42b8      	cmp	r0, r7
 801bf64:	d8e9      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bf66:	682b      	ldr	r3, [r5, #0]
 801bf68:	039b      	lsls	r3, r3, #14
 801bf6a:	d4f7      	bmi.n	801bf5c <HAL_RCC_OscConfig+0x328>
 801bf6c:	e69a      	b.n	801bca4 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_LSI_DISABLE();
 801bf6e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 801bf70:	f023 0301 	bic.w	r3, r3, #1
 801bf74:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 801bf76:	f7fb fc47 	bl	8017808 <HAL_GetTick>
 801bf7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bf7c:	e004      	b.n	801bf88 <HAL_RCC_OscConfig+0x354>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bf7e:	f7fb fc43 	bl	8017808 <HAL_GetTick>
 801bf82:	1b80      	subs	r0, r0, r6
 801bf84:	2802      	cmp	r0, #2
 801bf86:	d8d8      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bf88:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 801bf8a:	0799      	lsls	r1, r3, #30
 801bf8c:	d4f7      	bmi.n	801bf7e <HAL_RCC_OscConfig+0x34a>
 801bf8e:	e6da      	b.n	801bd46 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 801bf90:	682b      	ldr	r3, [r5, #0]
 801bf92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bf96:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801bf98:	f7fb fc36 	bl	8017808 <HAL_GetTick>
 801bf9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bf9e:	e004      	b.n	801bfaa <HAL_RCC_OscConfig+0x376>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bfa0:	f7fb fc32 	bl	8017808 <HAL_GetTick>
 801bfa4:	1b80      	subs	r0, r0, r6
 801bfa6:	2802      	cmp	r0, #2
 801bfa8:	d8c7      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bfaa:	682b      	ldr	r3, [r5, #0]
 801bfac:	0498      	lsls	r0, r3, #18
 801bfae:	d4f7      	bmi.n	801bfa0 <HAL_RCC_OscConfig+0x36c>
 801bfb0:	e6e2      	b.n	801bd78 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 801bfb2:	682b      	ldr	r3, [r5, #0]
 801bfb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bfb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801bfba:	f7fb fc25 	bl	8017808 <HAL_GetTick>
 801bfbe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bfc0:	e004      	b.n	801bfcc <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bfc2:	f7fb fc21 	bl	8017808 <HAL_GetTick>
 801bfc6:	1b80      	subs	r0, r0, r6
 801bfc8:	2802      	cmp	r0, #2
 801bfca:	d8b6      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bfcc:	682b      	ldr	r3, [r5, #0]
 801bfce:	05df      	lsls	r7, r3, #23
 801bfd0:	d4f7      	bmi.n	801bfc2 <HAL_RCC_OscConfig+0x38e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bfd2:	6823      	ldr	r3, [r4, #0]
 801bfd4:	e69f      	b.n	801bd16 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 801bfd6:	f023 0301 	bic.w	r3, r3, #1
 801bfda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801bfdc:	f7fb fc14 	bl	8017808 <HAL_GetTick>
 801bfe0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bfe2:	e004      	b.n	801bfee <HAL_RCC_OscConfig+0x3ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bfe4:	f7fb fc10 	bl	8017808 <HAL_GetTick>
 801bfe8:	1b80      	subs	r0, r0, r6
 801bfea:	2802      	cmp	r0, #2
 801bfec:	d8a5      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bfee:	682b      	ldr	r3, [r5, #0]
 801bff0:	0758      	lsls	r0, r3, #29
 801bff2:	d4f7      	bmi.n	801bfe4 <HAL_RCC_OscConfig+0x3b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bff4:	6823      	ldr	r3, [r4, #0]
 801bff6:	e658      	b.n	801bcaa <HAL_RCC_OscConfig+0x76>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bff8:	0790      	lsls	r0, r2, #30
 801bffa:	f47f aefe 	bne.w	801bdfa <HAL_RCC_OscConfig+0x1c6>
 801bffe:	e6cb      	b.n	801bd98 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c000:	686b      	ldr	r3, [r5, #4]
 801c002:	6922      	ldr	r2, [r4, #16]
 801c004:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801c008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c00c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c00e:	6823      	ldr	r3, [r4, #0]
 801c010:	e64b      	b.n	801bcaa <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c012:	4a37      	ldr	r2, [pc, #220]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
 801c014:	6a21      	ldr	r1, [r4, #32]
 801c016:	68d3      	ldr	r3, [r2, #12]
 801c018:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 801c01c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801c020:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c022:	6823      	ldr	r3, [r4, #0]
 801c024:	e677      	b.n	801bd16 <HAL_RCC_OscConfig+0xe2>
        tickstart = HAL_GetTick();
 801c026:	f7fb fbef 	bl	8017808 <HAL_GetTick>
 801c02a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c02c:	e004      	b.n	801c038 <HAL_RCC_OscConfig+0x404>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c02e:	f7fb fbeb 	bl	8017808 <HAL_GetTick>
 801c032:	1b80      	subs	r0, r0, r6
 801c034:	2802      	cmp	r0, #2
 801c036:	d880      	bhi.n	801bf3a <HAL_RCC_OscConfig+0x306>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c038:	682b      	ldr	r3, [r5, #0]
 801c03a:	0199      	lsls	r1, r3, #6
 801c03c:	d4f7      	bmi.n	801c02e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c03e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 801c040:	4b2c      	ldr	r3, [pc, #176]	@ (801c0f4 <HAL_RCC_OscConfig+0x4c0>)
 801c042:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c044:	400b      	ands	r3, r1
 801c046:	4313      	orrs	r3, r2
 801c048:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c04a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801c04e:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c050:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c052:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 801c056:	3901      	subs	r1, #1
 801c058:	3b01      	subs	r3, #1
 801c05a:	3a01      	subs	r2, #1
 801c05c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 801c060:	025b      	lsls	r3, r3, #9
 801c062:	0412      	lsls	r2, r2, #16
 801c064:	b29b      	uxth	r3, r3
 801c066:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801c06a:	4313      	orrs	r3, r2
 801c06c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801c06e:	3a01      	subs	r2, #1
 801c070:	430b      	orrs	r3, r1
 801c072:	0612      	lsls	r2, r2, #24
 801c074:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801c078:	4313      	orrs	r3, r2
 801c07a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 801c07c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c07e:	f023 0301 	bic.w	r3, r3, #1
 801c082:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c084:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801c086:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 801c088:	f36f 03cf 	bfc	r3, #3, #13
 801c08c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c090:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c092:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c094:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801c096:	f023 030c 	bic.w	r3, r3, #12
 801c09a:	4313      	orrs	r3, r2
 801c09c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c09e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c0a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801c0a2:	f023 0302 	bic.w	r3, r3, #2
 801c0a6:	4313      	orrs	r3, r2
 801c0a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c0aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c0ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c0b0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c0b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c0b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c0b8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c0ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c0bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c0c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 801c0c2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801c0c4:	f043 0301 	orr.w	r3, r3, #1
 801c0c8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 801c0ca:	682b      	ldr	r3, [r5, #0]
 801c0cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c0d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801c0d2:	f7fb fb99 	bl	8017808 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c0d6:	4d06      	ldr	r5, [pc, #24]	@ (801c0f0 <HAL_RCC_OscConfig+0x4bc>)
        tickstart = HAL_GetTick();
 801c0d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c0da:	682b      	ldr	r3, [r5, #0]
 801c0dc:	019a      	lsls	r2, r3, #6
 801c0de:	f53f ae53 	bmi.w	801bd88 <HAL_RCC_OscConfig+0x154>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c0e2:	f7fb fb91 	bl	8017808 <HAL_GetTick>
 801c0e6:	1b00      	subs	r0, r0, r4
 801c0e8:	2802      	cmp	r0, #2
 801c0ea:	d9f6      	bls.n	801c0da <HAL_RCC_OscConfig+0x4a6>
 801c0ec:	e725      	b.n	801bf3a <HAL_RCC_OscConfig+0x306>
 801c0ee:	bf00      	nop
 801c0f0:	58024400 	.word	0x58024400
 801c0f4:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c0f8:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c0fa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c0fc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c0fe:	f43f aea2 	beq.w	801be46 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c102:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c106:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801c108:	428b      	cmp	r3, r1
 801c10a:	f47f ae9c 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c10e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c112:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c114:	429a      	cmp	r2, r3
 801c116:	f47f ae96 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c11a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c11c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 801c120:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c122:	429a      	cmp	r2, r3
 801c124:	f47f ae8f 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c12a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 801c12e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c130:	429a      	cmp	r2, r3
 801c132:	f47f ae88 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c136:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c138:	f3c0 4206 	ubfx	r2, r0, #16, #7
 801c13c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c13e:	429a      	cmp	r2, r3
 801c140:	f47f ae81 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c144:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c146:	f3c0 6006 	ubfx	r0, r0, #24, #7
 801c14a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c14c:	4298      	cmp	r0, r3
 801c14e:	f47f ae7a 	bne.w	801be46 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c152:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c154:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c156:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c15a:	429a      	cmp	r2, r3
 801c15c:	f43f ae14 	beq.w	801bd88 <HAL_RCC_OscConfig+0x154>
          __HAL_RCC_PLLFRACN_DISABLE();
 801c160:	4a2d      	ldr	r2, [pc, #180]	@ (801c218 <HAL_RCC_OscConfig+0x5e4>)
 801c162:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801c164:	f023 0301 	bic.w	r3, r3, #1
 801c168:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 801c16a:	f7fb fb4d 	bl	8017808 <HAL_GetTick>
 801c16e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c170:	f7fb fb4a 	bl	8017808 <HAL_GetTick>
 801c174:	42a8      	cmp	r0, r5
 801c176:	d0fb      	beq.n	801c170 <HAL_RCC_OscConfig+0x53c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c178:	4a27      	ldr	r2, [pc, #156]	@ (801c218 <HAL_RCC_OscConfig+0x5e4>)
 801c17a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c17c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801c17e:	f36f 03cf 	bfc	r3, #3, #13
 801c182:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801c186:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 801c188:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801c18a:	f043 0301 	orr.w	r3, r3, #1
 801c18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801c190:	e5fa      	b.n	801bd88 <HAL_RCC_OscConfig+0x154>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c192:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801c196:	601a      	str	r2, [r3, #0]
 801c198:	681a      	ldr	r2, [r3, #0]
 801c19a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801c19e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c1a0:	e570      	b.n	801bc84 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c1a2:	4d1d      	ldr	r5, [pc, #116]	@ (801c218 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c1a4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c1a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801c1aa:	f023 0301 	bic.w	r3, r3, #1
 801c1ae:	672b      	str	r3, [r5, #112]	@ 0x70
 801c1b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801c1b2:	f023 0304 	bic.w	r3, r3, #4
 801c1b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 801c1b8:	f7fb fb26 	bl	8017808 <HAL_GetTick>
 801c1bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c1be:	e005      	b.n	801c1cc <HAL_RCC_OscConfig+0x598>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c1c0:	f7fb fb22 	bl	8017808 <HAL_GetTick>
 801c1c4:	1b80      	subs	r0, r0, r6
 801c1c6:	42b8      	cmp	r0, r7
 801c1c8:	f63f aeb7 	bhi.w	801bf3a <HAL_RCC_OscConfig+0x306>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c1cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801c1ce:	0798      	lsls	r0, r3, #30
 801c1d0:	d4f6      	bmi.n	801c1c0 <HAL_RCC_OscConfig+0x58c>
 801c1d2:	e5d5      	b.n	801bd80 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c1d4:	68eb      	ldr	r3, [r5, #12]
 801c1d6:	6a22      	ldr	r2, [r4, #32]
 801c1d8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 801c1dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c1e0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c1e2:	6823      	ldr	r3, [r4, #0]
 801c1e4:	e597      	b.n	801bd16 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c1e6:	4a0c      	ldr	r2, [pc, #48]	@ (801c218 <HAL_RCC_OscConfig+0x5e4>)
 801c1e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801c1ea:	f043 0301 	orr.w	r3, r3, #1
 801c1ee:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c1f0:	e679      	b.n	801bee6 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c1f2:	4a09      	ldr	r2, [pc, #36]	@ (801c218 <HAL_RCC_OscConfig+0x5e4>)
 801c1f4:	6853      	ldr	r3, [r2, #4]
 801c1f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c1fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c1fe:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c200:	6823      	ldr	r3, [r4, #0]
 801c202:	e588      	b.n	801bd16 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c204:	f042 0204 	orr.w	r2, r2, #4
 801c208:	671a      	str	r2, [r3, #112]	@ 0x70
 801c20a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801c20c:	f042 0201 	orr.w	r2, r2, #1
 801c210:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c212:	e668      	b.n	801bee6 <HAL_RCC_OscConfig+0x2b2>
    return HAL_ERROR;
 801c214:	2001      	movs	r0, #1
}
 801c216:	4770      	bx	lr
 801c218:	58024400 	.word	0x58024400

0801c21c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c21c:	4a3f      	ldr	r2, [pc, #252]	@ (801c31c <HAL_RCC_GetSysClockFreq+0x100>)
 801c21e:	6913      	ldr	r3, [r2, #16]
 801c220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c224:	2b10      	cmp	r3, #16
 801c226:	d04f      	beq.n	801c2c8 <HAL_RCC_GetSysClockFreq+0xac>
 801c228:	2b18      	cmp	r3, #24
 801c22a:	d00a      	beq.n	801c242 <HAL_RCC_GetSysClockFreq+0x26>
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d14d      	bne.n	801c2cc <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c230:	6813      	ldr	r3, [r2, #0]
 801c232:	0699      	lsls	r1, r3, #26
 801c234:	d54c      	bpl.n	801c2d0 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c236:	6813      	ldr	r3, [r2, #0]
 801c238:	4839      	ldr	r0, [pc, #228]	@ (801c320 <HAL_RCC_GetSysClockFreq+0x104>)
 801c23a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801c23e:	40d8      	lsrs	r0, r3
 801c240:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c242:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 801c244:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c246:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c248:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 801c24a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c24e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c250:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 801c254:	d036      	beq.n	801c2c4 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c256:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c25a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c25e:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c262:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c266:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 801c26a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c26c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c270:	ee06 3a90 	vmov	s13, r3
 801c274:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 801c278:	d002      	beq.n	801c280 <HAL_RCC_GetSysClockFreq+0x64>
 801c27a:	2902      	cmp	r1, #2
 801c27c:	d048      	beq.n	801c310 <HAL_RCC_GetSysClockFreq+0xf4>
 801c27e:	b349      	cbz	r1, 801c2d4 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c280:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 801c324 <HAL_RCC_GetSysClockFreq+0x108>
 801c284:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801c288:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 801c28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c28e:	ee07 3a10 	vmov	s14, r3
 801c292:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c29a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c29e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c2a2:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c2a6:	4b1d      	ldr	r3, [pc, #116]	@ (801c31c <HAL_RCC_GetSysClockFreq+0x100>)
 801c2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 801c2ae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c2b0:	ee07 3a90 	vmov	s15, r3
 801c2b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c2b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c2bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c2c0:	ee17 0a90 	vmov	r0, s15
}
 801c2c4:	bc30      	pop	{r4, r5}
 801c2c6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c2c8:	4817      	ldr	r0, [pc, #92]	@ (801c328 <HAL_RCC_GetSysClockFreq+0x10c>)
 801c2ca:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 801c2cc:	4817      	ldr	r0, [pc, #92]	@ (801c32c <HAL_RCC_GetSysClockFreq+0x110>)
 801c2ce:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c2d0:	4813      	ldr	r0, [pc, #76]	@ (801c320 <HAL_RCC_GetSysClockFreq+0x104>)
}
 801c2d2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c2d4:	6813      	ldr	r3, [r2, #0]
 801c2d6:	069b      	lsls	r3, r3, #26
 801c2d8:	d51d      	bpl.n	801c316 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c2da:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c2dc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c2e0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c2e2:	490f      	ldr	r1, [pc, #60]	@ (801c320 <HAL_RCC_GetSysClockFreq+0x104>)
 801c2e4:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c2ec:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c2ee:	ee07 3a10 	vmov	s14, r3
 801c2f2:	ee06 1a10 	vmov	s12, r1
 801c2f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801c2fe:	ee77 6a26 	vadd.f32	s13, s14, s13
 801c302:	ee86 7a27 	vdiv.f32	s14, s12, s15
 801c306:	ee76 7aa5 	vadd.f32	s15, s13, s11
 801c30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c30e:	e7ca      	b.n	801c2a6 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c310:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801c330 <HAL_RCC_GetSysClockFreq+0x114>
 801c314:	e7b6      	b.n	801c284 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c316:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801c334 <HAL_RCC_GetSysClockFreq+0x118>
 801c31a:	e7b3      	b.n	801c284 <HAL_RCC_GetSysClockFreq+0x68>
 801c31c:	58024400 	.word	0x58024400
 801c320:	03d09000 	.word	0x03d09000
 801c324:	4a742400 	.word	0x4a742400
 801c328:	017d7840 	.word	0x017d7840
 801c32c:	003d0900 	.word	0x003d0900
 801c330:	4bbebc20 	.word	0x4bbebc20
 801c334:	4c742400 	.word	0x4c742400

0801c338 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 801c338:	2800      	cmp	r0, #0
 801c33a:	f000 810e 	beq.w	801c55a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c33e:	4a8d      	ldr	r2, [pc, #564]	@ (801c574 <HAL_RCC_ClockConfig+0x23c>)
 801c340:	6813      	ldr	r3, [r2, #0]
 801c342:	f003 030f 	and.w	r3, r3, #15
 801c346:	428b      	cmp	r3, r1
{
 801c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c34c:	4604      	mov	r4, r0
 801c34e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c350:	d20c      	bcs.n	801c36c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c352:	6813      	ldr	r3, [r2, #0]
 801c354:	f023 030f 	bic.w	r3, r3, #15
 801c358:	430b      	orrs	r3, r1
 801c35a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c35c:	6813      	ldr	r3, [r2, #0]
 801c35e:	f003 030f 	and.w	r3, r3, #15
 801c362:	428b      	cmp	r3, r1
 801c364:	d002      	beq.n	801c36c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 801c366:	2001      	movs	r0, #1
}
 801c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c36c:	6823      	ldr	r3, [r4, #0]
 801c36e:	0758      	lsls	r0, r3, #29
 801c370:	d50b      	bpl.n	801c38a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c372:	4981      	ldr	r1, [pc, #516]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c374:	6920      	ldr	r0, [r4, #16]
 801c376:	698a      	ldr	r2, [r1, #24]
 801c378:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801c37c:	4290      	cmp	r0, r2
 801c37e:	d904      	bls.n	801c38a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c380:	698a      	ldr	r2, [r1, #24]
 801c382:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801c386:	4302      	orrs	r2, r0
 801c388:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c38a:	0719      	lsls	r1, r3, #28
 801c38c:	d50b      	bpl.n	801c3a6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c38e:	497a      	ldr	r1, [pc, #488]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c390:	6960      	ldr	r0, [r4, #20]
 801c392:	69ca      	ldr	r2, [r1, #28]
 801c394:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801c398:	4290      	cmp	r0, r2
 801c39a:	d904      	bls.n	801c3a6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c39c:	69ca      	ldr	r2, [r1, #28]
 801c39e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801c3a2:	4302      	orrs	r2, r0
 801c3a4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c3a6:	06da      	lsls	r2, r3, #27
 801c3a8:	d50b      	bpl.n	801c3c2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c3aa:	4973      	ldr	r1, [pc, #460]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c3ac:	69a0      	ldr	r0, [r4, #24]
 801c3ae:	69ca      	ldr	r2, [r1, #28]
 801c3b0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 801c3b4:	4290      	cmp	r0, r2
 801c3b6:	d904      	bls.n	801c3c2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c3b8:	69ca      	ldr	r2, [r1, #28]
 801c3ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801c3be:	4302      	orrs	r2, r0
 801c3c0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c3c2:	069f      	lsls	r7, r3, #26
 801c3c4:	d50b      	bpl.n	801c3de <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c3c6:	496c      	ldr	r1, [pc, #432]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c3c8:	69e0      	ldr	r0, [r4, #28]
 801c3ca:	6a0a      	ldr	r2, [r1, #32]
 801c3cc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801c3d0:	4290      	cmp	r0, r2
 801c3d2:	d904      	bls.n	801c3de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c3d4:	6a0a      	ldr	r2, [r1, #32]
 801c3d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801c3da:	4302      	orrs	r2, r0
 801c3dc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c3de:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c3e0:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c3e4:	f140 80ab 	bpl.w	801c53e <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c3e8:	4e63      	ldr	r6, [pc, #396]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c3ea:	68e0      	ldr	r0, [r4, #12]
 801c3ec:	69b1      	ldr	r1, [r6, #24]
 801c3ee:	f001 010f 	and.w	r1, r1, #15
 801c3f2:	4288      	cmp	r0, r1
 801c3f4:	d904      	bls.n	801c400 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c3f6:	69b1      	ldr	r1, [r6, #24]
 801c3f8:	f021 010f 	bic.w	r1, r1, #15
 801c3fc:	4301      	orrs	r1, r0
 801c3fe:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c400:	2a00      	cmp	r2, #0
 801c402:	d030      	beq.n	801c466 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c404:	4a5c      	ldr	r2, [pc, #368]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c406:	68a1      	ldr	r1, [r4, #8]
 801c408:	6993      	ldr	r3, [r2, #24]
 801c40a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c40e:	430b      	orrs	r3, r1
 801c410:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c412:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c414:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c416:	2902      	cmp	r1, #2
 801c418:	f000 80a1 	beq.w	801c55e <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c41c:	2903      	cmp	r1, #3
 801c41e:	f000 8098 	beq.w	801c552 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c422:	2901      	cmp	r1, #1
 801c424:	f000 80a1 	beq.w	801c56a <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c428:	075f      	lsls	r7, r3, #29
 801c42a:	d59c      	bpl.n	801c366 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c42c:	4e52      	ldr	r6, [pc, #328]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c42e:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c432:	6933      	ldr	r3, [r6, #16]
 801c434:	f023 0307 	bic.w	r3, r3, #7
 801c438:	430b      	orrs	r3, r1
 801c43a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 801c43c:	f7fb f9e4 	bl	8017808 <HAL_GetTick>
 801c440:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c442:	e005      	b.n	801c450 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c444:	f7fb f9e0 	bl	8017808 <HAL_GetTick>
 801c448:	1bc0      	subs	r0, r0, r7
 801c44a:	4540      	cmp	r0, r8
 801c44c:	f200 808b 	bhi.w	801c566 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c450:	6933      	ldr	r3, [r6, #16]
 801c452:	6862      	ldr	r2, [r4, #4]
 801c454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c458:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 801c45c:	d1f2      	bne.n	801c444 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c45e:	6823      	ldr	r3, [r4, #0]
 801c460:	079e      	lsls	r6, r3, #30
 801c462:	d506      	bpl.n	801c472 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c464:	68e0      	ldr	r0, [r4, #12]
 801c466:	4944      	ldr	r1, [pc, #272]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c468:	698a      	ldr	r2, [r1, #24]
 801c46a:	f002 020f 	and.w	r2, r2, #15
 801c46e:	4290      	cmp	r0, r2
 801c470:	d369      	bcc.n	801c546 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c472:	4940      	ldr	r1, [pc, #256]	@ (801c574 <HAL_RCC_ClockConfig+0x23c>)
 801c474:	680a      	ldr	r2, [r1, #0]
 801c476:	f002 020f 	and.w	r2, r2, #15
 801c47a:	42aa      	cmp	r2, r5
 801c47c:	d90a      	bls.n	801c494 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c47e:	680a      	ldr	r2, [r1, #0]
 801c480:	f022 020f 	bic.w	r2, r2, #15
 801c484:	432a      	orrs	r2, r5
 801c486:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c488:	680a      	ldr	r2, [r1, #0]
 801c48a:	f002 020f 	and.w	r2, r2, #15
 801c48e:	42aa      	cmp	r2, r5
 801c490:	f47f af69 	bne.w	801c366 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c494:	0758      	lsls	r0, r3, #29
 801c496:	d50b      	bpl.n	801c4b0 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c498:	4937      	ldr	r1, [pc, #220]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c49a:	6920      	ldr	r0, [r4, #16]
 801c49c:	698a      	ldr	r2, [r1, #24]
 801c49e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801c4a2:	4290      	cmp	r0, r2
 801c4a4:	d204      	bcs.n	801c4b0 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c4a6:	698a      	ldr	r2, [r1, #24]
 801c4a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801c4ac:	4302      	orrs	r2, r0
 801c4ae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c4b0:	0719      	lsls	r1, r3, #28
 801c4b2:	d50b      	bpl.n	801c4cc <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c4b4:	4930      	ldr	r1, [pc, #192]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c4b6:	6960      	ldr	r0, [r4, #20]
 801c4b8:	69ca      	ldr	r2, [r1, #28]
 801c4ba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801c4be:	4290      	cmp	r0, r2
 801c4c0:	d204      	bcs.n	801c4cc <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c4c2:	69ca      	ldr	r2, [r1, #28]
 801c4c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801c4c8:	4302      	orrs	r2, r0
 801c4ca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c4cc:	06da      	lsls	r2, r3, #27
 801c4ce:	d50b      	bpl.n	801c4e8 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c4d0:	4929      	ldr	r1, [pc, #164]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c4d2:	69a0      	ldr	r0, [r4, #24]
 801c4d4:	69ca      	ldr	r2, [r1, #28]
 801c4d6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 801c4da:	4290      	cmp	r0, r2
 801c4dc:	d204      	bcs.n	801c4e8 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c4de:	69ca      	ldr	r2, [r1, #28]
 801c4e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801c4e4:	4302      	orrs	r2, r0
 801c4e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c4e8:	069b      	lsls	r3, r3, #26
 801c4ea:	d50b      	bpl.n	801c504 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c4ec:	4a22      	ldr	r2, [pc, #136]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c4ee:	69e1      	ldr	r1, [r4, #28]
 801c4f0:	6a13      	ldr	r3, [r2, #32]
 801c4f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c4f6:	4299      	cmp	r1, r3
 801c4f8:	d204      	bcs.n	801c504 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c4fa:	6a13      	ldr	r3, [r2, #32]
 801c4fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c500:	430b      	orrs	r3, r1
 801c502:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c504:	f7ff fe8a 	bl	801c21c <HAL_RCC_GetSysClockFreq>
 801c508:	4a1b      	ldr	r2, [pc, #108]	@ (801c578 <HAL_RCC_ClockConfig+0x240>)
 801c50a:	4603      	mov	r3, r0
 801c50c:	481b      	ldr	r0, [pc, #108]	@ (801c57c <HAL_RCC_ClockConfig+0x244>)
 801c50e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c510:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c512:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 801c516:	4d1a      	ldr	r5, [pc, #104]	@ (801c580 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c518:	f002 020f 	and.w	r2, r2, #15
 801c51c:	4c19      	ldr	r4, [pc, #100]	@ (801c584 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c51e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c520:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c522:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 801c526:	4818      	ldr	r0, [pc, #96]	@ (801c588 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c528:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c52c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 801c52e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 801c530:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c532:	40d3      	lsrs	r3, r2
 801c534:	6023      	str	r3, [r4, #0]
}
 801c536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 801c53a:	f7fb b903 	b.w	8017744 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c53e:	2a00      	cmp	r2, #0
 801c540:	f47f af60 	bne.w	801c404 <HAL_RCC_ClockConfig+0xcc>
 801c544:	e795      	b.n	801c472 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c546:	698a      	ldr	r2, [r1, #24]
 801c548:	f022 020f 	bic.w	r2, r2, #15
 801c54c:	4302      	orrs	r2, r0
 801c54e:	618a      	str	r2, [r1, #24]
 801c550:	e78f      	b.n	801c472 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c552:	019a      	lsls	r2, r3, #6
 801c554:	f53f af6a 	bmi.w	801c42c <HAL_RCC_ClockConfig+0xf4>
 801c558:	e705      	b.n	801c366 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 801c55a:	2001      	movs	r0, #1
}
 801c55c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c55e:	0398      	lsls	r0, r3, #14
 801c560:	f53f af64 	bmi.w	801c42c <HAL_RCC_ClockConfig+0xf4>
 801c564:	e6ff      	b.n	801c366 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 801c566:	2003      	movs	r0, #3
 801c568:	e6fe      	b.n	801c368 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c56a:	05db      	lsls	r3, r3, #23
 801c56c:	f53f af5e 	bmi.w	801c42c <HAL_RCC_ClockConfig+0xf4>
 801c570:	e6f9      	b.n	801c366 <HAL_RCC_ClockConfig+0x2e>
 801c572:	bf00      	nop
 801c574:	52002000 	.word	0x52002000
 801c578:	58024400 	.word	0x58024400
 801c57c:	080575bc 	.word	0x080575bc
 801c580:	240081b8 	.word	0x240081b8
 801c584:	240081b4 	.word	0x240081b4
 801c588:	240082e0 	.word	0x240082e0

0801c58c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c58c:	4a1c      	ldr	r2, [pc, #112]	@ (801c600 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c58e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c590:	6913      	ldr	r3, [r2, #16]
 801c592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c596:	2b10      	cmp	r3, #16
 801c598:	d02b      	beq.n	801c5f2 <HAL_RCC_GetPCLK2Freq+0x66>
 801c59a:	2b18      	cmp	r3, #24
 801c59c:	d009      	beq.n	801c5b2 <HAL_RCC_GetPCLK2Freq+0x26>
 801c59e:	bb53      	cbnz	r3, 801c5f6 <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c5a0:	6813      	ldr	r3, [r2, #0]
 801c5a2:	069b      	lsls	r3, r3, #26
 801c5a4:	d529      	bpl.n	801c5fa <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c5a6:	6812      	ldr	r2, [r2, #0]
 801c5a8:	4b16      	ldr	r3, [pc, #88]	@ (801c604 <HAL_RCC_GetPCLK2Freq+0x78>)
 801c5aa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 801c5ae:	40d3      	lsrs	r3, r2
 801c5b0:	e002      	b.n	801c5b8 <HAL_RCC_GetPCLK2Freq+0x2c>
 801c5b2:	f7ff facd 	bl	801bb50 <HAL_RCC_GetSysClockFreq.part.0>
 801c5b6:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c5b8:	4a11      	ldr	r2, [pc, #68]	@ (801c600 <HAL_RCC_GetPCLK2Freq+0x74>)
 801c5ba:	4913      	ldr	r1, [pc, #76]	@ (801c608 <HAL_RCC_GetPCLK2Freq+0x7c>)
 801c5bc:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 801c5be:	4d13      	ldr	r5, [pc, #76]	@ (801c60c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c5c0:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c5c4:	4c12      	ldr	r4, [pc, #72]	@ (801c610 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c5c6:	5c08      	ldrb	r0, [r1, r0]
 801c5c8:	f000 001f 	and.w	r0, r0, #31
 801c5cc:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c5ce:	6990      	ldr	r0, [r2, #24]
 801c5d0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 801c5d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c5d6:	5c08      	ldrb	r0, [r1, r0]
 801c5d8:	f000 001f 	and.w	r0, r0, #31
 801c5dc:	40c3      	lsrs	r3, r0
 801c5de:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801c5e0:	69d2      	ldr	r2, [r2, #28]
 801c5e2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 801c5e6:	5c88      	ldrb	r0, [r1, r2]
 801c5e8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801c5ec:	fa23 f000 	lsr.w	r0, r3, r0
 801c5f0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c5f2:	4b08      	ldr	r3, [pc, #32]	@ (801c614 <HAL_RCC_GetPCLK2Freq+0x88>)
 801c5f4:	e7e0      	b.n	801c5b8 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 801c5f6:	4b08      	ldr	r3, [pc, #32]	@ (801c618 <HAL_RCC_GetPCLK2Freq+0x8c>)
 801c5f8:	e7de      	b.n	801c5b8 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c5fa:	4b02      	ldr	r3, [pc, #8]	@ (801c604 <HAL_RCC_GetPCLK2Freq+0x78>)
 801c5fc:	e7dc      	b.n	801c5b8 <HAL_RCC_GetPCLK2Freq+0x2c>
 801c5fe:	bf00      	nop
 801c600:	58024400 	.word	0x58024400
 801c604:	03d09000 	.word	0x03d09000
 801c608:	080575bc 	.word	0x080575bc
 801c60c:	240081b8 	.word	0x240081b8
 801c610:	240081b4 	.word	0x240081b4
 801c614:	017d7840 	.word	0x017d7840
 801c618:	003d0900 	.word	0x003d0900

0801c61c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 801c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801c61e:	4c36      	ldr	r4, [pc, #216]	@ (801c6f8 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 801c620:	4606      	mov	r6, r0
 801c622:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 801c624:	6823      	ldr	r3, [r4, #0]
 801c626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c62a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c62c:	f7fb f8ec 	bl	8017808 <HAL_GetTick>
 801c630:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801c632:	e004      	b.n	801c63e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801c634:	f7fb f8e8 	bl	8017808 <HAL_GetTick>
 801c638:	1b40      	subs	r0, r0, r5
 801c63a:	2802      	cmp	r0, #2
 801c63c:	d856      	bhi.n	801c6ec <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801c63e:	6823      	ldr	r3, [r4, #0]
 801c640:	011a      	lsls	r2, r3, #4
 801c642:	d4f7      	bmi.n	801c634 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801c644:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c646:	6832      	ldr	r2, [r6, #0]
 801c648:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c64c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801c650:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c652:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 801c656:	3b01      	subs	r3, #1
 801c658:	3a01      	subs	r2, #1
 801c65a:	025b      	lsls	r3, r3, #9
 801c65c:	0412      	lsls	r2, r2, #16
 801c65e:	b29b      	uxth	r3, r3
 801c660:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801c664:	4313      	orrs	r3, r2
 801c666:	6872      	ldr	r2, [r6, #4]
 801c668:	3a01      	subs	r2, #1
 801c66a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c66e:	4313      	orrs	r3, r2
 801c670:	6932      	ldr	r2, [r6, #16]
 801c672:	3a01      	subs	r2, #1
 801c674:	0612      	lsls	r2, r2, #24
 801c676:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801c67a:	4313      	orrs	r3, r2
 801c67c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801c67e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c680:	6972      	ldr	r2, [r6, #20]
 801c682:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801c686:	4313      	orrs	r3, r2
 801c688:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801c68a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c68c:	69b2      	ldr	r2, [r6, #24]
 801c68e:	f023 0320 	bic.w	r3, r3, #32
 801c692:	4313      	orrs	r3, r2
 801c694:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801c696:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c698:	f023 0310 	bic.w	r3, r3, #16
 801c69c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801c69e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c6a0:	69f2      	ldr	r2, [r6, #28]
 801c6a2:	f36f 03cf 	bfc	r3, #3, #13
 801c6a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c6aa:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801c6ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c6ae:	f043 0310 	orr.w	r3, r3, #16
 801c6b2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801c6b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 801c6b6:	b1df      	cbz	r7, 801c6f0 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801c6b8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801c6ba:	bf0c      	ite	eq
 801c6bc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801c6c0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 801c6c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801c6c6:	4c0c      	ldr	r4, [pc, #48]	@ (801c6f8 <RCCEx_PLL2_Config.part.0+0xdc>)
 801c6c8:	6823      	ldr	r3, [r4, #0]
 801c6ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801c6ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c6d0:	f7fb f89a 	bl	8017808 <HAL_GetTick>
 801c6d4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801c6d6:	e004      	b.n	801c6e2 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801c6d8:	f7fb f896 	bl	8017808 <HAL_GetTick>
 801c6dc:	1b40      	subs	r0, r0, r5
 801c6de:	2802      	cmp	r0, #2
 801c6e0:	d804      	bhi.n	801c6ec <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801c6e2:	6823      	ldr	r3, [r4, #0]
 801c6e4:	011b      	lsls	r3, r3, #4
 801c6e6:	d5f7      	bpl.n	801c6d8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 801c6e8:	2000      	movs	r0, #0
}
 801c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801c6ec:	2003      	movs	r0, #3
}
 801c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801c6f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c6f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c6f6:	e7e6      	b.n	801c6c6 <RCCEx_PLL2_Config.part.0+0xaa>
 801c6f8:	58024400 	.word	0x58024400

0801c6fc <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 801c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801c6fe:	4c36      	ldr	r4, [pc, #216]	@ (801c7d8 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 801c700:	4606      	mov	r6, r0
 801c702:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 801c704:	6823      	ldr	r3, [r4, #0]
 801c706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c70a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c70c:	f7fb f87c 	bl	8017808 <HAL_GetTick>
 801c710:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801c712:	e004      	b.n	801c71e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801c714:	f7fb f878 	bl	8017808 <HAL_GetTick>
 801c718:	1b40      	subs	r0, r0, r5
 801c71a:	2802      	cmp	r0, #2
 801c71c:	d856      	bhi.n	801c7cc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801c71e:	6823      	ldr	r3, [r4, #0]
 801c720:	009a      	lsls	r2, r3, #2
 801c722:	d4f7      	bmi.n	801c714 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801c724:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c726:	6832      	ldr	r2, [r6, #0]
 801c728:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 801c72c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c730:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c732:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 801c736:	3b01      	subs	r3, #1
 801c738:	3a01      	subs	r2, #1
 801c73a:	025b      	lsls	r3, r3, #9
 801c73c:	0412      	lsls	r2, r2, #16
 801c73e:	b29b      	uxth	r3, r3
 801c740:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801c744:	4313      	orrs	r3, r2
 801c746:	6872      	ldr	r2, [r6, #4]
 801c748:	3a01      	subs	r2, #1
 801c74a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c74e:	4313      	orrs	r3, r2
 801c750:	6932      	ldr	r2, [r6, #16]
 801c752:	3a01      	subs	r2, #1
 801c754:	0612      	lsls	r2, r2, #24
 801c756:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801c75a:	4313      	orrs	r3, r2
 801c75c:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801c75e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c760:	6972      	ldr	r2, [r6, #20]
 801c762:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 801c766:	4313      	orrs	r3, r2
 801c768:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801c76a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c76c:	69b2      	ldr	r2, [r6, #24]
 801c76e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801c772:	4313      	orrs	r3, r2
 801c774:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801c776:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c77c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801c77e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801c780:	69f2      	ldr	r2, [r6, #28]
 801c782:	f36f 03cf 	bfc	r3, #3, #13
 801c786:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c78a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801c78c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c78e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c792:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801c794:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 801c796:	b1df      	cbz	r7, 801c7d0 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801c798:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801c79a:	bf0c      	ite	eq
 801c79c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801c7a0:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 801c7a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801c7a6:	4c0c      	ldr	r4, [pc, #48]	@ (801c7d8 <RCCEx_PLL3_Config.part.0+0xdc>)
 801c7a8:	6823      	ldr	r3, [r4, #0]
 801c7aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c7ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c7b0:	f7fb f82a 	bl	8017808 <HAL_GetTick>
 801c7b4:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801c7b6:	e004      	b.n	801c7c2 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801c7b8:	f7fb f826 	bl	8017808 <HAL_GetTick>
 801c7bc:	1b40      	subs	r0, r0, r5
 801c7be:	2802      	cmp	r0, #2
 801c7c0:	d804      	bhi.n	801c7cc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801c7c2:	6823      	ldr	r3, [r4, #0]
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	d5f7      	bpl.n	801c7b8 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 801c7c8:	2000      	movs	r0, #0
}
 801c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801c7cc:	2003      	movs	r0, #3
}
 801c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801c7d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801c7d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c7d6:	e7e6      	b.n	801c7a6 <RCCEx_PLL3_Config.part.0+0xaa>
 801c7d8:	58024400 	.word	0x58024400

0801c7dc <HAL_RCCEx_PeriphCLKConfig>:
{
 801c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c7e0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 801c7e4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c7e6:	0118      	lsls	r0, r3, #4
 801c7e8:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 801c7ec:	d525      	bpl.n	801c83a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 801c7ee:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801c7f0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 801c7f4:	f000 85d8 	beq.w	801d3a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801c7f8:	f200 86cd 	bhi.w	801d596 <HAL_RCCEx_PeriphCLKConfig+0xdba>
 801c7fc:	2900      	cmp	r1, #0
 801c7fe:	f000 85a7 	beq.w	801d350 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801c802:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801c806:	f040 86ca 	bne.w	801d59e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c80a:	499f      	ldr	r1, [pc, #636]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c80c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c80e:	f001 0103 	and.w	r1, r1, #3
 801c812:	2903      	cmp	r1, #3
 801c814:	f000 86c3 	beq.w	801d59e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
 801c818:	2102      	movs	r1, #2
 801c81a:	f104 0008 	add.w	r0, r4, #8
 801c81e:	f7ff fefd 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801c822:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c824:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801c828:	b93e      	cbnz	r6, 801c83a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c82a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801c82c:	4d96      	ldr	r5, [pc, #600]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c82e:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c830:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801c832:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 801c836:	4301      	orrs	r1, r0
 801c838:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c83a:	05d9      	lsls	r1, r3, #23
 801c83c:	d50a      	bpl.n	801c854 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 801c83e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 801c840:	2904      	cmp	r1, #4
 801c842:	d806      	bhi.n	801c852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801c844:	e8df f011 	tbh	[pc, r1, lsl #1]
 801c848:	058b043d 	.word	0x058b043d
 801c84c:	044205a0 	.word	0x044205a0
 801c850:	0442      	.short	0x0442
      status = ret;
 801c852:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801c854:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801c856:	059f      	lsls	r7, r3, #22
 801c858:	d524      	bpl.n	801c8a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 801c85a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801c85c:	2980      	cmp	r1, #128	@ 0x80
 801c85e:	f000 85d8 	beq.w	801d412 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 801c862:	f200 869f 	bhi.w	801d5a4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
 801c866:	2900      	cmp	r1, #0
 801c868:	f000 860b 	beq.w	801d482 <HAL_RCCEx_PeriphCLKConfig+0xca6>
 801c86c:	2940      	cmp	r1, #64	@ 0x40
 801c86e:	f040 86a0 	bne.w	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c872:	4985      	ldr	r1, [pc, #532]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c874:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c876:	f001 0103 	and.w	r1, r1, #3
 801c87a:	2903      	cmp	r1, #3
 801c87c:	f000 8699 	beq.w	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
 801c880:	2100      	movs	r1, #0
 801c882:	f104 0008 	add.w	r0, r4, #8
 801c886:	f7ff fec9 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801c88a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c88c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801c890:	2d00      	cmp	r5, #0
 801c892:	f040 85d0 	bne.w	801d436 <HAL_RCCEx_PeriphCLKConfig+0xc5a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801c896:	4f7c      	ldr	r7, [pc, #496]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c898:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 801c89a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c89c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 801c8a0:	4301      	orrs	r1, r0
 801c8a2:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c8a4:	0558      	lsls	r0, r3, #21
 801c8a6:	d528      	bpl.n	801c8fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 801c8a8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 801c8ac:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 801c8b0:	f000 85c4 	beq.w	801d43c <HAL_RCCEx_PeriphCLKConfig+0xc60>
 801c8b4:	f200 868d 	bhi.w	801d5d2 <HAL_RCCEx_PeriphCLKConfig+0xdf6>
 801c8b8:	2900      	cmp	r1, #0
 801c8ba:	f000 85db 	beq.w	801d474 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 801c8be:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 801c8c2:	f040 868e 	bne.w	801d5e2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c8c6:	4970      	ldr	r1, [pc, #448]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c8c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c8ca:	f001 0103 	and.w	r1, r1, #3
 801c8ce:	2903      	cmp	r1, #3
 801c8d0:	f000 8687 	beq.w	801d5e2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 801c8d4:	2100      	movs	r1, #0
 801c8d6:	f104 0008 	add.w	r0, r4, #8
 801c8da:	f7ff fe9f 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801c8de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c8e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801c8e4:	2d00      	cmp	r5, #0
 801c8e6:	f040 85bb 	bne.w	801d460 <HAL_RCCEx_PeriphCLKConfig+0xc84>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c8ea:	4f67      	ldr	r7, [pc, #412]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c8ec:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 801c8f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c8f2:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 801c8f6:	4301      	orrs	r1, r0
 801c8f8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c8fa:	0519      	lsls	r1, r3, #20
 801c8fc:	d528      	bpl.n	801c950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 801c8fe:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 801c902:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 801c906:	f000 855e 	beq.w	801d3c6 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 801c90a:	f200 866e 	bhi.w	801d5ea <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 801c90e:	2900      	cmp	r1, #0
 801c910:	f000 8513 	beq.w	801d33a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 801c914:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 801c918:	f040 866f 	bne.w	801d5fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c91c:	495a      	ldr	r1, [pc, #360]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c91e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c920:	f001 0103 	and.w	r1, r1, #3
 801c924:	2903      	cmp	r1, #3
 801c926:	f000 8668 	beq.w	801d5fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 801c92a:	2100      	movs	r1, #0
 801c92c:	f104 0008 	add.w	r0, r4, #8
 801c930:	f7ff fe74 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801c934:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c936:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801c93a:	2d00      	cmp	r5, #0
 801c93c:	f040 8505 	bne.w	801d34a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c940:	4f51      	ldr	r7, [pc, #324]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c942:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801c946:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c948:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 801c94c:	4301      	orrs	r1, r0
 801c94e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c950:	019f      	lsls	r7, r3, #6
 801c952:	d518      	bpl.n	801c986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 801c954:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801c956:	2920      	cmp	r1, #32
 801c958:	f000 84d8 	beq.w	801d30c <HAL_RCCEx_PeriphCLKConfig+0xb30>
 801c95c:	f200 8651 	bhi.w	801d602 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 801c960:	b139      	cbz	r1, 801c972 <HAL_RCCEx_PeriphCLKConfig+0x196>
 801c962:	2910      	cmp	r1, #16
 801c964:	f040 8650 	bne.w	801d608 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c968:	4847      	ldr	r0, [pc, #284]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c96a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801c96c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801c970:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801c972:	2d00      	cmp	r5, #0
 801c974:	f040 83f8 	bne.w	801d168 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c978:	4f43      	ldr	r7, [pc, #268]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c97a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801c97c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c97e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 801c982:	4301      	orrs	r1, r0
 801c984:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c986:	04d8      	lsls	r0, r3, #19
 801c988:	d526      	bpl.n	801c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 801c98a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c98c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801c990:	f000 852a 	beq.w	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 801c994:	f200 8611 	bhi.w	801d5ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801c998:	2900      	cmp	r1, #0
 801c99a:	f000 8564 	beq.w	801d466 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 801c99e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 801c9a2:	f040 8612 	bne.w	801d5ca <HAL_RCCEx_PeriphCLKConfig+0xdee>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c9a6:	4938      	ldr	r1, [pc, #224]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c9a8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c9aa:	f001 0103 	and.w	r1, r1, #3
 801c9ae:	2903      	cmp	r1, #3
 801c9b0:	f000 860b 	beq.w	801d5ca <HAL_RCCEx_PeriphCLKConfig+0xdee>
 801c9b4:	2100      	movs	r1, #0
 801c9b6:	f104 0008 	add.w	r0, r4, #8
 801c9ba:	f7ff fe2f 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801c9be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c9c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801c9c4:	2d00      	cmp	r5, #0
 801c9c6:	f040 8521 	bne.w	801d40c <HAL_RCCEx_PeriphCLKConfig+0xc30>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c9ca:	4f2f      	ldr	r7, [pc, #188]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c9cc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c9ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c9d0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801c9d4:	4301      	orrs	r1, r0
 801c9d6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c9d8:	0499      	lsls	r1, r3, #18
 801c9da:	d524      	bpl.n	801ca26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 801c9dc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801c9de:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 801c9e2:	f000 840f 	beq.w	801d204 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801c9e6:	f200 85bc 	bhi.w	801d562 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 801c9ea:	b191      	cbz	r1, 801ca12 <HAL_RCCEx_PeriphCLKConfig+0x236>
 801c9ec:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801c9f0:	f040 85c1 	bne.w	801d576 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c9f4:	4924      	ldr	r1, [pc, #144]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c9f6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801c9f8:	f001 0103 	and.w	r1, r1, #3
 801c9fc:	2903      	cmp	r1, #3
 801c9fe:	f000 85ba 	beq.w	801d576 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
 801ca02:	2101      	movs	r1, #1
 801ca04:	f104 0008 	add.w	r0, r4, #8
 801ca08:	f7ff fe08 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801ca0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ca0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801ca12:	2d00      	cmp	r5, #0
 801ca14:	f040 83c9 	bne.w	801d1aa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801ca18:	4f1b      	ldr	r7, [pc, #108]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801ca1a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ca1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ca1e:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 801ca22:	4301      	orrs	r1, r0
 801ca24:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ca26:	045f      	lsls	r7, r3, #17
 801ca28:	f403 4080 	and.w	r0, r3, #16384	@ 0x4000
 801ca2c:	d52e      	bpl.n	801ca8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    switch (PeriphClkInit->Spi6ClockSelection)
 801ca2e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 801ca32:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 801ca36:	f000 841d 	beq.w	801d274 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 801ca3a:	f200 82ae 	bhi.w	801cf9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
 801ca3e:	b191      	cbz	r1, 801ca66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 801ca40:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 801ca44:	f040 82b3 	bne.w	801cfae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ca48:	490f      	ldr	r1, [pc, #60]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801ca4a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801ca4c:	f001 0103 	and.w	r1, r1, #3
 801ca50:	2903      	cmp	r1, #3
 801ca52:	f000 82ac 	beq.w	801cfae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 801ca56:	2101      	movs	r1, #1
 801ca58:	f104 0008 	add.w	r0, r4, #8
 801ca5c:	f7ff fdde 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801ca60:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801ca62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801ca66:	2d00      	cmp	r5, #0
 801ca68:	f040 8390 	bne.w	801d18c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801ca6c:	4f06      	ldr	r7, [pc, #24]	@ (801ca88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801ca6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 801ca72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ca74:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 801ca78:	4301      	orrs	r1, r0
 801ca7a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801ca7c:	0159      	lsls	r1, r3, #5
 801ca7e:	d529      	bpl.n	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    switch (PeriphClkInit->DsiClockSelection)
 801ca80:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801ca82:	4601      	mov	r1, r0
 801ca84:	b940      	cbnz	r0, 801ca98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801ca86:	e01e      	b.n	801cac6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 801ca88:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801ca8c:	f003 6180 	and.w	r1, r3, #67108864	@ 0x4000000
 801ca90:	4301      	orrs	r1, r0
 801ca92:	d01f      	beq.n	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    switch (PeriphClkInit->DsiClockSelection)
 801ca94:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801ca96:	b191      	cbz	r1, 801cabe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801ca98:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801ca9c:	f040 828a 	bne.w	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801caa0:	4952      	ldr	r1, [pc, #328]	@ (801cbec <HAL_RCCEx_PeriphCLKConfig+0x410>)
 801caa2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801caa4:	f001 0103 	and.w	r1, r1, #3
 801caa8:	2903      	cmp	r1, #3
 801caaa:	f000 8283 	beq.w	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 801caae:	2101      	movs	r1, #1
 801cab0:	f104 0008 	add.w	r0, r4, #8
 801cab4:	f7ff fdb2 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cab8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801caba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cabe:	2d00      	cmp	r5, #0
 801cac0:	f040 8438 	bne.w	801d334 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 801cac4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 801cac6:	4f49      	ldr	r7, [pc, #292]	@ (801cbec <HAL_RCCEx_PeriphCLKConfig+0x410>)
 801cac8:	2500      	movs	r5, #0
 801caca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801cacc:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 801cad0:	4301      	orrs	r1, r0
 801cad2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cad4:	041f      	lsls	r7, r3, #16
 801cad6:	d50d      	bpl.n	801caf4 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch (PeriphClkInit->FdcanClockSelection)
 801cad8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801cada:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 801cade:	f000 826f 	beq.w	801cfc0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 801cae2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 801cae6:	f000 859f 	beq.w	801d628 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 801caea:	2900      	cmp	r1, #0
 801caec:	f000 826d 	beq.w	801cfca <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      status = ret;
 801caf0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801caf2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801caf4:	01d8      	lsls	r0, r3, #7
 801caf6:	d512      	bpl.n	801cb1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    switch (PeriphClkInit->FmcClockSelection)
 801caf8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801cafa:	2903      	cmp	r1, #3
 801cafc:	f200 85cb 	bhi.w	801d696 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 801cb00:	e8df f011 	tbh	[pc, r1, lsl #1]
 801cb04:	00040009 	.word	0x00040009
 801cb08:	000903a5 	.word	0x000903a5
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb0c:	4837      	ldr	r0, [pc, #220]	@ (801cbec <HAL_RCCEx_PeriphCLKConfig+0x410>)
 801cb0e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801cb10:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801cb14:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801cb16:	2d00      	cmp	r5, #0
 801cb18:	f000 832c 	beq.w	801d174 <HAL_RCCEx_PeriphCLKConfig+0x998>
      status = ret;
 801cb1c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cb1e:	0259      	lsls	r1, r3, #9
 801cb20:	f100 828d 	bmi.w	801d03e <HAL_RCCEx_PeriphCLKConfig+0x862>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801cb24:	07df      	lsls	r7, r3, #31
 801cb26:	d530      	bpl.n	801cb8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    switch (PeriphClkInit->Usart16ClockSelection)
 801cb28:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 801cb2c:	2928      	cmp	r1, #40	@ 0x28
 801cb2e:	d82a      	bhi.n	801cb86 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 801cb30:	e8df f011 	tbh	[pc, r1, lsl #1]
 801cb34:	00290268 	.word	0x00290268
 801cb38:	00290029 	.word	0x00290029
 801cb3c:	00290029 	.word	0x00290029
 801cb40:	00290029 	.word	0x00290029
 801cb44:	00290259 	.word	0x00290259
 801cb48:	00290029 	.word	0x00290029
 801cb4c:	00290029 	.word	0x00290029
 801cb50:	00290029 	.word	0x00290029
 801cb54:	002904d7 	.word	0x002904d7
 801cb58:	00290029 	.word	0x00290029
 801cb5c:	00290029 	.word	0x00290029
 801cb60:	00290029 	.word	0x00290029
 801cb64:	00290268 	.word	0x00290268
 801cb68:	00290029 	.word	0x00290029
 801cb6c:	00290029 	.word	0x00290029
 801cb70:	00290029 	.word	0x00290029
 801cb74:	00290268 	.word	0x00290268
 801cb78:	00290029 	.word	0x00290029
 801cb7c:	00290029 	.word	0x00290029
 801cb80:	00290029 	.word	0x00290029
 801cb84:	0268      	.short	0x0268
      status = ret;
 801cb86:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801cb88:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801cb8a:	0798      	lsls	r0, r3, #30
 801cb8c:	d51e      	bpl.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 801cb8e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 801cb90:	2905      	cmp	r1, #5
 801cb92:	f200 8560 	bhi.w	801d656 <HAL_RCCEx_PeriphCLKConfig+0xe7a>
 801cb96:	e8df f011 	tbh	[pc, r1, lsl #1]
 801cb9a:	0015      	.short	0x0015
 801cb9c:	04910006 	.word	0x04910006
 801cba0:	00150015 	.word	0x00150015
 801cba4:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cba6:	4911      	ldr	r1, [pc, #68]	@ (801cbec <HAL_RCCEx_PeriphCLKConfig+0x410>)
 801cba8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cbaa:	f001 0103 	and.w	r1, r1, #3
 801cbae:	2903      	cmp	r1, #3
 801cbb0:	f000 8551 	beq.w	801d656 <HAL_RCCEx_PeriphCLKConfig+0xe7a>
 801cbb4:	2101      	movs	r1, #1
 801cbb6:	f104 0008 	add.w	r0, r4, #8
 801cbba:	f7ff fd2f 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cbbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cbc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cbc4:	2d00      	cmp	r5, #0
 801cbc6:	f000 82f6 	beq.w	801d1b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
      status = ret;
 801cbca:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cbcc:	0759      	lsls	r1, r3, #29
 801cbce:	d522      	bpl.n	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801cbd0:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 801cbd4:	2905      	cmp	r1, #5
 801cbd6:	f200 853a 	bhi.w	801d64e <HAL_RCCEx_PeriphCLKConfig+0xe72>
 801cbda:	e8df f011 	tbh	[pc, r1, lsl #1]
 801cbde:	0018      	.short	0x0018
 801cbe0:	04590009 	.word	0x04590009
 801cbe4:	00180018 	.word	0x00180018
 801cbe8:	0018      	.short	0x0018
 801cbea:	bf00      	nop
 801cbec:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cbf0:	49ae      	ldr	r1, [pc, #696]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cbf2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cbf4:	f001 0103 	and.w	r1, r1, #3
 801cbf8:	2903      	cmp	r1, #3
 801cbfa:	f000 8528 	beq.w	801d64e <HAL_RCCEx_PeriphCLKConfig+0xe72>
 801cbfe:	2101      	movs	r1, #1
 801cc00:	f104 0008 	add.w	r0, r4, #8
 801cc04:	f7ff fd0a 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cc08:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cc0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cc0e:	2d00      	cmp	r5, #0
 801cc10:	f000 82d9 	beq.w	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
      status = ret;
 801cc14:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cc16:	069f      	lsls	r7, r3, #26
 801cc18:	d526      	bpl.n	801cc68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 801cc1a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801cc1e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 801cc22:	f000 833a 	beq.w	801d29a <HAL_RCCEx_PeriphCLKConfig+0xabe>
 801cc26:	f200 848e 	bhi.w	801d546 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
 801cc2a:	b191      	cbz	r1, 801cc52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801cc2c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 801cc30:	f040 8493 	bne.w	801d55a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cc34:	499d      	ldr	r1, [pc, #628]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cc36:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cc38:	f001 0103 	and.w	r1, r1, #3
 801cc3c:	2903      	cmp	r1, #3
 801cc3e:	f000 848c 	beq.w	801d55a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 801cc42:	2100      	movs	r1, #0
 801cc44:	f104 0008 	add.w	r0, r4, #8
 801cc48:	f7ff fce8 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cc4c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801cc4e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cc52:	2d00      	cmp	r5, #0
 801cc54:	f040 82ad 	bne.w	801d1b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cc58:	4f94      	ldr	r7, [pc, #592]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cc5a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801cc5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cc60:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 801cc64:	4301      	orrs	r1, r0
 801cc66:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801cc68:	0658      	lsls	r0, r3, #25
 801cc6a:	d526      	bpl.n	801ccba <HAL_RCCEx_PeriphCLKConfig+0x4de>
    switch (PeriphClkInit->Lptim2ClockSelection)
 801cc6c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 801cc70:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 801cc74:	f000 82b4 	beq.w	801d1e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801cc78:	f200 8457 	bhi.w	801d52a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 801cc7c:	b191      	cbz	r1, 801cca4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 801cc7e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801cc82:	f040 845c 	bne.w	801d53e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cc86:	4989      	ldr	r1, [pc, #548]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cc88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cc8a:	f001 0103 	and.w	r1, r1, #3
 801cc8e:	2903      	cmp	r1, #3
 801cc90:	f000 8455 	beq.w	801d53e <HAL_RCCEx_PeriphCLKConfig+0xd62>
 801cc94:	2100      	movs	r1, #0
 801cc96:	f104 0008 	add.w	r0, r4, #8
 801cc9a:	f7ff fcbf 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cc9e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801cca0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cca4:	2d00      	cmp	r5, #0
 801cca6:	f040 8282 	bne.w	801d1ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ccaa:	4f80      	ldr	r7, [pc, #512]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ccac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 801ccb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ccb2:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 801ccb6:	4301      	orrs	r1, r0
 801ccb8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ccba:	0619      	lsls	r1, r3, #24
 801ccbc:	d526      	bpl.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ccbe:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 801ccc2:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801ccc6:	f000 830e 	beq.w	801d2e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 801ccca:	f200 8420 	bhi.w	801d50e <HAL_RCCEx_PeriphCLKConfig+0xd32>
 801ccce:	b191      	cbz	r1, 801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 801ccd0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801ccd4:	f040 8425 	bne.w	801d522 <HAL_RCCEx_PeriphCLKConfig+0xd46>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ccd8:	4974      	ldr	r1, [pc, #464]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ccda:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801ccdc:	f001 0103 	and.w	r1, r1, #3
 801cce0:	2903      	cmp	r1, #3
 801cce2:	f000 841e 	beq.w	801d522 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801cce6:	2100      	movs	r1, #0
 801cce8:	f104 0008 	add.w	r0, r4, #8
 801ccec:	f7ff fc96 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801ccf0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ccf2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801ccf6:	2d00      	cmp	r5, #0
 801ccf8:	f040 8255 	bne.w	801d1a6 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ccfc:	4f6b      	ldr	r7, [pc, #428]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ccfe:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 801cd02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd04:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 801cd08:	4301      	orrs	r1, r0
 801cd0a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801cd0c:	071f      	lsls	r7, r3, #28
 801cd0e:	d50b      	bpl.n	801cd28 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801cd10:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801cd14:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 801cd18:	f000 81e5 	beq.w	801d0e6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801cd1c:	4f63      	ldr	r7, [pc, #396]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cd1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cd20:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 801cd24:	4301      	orrs	r1, r0
 801cd26:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cd28:	06d8      	lsls	r0, r3, #27
 801cd2a:	d50b      	bpl.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x568>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cd2c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 801cd30:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801cd34:	f000 81eb 	beq.w	801d10e <HAL_RCCEx_PeriphCLKConfig+0x932>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cd38:	4f5c      	ldr	r7, [pc, #368]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cd3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd3c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 801cd40:	4301      	orrs	r1, r0
 801cd42:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cd44:	0319      	lsls	r1, r3, #12
 801cd46:	d524      	bpl.n	801cd92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    switch (PeriphClkInit->AdcClockSelection)
 801cd48:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 801cd4c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801cd50:	f000 82b6 	beq.w	801d2c0 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 801cd54:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 801cd58:	d010      	beq.n	801cd7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 801cd5a:	2900      	cmp	r1, #0
 801cd5c:	f040 8140 	bne.w	801cfe0 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cd60:	4852      	ldr	r0, [pc, #328]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cd62:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801cd64:	f000 0003 	and.w	r0, r0, #3
 801cd68:	2803      	cmp	r0, #3
 801cd6a:	f000 8139 	beq.w	801cfe0 <HAL_RCCEx_PeriphCLKConfig+0x804>
 801cd6e:	f104 0008 	add.w	r0, r4, #8
 801cd72:	f7ff fc53 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cd76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cd78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cd7c:	2d00      	cmp	r5, #0
 801cd7e:	f040 820e 	bne.w	801d19e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cd82:	4f4a      	ldr	r7, [pc, #296]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cd84:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 801cd88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd8a:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 801cd8e:	4301      	orrs	r1, r0
 801cd90:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cd92:	035f      	lsls	r7, r3, #13
 801cd94:	d50f      	bpl.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    switch (PeriphClkInit->UsbClockSelection)
 801cd96:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 801cd9a:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 801cd9e:	f000 8244 	beq.w	801d22a <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 801cda2:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 801cda6:	f000 813e 	beq.w	801d026 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 801cdaa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801cdae:	f000 8135 	beq.w	801d01c <HAL_RCCEx_PeriphCLKConfig+0x840>
      status = ret;
 801cdb2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801cdb4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801cdb6:	03d8      	lsls	r0, r3, #15
 801cdb8:	d520      	bpl.n	801cdfc <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch (PeriphClkInit->SdmmcClockSelection)
 801cdba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801cdbc:	2900      	cmp	r1, #0
 801cdbe:	f000 81c9 	beq.w	801d154 <HAL_RCCEx_PeriphCLKConfig+0x978>
 801cdc2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801cdc6:	f040 80f8 	bne.w	801cfba <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cdca:	4938      	ldr	r1, [pc, #224]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cdcc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cdce:	f001 0103 	and.w	r1, r1, #3
 801cdd2:	2903      	cmp	r1, #3
 801cdd4:	f000 80f1 	beq.w	801cfba <HAL_RCCEx_PeriphCLKConfig+0x7de>
 801cdd8:	2102      	movs	r1, #2
 801cdda:	f104 0008 	add.w	r0, r4, #8
 801cdde:	f7ff fc1d 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cde2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cde4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801cde8:	2d00      	cmp	r5, #0
 801cdea:	f040 81bb 	bne.w	801d164 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cdee:	4f2f      	ldr	r7, [pc, #188]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cdf0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801cdf2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801cdf4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 801cdf8:	4301      	orrs	r1, r0
 801cdfa:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cdfc:	0099      	lsls	r1, r3, #2
 801cdfe:	d50e      	bpl.n	801ce1e <HAL_RCCEx_PeriphCLKConfig+0x642>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ce00:	492a      	ldr	r1, [pc, #168]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce02:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801ce04:	f001 0103 	and.w	r1, r1, #3
 801ce08:	2903      	cmp	r1, #3
 801ce0a:	d007      	beq.n	801ce1c <HAL_RCCEx_PeriphCLKConfig+0x640>
 801ce0c:	2102      	movs	r1, #2
 801ce0e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ce12:	f7ff fc73 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ce16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ce1a:	b100      	cbz	r0, 801ce1e <HAL_RCCEx_PeriphCLKConfig+0x642>
      status = HAL_ERROR;
 801ce1c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ce1e:	039f      	lsls	r7, r3, #14
 801ce20:	f100 80ab 	bmi.w	801cf7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status = HAL_ERROR;
 801ce24:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ce26:	02d8      	lsls	r0, r3, #11
 801ce28:	d506      	bpl.n	801ce38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ce2a:	4820      	ldr	r0, [pc, #128]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce2c:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801ce2e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 801ce30:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801ce34:	4331      	orrs	r1, r6
 801ce36:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801ce38:	00d9      	lsls	r1, r3, #3
 801ce3a:	d507      	bpl.n	801ce4c <HAL_RCCEx_PeriphCLKConfig+0x670>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801ce3c:	481b      	ldr	r0, [pc, #108]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce3e:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 801ce42:	6901      	ldr	r1, [r0, #16]
 801ce44:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 801ce48:	4331      	orrs	r1, r6
 801ce4a:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ce4c:	029f      	lsls	r7, r3, #10
 801ce4e:	d506      	bpl.n	801ce5e <HAL_RCCEx_PeriphCLKConfig+0x682>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ce50:	4816      	ldr	r0, [pc, #88]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce52:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 801ce54:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 801ce56:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 801ce5a:	4331      	orrs	r1, r6
 801ce5c:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801ce5e:	005e      	lsls	r6, r3, #1
 801ce60:	d509      	bpl.n	801ce76 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ce62:	4912      	ldr	r1, [pc, #72]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce64:	6908      	ldr	r0, [r1, #16]
 801ce66:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 801ce6a:	6108      	str	r0, [r1, #16]
 801ce6c:	6908      	ldr	r0, [r1, #16]
 801ce6e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 801ce72:	4330      	orrs	r0, r6
 801ce74:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	da06      	bge.n	801ce88 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801ce7a:	480c      	ldr	r0, [pc, #48]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce7c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 801ce7e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ce80:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 801ce84:	4331      	orrs	r1, r6
 801ce86:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801ce88:	0218      	lsls	r0, r3, #8
 801ce8a:	d507      	bpl.n	801ce9c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801ce8c:	4907      	ldr	r1, [pc, #28]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801ce8e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801ce92:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 801ce94:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 801ce98:	4303      	orrs	r3, r0
 801ce9a:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801ce9c:	07d1      	lsls	r1, r2, #31
 801ce9e:	d511      	bpl.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cea0:	4b02      	ldr	r3, [pc, #8]	@ (801ceac <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 801cea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cea4:	f003 0303 	and.w	r3, r3, #3
 801cea8:	2b03      	cmp	r3, #3
 801ceaa:	e001      	b.n	801ceb0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 801ceac:	58024400 	.word	0x58024400
 801ceb0:	f000 8365 	beq.w	801d57e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 801ceb4:	2100      	movs	r1, #0
 801ceb6:	f104 0008 	add.w	r0, r4, #8
 801ceba:	f7ff fbaf 	bl	801c61c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cebe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 801cec0:	b100      	cbz	r0, 801cec4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cec2:	4605      	mov	r5, r0
 801cec4:	0793      	lsls	r3, r2, #30
 801cec6:	d50e      	bpl.n	801cee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cec8:	4bae      	ldr	r3, [pc, #696]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801ceca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cecc:	f003 0303 	and.w	r3, r3, #3
 801ced0:	2b03      	cmp	r3, #3
 801ced2:	f000 8356 	beq.w	801d582 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 801ced6:	2101      	movs	r1, #1
 801ced8:	f104 0008 	add.w	r0, r4, #8
 801cedc:	f7ff fb9e 	bl	801c61c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cee0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 801cee2:	b100      	cbz	r0, 801cee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cee4:	4605      	mov	r5, r0
 801cee6:	0757      	lsls	r7, r2, #29
 801cee8:	d50e      	bpl.n	801cf08 <HAL_RCCEx_PeriphCLKConfig+0x72c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ceea:	4ba6      	ldr	r3, [pc, #664]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801ceec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ceee:	f003 0303 	and.w	r3, r3, #3
 801cef2:	2b03      	cmp	r3, #3
 801cef4:	f000 8347 	beq.w	801d586 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 801cef8:	2102      	movs	r1, #2
 801cefa:	f104 0008 	add.w	r0, r4, #8
 801cefe:	f7ff fb8d 	bl	801c61c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cf02:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 801cf04:	b100      	cbz	r0, 801cf08 <HAL_RCCEx_PeriphCLKConfig+0x72c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cf06:	4605      	mov	r5, r0
 801cf08:	0716      	lsls	r6, r2, #28
 801cf0a:	d50e      	bpl.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cf0c:	4b9d      	ldr	r3, [pc, #628]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cf0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf10:	f003 0303 	and.w	r3, r3, #3
 801cf14:	2b03      	cmp	r3, #3
 801cf16:	f000 8338 	beq.w	801d58a <HAL_RCCEx_PeriphCLKConfig+0xdae>
 801cf1a:	2100      	movs	r1, #0
 801cf1c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801cf20:	f7ff fbec 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801cf24:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 801cf26:	b100      	cbz	r0, 801cf2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801cf28:	4605      	mov	r5, r0
 801cf2a:	06d0      	lsls	r0, r2, #27
 801cf2c:	d50f      	bpl.n	801cf4e <HAL_RCCEx_PeriphCLKConfig+0x772>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cf2e:	4b95      	ldr	r3, [pc, #596]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf32:	f003 0303 	and.w	r3, r3, #3
 801cf36:	2b03      	cmp	r3, #3
 801cf38:	f000 8329 	beq.w	801d58e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 801cf3c:	2101      	movs	r1, #1
 801cf3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801cf42:	f7ff fbdb 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 801cf46:	2800      	cmp	r0, #0
 801cf48:	f040 8368 	bne.w	801d61c <HAL_RCCEx_PeriphCLKConfig+0xe40>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801cf4c:	6862      	ldr	r2, [r4, #4]
 801cf4e:	0693      	lsls	r3, r2, #26
 801cf50:	d50e      	bpl.n	801cf70 <HAL_RCCEx_PeriphCLKConfig+0x794>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cf52:	4b8c      	ldr	r3, [pc, #560]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf56:	f003 0303 	and.w	r3, r3, #3
 801cf5a:	2b03      	cmp	r3, #3
 801cf5c:	f000 82d4 	beq.w	801d508 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 801cf60:	2102      	movs	r1, #2
 801cf62:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801cf66:	f7ff fbc9 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 801cf6a:	2800      	cmp	r0, #0
 801cf6c:	f040 82cc 	bne.w	801d508 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
  if (status == HAL_OK)
 801cf70:	1e28      	subs	r0, r5, #0
 801cf72:	bf18      	it	ne
 801cf74:	2001      	movne	r0, #1
}
 801cf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 801cf7a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 801cf7e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801cf82:	f000 80d8 	beq.w	801d136 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 801cf86:	f240 8127 	bls.w	801d1d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 801cf8a:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 801cf8e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801cf92:	f000 80d5 	beq.w	801d140 <HAL_RCCEx_PeriphCLKConfig+0x964>
 801cf96:	2501      	movs	r5, #1
 801cf98:	e745      	b.n	801ce26 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    switch (PeriphClkInit->Spi6ClockSelection)
 801cf9a:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 801cf9e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801cfa2:	f43f ad60 	beq.w	801ca66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 801cfa6:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 801cfaa:	f43f ad5c 	beq.w	801ca66 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801cfae:	015d      	lsls	r5, r3, #5
 801cfb0:	f100 8369 	bmi.w	801d686 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
      status = ret;
 801cfb4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801cfb6:	4635      	mov	r5, r6
 801cfb8:	e58c      	b.n	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      status = ret;
 801cfba:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801cfbc:	4635      	mov	r5, r6
 801cfbe:	e71d      	b.n	801cdfc <HAL_RCCEx_PeriphCLKConfig+0x620>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cfc0:	4870      	ldr	r0, [pc, #448]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cfc2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801cfc4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801cfc8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801cfca:	2d00      	cmp	r5, #0
 801cfcc:	f040 80d0 	bne.w	801d170 <HAL_RCCEx_PeriphCLKConfig+0x994>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cfd0:	4f6c      	ldr	r7, [pc, #432]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cfd2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801cfd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cfd6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 801cfda:	4301      	orrs	r1, r0
 801cfdc:	6539      	str	r1, [r7, #80]	@ 0x50
 801cfde:	e589      	b.n	801caf4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      status = ret;
 801cfe0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801cfe2:	4635      	mov	r5, r6
 801cfe4:	e6d5      	b.n	801cd92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801cfe6:	4967      	ldr	r1, [pc, #412]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801cfe8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801cfea:	f001 0103 	and.w	r1, r1, #3
 801cfee:	2903      	cmp	r1, #3
 801cff0:	f43f adc9 	beq.w	801cb86 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 801cff4:	2101      	movs	r1, #1
 801cff6:	f104 0008 	add.w	r0, r4, #8
 801cffa:	f7ff fb0f 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801cffe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d000:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d004:	2d00      	cmp	r5, #0
 801d006:	f040 80cc 	bne.w	801d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d00a:	4f5e      	ldr	r7, [pc, #376]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d00c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 801d010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d012:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 801d016:	4301      	orrs	r1, r0
 801d018:	6579      	str	r1, [r7, #84]	@ 0x54
 801d01a:	e5b6      	b.n	801cb8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d01c:	4859      	ldr	r0, [pc, #356]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d01e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d020:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d024:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801d026:	2d00      	cmp	r5, #0
 801d028:	f040 80a0 	bne.w	801d16c <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d02c:	4f55      	ldr	r7, [pc, #340]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d02e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801d032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d034:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 801d038:	4301      	orrs	r1, r0
 801d03a:	6579      	str	r1, [r7, #84]	@ 0x54
 801d03c:	e6bb      	b.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d03e:	4f52      	ldr	r7, [pc, #328]	@ (801d188 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 801d040:	683b      	ldr	r3, [r7, #0]
 801d042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d046:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 801d048:	f7fa fbde 	bl	8017808 <HAL_GetTick>
 801d04c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d04e:	e006      	b.n	801d05e <HAL_RCCEx_PeriphCLKConfig+0x882>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d050:	f7fa fbda 	bl	8017808 <HAL_GetTick>
 801d054:	eba0 0008 	sub.w	r0, r0, r8
 801d058:	2864      	cmp	r0, #100	@ 0x64
 801d05a:	f200 82d9 	bhi.w	801d610 <HAL_RCCEx_PeriphCLKConfig+0xe34>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d05e:	683b      	ldr	r3, [r7, #0]
 801d060:	05da      	lsls	r2, r3, #23
 801d062:	d5f5      	bpl.n	801d050 <HAL_RCCEx_PeriphCLKConfig+0x874>
    if (ret == HAL_OK)
 801d064:	2d00      	cmp	r5, #0
 801d066:	f040 82d4 	bne.w	801d612 <HAL_RCCEx_PeriphCLKConfig+0xe36>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d06a:	4a46      	ldr	r2, [pc, #280]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d06c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 801d070:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 801d072:	4059      	eors	r1, r3
 801d074:	f411 7f40 	tst.w	r1, #768	@ 0x300
 801d078:	d00b      	beq.n	801d092 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d07a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 801d07c:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d07e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 801d082:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 801d086:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d088:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 801d08a:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 801d08e:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 801d090:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d096:	f000 8302 	beq.w	801d69e <HAL_RCCEx_PeriphCLKConfig+0xec2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d09a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 801d09e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 801d0a2:	f000 8310 	beq.w	801d6c6 <HAL_RCCEx_PeriphCLKConfig+0xeea>
 801d0a6:	4937      	ldr	r1, [pc, #220]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d0a8:	690a      	ldr	r2, [r1, #16]
 801d0aa:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 801d0ae:	610a      	str	r2, [r1, #16]
 801d0b0:	4834      	ldr	r0, [pc, #208]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d0b2:	f3c3 010b 	ubfx	r1, r3, #0, #12
 801d0b6:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 801d0b8:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d0ba:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d0be:	6701      	str	r1, [r0, #112]	@ 0x70
 801d0c0:	e530      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x348>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d0c2:	4830      	ldr	r0, [pc, #192]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d0c4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d0c6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d0ca:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d0cc:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 801d0ce:	2d00      	cmp	r5, #0
 801d0d0:	f040 8157 	bne.w	801d382 <HAL_RCCEx_PeriphCLKConfig+0xba6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d0d4:	4f2b      	ldr	r7, [pc, #172]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d0d6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801d0d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d0da:	f021 0107 	bic.w	r1, r1, #7
 801d0de:	4301      	orrs	r1, r0
 801d0e0:	6539      	str	r1, [r7, #80]	@ 0x50
 801d0e2:	f7ff bbb8 	b.w	801c856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d0e6:	4927      	ldr	r1, [pc, #156]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d0e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d0ea:	f001 0103 	and.w	r1, r1, #3
 801d0ee:	2903      	cmp	r1, #3
 801d0f0:	f000 82b8 	beq.w	801d664 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 801d0f4:	2102      	movs	r1, #2
 801d0f6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d0fa:	f7ff faff 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d0fe:	2800      	cmp	r0, #0
 801d100:	f040 82b3 	bne.w	801d66a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d104:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d108:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d10c:	e606      	b.n	801cd1c <HAL_RCCEx_PeriphCLKConfig+0x540>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d10e:	491d      	ldr	r1, [pc, #116]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d110:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d112:	f001 0103 	and.w	r1, r1, #3
 801d116:	2903      	cmp	r1, #3
 801d118:	f000 82a1 	beq.w	801d65e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801d11c:	2102      	movs	r1, #2
 801d11e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d122:	f7ff faeb 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d126:	2800      	cmp	r0, #0
 801d128:	f040 82a6 	bne.w	801d678 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d12c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d130:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d134:	e600      	b.n	801cd38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d136:	4f13      	ldr	r7, [pc, #76]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d13a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 801d13e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 801d140:	2d00      	cmp	r5, #0
 801d142:	f47f ae70 	bne.w	801ce26 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d146:	4d0f      	ldr	r5, [pc, #60]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d148:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 801d14a:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 801d14e:	4301      	orrs	r1, r0
 801d150:	6569      	str	r1, [r5, #84]	@ 0x54
 801d152:	e667      	b.n	801ce24 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d154:	480b      	ldr	r0, [pc, #44]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d156:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d158:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d15c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801d15e:	2d00      	cmp	r5, #0
 801d160:	f43f ae45 	beq.w	801cdee <HAL_RCCEx_PeriphCLKConfig+0x612>
      status = ret;
 801d164:	462e      	mov	r6, r5
 801d166:	e649      	b.n	801cdfc <HAL_RCCEx_PeriphCLKConfig+0x620>
      status = ret;
 801d168:	462e      	mov	r6, r5
 801d16a:	e40c      	b.n	801c986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      status = ret;
 801d16c:	462e      	mov	r6, r5
 801d16e:	e622      	b.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      status = ret;
 801d170:	462e      	mov	r6, r5
 801d172:	e4bf      	b.n	801caf4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d174:	4f03      	ldr	r7, [pc, #12]	@ (801d184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 801d176:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 801d178:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801d17a:	f021 0103 	bic.w	r1, r1, #3
 801d17e:	4301      	orrs	r1, r0
 801d180:	64f9      	str	r1, [r7, #76]	@ 0x4c
 801d182:	e4cc      	b.n	801cb1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 801d184:	58024400 	.word	0x58024400
 801d188:	58024800 	.word	0x58024800
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801d18c:	0158      	lsls	r0, r3, #5
 801d18e:	f140 80d1 	bpl.w	801d334 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    switch (PeriphClkInit->DsiClockSelection)
 801d192:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      status = ret;
 801d194:	462e      	mov	r6, r5
    switch (PeriphClkInit->DsiClockSelection)
 801d196:	2900      	cmp	r1, #0
 801d198:	f47f ac7e 	bne.w	801ca98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801d19c:	e49a      	b.n	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      status = ret;
 801d19e:	462e      	mov	r6, r5
 801d1a0:	e5f7      	b.n	801cd92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 801d1a2:	462e      	mov	r6, r5
 801d1a4:	e4f1      	b.n	801cb8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      status = ret;
 801d1a6:	462e      	mov	r6, r5
 801d1a8:	e5b0      	b.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x530>
      status = ret;
 801d1aa:	462e      	mov	r6, r5
 801d1ac:	e43b      	b.n	801ca26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      status = ret;
 801d1ae:	462e      	mov	r6, r5
 801d1b0:	e583      	b.n	801ccba <HAL_RCCEx_PeriphCLKConfig+0x4de>
      status = ret;
 801d1b2:	462e      	mov	r6, r5
 801d1b4:	e558      	b.n	801cc68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d1b6:	4fc0      	ldr	r7, [pc, #768]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d1b8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 801d1ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d1bc:	f021 0107 	bic.w	r1, r1, #7
 801d1c0:	4301      	orrs	r1, r0
 801d1c2:	6579      	str	r1, [r7, #84]	@ 0x54
 801d1c4:	e502      	b.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d1c6:	4fbc      	ldr	r7, [pc, #752]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d1c8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 801d1cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d1ce:	f021 0107 	bic.w	r1, r1, #7
 801d1d2:	4301      	orrs	r1, r0
 801d1d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 801d1d6:	e51e      	b.n	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    switch (PeriphClkInit->RngClockSelection)
 801d1d8:	2900      	cmp	r1, #0
 801d1da:	f47f aedc 	bne.w	801cf96 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 801d1de:	e7af      	b.n	801d140 <HAL_RCCEx_PeriphCLKConfig+0x964>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d1e0:	49b5      	ldr	r1, [pc, #724]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d1e2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d1e4:	f001 0103 	and.w	r1, r1, #3
 801d1e8:	2903      	cmp	r1, #3
 801d1ea:	f000 81a8 	beq.w	801d53e <HAL_RCCEx_PeriphCLKConfig+0xd62>
 801d1ee:	2102      	movs	r1, #2
 801d1f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d1f4:	f7ff fa82 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d1f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d1fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d1fe:	2d00      	cmp	r5, #0
 801d200:	d1d5      	bne.n	801d1ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 801d202:	e552      	b.n	801ccaa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d204:	49ac      	ldr	r1, [pc, #688]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d206:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d208:	f001 0103 	and.w	r1, r1, #3
 801d20c:	2903      	cmp	r1, #3
 801d20e:	f000 81b2 	beq.w	801d576 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
 801d212:	2101      	movs	r1, #1
 801d214:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d218:	f7ff fa70 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d21c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d21e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d222:	2d00      	cmp	r5, #0
 801d224:	d1c1      	bne.n	801d1aa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 801d226:	f7ff bbf7 	b.w	801ca18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d22a:	49a3      	ldr	r1, [pc, #652]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d22c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d22e:	f001 0103 	and.w	r1, r1, #3
 801d232:	2903      	cmp	r1, #3
 801d234:	f43f adbd 	beq.w	801cdb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 801d238:	2101      	movs	r1, #1
 801d23a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d23e:	f7ff fa5d 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d242:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d244:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d248:	2d00      	cmp	r5, #0
 801d24a:	d18f      	bne.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x990>
 801d24c:	e6ee      	b.n	801d02c <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d24e:	499a      	ldr	r1, [pc, #616]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d250:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d252:	f001 0103 	and.w	r1, r1, #3
 801d256:	2903      	cmp	r1, #3
 801d258:	f000 821d 	beq.w	801d696 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 801d25c:	2102      	movs	r1, #2
 801d25e:	f104 0008 	add.w	r0, r4, #8
 801d262:	f7ff f9db 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801d266:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d268:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d26c:	2d00      	cmp	r5, #0
 801d26e:	f47f ac55 	bne.w	801cb1c <HAL_RCCEx_PeriphCLKConfig+0x340>
 801d272:	e77f      	b.n	801d174 <HAL_RCCEx_PeriphCLKConfig+0x998>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d274:	4990      	ldr	r1, [pc, #576]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d276:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d278:	f001 0103 	and.w	r1, r1, #3
 801d27c:	2903      	cmp	r1, #3
 801d27e:	f43f ae96 	beq.w	801cfae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 801d282:	2101      	movs	r1, #1
 801d284:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d288:	f7ff fa38 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d28c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801d28e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d292:	2d00      	cmp	r5, #0
 801d294:	f43f abea 	beq.w	801ca6c <HAL_RCCEx_PeriphCLKConfig+0x290>
 801d298:	e778      	b.n	801d18c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d29a:	4987      	ldr	r1, [pc, #540]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d29c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d29e:	f001 0103 	and.w	r1, r1, #3
 801d2a2:	2903      	cmp	r1, #3
 801d2a4:	f000 8159 	beq.w	801d55a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 801d2a8:	2102      	movs	r1, #2
 801d2aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d2ae:	f7ff fa25 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d2b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d2b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d2b8:	2d00      	cmp	r5, #0
 801d2ba:	f47f af7a 	bne.w	801d1b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 801d2be:	e4cb      	b.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d2c0:	497d      	ldr	r1, [pc, #500]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d2c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d2c4:	f001 0103 	and.w	r1, r1, #3
 801d2c8:	2903      	cmp	r1, #3
 801d2ca:	f43f ae89 	beq.w	801cfe0 <HAL_RCCEx_PeriphCLKConfig+0x804>
 801d2ce:	2102      	movs	r1, #2
 801d2d0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d2d4:	f7ff fa12 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d2d8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d2da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d2de:	2d00      	cmp	r5, #0
 801d2e0:	f47f af5d 	bne.w	801d19e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 801d2e4:	e54d      	b.n	801cd82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d2e6:	4974      	ldr	r1, [pc, #464]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d2e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d2ea:	f001 0103 	and.w	r1, r1, #3
 801d2ee:	2903      	cmp	r1, #3
 801d2f0:	f000 8117 	beq.w	801d522 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801d2f4:	2102      	movs	r1, #2
 801d2f6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d2fa:	f7ff f9ff 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d2fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801d300:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d304:	2d00      	cmp	r5, #0
 801d306:	f47f af4e 	bne.w	801d1a6 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 801d30a:	e4f7      	b.n	801ccfc <HAL_RCCEx_PeriphCLKConfig+0x520>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d30c:	496a      	ldr	r1, [pc, #424]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d30e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d310:	f001 0103 	and.w	r1, r1, #3
 801d314:	2903      	cmp	r1, #3
 801d316:	f000 8177 	beq.w	801d608 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 801d31a:	2102      	movs	r1, #2
 801d31c:	f104 0008 	add.w	r0, r4, #8
 801d320:	f7ff f97c 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801d324:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d326:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d32a:	2d00      	cmp	r5, #0
 801d32c:	f47f af1c 	bne.w	801d168 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801d330:	f7ff bb22 	b.w	801c978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      status = ret;
 801d334:	462e      	mov	r6, r5
 801d336:	f7ff bbcd 	b.w	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d33a:	485f      	ldr	r0, [pc, #380]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d33c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d33e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d342:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 801d344:	2d00      	cmp	r5, #0
 801d346:	f43f aafb 	beq.w	801c940 <HAL_RCCEx_PeriphCLKConfig+0x164>
      status = ret;
 801d34a:	462e      	mov	r6, r5
 801d34c:	f7ff bb00 	b.w	801c950 <HAL_RCCEx_PeriphCLKConfig+0x174>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d350:	4d59      	ldr	r5, [pc, #356]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d352:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801d354:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 801d358:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 801d35a:	f7ff ba67 	b.w	801c82c <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d35e:	4956      	ldr	r1, [pc, #344]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d360:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d362:	f001 0103 	and.w	r1, r1, #3
 801d366:	2903      	cmp	r1, #3
 801d368:	f43f aa73 	beq.w	801c852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801d36c:	2100      	movs	r1, #0
 801d36e:	f104 0008 	add.w	r0, r4, #8
 801d372:	f7ff f953 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801d376:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d378:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d37c:	2d00      	cmp	r5, #0
 801d37e:	f43f aea9 	beq.w	801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      status = ret;
 801d382:	462e      	mov	r6, r5
 801d384:	f7ff ba67 	b.w	801c856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d388:	494b      	ldr	r1, [pc, #300]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d38a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d38c:	f001 0103 	and.w	r1, r1, #3
 801d390:	2903      	cmp	r1, #3
 801d392:	f43f aa5e 	beq.w	801c852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801d396:	2100      	movs	r1, #0
 801d398:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d39c:	f7ff f9ae 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d3a0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d3a2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 801d3a6:	e692      	b.n	801d0ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d3a8:	4943      	ldr	r1, [pc, #268]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d3aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d3ac:	f001 0103 	and.w	r1, r1, #3
 801d3b0:	2903      	cmp	r1, #3
 801d3b2:	f000 80f4 	beq.w	801d59e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
 801d3b6:	2102      	movs	r1, #2
 801d3b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d3bc:	f7ff f99e 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d3c0:	4606      	mov	r6, r0
        break;
 801d3c2:	f7ff ba2f 	b.w	801c824 <HAL_RCCEx_PeriphCLKConfig+0x48>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d3c6:	493c      	ldr	r1, [pc, #240]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d3c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d3ca:	f001 0103 	and.w	r1, r1, #3
 801d3ce:	2903      	cmp	r1, #3
 801d3d0:	f000 8113 	beq.w	801d5fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 801d3d4:	2100      	movs	r1, #0
 801d3d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d3da:	f7ff f98f 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d3de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d3e0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 801d3e4:	f7ff baa9 	b.w	801c93a <HAL_RCCEx_PeriphCLKConfig+0x15e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d3e8:	4933      	ldr	r1, [pc, #204]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d3ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d3ec:	f001 0103 	and.w	r1, r1, #3
 801d3f0:	2903      	cmp	r1, #3
 801d3f2:	f000 80ea 	beq.w	801d5ca <HAL_RCCEx_PeriphCLKConfig+0xdee>
 801d3f6:	2100      	movs	r1, #0
 801d3f8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d3fc:	f7ff f97e 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d400:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d402:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d406:	2d00      	cmp	r5, #0
 801d408:	f43f aadf 	beq.w	801c9ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 801d40c:	462e      	mov	r6, r5
 801d40e:	f7ff bae3 	b.w	801c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d412:	4929      	ldr	r1, [pc, #164]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d414:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d416:	f001 0103 	and.w	r1, r1, #3
 801d41a:	2903      	cmp	r1, #3
 801d41c:	f000 80c9 	beq.w	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
 801d420:	2100      	movs	r1, #0
 801d422:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d426:	f7ff f969 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d42a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d42c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d430:	2d00      	cmp	r5, #0
 801d432:	f43f aa30 	beq.w	801c896 <HAL_RCCEx_PeriphCLKConfig+0xba>
      status = ret;
 801d436:	462e      	mov	r6, r5
 801d438:	f7ff ba34 	b.w	801c8a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d43c:	491e      	ldr	r1, [pc, #120]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d43e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d440:	f001 0103 	and.w	r1, r1, #3
 801d444:	2903      	cmp	r1, #3
 801d446:	f000 80cc 	beq.w	801d5e2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 801d44a:	2100      	movs	r1, #0
 801d44c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d450:	f7ff f954 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d454:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d456:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d45a:	2d00      	cmp	r5, #0
 801d45c:	f43f aa45 	beq.w	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      status = ret;
 801d460:	462e      	mov	r6, r5
 801d462:	f7ff ba4a 	b.w	801c8fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d466:	4814      	ldr	r0, [pc, #80]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d468:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d46a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d46e:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 801d470:	f7ff baa8 	b.w	801c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d474:	4810      	ldr	r0, [pc, #64]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d476:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d478:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d47c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 801d47e:	f7ff ba31 	b.w	801c8e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d482:	480d      	ldr	r0, [pc, #52]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d484:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801d486:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801d48a:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 801d48c:	f7ff ba00 	b.w	801c890 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d490:	4909      	ldr	r1, [pc, #36]	@ (801d4b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 801d492:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d494:	f001 0103 	and.w	r1, r1, #3
 801d498:	2903      	cmp	r1, #3
 801d49a:	f000 80d8 	beq.w	801d64e <HAL_RCCEx_PeriphCLKConfig+0xe72>
 801d49e:	2101      	movs	r1, #1
 801d4a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d4a4:	f7ff f92a 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d4a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d4aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d4ae:	2d00      	cmp	r5, #0
 801d4b0:	f47f abb0 	bne.w	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x438>
 801d4b4:	e687      	b.n	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 801d4b6:	bf00      	nop
 801d4b8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d4bc:	498a      	ldr	r1, [pc, #552]	@ (801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 801d4be:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d4c0:	f001 0103 	and.w	r1, r1, #3
 801d4c4:	2903      	cmp	r1, #3
 801d4c6:	f000 80c6 	beq.w	801d656 <HAL_RCCEx_PeriphCLKConfig+0xe7a>
 801d4ca:	2101      	movs	r1, #1
 801d4cc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d4d0:	f7ff f914 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d4d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d4d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d4da:	2d00      	cmp	r5, #0
 801d4dc:	f47f ab75 	bne.w	801cbca <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 801d4e0:	e669      	b.n	801d1b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d4e2:	4981      	ldr	r1, [pc, #516]	@ (801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 801d4e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d4e6:	f001 0103 	and.w	r1, r1, #3
 801d4ea:	2903      	cmp	r1, #3
 801d4ec:	f43f ab4b 	beq.w	801cb86 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 801d4f0:	2101      	movs	r1, #1
 801d4f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801d4f6:	f7ff f901 	bl	801c6fc <RCCEx_PLL3_Config.part.0>
 801d4fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d4fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d500:	2d00      	cmp	r5, #0
 801d502:	f47f ae4e 	bne.w	801d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 801d506:	e580      	b.n	801d00a <HAL_RCCEx_PeriphCLKConfig+0x82e>
  return HAL_ERROR;
 801d508:	2001      	movs	r0, #1
}
 801d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d50e:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 801d512:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801d516:	f43f abee 	beq.w	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 801d51a:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 801d51e:	f43f abea 	beq.w	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      status = ret;
 801d522:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d524:	4635      	mov	r5, r6
 801d526:	f7ff bbf1 	b.w	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d52a:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 801d52e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 801d532:	f43f abb7 	beq.w	801cca4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 801d536:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 801d53a:	f43f abb3 	beq.w	801cca4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      status = ret;
 801d53e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d540:	4635      	mov	r5, r6
 801d542:	f7ff bbba 	b.w	801ccba <HAL_RCCEx_PeriphCLKConfig+0x4de>
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d546:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 801d54a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801d54e:	f43f ab80 	beq.w	801cc52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801d552:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 801d556:	f43f ab7c 	beq.w	801cc52 <HAL_RCCEx_PeriphCLKConfig+0x476>
      status = ret;
 801d55a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d55c:	4635      	mov	r5, r6
 801d55e:	f7ff bb83 	b.w	801cc68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    switch (PeriphClkInit->Spi45ClockSelection)
 801d562:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 801d566:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 801d56a:	f43f aa52 	beq.w	801ca12 <HAL_RCCEx_PeriphCLKConfig+0x236>
 801d56e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 801d572:	f43f aa4e 	beq.w	801ca12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      status = ret;
 801d576:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d578:	4635      	mov	r5, r6
 801d57a:	f7ff ba54 	b.w	801ca26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    return HAL_ERROR;
 801d57e:	2501      	movs	r5, #1
 801d580:	e4a0      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 801d582:	2501      	movs	r5, #1
 801d584:	e4af      	b.n	801cee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 801d586:	2501      	movs	r5, #1
 801d588:	e4be      	b.n	801cf08 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    return HAL_ERROR;
 801d58a:	2501      	movs	r5, #1
 801d58c:	e4cd      	b.n	801cf2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d58e:	0691      	lsls	r1, r2, #26
 801d590:	d5ba      	bpl.n	801d508 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
    return HAL_ERROR;
 801d592:	2501      	movs	r5, #1
 801d594:	e4dd      	b.n	801cf52 <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SpdifrxClockSelection)
 801d596:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 801d59a:	f43f a947 	beq.w	801c82c <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = HAL_ERROR;
 801d59e:	2601      	movs	r6, #1
 801d5a0:	f7ff b94b 	b.w	801c83a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->Sai23ClockSelection)
 801d5a4:	29c0      	cmp	r1, #192	@ 0xc0
 801d5a6:	f43f a973 	beq.w	801c890 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 801d5aa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801d5ae:	f43f a96f 	beq.w	801c890 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      status = ret;
 801d5b2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d5b4:	4635      	mov	r5, r6
 801d5b6:	f7ff b975 	b.w	801c8a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Spi123ClockSelection)
 801d5ba:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 801d5be:	f43f aa01 	beq.w	801c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801d5c2:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801d5c6:	f43f a9fd 	beq.w	801c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      status = ret;
 801d5ca:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d5cc:	4635      	mov	r5, r6
 801d5ce:	f7ff ba03 	b.w	801c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Sai4AClockSelection)
 801d5d2:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 801d5d6:	f43f a985 	beq.w	801c8e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 801d5da:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801d5de:	f43f a981 	beq.w	801c8e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      status = ret;
 801d5e2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d5e4:	4635      	mov	r5, r6
 801d5e6:	f7ff b988 	b.w	801c8fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 801d5ea:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 801d5ee:	f43f a9a4 	beq.w	801c93a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 801d5f2:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 801d5f6:	f43f a9a0 	beq.w	801c93a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      status = ret;
 801d5fa:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d5fc:	4635      	mov	r5, r6
 801d5fe:	f7ff b9a7 	b.w	801c950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 801d602:	2930      	cmp	r1, #48	@ 0x30
 801d604:	f43f a9b5 	beq.w	801c972 <HAL_RCCEx_PeriphCLKConfig+0x196>
      status = ret;
 801d608:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d60a:	4635      	mov	r5, r6
 801d60c:	f7ff b9bb 	b.w	801c986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        ret = HAL_TIMEOUT;
 801d610:	2503      	movs	r5, #3
      status = ret;
 801d612:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d614:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d618:	f7ff ba84 	b.w	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x348>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d61c:	6863      	ldr	r3, [r4, #4]
 801d61e:	069a      	lsls	r2, r3, #26
 801d620:	f57f af72 	bpl.w	801d508 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 801d624:	4605      	mov	r5, r0
 801d626:	e494      	b.n	801cf52 <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d628:	492f      	ldr	r1, [pc, #188]	@ (801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 801d62a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801d62c:	f001 0103 	and.w	r1, r1, #3
 801d630:	2903      	cmp	r1, #3
 801d632:	f43f aa5d 	beq.w	801caf0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 801d636:	2101      	movs	r1, #1
 801d638:	f104 0008 	add.w	r0, r4, #8
 801d63c:	f7fe ffee 	bl	801c61c <RCCEx_PLL2_Config.part.0>
 801d640:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d642:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 801d646:	2d00      	cmp	r5, #0
 801d648:	f47f ad92 	bne.w	801d170 <HAL_RCCEx_PeriphCLKConfig+0x994>
 801d64c:	e4c0      	b.n	801cfd0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      status = ret;
 801d64e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d650:	4635      	mov	r5, r6
 801d652:	f7ff bae0 	b.w	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      status = ret;
 801d656:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d658:	4635      	mov	r5, r6
 801d65a:	f7ff bab7 	b.w	801cbcc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
        status = HAL_ERROR;
 801d65e:	2601      	movs	r6, #1
 801d660:	f7ff bb6a 	b.w	801cd38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        status = HAL_ERROR;
 801d664:	2601      	movs	r6, #1
 801d666:	f7ff bb59 	b.w	801cd1c <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d66a:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
        status = HAL_ERROR;
 801d66e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d670:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d674:	f7ff bb52 	b.w	801cd1c <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d678:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
        status = HAL_ERROR;
 801d67c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d67e:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d682:	f7ff bb59 	b.w	801cd38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    switch (PeriphClkInit->DsiClockSelection)
 801d686:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      status = ret;
 801d688:	2601      	movs	r6, #1
    switch (PeriphClkInit->DsiClockSelection)
 801d68a:	2900      	cmp	r1, #0
 801d68c:	f47f aa04 	bne.w	801ca98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        ret = HAL_ERROR;
 801d690:	4635      	mov	r5, r6
 801d692:	f7ff ba1f 	b.w	801cad4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      status = ret;
 801d696:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 801d698:	4635      	mov	r5, r6
 801d69a:	f7ff ba40 	b.w	801cb1e <HAL_RCCEx_PeriphCLKConfig+0x342>
        tickstart = HAL_GetTick();
 801d69e:	f7fa f8b3 	bl	8017808 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d6a2:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
        tickstart = HAL_GetTick();
 801d6a6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d6a8:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d6ac:	e004      	b.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d6ae:	f7fa f8ab 	bl	8017808 <HAL_GetTick>
 801d6b2:	1bc0      	subs	r0, r0, r7
 801d6b4:	4548      	cmp	r0, r9
 801d6b6:	d810      	bhi.n	801d6da <HAL_RCCEx_PeriphCLKConfig+0xefe>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d6b8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801d6bc:	079b      	lsls	r3, r3, #30
 801d6be:	d5f6      	bpl.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d6c0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 801d6c4:	e4e9      	b.n	801d09a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 801d6c6:	4808      	ldr	r0, [pc, #32]	@ (801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 801d6c8:	4a08      	ldr	r2, [pc, #32]	@ (801d6ec <HAL_RCCEx_PeriphCLKConfig+0xf10>)
 801d6ca:	6901      	ldr	r1, [r0, #16]
 801d6cc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 801d6d0:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 801d6d4:	430a      	orrs	r2, r1
 801d6d6:	6102      	str	r2, [r0, #16]
 801d6d8:	e4ea      	b.n	801d0b0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
        status = ret;
 801d6da:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d6dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d6e0:	4635      	mov	r5, r6
 801d6e2:	f7ff ba1f 	b.w	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x348>
 801d6e6:	bf00      	nop
 801d6e8:	58024400 	.word	0x58024400
 801d6ec:	00ffffcf 	.word	0x00ffffcf

0801d6f0 <imlib_yuv_to_rgb>:
    return COLOR_R8_G8_B8_TO_RGB565(red, green, blue);
}

// https://en.wikipedia.org/wiki/YCbCr -> JPEG Conversion
uint16_t imlib_yuv_to_rgb(uint8_t y, int8_t u, int8_t v)
{
 801d6f0:	b410      	push	{r4}
    uint32_t r = IM_MAX(IM_MIN(y + ((91881 * v) >> 16), COLOR_R8_MAX), COLOR_R8_MIN);
 801d6f2:	4c13      	ldr	r4, [pc, #76]	@ (801d740 <imlib_yuv_to_rgb+0x50>)
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);

    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801d6f4:	4b13      	ldr	r3, [pc, #76]	@ (801d744 <imlib_yuv_to_rgb+0x54>)
    uint32_t r = IM_MAX(IM_MIN(y + ((91881 * v) >> 16), COLOR_R8_MAX), COLOR_R8_MIN);
 801d6f6:	fb02 f404 	mul.w	r4, r2, r4
 801d6fa:	eb00 4424 	add.w	r4, r0, r4, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801d6fe:	f384 0408 	usat	r4, #8, r4
 801d702:	ea03 2304 	and.w	r3, r3, r4, lsl #8
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);
 801d706:	4c10      	ldr	r4, [pc, #64]	@ (801d748 <imlib_yuv_to_rgb+0x58>)
 801d708:	fb04 fc01 	mul.w	ip, r4, r1
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 801d70c:	f645 041a 	movw	r4, #22554	@ 0x581a
    uint32_t b = IM_MAX(IM_MIN(y + ((116130 * u) >> 16), COLOR_B8_MAX), COLOR_B8_MIN);
 801d710:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801d714:	f38c 0c08 	usat	ip, #8, ip
 801d718:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 801d71c:	f24b 6cd2 	movw	ip, #46802	@ 0xb6d2
 801d720:	fb0c f202 	mul.w	r2, ip, r2
 801d724:	fb04 2101 	mla	r1, r4, r1, r2
}
 801d728:	f85d 4b04 	ldr.w	r4, [sp], #4
    uint32_t g = IM_MAX(IM_MIN(y - (((22554 * u) + (46802 * v)) >> 16), COLOR_G8_MAX), COLOR_G8_MIN);
 801d72c:	eba0 4021 	sub.w	r0, r0, r1, asr #16
    return COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801d730:	f380 0008 	usat	r0, #8, r0
 801d734:	00c0      	lsls	r0, r0, #3
 801d736:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d73a:	4318      	orrs	r0, r3
}
 801d73c:	b280      	uxth	r0, r0
 801d73e:	4770      	bx	lr
 801d740:	000166e9 	.word	0x000166e9
 801d744:	fffff800 	.word	0xfffff800
 801d748:	0001c5a2 	.word	0x0001c5a2

0801d74c <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 801d74c:	b150      	cbz	r0, 801d764 <STM32Ipl_ImageDataSize+0x18>
	switch ((uint32_t)format) {
 801d74e:	7a02      	ldrb	r2, [r0, #8]
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 801d750:	e9d0 3000 	ldrd	r3, r0, [r0]
	switch ((uint32_t)format) {
 801d754:	2a04      	cmp	r2, #4
 801d756:	d804      	bhi.n	801d762 <STM32Ipl_ImageDataSize+0x16>
 801d758:	e8df f002 	tbb	[pc, r2]
 801d75c:	050e0508 	.word	0x050e0508
 801d760:	12          	.byte	0x12
 801d761:	00          	.byte	0x00
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 801d762:	2000      	movs	r0, #0
}
 801d764:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 801d766:	fb03 f000 	mul.w	r0, r3, r0
 801d76a:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 801d76c:	331f      	adds	r3, #31
 801d76e:	095b      	lsrs	r3, r3, #5
 801d770:	fb00 f303 	mul.w	r3, r0, r3
 801d774:	0098      	lsls	r0, r3, #2
 801d776:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 801d778:	fb00 f303 	mul.w	r3, r0, r3
 801d77c:	0058      	lsls	r0, r3, #1
 801d77e:	4770      	bx	lr
			return width * height * 3;
 801d780:	fb03 f000 	mul.w	r0, r3, r0
 801d784:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d788:	4770      	bx	lr
 801d78a:	bf00      	nop

0801d78c <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 801d78c:	6883      	ldr	r3, [r0, #8]
 801d78e:	2b04      	cmp	r3, #4
 801d790:	d810      	bhi.n	801d7b4 <STM32Ipl_ImageFormatSupported+0x28>
 801d792:	e8df f003 	tbb	[pc, r3]
 801d796:	0309      	.short	0x0309
 801d798:	0f0d      	.short	0x0f0d
 801d79a:	0b          	.byte	0x0b
 801d79b:	00          	.byte	0x00
 801d79c:	2302      	movs	r3, #2

		default:
			return false;
	}

	return (format & formats);
 801d79e:	4219      	tst	r1, r3
 801d7a0:	bf14      	ite	ne
 801d7a2:	2001      	movne	r0, #1
 801d7a4:	2000      	moveq	r0, #0
 801d7a6:	4770      	bx	lr
	switch (img->bpp) {
 801d7a8:	2301      	movs	r3, #1
 801d7aa:	e7f8      	b.n	801d79e <STM32Ipl_ImageFormatSupported+0x12>
			break;
 801d7ac:	2308      	movs	r3, #8
 801d7ae:	e7f6      	b.n	801d79e <STM32Ipl_ImageFormatSupported+0x12>
			break;
 801d7b0:	2304      	movs	r3, #4
 801d7b2:	e7f4      	b.n	801d79e <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 801d7b4:	2000      	movs	r0, #0
}
 801d7b6:	4770      	bx	lr

0801d7b8 <STM32Ipl_ConvertRev>:
 * otherwise it is executed normally (from the first to the last pixel).
 * @return		  stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_ConvertRev(const image_t *src, image_t *dst, bool reverse)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 801d7b8:	2800      	cmp	r0, #0
 801d7ba:	f000 85ed 	beq.w	801e398 <STM32Ipl_ConvertRev+0xbe0>
 801d7be:	68c3      	ldr	r3, [r0, #12]
{
 801d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c4:	4682      	mov	sl, r0
 801d7c6:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d056      	beq.n	801d87a <STM32Ipl_ConvertRev+0xc2>
 801d7cc:	4689      	mov	r9, r1
 801d7ce:	2900      	cmp	r1, #0
 801d7d0:	d053      	beq.n	801d87a <STM32Ipl_ConvertRev+0xc2>
 801d7d2:	68cb      	ldr	r3, [r1, #12]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d050      	beq.n	801d87a <STM32Ipl_ConvertRev+0xc2>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801d7d8:	210f      	movs	r1, #15
 801d7da:	4690      	mov	r8, r2
 801d7dc:	f7ff ffd6 	bl	801d78c <STM32Ipl_ImageFormatSupported>
 801d7e0:	2800      	cmp	r0, #0
 801d7e2:	d04f      	beq.n	801d884 <STM32Ipl_ConvertRev+0xcc>
	STM32IPL_CHECK_FORMAT(dst, STM32IPL_IF_ALL)
 801d7e4:	210f      	movs	r1, #15
 801d7e6:	4648      	mov	r0, r9
 801d7e8:	f7ff ffd0 	bl	801d78c <STM32Ipl_ImageFormatSupported>
 801d7ec:	2800      	cmp	r0, #0
 801d7ee:	d049      	beq.n	801d884 <STM32Ipl_ConvertRev+0xcc>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 801d7f0:	f8da 6000 	ldr.w	r6, [sl]
 801d7f4:	f8d9 3000 	ldr.w	r3, [r9]
 801d7f8:	429e      	cmp	r6, r3
 801d7fa:	d13e      	bne.n	801d87a <STM32Ipl_ConvertRev+0xc2>
 801d7fc:	f8da 7004 	ldr.w	r7, [sl, #4]
 801d800:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d804:	429f      	cmp	r7, r3
 801d806:	d138      	bne.n	801d87a <STM32Ipl_ConvertRev+0xc2>

	if (src->data == dst->data)
 801d808:	f8da 500c 	ldr.w	r5, [sl, #12]
 801d80c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801d810:	42a5      	cmp	r5, r4
 801d812:	d032      	beq.n	801d87a <STM32Ipl_ConvertRev+0xc2>
		return stm32ipl_err_InvalidParameter;

	switch (src->bpp) {
 801d814:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d818:	2b04      	cmp	r3, #4
 801d81a:	d833      	bhi.n	801d884 <STM32Ipl_ConvertRev+0xcc>
 801d81c:	e8df f003 	tbb	[pc, r3]
 801d820:	3224190e 	.word	0x3224190e
 801d824:	03          	.byte	0x03
 801d825:	00          	.byte	0x00
			}
			break;
		}

		case IMAGE_BPP_RGB888: {
			switch (dst->bpp) {
 801d826:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d82a:	2b04      	cmp	r3, #4
 801d82c:	d82a      	bhi.n	801d884 <STM32Ipl_ConvertRev+0xcc>
 801d82e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d832:	0284      	.short	0x0284
 801d834:	01a701c9 	.word	0x01a701c9
 801d838:	023b0029 	.word	0x023b0029
			switch (dst->bpp) {
 801d83c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d840:	2b04      	cmp	r3, #4
 801d842:	d81f      	bhi.n	801d884 <STM32Ipl_ConvertRev+0xcc>
 801d844:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d848:	024e0212 	.word	0x024e0212
 801d84c:	001e0094 	.word	0x001e0094
 801d850:	01e0      	.short	0x01e0
			switch (dst->bpp) {
 801d852:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d856:	2b04      	cmp	r3, #4
 801d858:	d814      	bhi.n	801d884 <STM32Ipl_ConvertRev+0xcc>
 801d85a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d85e:	015a      	.short	0x015a
 801d860:	00b800cd 	.word	0x00b800cd
 801d864:	01410013 	.word	0x01410013
			switch (dst->bpp) {
 801d868:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d86c:	2b04      	cmp	r3, #4
 801d86e:	d809      	bhi.n	801d884 <STM32Ipl_ConvertRev+0xcc>
 801d870:	e8df f003 	tbb	[pc, r3]
 801d874:	083451df 	.word	0x083451df
 801d878:	0b          	.byte	0x0b
 801d879:	00          	.byte	0x00
	STM32IPL_CHECK_VALID_IMAGE(src)
 801d87a:	f06f 0001 	mvn.w	r0, #1
		default:
			return stm32ipl_err_UnsupportedFormat;
	}

	return stm32ipl_err_Ok;
}
 801d87e:	b007      	add	sp, #28
 801d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801d884:	f06f 0004 	mvn.w	r0, #4
 801d888:	e7f9      	b.n	801d87e <STM32Ipl_ConvertRev+0xc6>
	uint32_t size = width * height;
 801d88a:	fb06 f707 	mul.w	r7, r6, r7
	if (reverse) {
 801d88e:	f1b8 0f00 	cmp.w	r8, #0
 801d892:	f040 844c 	bne.w	801e12e <STM32Ipl_ConvertRev+0x976>
		for (uint32_t i = 0; i < size; i++) {
 801d896:	2f00      	cmp	r7, #0
 801d898:	f000 8095 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801d89c:	3403      	adds	r4, #3
 801d89e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d8a2:	19e0      	adds	r0, r4, r7
			uint16_t v = *srcData++;
 801d8a4:	f835 3b02 	ldrh.w	r3, [r5], #2
		for (uint32_t i = 0; i < size; i++) {
 801d8a8:	3403      	adds	r4, #3
			*dst++ = COLOR_RGB565_TO_B8(v);
 801d8aa:	f3c3 0282 	ubfx	r2, r3, #2, #3
 801d8ae:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
 801d8b2:	f804 2c06 	strb.w	r2, [r4, #-6]
			*dst++ = COLOR_RGB565_TO_G8(v);
 801d8b6:	08da      	lsrs	r2, r3, #3
			*dst++ = COLOR_RGB565_TO_R8(v);
 801d8b8:	0a1b      	lsrs	r3, r3, #8
		for (uint32_t i = 0; i < size; i++) {
 801d8ba:	42a0      	cmp	r0, r4
			*dst++ = COLOR_RGB565_TO_G8(v);
 801d8bc:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 801d8c0:	f3c2 1281 	ubfx	r2, r2, #6, #2
 801d8c4:	ea42 0201 	orr.w	r2, r2, r1
 801d8c8:	f804 2c05 	strb.w	r2, [r4, #-5]
			*dst++ = COLOR_RGB565_TO_R8(v);
 801d8cc:	f003 02f8 	and.w	r2, r3, #248	@ 0xf8
 801d8d0:	ea42 1353 	orr.w	r3, r2, r3, lsr #5
 801d8d4:	f804 3c04 	strb.w	r3, [r4, #-4]
		for (uint32_t i = 0; i < size; i++) {
 801d8d8:	d1e4      	bne.n	801d8a4 <STM32Ipl_ConvertRev+0xec>
 801d8da:	e074      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 801d8dc:	4648      	mov	r0, r9
 801d8de:	f7ff ff35 	bl	801d74c <STM32Ipl_ImageDataSize>
	if (reverse) {
 801d8e2:	f1b8 0f00 	cmp.w	r8, #0
 801d8e6:	f040 83e0 	bne.w	801e0aa <STM32Ipl_ConvertRev+0x8f2>
		for (uint32_t i = 0; i < size; i++)
 801d8ea:	2800      	cmp	r0, #0
 801d8ec:	d06b      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801d8ee:	1e43      	subs	r3, r0, #1
 801d8f0:	2b05      	cmp	r3, #5
 801d8f2:	f105 0301 	add.w	r3, r5, #1
 801d8f6:	d903      	bls.n	801d900 <STM32Ipl_ConvertRev+0x148>
 801d8f8:	1ae2      	subs	r2, r4, r3
 801d8fa:	2a02      	cmp	r2, #2
 801d8fc:	f200 84e6 	bhi.w	801e2cc <STM32Ipl_ConvertRev+0xb14>
 801d900:	3c01      	subs	r4, #1
 801d902:	4428      	add	r0, r5
			*dst++ = *src++;
 801d904:	f813 2c01 	ldrb.w	r2, [r3, #-1]
		for (uint32_t i = 0; i < size; i++)
 801d908:	4298      	cmp	r0, r3
 801d90a:	f103 0301 	add.w	r3, r3, #1
			*dst++ = *src++;
 801d90e:	f804 2f01 	strb.w	r2, [r4, #1]!
		for (uint32_t i = 0; i < size; i++)
 801d912:	d1f7      	bne.n	801d904 <STM32Ipl_ConvertRev+0x14c>
 801d914:	e057      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t size = width * height;
 801d916:	fb06 f707 	mul.w	r7, r6, r7
	if (reverse) {
 801d91a:	f1b8 0f00 	cmp.w	r8, #0
 801d91e:	f040 82b2 	bne.w	801de86 <STM32Ipl_ConvertRev+0x6ce>
		for (uint32_t i = 0; i < size; i++) {
 801d922:	2f00      	cmp	r7, #0
 801d924:	d04f      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801d926:	3d02      	subs	r5, #2
 801d928:	19e1      	adds	r1, r4, r7
			*dst++ = COLOR_RGB565_TO_GRAYSCALE(*srcData);
 801d92a:	2026      	movs	r0, #38	@ 0x26
 801d92c:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 801d930:	08d6      	lsrs	r6, r2, #3
 801d932:	0a17      	lsrs	r7, r2, #8
 801d934:	f006 03fc 	and.w	r3, r6, #252	@ 0xfc
 801d938:	f3c6 1681 	ubfx	r6, r6, #6, #2
 801d93c:	00d2      	lsls	r2, r2, #3
 801d93e:	4333      	orrs	r3, r6
 801d940:	f007 06f8 	and.w	r6, r7, #248	@ 0xf8
 801d944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d948:	ea46 1657 	orr.w	r6, r6, r7, lsr #5
 801d94c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801d950:	fb00 3306 	mla	r3, r0, r6, r3
 801d954:	f002 06f8 	and.w	r6, r2, #248	@ 0xf8
 801d958:	f3c2 1242 	ubfx	r2, r2, #5, #3
 801d95c:	4332      	orrs	r2, r6
 801d95e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801d962:	4413      	add	r3, r2
 801d964:	11db      	asrs	r3, r3, #7
 801d966:	f804 3b01 	strb.w	r3, [r4], #1
		for (uint32_t i = 0; i < size; i++) {
 801d96a:	428c      	cmp	r4, r1
 801d96c:	d1de      	bne.n	801d92c <STM32Ipl_ConvertRev+0x174>
 801d96e:	e02a      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801d970:	f106 031f 	add.w	r3, r6, #31
 801d974:	095b      	lsrs	r3, r3, #5
	if (reverse) {
 801d976:	f1b8 0f00 	cmp.w	r8, #0
 801d97a:	f040 83a3 	bne.w	801e0c4 <STM32Ipl_ConvertRev+0x90c>
		for (uint32_t y = 0; y < height; y++) {
 801d97e:	b317      	cbz	r7, 801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData += srcRowLen;
 801d980:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801d984:	b1fe      	cbz	r6, 801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801d986:	0073      	lsls	r3, r6, #1
 801d988:	9301      	str	r3, [sp, #4]
			for (int32_t x = width - 1; x >= 0; x--)
 801d98a:	46a3      	mov	fp, r4
			for (uint32_t x = 0; x < width; x++)
 801d98c:	f04f 0900 	mov.w	r9, #0
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801d990:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801d994:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801d998:	f009 021f 	and.w	r2, r9, #31
			for (uint32_t x = 0; x < width; x++)
 801d99c:	f109 0901 	add.w	r9, r9, #1
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801d9a0:	40d0      	lsrs	r0, r2
 801d9a2:	2200      	movs	r2, #0
 801d9a4:	f340 0000 	sbfx	r0, r0, #0, #1
 801d9a8:	4611      	mov	r1, r2
 801d9aa:	b2c0      	uxtb	r0, r0
 801d9ac:	f7ff fea0 	bl	801d6f0 <imlib_yuv_to_rgb>
			for (uint32_t x = 0; x < width; x++)
 801d9b0:	454e      	cmp	r6, r9
				*dstData++ = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801d9b2:	f82b 0b02 	strh.w	r0, [fp], #2
			for (uint32_t x = 0; x < width; x++)
 801d9b6:	d1eb      	bne.n	801d990 <STM32Ipl_ConvertRev+0x1d8>
		for (uint32_t y = 0; y < height; y++) {
 801d9b8:	f108 0801 	add.w	r8, r8, #1
 801d9bc:	9b01      	ldr	r3, [sp, #4]
			srcData += srcRowLen;
 801d9be:	4455      	add	r5, sl
		for (uint32_t y = 0; y < height; y++) {
 801d9c0:	4547      	cmp	r7, r8
 801d9c2:	441c      	add	r4, r3
 801d9c4:	d1e1      	bne.n	801d98a <STM32Ipl_ConvertRev+0x1d2>
	return stm32ipl_err_Ok;
 801d9c6:	2000      	movs	r0, #0
}
 801d9c8:	b007      	add	sp, #28
 801d9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t size = width * height;
 801d9ce:	fb06 f707 	mul.w	r7, r6, r7
	if (reverse) {
 801d9d2:	f1b8 0f00 	cmp.w	r8, #0
 801d9d6:	f040 834f 	bne.w	801e078 <STM32Ipl_ConvertRev+0x8c0>
		for (uint32_t i = 0; i < size; i++) {
 801d9da:	2f00      	cmp	r7, #0
 801d9dc:	d0f3      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801d9de:	3d01      	subs	r5, #1
 801d9e0:	442f      	add	r7, r5
			*dstData++ = COLOR_GRAYSCALE_TO_RGB565(*src);
 801d9e2:	2200      	movs	r2, #0
 801d9e4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801d9e8:	4611      	mov	r1, r2
 801d9ea:	f7ff fe81 	bl	801d6f0 <imlib_yuv_to_rgb>
		for (uint32_t i = 0; i < size; i++) {
 801d9ee:	42af      	cmp	r7, r5
			*dstData++ = COLOR_GRAYSCALE_TO_RGB565(*src);
 801d9f0:	f824 0b02 	strh.w	r0, [r4], #2
		for (uint32_t i = 0; i < size; i++) {
 801d9f4:	d1f5      	bne.n	801d9e2 <STM32Ipl_ConvertRev+0x22a>
 801d9f6:	e7e6      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 801d9f8:	4648      	mov	r0, r9
 801d9fa:	f7ff fea7 	bl	801d74c <STM32Ipl_ImageDataSize>
	if (reverse) {
 801d9fe:	f1b8 0f00 	cmp.w	r8, #0
 801da02:	f040 841d 	bne.w	801e240 <STM32Ipl_ConvertRev+0xa88>
		for (uint32_t i = 0; i < size; i++)
 801da06:	2800      	cmp	r0, #0
 801da08:	d0dd      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801da0a:	1e43      	subs	r3, r0, #1
 801da0c:	2b05      	cmp	r3, #5
 801da0e:	f105 0301 	add.w	r3, r5, #1
 801da12:	d903      	bls.n	801da1c <STM32Ipl_ConvertRev+0x264>
 801da14:	1ae2      	subs	r2, r4, r3
 801da16:	2a02      	cmp	r2, #2
 801da18:	f200 84a0 	bhi.w	801e35c <STM32Ipl_ConvertRev+0xba4>
 801da1c:	3c01      	subs	r4, #1
 801da1e:	4428      	add	r0, r5
			*dst++ = *src++;
 801da20:	f813 2c01 	ldrb.w	r2, [r3, #-1]
		for (uint32_t i = 0; i < size; i++)
 801da24:	4298      	cmp	r0, r3
 801da26:	f103 0301 	add.w	r3, r3, #1
			*dst++ = *src++;
 801da2a:	f804 2f01 	strb.w	r2, [r4, #1]!
		for (uint32_t i = 0; i < size; i++)
 801da2e:	d1f7      	bne.n	801da20 <STM32Ipl_ConvertRev+0x268>
 801da30:	e7c9      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801da32:	f106 031f 	add.w	r3, r6, #31
 801da36:	095b      	lsrs	r3, r3, #5
	if (reverse) {
 801da38:	f1b8 0f00 	cmp.w	r8, #0
 801da3c:	f040 839f 	bne.w	801e17e <STM32Ipl_ConvertRev+0x9c6>
		for (uint32_t y = 0; y < height; y++) {
 801da40:	2f00      	cmp	r7, #0
 801da42:	d0c0      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData += dstRowLen;
 801da44:	0099      	lsls	r1, r3, #2
			srcData += width;
 801da46:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 801da4a:	2e00      	cmp	r6, #0
 801da4c:	d0bb      	beq.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801da4e:	46c1      	mov	r9, r8
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801da50:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 801da54:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 801da58:	468e      	mov	lr, r1
			for (uint32_t x = 0; x < width; x++)
 801da5a:	f1a5 0802 	sub.w	r8, r5, #2
 801da5e:	2000      	movs	r0, #0
 801da60:	9501      	str	r5, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801da62:	f838 1f02 	ldrh.w	r1, [r8, #2]!
 801da66:	f000 051f 	and.w	r5, r0, #31
 801da6a:	ea4f 1c50 	mov.w	ip, r0, lsr #5
			for (uint32_t x = 0; x < width; x++)
 801da6e:	3001      	adds	r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801da70:	08cb      	lsrs	r3, r1, #3
 801da72:	ea4f 2a11 	mov.w	sl, r1, lsr #8
 801da76:	f854 702c 	ldr.w	r7, [r4, ip, lsl #2]
 801da7a:	f003 02fc 	and.w	r2, r3, #252	@ 0xfc
 801da7e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801da82:	00c9      	lsls	r1, r1, #3
 801da84:	431a      	orrs	r2, r3
 801da86:	f00a 03f8 	and.w	r3, sl, #248	@ 0xf8
 801da8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801da8e:	ea43 135a 	orr.w	r3, r3, sl, lsr #5
 801da92:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801da96:	fb0b 2303 	mla	r3, fp, r3, r2
 801da9a:	f001 02f8 	and.w	r2, r1, #248	@ 0xf8
 801da9e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 801daa2:	430a      	orrs	r2, r1
 801daa4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801daa8:	4413      	add	r3, r2
 801daaa:	2201      	movs	r2, #1
 801daac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801dab0:	bfb4      	ite	lt
 801dab2:	2300      	movlt	r3, #0
 801dab4:	2301      	movge	r3, #1
			for (uint32_t x = 0; x < width; x++)
 801dab6:	4286      	cmp	r6, r0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801dab8:	fa03 f305 	lsl.w	r3, r3, r5
 801dabc:	fa02 f505 	lsl.w	r5, r2, r5
 801dac0:	ea27 0705 	bic.w	r7, r7, r5
 801dac4:	ea43 0307 	orr.w	r3, r3, r7
 801dac8:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
			for (uint32_t x = 0; x < width; x++)
 801dacc:	d1c9      	bne.n	801da62 <STM32Ipl_ConvertRev+0x2aa>
			srcData += width;
 801dace:	9b03      	ldr	r3, [sp, #12]
		for (uint32_t y = 0; y < height; y++) {
 801dad0:	4491      	add	r9, r2
 801dad2:	9d01      	ldr	r5, [sp, #4]
			dstData += dstRowLen;
 801dad4:	4474      	add	r4, lr
			srcData += width;
 801dad6:	441d      	add	r5, r3
		for (uint32_t y = 0; y < height; y++) {
 801dad8:	9b02      	ldr	r3, [sp, #8]
 801dada:	454b      	cmp	r3, r9
 801dadc:	d1bd      	bne.n	801da5a <STM32Ipl_ConvertRev+0x2a2>
 801dade:	e772      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t size = width * height;
 801dae0:	fb06 f707 	mul.w	r7, r6, r7
	if (reverse) {
 801dae4:	f1b8 0f00 	cmp.w	r8, #0
 801dae8:	f040 83b8 	bne.w	801e25c <STM32Ipl_ConvertRev+0xaa4>
		for (uint32_t i = 0; i < size; i++) {
 801daec:	2f00      	cmp	r7, #0
 801daee:	f43f af6a 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801daf2:	19e9      	adds	r1, r5, r7
			uint8_t v = *src++;
 801daf4:	f815 3b01 	ldrb.w	r3, [r5], #1
			*dst++ = v;
 801daf8:	f04f 0200 	mov.w	r2, #0
 801dafc:	f363 0207 	bfi	r2, r3, #0, #8
		for (uint32_t i = 0; i < size; i++) {
 801db00:	428d      	cmp	r5, r1
			*dst++ = v;
 801db02:	f363 220f 	bfi	r2, r3, #8, #8
 801db06:	f824 2b03 	strh.w	r2, [r4], #3
			*dst++ = v;
 801db0a:	f804 3c01 	strb.w	r3, [r4, #-1]
		for (uint32_t i = 0; i < size; i++) {
 801db0e:	d1f1      	bne.n	801daf4 <STM32Ipl_ConvertRev+0x33c>
 801db10:	e759      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801db12:	f106 0e1f 	add.w	lr, r6, #31
 801db16:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 801db1a:	f1b8 0f00 	cmp.w	r8, #0
 801db1e:	f040 8246 	bne.w	801dfae <STM32Ipl_ConvertRev+0x7f6>
		for (uint32_t y = 0; y < height; y++) {
 801db22:	2f00      	cmp	r7, #0
 801db24:	f43f af4f 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData += dstRowLen;
 801db28:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801db2c:	2e00      	cmp	r6, #0
 801db2e:	f43f af4a 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801db32:	4642      	mov	r2, r8
 801db34:	eb05 0806 	add.w	r8, r5, r6
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801db38:	f04f 0c01 	mov.w	ip, #1
 801db3c:	4640      	mov	r0, r8
			for (uint32_t x = 0; x < width; x++) {
 801db3e:	2100      	movs	r1, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801db40:	f815 ab01 	ldrb.w	sl, [r5], #1
 801db44:	f001 031f 	and.w	r3, r1, #31
 801db48:	ea4f 1951 	mov.w	r9, r1, lsr #5
			for (uint32_t x = 0; x < width; x++) {
 801db4c:	3101      	adds	r1, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801db4e:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 801db52:	fa0c fb03 	lsl.w	fp, ip, r3
			for (uint32_t x = 0; x < width; x++) {
 801db56:	4285      	cmp	r5, r0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801db58:	fa0a fa03 	lsl.w	sl, sl, r3
 801db5c:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 801db60:	ea23 030b 	bic.w	r3, r3, fp
 801db64:	ea43 030a 	orr.w	r3, r3, sl
 801db68:	f844 3029 	str.w	r3, [r4, r9, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 801db6c:	d1e8      	bne.n	801db40 <STM32Ipl_ConvertRev+0x388>
		for (uint32_t y = 0; y < height; y++) {
 801db6e:	3201      	adds	r2, #1
			dstData += dstRowLen;
 801db70:	4474      	add	r4, lr
		for (uint32_t y = 0; y < height; y++) {
 801db72:	4430      	add	r0, r6
 801db74:	4645      	mov	r5, r8
 801db76:	4297      	cmp	r7, r2
 801db78:	f43f af25 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801db7c:	44b0      	add	r8, r6
 801db7e:	e7de      	b.n	801db3e <STM32Ipl_ConvertRev+0x386>
	uint32_t size = width * height;
 801db80:	fb07 f606 	mul.w	r6, r7, r6
	if (reverse) {
 801db84:	f1b8 0f00 	cmp.w	r8, #0
 801db88:	f040 8248 	bne.w	801e01c <STM32Ipl_ConvertRev+0x864>
		for (uint32_t i = 0; i < size; i++) {
 801db8c:	2e00      	cmp	r6, #0
 801db8e:	f43f af1a 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801db92:	3503      	adds	r5, #3
 801db94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801db98:	48d0      	ldr	r0, [pc, #832]	@ (801dedc <STM32Ipl_ConvertRev+0x724>)
 801db9a:	1973      	adds	r3, r6, r5
 801db9c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
		for (uint32_t i = 0; i < size; i++) {
 801dba0:	3503      	adds	r5, #3
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801dba2:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 801dba6:	00c9      	lsls	r1, r1, #3
 801dba8:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 801dbac:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801dbb0:	430a      	orrs	r2, r1
 801dbb2:	f815 1c06 	ldrb.w	r1, [r5, #-6]
		for (uint32_t i = 0; i < size; i++) {
 801dbb6:	429d      	cmp	r5, r3
			*dstData++ = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801dbb8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 801dbbc:	f824 2b02 	strh.w	r2, [r4], #2
		for (uint32_t i = 0; i < size; i++) {
 801dbc0:	d1ec      	bne.n	801db9c <STM32Ipl_ConvertRev+0x3e4>
 801dbc2:	e700      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t size = width * height;
 801dbc4:	fb06 f707 	mul.w	r7, r6, r7
	if (reverse) {
 801dbc8:	f1b8 0f00 	cmp.w	r8, #0
 801dbcc:	f040 835f 	bne.w	801e28e <STM32Ipl_ConvertRev+0xad6>
		for (uint32_t i = 0; i < size; i++) {
 801dbd0:	2f00      	cmp	r7, #0
 801dbd2:	f43f aef8 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801dbd6:	3503      	adds	r5, #3
 801dbd8:	19e1      	adds	r1, r4, r7
			*dst++ = COLOR_RGB888_TO_Y(r, g, b);
 801dbda:	2626      	movs	r6, #38	@ 0x26
 801dbdc:	200f      	movs	r0, #15
 801dbde:	f815 3c02 	ldrb.w	r3, [r5, #-2]
		for (uint32_t i = 0; i < size; i++) {
 801dbe2:	3503      	adds	r5, #3
			*dst++ = COLOR_RGB888_TO_Y(r, g, b);
 801dbe4:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 801dbe8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dbec:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801dbf0:	fb16 3202 	smlabb	r2, r6, r2, r3
 801dbf4:	f815 3c06 	ldrb.w	r3, [r5, #-6]
 801dbf8:	fb10 2303 	smlabb	r3, r0, r3, r2
 801dbfc:	11db      	asrs	r3, r3, #7
 801dbfe:	f804 3b01 	strb.w	r3, [r4], #1
		for (uint32_t i = 0; i < size; i++) {
 801dc02:	428c      	cmp	r4, r1
 801dc04:	d1eb      	bne.n	801dbde <STM32Ipl_ConvertRev+0x426>
 801dc06:	e6de      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801dc08:	f106 0e1f 	add.w	lr, r6, #31
 801dc0c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 801dc10:	f1b8 0f00 	cmp.w	r8, #0
 801dc14:	f040 8164 	bne.w	801dee0 <STM32Ipl_ConvertRev+0x728>
		for (uint32_t y = 0; y < height; y++) {
 801dc18:	2f00      	cmp	r7, #0
 801dc1a:	f43f aed4 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData += srcRowLen;
 801dc1e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801dc22:	2e00      	cmp	r6, #0
 801dc24:	f43f aecf 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801dc28:	4642      	mov	r2, r8
 801dc2a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
			for (int32_t x = width - 1; x >= 0; x--) {
 801dc2e:	46a4      	mov	ip, r4
			for (uint32_t x = 0; x < width; x++) {
 801dc30:	2100      	movs	r1, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801dc32:	094b      	lsrs	r3, r1, #5
 801dc34:	f001 001f 	and.w	r0, r1, #31
			for (uint32_t x = 0; x < width; x++) {
 801dc38:	3101      	adds	r1, #1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801dc3a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 801dc3e:	428e      	cmp	r6, r1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801dc40:	fa23 f300 	lsr.w	r3, r3, r0
				*dst++ = v;
 801dc44:	f04f 0000 	mov.w	r0, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801dc48:	f343 0300 	sbfx	r3, r3, #0, #1
 801dc4c:	b2db      	uxtb	r3, r3
				*dst++ = v;
 801dc4e:	f363 0007 	bfi	r0, r3, #0, #8
 801dc52:	f363 200f 	bfi	r0, r3, #8, #8
 801dc56:	f82c 0b03 	strh.w	r0, [ip], #3
				*dst++ = v;
 801dc5a:	f80c 3c01 	strb.w	r3, [ip, #-1]
			for (uint32_t x = 0; x < width; x++) {
 801dc5e:	d1e8      	bne.n	801dc32 <STM32Ipl_ConvertRev+0x47a>
		for (uint32_t y = 0; y < height; y++) {
 801dc60:	3201      	adds	r2, #1
 801dc62:	4444      	add	r4, r8
			srcData += srcRowLen;
 801dc64:	4475      	add	r5, lr
		for (uint32_t y = 0; y < height; y++) {
 801dc66:	4297      	cmp	r7, r2
 801dc68:	d1e1      	bne.n	801dc2e <STM32Ipl_ConvertRev+0x476>
 801dc6a:	e6ac      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 801dc6c:	4648      	mov	r0, r9
 801dc6e:	f7ff fd6d 	bl	801d74c <STM32Ipl_ImageDataSize>
	if (reverse) {
 801dc72:	f1b8 0f00 	cmp.w	r8, #0
 801dc76:	f040 81f2 	bne.w	801e05e <STM32Ipl_ConvertRev+0x8a6>
		for (uint32_t i = 0; i < size; i++)
 801dc7a:	2800      	cmp	r0, #0
 801dc7c:	f43f aea3 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801dc80:	1e43      	subs	r3, r0, #1
 801dc82:	2b05      	cmp	r3, #5
 801dc84:	f105 0301 	add.w	r3, r5, #1
 801dc88:	d903      	bls.n	801dc92 <STM32Ipl_ConvertRev+0x4da>
 801dc8a:	1ae2      	subs	r2, r4, r3
 801dc8c:	2a02      	cmp	r2, #2
 801dc8e:	f200 8341 	bhi.w	801e314 <STM32Ipl_ConvertRev+0xb5c>
 801dc92:	3c01      	subs	r4, #1
 801dc94:	4428      	add	r0, r5
			*dst++ = *src++;
 801dc96:	f813 2c01 	ldrb.w	r2, [r3, #-1]
		for (uint32_t i = 0; i < size; i++)
 801dc9a:	4298      	cmp	r0, r3
 801dc9c:	f103 0301 	add.w	r3, r3, #1
			*dst++ = *src++;
 801dca0:	f804 2f01 	strb.w	r2, [r4, #1]!
		for (uint32_t i = 0; i < size; i++)
 801dca4:	d1f7      	bne.n	801dc96 <STM32Ipl_ConvertRev+0x4de>
 801dca6:	e68e      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
					STM32Ipl_SimpleCopy(src->data, dst->data, STM32Ipl_ImageDataSize(dst), reverse);
 801dca8:	4648      	mov	r0, r9
 801dcaa:	f7ff fd4f 	bl	801d74c <STM32Ipl_ImageDataSize>
	if (reverse) {
 801dcae:	f1b8 0f00 	cmp.w	r8, #0
 801dcb2:	f040 80db 	bne.w	801de6c <STM32Ipl_ConvertRev+0x6b4>
		for (uint32_t i = 0; i < size; i++)
 801dcb6:	2800      	cmp	r0, #0
 801dcb8:	f43f ae85 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801dcbc:	1e43      	subs	r3, r0, #1
 801dcbe:	2b05      	cmp	r3, #5
 801dcc0:	f105 0301 	add.w	r3, r5, #1
 801dcc4:	d903      	bls.n	801dcce <STM32Ipl_ConvertRev+0x516>
 801dcc6:	1ae2      	subs	r2, r4, r3
 801dcc8:	2a02      	cmp	r2, #2
 801dcca:	f200 8357 	bhi.w	801e37c <STM32Ipl_ConvertRev+0xbc4>
 801dcce:	3c01      	subs	r4, #1
 801dcd0:	4428      	add	r0, r5
			*dst++ = *src++;
 801dcd2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
		for (uint32_t i = 0; i < size; i++)
 801dcd6:	4283      	cmp	r3, r0
 801dcd8:	f103 0301 	add.w	r3, r3, #1
			*dst++ = *src++;
 801dcdc:	f804 2f01 	strb.w	r2, [r4, #1]!
		for (uint32_t i = 0; i < size; i++)
 801dce0:	d1f7      	bne.n	801dcd2 <STM32Ipl_ConvertRev+0x51a>
 801dce2:	e670      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
	uint32_t srcRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801dce4:	f106 0e1f 	add.w	lr, r6, #31
 801dce8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	if (reverse) {
 801dcec:	f1b8 0f00 	cmp.w	r8, #0
 801dcf0:	f040 8130 	bne.w	801df54 <STM32Ipl_ConvertRev+0x79c>
		for (uint32_t y = 0; y < height; y++) {
 801dcf4:	2f00      	cmp	r7, #0
 801dcf6:	f43f ae66 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData += srcRowLen;
 801dcfa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801dcfe:	2e00      	cmp	r6, #0
 801dd00:	f43f ae61 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801dd04:	4642      	mov	r2, r8
 801dd06:	eb04 0806 	add.w	r8, r4, r6
 801dd0a:	46c4      	mov	ip, r8
			for (uint32_t x = 0; x < width; x++)
 801dd0c:	2100      	movs	r1, #0
				*dst++ = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801dd0e:	094b      	lsrs	r3, r1, #5
 801dd10:	f001 001f 	and.w	r0, r1, #31
			for (uint32_t x = 0; x < width; x++)
 801dd14:	3101      	adds	r1, #1
				*dst++ = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801dd16:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801dd1a:	40c3      	lsrs	r3, r0
 801dd1c:	f343 0300 	sbfx	r3, r3, #0, #1
 801dd20:	f804 3b01 	strb.w	r3, [r4], #1
			for (uint32_t x = 0; x < width; x++)
 801dd24:	4564      	cmp	r4, ip
 801dd26:	d1f2      	bne.n	801dd0e <STM32Ipl_ConvertRev+0x556>
		for (uint32_t y = 0; y < height; y++) {
 801dd28:	3201      	adds	r2, #1
			srcData += srcRowLen;
 801dd2a:	4475      	add	r5, lr
		for (uint32_t y = 0; y < height; y++) {
 801dd2c:	44b4      	add	ip, r6
 801dd2e:	4644      	mov	r4, r8
 801dd30:	4297      	cmp	r7, r2
 801dd32:	f43f ae48 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801dd36:	44b0      	add	r8, r6
 801dd38:	e7e8      	b.n	801dd0c <STM32Ipl_ConvertRev+0x554>
	uint32_t dstRowLen = (width + UINT32_T_MASK) >> UINT32_T_SHIFT;
 801dd3a:	f106 0b1f 	add.w	fp, r6, #31
 801dd3e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	if (reverse) {
 801dd42:	f1b8 0f00 	cmp.w	r8, #0
 801dd46:	d143      	bne.n	801ddd0 <STM32Ipl_ConvertRev+0x618>
		for (uint32_t y = 0; y < height; y++) {
 801dd48:	2f00      	cmp	r7, #0
 801dd4a:	f43f ae3c 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData += dstRowLen;
 801dd4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801dd52:	2e00      	cmp	r6, #0
 801dd54:	f43f ae37 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801dd58:	4642      	mov	r2, r8
 801dd5a:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801dd5e:	f04f 0a26 	mov.w	sl, #38	@ 0x26
 801dd62:	f04f 090f 	mov.w	r9, #15
 801dd66:	f04f 0801 	mov.w	r8, #1
 801dd6a:	9702      	str	r7, [sp, #8]
			for (uint32_t x = 0; x < width; x++) {
 801dd6c:	1ce8      	adds	r0, r5, #3
 801dd6e:	2100      	movs	r1, #0
 801dd70:	9501      	str	r5, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801dd72:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 801dd76:	ea4f 1e51 	mov.w	lr, r1, lsr #5
 801dd7a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
			for (uint32_t x = 0; x < width; x++) {
 801dd7e:	3003      	adds	r0, #3
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801dd80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dd84:	f854 702e 	ldr.w	r7, [r4, lr, lsl #2]
 801dd88:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801dd8c:	fb1a 3505 	smlabb	r5, sl, r5, r3
 801dd90:	f810 3c06 	ldrb.w	r3, [r0, #-6]
 801dd94:	fb19 5303 	smlabb	r3, r9, r3, r5
 801dd98:	f001 051f 	and.w	r5, r1, #31
			for (uint32_t x = 0; x < width; x++) {
 801dd9c:	3101      	adds	r1, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801dd9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801dda2:	bfb4      	ite	lt
 801dda4:	2300      	movlt	r3, #0
 801dda6:	2301      	movge	r3, #1
			for (uint32_t x = 0; x < width; x++) {
 801dda8:	428e      	cmp	r6, r1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801ddaa:	fa03 f305 	lsl.w	r3, r3, r5
 801ddae:	fa08 f505 	lsl.w	r5, r8, r5
 801ddb2:	ea27 0705 	bic.w	r7, r7, r5
 801ddb6:	ea43 0307 	orr.w	r3, r3, r7
 801ddba:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
			for (uint32_t x = 0; x < width; x++) {
 801ddbe:	d1d8      	bne.n	801dd72 <STM32Ipl_ConvertRev+0x5ba>
		for (uint32_t y = 0; y < height; y++) {
 801ddc0:	3201      	adds	r2, #1
 801ddc2:	9b02      	ldr	r3, [sp, #8]
 801ddc4:	9d01      	ldr	r5, [sp, #4]
			dstData += dstRowLen;
 801ddc6:	445c      	add	r4, fp
		for (uint32_t y = 0; y < height; y++) {
 801ddc8:	4293      	cmp	r3, r2
 801ddca:	4465      	add	r5, ip
 801ddcc:	d1ce      	bne.n	801dd6c <STM32Ipl_ConvertRev+0x5b4>
 801ddce:	e5fa      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 801ddd0:	fb07 f306 	mul.w	r3, r7, r6
		dstData += dstRowLen * (height - 1);
 801ddd4:	f107 3cff 	add.w	ip, r7, #4294967295
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 801ddd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		dstData += dstRowLen * (height - 1);
 801dddc:	fb0b fc0c 	mul.w	ip, fp, ip
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 801dde0:	f1a3 0903 	sub.w	r9, r3, #3
		dstData += dstRowLen * (height - 1);
 801dde4:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
		rgb888_t *rgb888 = (rgb888_t*)(src + (width * height * 3) - 3);
 801dde8:	44a9      	add	r9, r5
		for (uint32_t y = 0; y < height; y++) {
 801ddea:	2f00      	cmp	r7, #0
 801ddec:	f43f adeb 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData -= dstRowLen;
 801ddf0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801ddf4:	1e70      	subs	r0, r6, #1
 801ddf6:	f1cb 0a00 	rsb	sl, fp, #0
 801ddfa:	f53f ade4 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801ddfe:	eba6 0486 	sub.w	r4, r6, r6, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801de02:	f04f 0b00 	mov.w	fp, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801de06:	f04f 0826 	mov.w	r8, #38	@ 0x26
 801de0a:	f04f 0e0f 	mov.w	lr, #15
 801de0e:	2601      	movs	r6, #1
 801de10:	e9cd 7001 	strd	r7, r0, [sp, #4]
			for (int32_t x = width - 1; x >= 0; x--) {
 801de14:	f1a9 0103 	sub.w	r1, r9, #3
 801de18:	9a02      	ldr	r2, [sp, #8]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801de1a:	790b      	ldrb	r3, [r1, #4]
 801de1c:	1157      	asrs	r7, r2, #5
 801de1e:	7948      	ldrb	r0, [r1, #5]
			for (int32_t x = width - 1; x >= 0; x--) {
 801de20:	3903      	subs	r1, #3
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801de22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801de26:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 801de2a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801de2e:	fb18 3000 	smlabb	r0, r8, r0, r3
 801de32:	798b      	ldrb	r3, [r1, #6]
 801de34:	fb1e 0303 	smlabb	r3, lr, r3, r0
 801de38:	f002 001f 	and.w	r0, r2, #31
			for (int32_t x = width - 1; x >= 0; x--) {
 801de3c:	3a01      	subs	r2, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB888_TO_BINARY(*rgb888));
 801de3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801de42:	bfb4      	ite	lt
 801de44:	2300      	movlt	r3, #0
 801de46:	2301      	movge	r3, #1
 801de48:	4083      	lsls	r3, r0
 801de4a:	fa06 f000 	lsl.w	r0, r6, r0
 801de4e:	ea25 0500 	bic.w	r5, r5, r0
 801de52:	432b      	orrs	r3, r5
 801de54:	f84c 3027 	str.w	r3, [ip, r7, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--) {
 801de58:	1c53      	adds	r3, r2, #1
 801de5a:	d1de      	bne.n	801de1a <STM32Ipl_ConvertRev+0x662>
		for (uint32_t y = 0; y < height; y++) {
 801de5c:	f10b 0b01 	add.w	fp, fp, #1
 801de60:	9b01      	ldr	r3, [sp, #4]
 801de62:	44a1      	add	r9, r4
			dstData -= dstRowLen;
 801de64:	44d4      	add	ip, sl
		for (uint32_t y = 0; y < height; y++) {
 801de66:	455b      	cmp	r3, fp
 801de68:	d1d4      	bne.n	801de14 <STM32Ipl_ConvertRev+0x65c>
 801de6a:	e5ac      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += size;
 801de6c:	182b      	adds	r3, r5, r0
		for (uint32_t i = 0; i < size; i++)
 801de6e:	2800      	cmp	r0, #0
 801de70:	f43f ada9 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801de74:	3001      	adds	r0, #1
 801de76:	1822      	adds	r2, r4, r0
			*dst-- = *src--;
 801de78:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 801de7c:	429d      	cmp	r5, r3
			*dst-- = *src--;
 801de7e:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 801de82:	d1f9      	bne.n	801de78 <STM32Ipl_ConvertRev+0x6c0>
 801de84:	e59f      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		dst += (width * height) - 1;
 801de86:	1e78      	subs	r0, r7, #1
 801de88:	4420      	add	r0, r4
		for (uint32_t i = 0; i < size; i++) {
 801de8a:	2f00      	cmp	r7, #0
 801de8c:	f43f ad9b 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801de90:	eb05 0147 	add.w	r1, r5, r7, lsl #1
 801de94:	3c01      	subs	r4, #1
			*dst-- = COLOR_RGB565_TO_GRAYSCALE(*srcData);
 801de96:	2526      	movs	r5, #38	@ 0x26
 801de98:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
 801de9c:	08d6      	lsrs	r6, r2, #3
 801de9e:	0a17      	lsrs	r7, r2, #8
 801dea0:	f006 03fc 	and.w	r3, r6, #252	@ 0xfc
 801dea4:	f3c6 1681 	ubfx	r6, r6, #6, #2
 801dea8:	00d2      	lsls	r2, r2, #3
 801deaa:	4333      	orrs	r3, r6
 801deac:	f007 06f8 	and.w	r6, r7, #248	@ 0xf8
 801deb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801deb4:	ea46 1657 	orr.w	r6, r6, r7, lsr #5
 801deb8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801debc:	fb05 3306 	mla	r3, r5, r6, r3
 801dec0:	f002 06f8 	and.w	r6, r2, #248	@ 0xf8
 801dec4:	f3c2 1242 	ubfx	r2, r2, #5, #3
 801dec8:	4332      	orrs	r2, r6
 801deca:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801dece:	4413      	add	r3, r2
 801ded0:	11db      	asrs	r3, r3, #7
 801ded2:	f800 3901 	strb.w	r3, [r0], #-1
		for (uint32_t i = 0; i < size; i++) {
 801ded6:	42a0      	cmp	r0, r4
 801ded8:	d1de      	bne.n	801de98 <STM32Ipl_ConvertRev+0x6e0>
 801deda:	e574      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801dedc:	fffff800 	.word	0xfffff800
		dst += (width * height * 3) - 1;
 801dee0:	fb07 f306 	mul.w	r3, r7, r6
 801dee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dee8:	f103 3cff 	add.w	ip, r3, #4294967295
 801deec:	44a4      	add	ip, r4
		srcData += srcRowLen * (height - 1);
 801deee:	1e7c      	subs	r4, r7, #1
 801def0:	fb0e f404 	mul.w	r4, lr, r4
 801def4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801def8:	2f00      	cmp	r7, #0
 801defa:	f43f ad64 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData -= srcRowLen;
 801defe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801df02:	f1b6 0801 	subs.w	r8, r6, #1
 801df06:	f1ce 0500 	rsb	r5, lr, #0
 801df0a:	f53f ad5c 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801df0e:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801df12:	f04f 0e00 	mov.w	lr, #0
			for (int32_t x = width - 1; x >= 0; x--) {
 801df16:	f1ac 0002 	sub.w	r0, ip, #2
 801df1a:	4642      	mov	r2, r8
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801df1c:	1153      	asrs	r3, r2, #5
 801df1e:	f002 011f 	and.w	r1, r2, #31
			for (int32_t x = width - 1; x >= 0; x--) {
 801df22:	3a01      	subs	r2, #1
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801df24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801df28:	40cb      	lsrs	r3, r1
				*dst-- = v;
 801df2a:	f04f 0100 	mov.w	r1, #0
				uint8_t v = 0xFF * IMAGE_GET_BINARY_PIXEL_FAST(srcData, x);
 801df2e:	f343 0300 	sbfx	r3, r3, #0, #1
 801df32:	b2db      	uxtb	r3, r3
				*dst-- = v;
 801df34:	f363 0107 	bfi	r1, r3, #0, #8
				*dst-- = v;
 801df38:	7083      	strb	r3, [r0, #2]
				*dst-- = v;
 801df3a:	f363 210f 	bfi	r1, r3, #8, #8
			for (int32_t x = width - 1; x >= 0; x--) {
 801df3e:	1c53      	adds	r3, r2, #1
				*dst-- = v;
 801df40:	f820 1903 	strh.w	r1, [r0], #-3
			for (int32_t x = width - 1; x >= 0; x--) {
 801df44:	d1ea      	bne.n	801df1c <STM32Ipl_ConvertRev+0x764>
		for (uint32_t y = 0; y < height; y++) {
 801df46:	f10e 0e01 	add.w	lr, lr, #1
 801df4a:	44b4      	add	ip, r6
			srcData -= srcRowLen;
 801df4c:	442c      	add	r4, r5
		for (uint32_t y = 0; y < height; y++) {
 801df4e:	4577      	cmp	r7, lr
 801df50:	d1e1      	bne.n	801df16 <STM32Ipl_ConvertRev+0x75e>
 801df52:	e538      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		dst += (width * height) - 1;
 801df54:	fb07 4406 	mla	r4, r7, r6, r4
 801df58:	f104 3cff 	add.w	ip, r4, #4294967295
		srcData += srcRowLen * (height - 1);
 801df5c:	1e7c      	subs	r4, r7, #1
 801df5e:	fb0e f404 	mul.w	r4, lr, r4
 801df62:	eb05 0484 	add.w	r4, r5, r4, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801df66:	2f00      	cmp	r7, #0
 801df68:	f43f ad2d 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData -= srcRowLen;
 801df6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801df70:	f1b6 0801 	subs.w	r8, r6, #1
 801df74:	f1ce 0500 	rsb	r5, lr, #0
 801df78:	f53f ad25 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801df7c:	f04f 0e00 	mov.w	lr, #0
 801df80:	4661      	mov	r1, ip
			for (int32_t x = width - 1; x >= 0; x--)
 801df82:	4642      	mov	r2, r8
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801df84:	1153      	asrs	r3, r2, #5
 801df86:	f002 001f 	and.w	r0, r2, #31
			for (int32_t x = width - 1; x >= 0; x--)
 801df8a:	3a01      	subs	r2, #1
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801df8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801df90:	40c3      	lsrs	r3, r0
			for (int32_t x = width - 1; x >= 0; x--)
 801df92:	1c50      	adds	r0, r2, #1
				*dst-- = COLOR_BINARY_TO_GRAYSCALE(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801df94:	f343 0300 	sbfx	r3, r3, #0, #1
 801df98:	f801 3901 	strb.w	r3, [r1], #-1
			for (int32_t x = width - 1; x >= 0; x--)
 801df9c:	d1f2      	bne.n	801df84 <STM32Ipl_ConvertRev+0x7cc>
		for (uint32_t y = 0; y < height; y++) {
 801df9e:	f10e 0e01 	add.w	lr, lr, #1
 801dfa2:	ebac 0c06 	sub.w	ip, ip, r6
			srcData -= srcRowLen;
 801dfa6:	442c      	add	r4, r5
		for (uint32_t y = 0; y < height; y++) {
 801dfa8:	4577      	cmp	r7, lr
 801dfaa:	d1e9      	bne.n	801df80 <STM32Ipl_ConvertRev+0x7c8>
 801dfac:	e50b      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		dstData += dstRowLen * (height - 1);
 801dfae:	1e78      	subs	r0, r7, #1
		src += (width * height) - 1;
 801dfb0:	fb07 5506 	mla	r5, r7, r6, r5
		dstData += dstRowLen * (height - 1);
 801dfb4:	fb0e f000 	mul.w	r0, lr, r0
		src += (width * height) - 1;
 801dfb8:	f105 38ff 	add.w	r8, r5, #4294967295
		dstData += dstRowLen * (height - 1);
 801dfbc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801dfc0:	2f00      	cmp	r7, #0
 801dfc2:	f43f ad00 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData -= dstRowLen;
 801dfc6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801dfca:	f1b6 0901 	subs.w	r9, r6, #1
 801dfce:	f1ce 0c00 	rsb	ip, lr, #0
 801dfd2:	f53f acf8 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801dfd6:	f04f 0e00 	mov.w	lr, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801dfda:	2501      	movs	r5, #1
		for (uint32_t y = 0; y < height; y++) {
 801dfdc:	4644      	mov	r4, r8
			for (int32_t x = width - 1; x >= 0; x--) {
 801dfde:	464a      	mov	r2, r9
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801dfe0:	f814 a901 	ldrb.w	sl, [r4], #-1
 801dfe4:	f002 031f 	and.w	r3, r2, #31
 801dfe8:	1151      	asrs	r1, r2, #5
			for (int32_t x = width - 1; x >= 0; x--) {
 801dfea:	3a01      	subs	r2, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_GRAYSCALE_TO_BINARY(*src));
 801dfec:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 801dff0:	fa05 fb03 	lsl.w	fp, r5, r3
 801dff4:	fa0a fa03 	lsl.w	sl, sl, r3
 801dff8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801dffc:	ea23 030b 	bic.w	r3, r3, fp
 801e000:	ea43 030a 	orr.w	r3, r3, sl
 801e004:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--) {
 801e008:	1c51      	adds	r1, r2, #1
 801e00a:	d1e9      	bne.n	801dfe0 <STM32Ipl_ConvertRev+0x828>
		for (uint32_t y = 0; y < height; y++) {
 801e00c:	f10e 0e01 	add.w	lr, lr, #1
 801e010:	eba8 0806 	sub.w	r8, r8, r6
			dstData -= dstRowLen;
 801e014:	4460      	add	r0, ip
		for (uint32_t y = 0; y < height; y++) {
 801e016:	4577      	cmp	r7, lr
 801e018:	d1e0      	bne.n	801dfdc <STM32Ipl_ConvertRev+0x824>
 801e01a:	e4d4      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += (width * height * 3) - 1;
 801e01c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
		dstData += (width * height) - 1;
 801e020:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
		src += (width * height * 3) - 1;
 801e024:	1e5a      	subs	r2, r3, #1
		dstData += (width * height) - 1;
 801e026:	4430      	add	r0, r6
		src += (width * height * 3) - 1;
 801e028:	442a      	add	r2, r5
		dstData += (width * height) - 1;
 801e02a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
		for (uint32_t i = 0; i < size; i++) {
 801e02e:	2e00      	cmp	r6, #0
 801e030:	f43f acc9 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e034:	1ad3      	subs	r3, r2, r3
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801e036:	4dd0      	ldr	r5, [pc, #832]	@ (801e378 <STM32Ipl_ConvertRev+0xbc0>)
 801e038:	3a03      	subs	r2, #3
 801e03a:	1edc      	subs	r4, r3, #3
 801e03c:	7891      	ldrb	r1, [r2, #2]
		for (uint32_t i = 0; i < size; i++) {
 801e03e:	3a03      	subs	r2, #3
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801e040:	7993      	ldrb	r3, [r2, #6]
 801e042:	00c9      	lsls	r1, r1, #3
 801e044:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801e048:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e04c:	430b      	orrs	r3, r1
 801e04e:	7911      	ldrb	r1, [r2, #4]
		for (uint32_t i = 0; i < size; i++) {
 801e050:	42a2      	cmp	r2, r4
			*dstData-- = COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801e052:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801e056:	f820 3902 	strh.w	r3, [r0], #-2
		for (uint32_t i = 0; i < size; i++) {
 801e05a:	d1ef      	bne.n	801e03c <STM32Ipl_ConvertRev+0x884>
 801e05c:	e4b3      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += size;
 801e05e:	182b      	adds	r3, r5, r0
		for (uint32_t i = 0; i < size; i++)
 801e060:	2800      	cmp	r0, #0
 801e062:	f43f acb0 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e066:	1c42      	adds	r2, r0, #1
 801e068:	4422      	add	r2, r4
			*dst-- = *src--;
 801e06a:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 801e06e:	429d      	cmp	r5, r3
			*dst-- = *src--;
 801e070:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 801e074:	d1f9      	bne.n	801e06a <STM32Ipl_ConvertRev+0x8b2>
 801e076:	e4a6      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		dstData += (width * height) - 1;
 801e078:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
		src += (width * height) - 1;
 801e07c:	1e7b      	subs	r3, r7, #1
		dstData += (width * height) - 1;
 801e07e:	443e      	add	r6, r7
		src += (width * height) - 1;
 801e080:	442b      	add	r3, r5
		dstData += (width * height) - 1;
 801e082:	eb04 0646 	add.w	r6, r4, r6, lsl #1
		for (uint32_t i = 0; i < size; i++) {
 801e086:	2f00      	cmp	r7, #0
 801e088:	f43f ac9d 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e08c:	f1c7 0201 	rsb	r2, r7, #1
 801e090:	442f      	add	r7, r5
 801e092:	189d      	adds	r5, r3, r2
			*dstData-- = COLOR_GRAYSCALE_TO_RGB565(*src);
 801e094:	2200      	movs	r2, #0
 801e096:	f817 0d01 	ldrb.w	r0, [r7, #-1]!
 801e09a:	4611      	mov	r1, r2
 801e09c:	f7ff fb28 	bl	801d6f0 <imlib_yuv_to_rgb>
		for (uint32_t i = 0; i < size; i++) {
 801e0a0:	42bd      	cmp	r5, r7
			*dstData-- = COLOR_GRAYSCALE_TO_RGB565(*src);
 801e0a2:	f826 0902 	strh.w	r0, [r6], #-2
		for (uint32_t i = 0; i < size; i++) {
 801e0a6:	d1f5      	bne.n	801e094 <STM32Ipl_ConvertRev+0x8dc>
 801e0a8:	e48d      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += size;
 801e0aa:	182b      	adds	r3, r5, r0
		for (uint32_t i = 0; i < size; i++)
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	f43f ac8a 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e0b2:	1c42      	adds	r2, r0, #1
 801e0b4:	4422      	add	r2, r4
			*dst-- = *src--;
 801e0b6:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 801e0ba:	429d      	cmp	r5, r3
			*dst-- = *src--;
 801e0bc:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 801e0c0:	d1f9      	bne.n	801e0b6 <STM32Ipl_ConvertRev+0x8fe>
 801e0c2:	e480      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		srcData += srcRowLen * (height - 1);
 801e0c4:	f107 39ff 	add.w	r9, r7, #4294967295
		dstData += (width * height) - 1;
 801e0c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
		srcData += srcRowLen * (height - 1);
 801e0cc:	fb03 f909 	mul.w	r9, r3, r9
		dstData += (width * height) - 1;
 801e0d0:	fb07 bb06 	mla	fp, r7, r6, fp
		srcData += srcRowLen * (height - 1);
 801e0d4:	eb05 0989 	add.w	r9, r5, r9, lsl #2
		dstData += (width * height) - 1;
 801e0d8:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
		for (uint32_t y = 0; y < height; y++) {
 801e0dc:	2f00      	cmp	r7, #0
 801e0de:	f43f ac72 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			srcData -= srcRowLen;
 801e0e2:	009b      	lsls	r3, r3, #2
 801e0e4:	f1b6 0801 	subs.w	r8, r6, #1
 801e0e8:	f1c3 0a00 	rsb	sl, r3, #0
 801e0ec:	f53f ac6b 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e0f0:	ebc6 76c6 	rsb	r6, r6, r6, lsl #31
 801e0f4:	0073      	lsls	r3, r6, #1
		for (uint32_t y = 0; y < height; y++) {
 801e0f6:	2600      	movs	r6, #0
 801e0f8:	9301      	str	r3, [sp, #4]
 801e0fa:	465d      	mov	r5, fp
			for (int32_t x = width - 1; x >= 0; x--)
 801e0fc:	4644      	mov	r4, r8
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801e0fe:	1162      	asrs	r2, r4, #5
 801e100:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 801e104:	f004 021f 	and.w	r2, r4, #31
 801e108:	40d0      	lsrs	r0, r2
 801e10a:	2200      	movs	r2, #0
 801e10c:	f340 0000 	sbfx	r0, r0, #0, #1
 801e110:	4611      	mov	r1, r2
 801e112:	b2c0      	uxtb	r0, r0
 801e114:	f7ff faec 	bl	801d6f0 <imlib_yuv_to_rgb>
			for (int32_t x = width - 1; x >= 0; x--)
 801e118:	3c01      	subs	r4, #1
				*dstData-- = COLOR_BINARY_TO_RGB565(IMAGE_GET_BINARY_PIXEL_FAST(srcData, x));
 801e11a:	f825 0902 	strh.w	r0, [r5], #-2
			for (int32_t x = width - 1; x >= 0; x--)
 801e11e:	d2ee      	bcs.n	801e0fe <STM32Ipl_ConvertRev+0x946>
		for (uint32_t y = 0; y < height; y++) {
 801e120:	3601      	adds	r6, #1
 801e122:	9b01      	ldr	r3, [sp, #4]
			srcData -= srcRowLen;
 801e124:	44d1      	add	r9, sl
		for (uint32_t y = 0; y < height; y++) {
 801e126:	42b7      	cmp	r7, r6
 801e128:	449b      	add	fp, r3
 801e12a:	d1e6      	bne.n	801e0fa <STM32Ipl_ConvertRev+0x942>
 801e12c:	e44b      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		srcData += (width * height) - 1;
 801e12e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
		dst += (width * height * 3) - 1;
 801e132:	eb07 0247 	add.w	r2, r7, r7, lsl #1
		srcData += (width * height) - 1;
 801e136:	443b      	add	r3, r7
 801e138:	eb05 0543 	add.w	r5, r5, r3, lsl #1
		dst += (width * height * 3) - 1;
 801e13c:	1e53      	subs	r3, r2, #1
 801e13e:	4423      	add	r3, r4
		for (uint32_t i = 0; i < size; i++) {
 801e140:	2f00      	cmp	r7, #0
 801e142:	f43f ac40 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e146:	1a9a      	subs	r2, r3, r2
 801e148:	3b03      	subs	r3, #3
 801e14a:	1ed6      	subs	r6, r2, #3
			uint16_t v = *srcData--;
 801e14c:	f835 1902 	ldrh.w	r1, [r5], #-2
		for (uint32_t i = 0; i < size; i++) {
 801e150:	3b03      	subs	r3, #3
			*dst-- = COLOR_RGB565_TO_B8(v);
 801e152:	f3c1 0082 	ubfx	r0, r1, #2, #3
			*dst-- = COLOR_RGB565_TO_R8(v);
 801e156:	0a0c      	lsrs	r4, r1, #8
			*dst-- = COLOR_RGB565_TO_G8(v);
 801e158:	08ca      	lsrs	r2, r1, #3
			*dst-- = COLOR_RGB565_TO_B8(v);
 801e15a:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
 801e15e:	7119      	strb	r1, [r3, #4]
			*dst-- = COLOR_RGB565_TO_R8(v);
 801e160:	f004 01f8 	and.w	r1, r4, #248	@ 0xf8
 801e164:	ea41 1154 	orr.w	r1, r1, r4, lsr #5
 801e168:	7199      	strb	r1, [r3, #6]
			*dst-- = COLOR_RGB565_TO_G8(v);
 801e16a:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 801e16e:	f3c2 1281 	ubfx	r2, r2, #6, #2
		for (uint32_t i = 0; i < size; i++) {
 801e172:	42b3      	cmp	r3, r6
			*dst-- = COLOR_RGB565_TO_G8(v);
 801e174:	ea42 0201 	orr.w	r2, r2, r1
 801e178:	715a      	strb	r2, [r3, #5]
		for (uint32_t i = 0; i < size; i++) {
 801e17a:	d1e7      	bne.n	801e14c <STM32Ipl_ConvertRev+0x994>
 801e17c:	e423      	b.n	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		srcData += width * (height - 1);
 801e17e:	1e7a      	subs	r2, r7, #1
 801e180:	0071      	lsls	r1, r6, #1
 801e182:	fb01 5502 	mla	r5, r1, r2, r5
		dstData += dstRowLen * (height - 1);
 801e186:	fb03 f202 	mul.w	r2, r3, r2
 801e18a:	eb04 0882 	add.w	r8, r4, r2, lsl #2
		for (uint32_t y = 0; y < height; y++) {
 801e18e:	2f00      	cmp	r7, #0
 801e190:	f43f ac19 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			dstData -= dstRowLen;
 801e194:	009b      	lsls	r3, r3, #2
 801e196:	3e01      	subs	r6, #1
			srcData -= width;
 801e198:	f1c1 0400 	rsb	r4, r1, #0
			dstData -= dstRowLen;
 801e19c:	f1c3 0200 	rsb	r2, r3, #0
 801e1a0:	f53f ac11 	bmi.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		for (uint32_t y = 0; y < height; y++) {
 801e1a4:	f04f 0e00 	mov.w	lr, #0
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801e1a8:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 801e1ac:	f04f 0a01 	mov.w	sl, #1
 801e1b0:	468c      	mov	ip, r1
 801e1b2:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801e1b6:	e9cd 4204 	strd	r4, r2, [sp, #16]
			for (int32_t x = width - 1; x >= 0; x--)
 801e1ba:	eb05 090c 	add.w	r9, r5, ip
 801e1be:	9803      	ldr	r0, [sp, #12]
 801e1c0:	9501      	str	r5, [sp, #4]
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801e1c2:	f839 1d02 	ldrh.w	r1, [r9, #-2]!
 801e1c6:	f000 041f 	and.w	r4, r0, #31
 801e1ca:	1146      	asrs	r6, r0, #5
			for (int32_t x = width - 1; x >= 0; x--)
 801e1cc:	3801      	subs	r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801e1ce:	08cb      	lsrs	r3, r1, #3
 801e1d0:	0a0f      	lsrs	r7, r1, #8
 801e1d2:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
 801e1d6:	f003 02fc 	and.w	r2, r3, #252	@ 0xfc
 801e1da:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801e1de:	00c9      	lsls	r1, r1, #3
 801e1e0:	431a      	orrs	r2, r3
 801e1e2:	f007 03f8 	and.w	r3, r7, #248	@ 0xf8
 801e1e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e1ea:	ea43 1357 	orr.w	r3, r3, r7, lsr #5
 801e1ee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801e1f2:	fb0b 2303 	mla	r3, fp, r3, r2
 801e1f6:	f001 02f8 	and.w	r2, r1, #248	@ 0xf8
 801e1fa:	f3c1 1142 	ubfx	r1, r1, #5, #3
 801e1fe:	430a      	orrs	r2, r1
 801e200:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801e204:	4413      	add	r3, r2
 801e206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e20a:	bfb4      	ite	lt
 801e20c:	2300      	movlt	r3, #0
 801e20e:	2301      	movge	r3, #1
			for (int32_t x = width - 1; x >= 0; x--)
 801e210:	1c42      	adds	r2, r0, #1
				IMAGE_PUT_BINARY_PIXEL_FAST(dstData, x, COLOR_RGB565_TO_BINARY(srcData[x]));
 801e212:	fa03 f304 	lsl.w	r3, r3, r4
 801e216:	fa0a f404 	lsl.w	r4, sl, r4
 801e21a:	ea25 0504 	bic.w	r5, r5, r4
 801e21e:	ea43 0305 	orr.w	r3, r3, r5
 801e222:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
			for (int32_t x = width - 1; x >= 0; x--)
 801e226:	d1cc      	bne.n	801e1c2 <STM32Ipl_ConvertRev+0xa0a>
			srcData -= width;
 801e228:	9b04      	ldr	r3, [sp, #16]
		for (uint32_t y = 0; y < height; y++) {
 801e22a:	f10e 0e01 	add.w	lr, lr, #1
 801e22e:	9d01      	ldr	r5, [sp, #4]
			srcData -= width;
 801e230:	441d      	add	r5, r3
			dstData -= dstRowLen;
 801e232:	9b05      	ldr	r3, [sp, #20]
 801e234:	4498      	add	r8, r3
		for (uint32_t y = 0; y < height; y++) {
 801e236:	9b02      	ldr	r3, [sp, #8]
 801e238:	4573      	cmp	r3, lr
 801e23a:	d1be      	bne.n	801e1ba <STM32Ipl_ConvertRev+0xa02>
 801e23c:	f7ff bbc3 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += size;
 801e240:	182b      	adds	r3, r5, r0
		for (uint32_t i = 0; i < size; i++)
 801e242:	2800      	cmp	r0, #0
 801e244:	f43f abbf 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e248:	1c42      	adds	r2, r0, #1
 801e24a:	4422      	add	r2, r4
			*dst-- = *src--;
 801e24c:	f813 1901 	ldrb.w	r1, [r3], #-1
		for (uint32_t i = 0; i < size; i++)
 801e250:	429d      	cmp	r5, r3
			*dst-- = *src--;
 801e252:	f802 1d01 	strb.w	r1, [r2, #-1]!
		for (uint32_t i = 0; i < size; i++)
 801e256:	d1f9      	bne.n	801e24c <STM32Ipl_ConvertRev+0xa94>
 801e258:	f7ff bbb5 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		src += (width * height) - 1;
 801e25c:	1e78      	subs	r0, r7, #1
		dst += (width * height * 3) - 1;
 801e25e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
		src += (width * height) - 1;
 801e262:	4428      	add	r0, r5
		for (uint32_t i = 0; i < size; i++) {
 801e264:	2f00      	cmp	r7, #0
 801e266:	f43f abae 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e26a:	3b03      	subs	r3, #3
 801e26c:	3d01      	subs	r5, #1
 801e26e:	18e1      	adds	r1, r4, r3
			uint8_t v = *src--;
 801e270:	f810 2901 	ldrb.w	r2, [r0], #-1
			*dst-- = v;
 801e274:	f04f 0300 	mov.w	r3, #0
 801e278:	f362 0307 	bfi	r3, r2, #0, #8
		for (uint32_t i = 0; i < size; i++) {
 801e27c:	42a8      	cmp	r0, r5
			*dst-- = v;
 801e27e:	708a      	strb	r2, [r1, #2]
			*dst-- = v;
 801e280:	f362 230f 	bfi	r3, r2, #8, #8
 801e284:	f821 3903 	strh.w	r3, [r1], #-3
		for (uint32_t i = 0; i < size; i++) {
 801e288:	d1f2      	bne.n	801e270 <STM32Ipl_ConvertRev+0xab8>
 801e28a:	f7ff bb9c 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
		dst += (width * height) - 1;
 801e28e:	1e78      	subs	r0, r7, #1
		src += (width * height * 3) - 1;
 801e290:	eb07 0347 	add.w	r3, r7, r7, lsl #1
		dst += (width * height) - 1;
 801e294:	4420      	add	r0, r4
		for (uint32_t i = 0; i < size; i++) {
 801e296:	2f00      	cmp	r7, #0
 801e298:	f43f ab95 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e29c:	3b04      	subs	r3, #4
 801e29e:	3c01      	subs	r4, #1
			*dst-- = COLOR_RGB888_TO_Y(r, g, b);
 801e2a0:	2626      	movs	r6, #38	@ 0x26
 801e2a2:	18ea      	adds	r2, r5, r3
 801e2a4:	250f      	movs	r5, #15
 801e2a6:	7893      	ldrb	r3, [r2, #2]
		for (uint32_t i = 0; i < size; i++) {
 801e2a8:	3a03      	subs	r2, #3
			*dst-- = COLOR_RGB888_TO_Y(r, g, b);
 801e2aa:	7991      	ldrb	r1, [r2, #6]
 801e2ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e2b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801e2b4:	fb16 3101 	smlabb	r1, r6, r1, r3
 801e2b8:	7913      	ldrb	r3, [r2, #4]
 801e2ba:	fb15 1303 	smlabb	r3, r5, r3, r1
 801e2be:	11db      	asrs	r3, r3, #7
 801e2c0:	f800 3901 	strb.w	r3, [r0], #-1
		for (uint32_t i = 0; i < size; i++) {
 801e2c4:	42a0      	cmp	r0, r4
 801e2c6:	d1ee      	bne.n	801e2a6 <STM32Ipl_ConvertRev+0xaee>
 801e2c8:	f7ff bb7d 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e2cc:	f020 0703 	bic.w	r7, r0, #3
 801e2d0:	4623      	mov	r3, r4
 801e2d2:	462a      	mov	r2, r5
 801e2d4:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 801e2d8:	19e6      	adds	r6, r4, r7
			*dst++ = *src++;
 801e2da:	f852 1b04 	ldr.w	r1, [r2], #4
 801e2de:	f843 1b04 	str.w	r1, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 801e2e2:	42b3      	cmp	r3, r6
 801e2e4:	d1f9      	bne.n	801e2da <STM32Ipl_ConvertRev+0xb22>
 801e2e6:	42b8      	cmp	r0, r7
 801e2e8:	eb05 0207 	add.w	r2, r5, r7
 801e2ec:	f43f ab6b 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			*dst++ = *src++;
 801e2f0:	f815 102c 	ldrb.w	r1, [r5, ip, lsl #2]
 801e2f4:	f804 102c 	strb.w	r1, [r4, ip, lsl #2]
		for (uint32_t i = 0; i < size; i++)
 801e2f8:	1c79      	adds	r1, r7, #1
 801e2fa:	4288      	cmp	r0, r1
 801e2fc:	f67f ab63 	bls.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e300:	3702      	adds	r7, #2
			*dst++ = *src++;
 801e302:	7851      	ldrb	r1, [r2, #1]
		for (uint32_t i = 0; i < size; i++)
 801e304:	42b8      	cmp	r0, r7
			*dst++ = *src++;
 801e306:	7059      	strb	r1, [r3, #1]
		for (uint32_t i = 0; i < size; i++)
 801e308:	f67f ab5d 	bls.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			*dst++ = *src++;
 801e30c:	7892      	ldrb	r2, [r2, #2]
 801e30e:	709a      	strb	r2, [r3, #2]
		for (uint32_t i = 0; i < size; i++)
 801e310:	f7ff bb59 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e314:	f020 0703 	bic.w	r7, r0, #3
 801e318:	4623      	mov	r3, r4
 801e31a:	462a      	mov	r2, r5
 801e31c:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 801e320:	193e      	adds	r6, r7, r4
			*dst++ = *src++;
 801e322:	f852 1b04 	ldr.w	r1, [r2], #4
 801e326:	f843 1b04 	str.w	r1, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 801e32a:	429e      	cmp	r6, r3
 801e32c:	d1f9      	bne.n	801e322 <STM32Ipl_ConvertRev+0xb6a>
 801e32e:	42b8      	cmp	r0, r7
 801e330:	eb05 0307 	add.w	r3, r5, r7
 801e334:	f43f ab47 	beq.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			*dst++ = *src++;
 801e338:	f815 202c 	ldrb.w	r2, [r5, ip, lsl #2]
 801e33c:	f804 202c 	strb.w	r2, [r4, ip, lsl #2]
		for (uint32_t i = 0; i < size; i++)
 801e340:	1c7a      	adds	r2, r7, #1
 801e342:	4290      	cmp	r0, r2
 801e344:	f67f ab3f 	bls.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e348:	3702      	adds	r7, #2
			*dst++ = *src++;
 801e34a:	785a      	ldrb	r2, [r3, #1]
		for (uint32_t i = 0; i < size; i++)
 801e34c:	42b8      	cmp	r0, r7
			*dst++ = *src++;
 801e34e:	7072      	strb	r2, [r6, #1]
		for (uint32_t i = 0; i < size; i++)
 801e350:	f67f ab39 	bls.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
			*dst++ = *src++;
 801e354:	789b      	ldrb	r3, [r3, #2]
 801e356:	70b3      	strb	r3, [r6, #2]
		for (uint32_t i = 0; i < size; i++)
 801e358:	f7ff bb35 	b.w	801d9c6 <STM32Ipl_ConvertRev+0x20e>
 801e35c:	f020 0703 	bic.w	r7, r0, #3
 801e360:	4623      	mov	r3, r4
 801e362:	462a      	mov	r2, r5
 801e364:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 801e368:	193e      	adds	r6, r7, r4
			*dst++ = *src++;
 801e36a:	f852 1b04 	ldr.w	r1, [r2], #4
 801e36e:	f843 1b04 	str.w	r1, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 801e372:	429e      	cmp	r6, r3
 801e374:	d1f9      	bne.n	801e36a <STM32Ipl_ConvertRev+0xbb2>
 801e376:	e7da      	b.n	801e32e <STM32Ipl_ConvertRev+0xb76>
 801e378:	fffff800 	.word	0xfffff800
 801e37c:	f020 0703 	bic.w	r7, r0, #3
 801e380:	4623      	mov	r3, r4
 801e382:	4629      	mov	r1, r5
 801e384:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 801e388:	19e2      	adds	r2, r4, r7
			*dst++ = *src++;
 801e38a:	f851 6b04 	ldr.w	r6, [r1], #4
 801e38e:	f843 6b04 	str.w	r6, [r3], #4
		for (uint32_t i = 0; i < size; i++)
 801e392:	4293      	cmp	r3, r2
 801e394:	d1f9      	bne.n	801e38a <STM32Ipl_ConvertRev+0xbd2>
 801e396:	e7a6      	b.n	801e2e6 <STM32Ipl_ConvertRev+0xb2e>
	STM32IPL_CHECK_VALID_IMAGE(src)
 801e398:	f06f 0001 	mvn.w	r0, #1
}
 801e39c:	4770      	bx	lr
 801e39e:	bf00      	nop

0801e3a0 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	f000 81d6 	beq.w	801e752 <STM32Ipl_Downscale+0x3b2>
 801e3a6:	68c3      	ldr	r3, [r0, #12]
{
 801e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ac:	4607      	mov	r7, r0
 801e3ae:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	f000 81cb 	beq.w	801e74c <STM32Ipl_Downscale+0x3ac>
 801e3b6:	460e      	mov	r6, r1
 801e3b8:	2900      	cmp	r1, #0
 801e3ba:	f000 81c7 	beq.w	801e74c <STM32Ipl_Downscale+0x3ac>
 801e3be:	68cb      	ldr	r3, [r1, #12]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	f000 81c3 	beq.w	801e74c <STM32Ipl_Downscale+0x3ac>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801e3c6:	210f      	movs	r1, #15
 801e3c8:	4690      	mov	r8, r2
 801e3ca:	f7ff f9df 	bl	801d78c <STM32Ipl_ImageFormatSupported>
 801e3ce:	2800      	cmp	r0, #0
 801e3d0:	f000 81b7 	beq.w	801e742 <STM32Ipl_Downscale+0x3a2>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 801e3d4:	68b8      	ldr	r0, [r7, #8]
 801e3d6:	68b3      	ldr	r3, [r6, #8]
 801e3d8:	4298      	cmp	r0, r3
 801e3da:	f040 81b7 	bne.w	801e74c <STM32Ipl_Downscale+0x3ac>

	if ((dst->w < 1) || (dst->h < 1))
 801e3de:	6835      	ldr	r5, [r6, #0]
 801e3e0:	2d00      	cmp	r5, #0
 801e3e2:	f340 81b3 	ble.w	801e74c <STM32Ipl_Downscale+0x3ac>
 801e3e6:	f8d6 a004 	ldr.w	sl, [r6, #4]
 801e3ea:	f1ba 0f00 	cmp.w	sl, #0
 801e3ee:	f340 81ad 	ble.w	801e74c <STM32Ipl_Downscale+0x3ac>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801e3f2:	e9d7 4300 	ldrd	r4, r3, [r7]
 801e3f6:	041b      	lsls	r3, r3, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801e3f8:	ea4f 4c04 	mov.w	ip, r4, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801e3fc:	fb93 f3fa 	sdiv	r3, r3, sl
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801e400:	fb9c fcf5 	sdiv	ip, ip, r5
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801e404:	3301      	adds	r3, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801e406:	f10c 0c01 	add.w	ip, ip, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801e40a:	9300      	str	r3, [sp, #0]

	if (reversed) {
 801e40c:	f1b8 0f00 	cmp.w	r8, #0
 801e410:	d009      	beq.n	801e426 <STM32Ipl_Downscale+0x86>
		switch (src->bpp) {
 801e412:	2804      	cmp	r0, #4
 801e414:	f200 8195 	bhi.w	801e742 <STM32Ipl_Downscale+0x3a2>
 801e418:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e41c:	00820092 	.word	0x00820092
 801e420:	01930051 	.word	0x01930051
 801e424:	000f      	.short	0x000f

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 801e426:	2804      	cmp	r0, #4
 801e428:	f200 818b 	bhi.w	801e742 <STM32Ipl_Downscale+0x3a2>
 801e42c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e430:	01260148 	.word	0x01260148
 801e434:	01890101 	.word	0x01890101
 801e438:	00d2      	.short	0x00d2
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e43a:	f10a 38ff 	add.w	r8, sl, #4294967295
 801e43e:	68f2      	ldr	r2, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e440:	f105 39ff 	add.w	r9, r5, #4294967295
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e444:	68fe      	ldr	r6, [r7, #12]
 801e446:	fb08 f305 	mul.w	r3, r8, r5
 801e44a:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
 801e44e:	fb0c f909 	mul.w	r9, ip, r9
 801e452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e456:	464f      	mov	r7, r9
 801e458:	eb02 0e03 	add.w	lr, r2, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e45c:	eba5 03c5 	sub.w	r3, r5, r5, lsl #3
 801e460:	1958      	adds	r0, r3, r5
 801e462:	9b00      	ldr	r3, [sp, #0]
 801e464:	fb08 f503 	mul.w	r5, r8, r3
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e468:	ea4f 4a25 	mov.w	sl, r5, asr #16
 801e46c:	eb0b 090e 	add.w	r9, fp, lr
 801e470:	4639      	mov	r1, r7
 801e472:	fb04 fa0a 	mul.w	sl, r4, sl
 801e476:	464a      	mov	r2, r9
 801e478:	e9cd 8501 	strd	r8, r5, [sp, #4]
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801e47c:	eb0a 4321 	add.w	r3, sl, r1, asr #16
 801e480:	1ed5      	subs	r5, r2, #3
 801e482:	eba1 010c 	sub.w	r1, r1, ip
 801e486:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 801e48a:	45ae      	cmp	lr, r5
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801e48c:	f836 8003 	ldrh.w	r8, [r6, r3]
 801e490:	4433      	add	r3, r6
 801e492:	789b      	ldrb	r3, [r3, #2]
 801e494:	f822 8c03 	strh.w	r8, [r2, #-3]
 801e498:	f802 3c01 	strb.w	r3, [r2, #-1]
					for (int x = dstW - 1; x >= 0; x--)
 801e49c:	462a      	mov	r2, r5
 801e49e:	d1ed      	bne.n	801e47c <STM32Ipl_Downscale+0xdc>
 801e4a0:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e4a2:	eb00 0e09 	add.w	lr, r0, r9
 801e4a6:	e9dd 8501 	ldrd	r8, r5, [sp, #4]
 801e4aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801e4ae:	1aed      	subs	r5, r5, r3
 801e4b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e4b4:	d1d8      	bne.n	801e468 <STM32Ipl_Downscale+0xc8>
			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
 801e4b6:	2000      	movs	r0, #0
}
 801e4b8:	b007      	add	sp, #28
 801e4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e4be:	f10a 3eff 	add.w	lr, sl, #4294967295
 801e4c2:	68f6      	ldr	r6, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e4c4:	f105 3bff 	add.w	fp, r5, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e4c8:	ebc5 7a85 	rsb	sl, r5, r5, lsl #30
 801e4cc:	fb0e f305 	mul.w	r3, lr, r5
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e4d0:	68ff      	ldr	r7, [r7, #12]
 801e4d2:	fb0c fb0b 	mul.w	fp, ip, fp
 801e4d6:	006d      	lsls	r5, r5, #1
 801e4d8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e4dc:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e4de:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801e4e2:	fb0e f803 	mul.w	r8, lr, r3
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e4e6:	ea4f 4028 	mov.w	r0, r8, asr #16
 801e4ea:	eb05 0906 	add.w	r9, r5, r6
 801e4ee:	465a      	mov	r2, fp
 801e4f0:	fb04 f000 	mul.w	r0, r4, r0
 801e4f4:	464b      	mov	r3, r9
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801e4f6:	eb00 4122 	add.w	r1, r0, r2, asr #16
 801e4fa:	eba2 020c 	sub.w	r2, r2, ip
 801e4fe:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801e502:	f823 1d02 	strh.w	r1, [r3, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 801e506:	429e      	cmp	r6, r3
 801e508:	d1f5      	bne.n	801e4f6 <STM32Ipl_Downscale+0x156>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e50a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e50e:	9b00      	ldr	r3, [sp, #0]
 801e510:	eb0a 0609 	add.w	r6, sl, r9
 801e514:	f1be 3fff 	cmp.w	lr, #4294967295
 801e518:	eba8 0803 	sub.w	r8, r8, r3
 801e51c:	d1e3      	bne.n	801e4e6 <STM32Ipl_Downscale+0x146>
 801e51e:	e7ca      	b.n	801e4b6 <STM32Ipl_Downscale+0x116>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e520:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e524:	462b      	mov	r3, r5
 801e526:	e000      	b.n	801e52a <STM32Ipl_Downscale+0x18a>
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801e528:	6833      	ldr	r3, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801e52a:	68f0      	ldr	r0, [r6, #12]
 801e52c:	462a      	mov	r2, r5
 801e52e:	2100      	movs	r1, #0
 801e530:	fb03 000a 	mla	r0, r3, sl, r0
 801e534:	f016 fb85 	bl	8034c42 <memset>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e538:	f1ba 0a01 	subs.w	sl, sl, #1
 801e53c:	d3bb      	bcc.n	801e4b6 <STM32Ipl_Downscale+0x116>
 801e53e:	e7f3      	b.n	801e528 <STM32Ipl_Downscale+0x188>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e540:	341f      	adds	r4, #31
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e542:	f10a 3eff 	add.w	lr, sl, #4294967295
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e546:	f8d7 900c 	ldr.w	r9, [r7, #12]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e54a:	f04f 0a01 	mov.w	sl, #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e54e:	0963      	lsrs	r3, r4, #5
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e550:	1e6c      	subs	r4, r5, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801e552:	68f6      	ldr	r6, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e554:	9303      	str	r3, [sp, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801e556:	f105 031f 	add.w	r3, r5, #31
 801e55a:	fb04 f50c 	mul.w	r5, r4, ip
 801e55e:	0959      	lsrs	r1, r3, #5
 801e560:	9b00      	ldr	r3, [sp, #0]
 801e562:	fb01 f80e 	mul.w	r8, r1, lr
 801e566:	9104      	str	r1, [sp, #16]
 801e568:	4629      	mov	r1, r5
 801e56a:	fb0e fb03 	mul.w	fp, lr, r3
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e56e:	ea4f 472b 	mov.w	r7, fp, asr #16
 801e572:	9b03      	ldr	r3, [sp, #12]
 801e574:	4608      	mov	r0, r1
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e576:	4622      	mov	r2, r4
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e578:	fb03 f707 	mul.w	r7, r3, r7
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e57c:	e9cd e101 	strd	lr, r1, [sp, #4]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e580:	eb07 5360 	add.w	r3, r7, r0, asr #21
 801e584:	f3c0 4504 	ubfx	r5, r0, #16, #5
 801e588:	eb08 1e62 	add.w	lr, r8, r2, asr #5
 801e58c:	eba0 000c 	sub.w	r0, r0, ip
 801e590:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e594:	f856 102e 	ldr.w	r1, [r6, lr, lsl #2]
 801e598:	40eb      	lsrs	r3, r5
 801e59a:	f002 051f 	and.w	r5, r2, #31
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e59e:	3a01      	subs	r2, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e5a0:	f003 0301 	and.w	r3, r3, #1
 801e5a4:	40ab      	lsls	r3, r5
 801e5a6:	fa0a f505 	lsl.w	r5, sl, r5
 801e5aa:	ea21 0505 	bic.w	r5, r1, r5
 801e5ae:	432b      	orrs	r3, r5
 801e5b0:	f846 302e 	str.w	r3, [r6, lr, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801e5b4:	1c53      	adds	r3, r2, #1
 801e5b6:	d1e3      	bne.n	801e580 <STM32Ipl_Downscale+0x1e0>
 801e5b8:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801e5ba:	e9dd e101 	ldrd	lr, r1, [sp, #4]
 801e5be:	ebab 0b03 	sub.w	fp, fp, r3
 801e5c2:	9b04      	ldr	r3, [sp, #16]
 801e5c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e5c8:	eba8 0803 	sub.w	r8, r8, r3
 801e5cc:	f1be 3fff 	cmp.w	lr, #4294967295
 801e5d0:	d1cd      	bne.n	801e56e <STM32Ipl_Downscale+0x1ce>
 801e5d2:	e770      	b.n	801e4b6 <STM32Ipl_Downscale+0x116>
					rgb888_t *dstRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(dst, y);
 801e5d4:	f04f 0800 	mov.w	r8, #0
 801e5d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e5dc:	68f3      	ldr	r3, [r6, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e5de:	68f8      	ldr	r0, [r7, #12]
					rgb888_t *dstRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(dst, y);
 801e5e0:	46c3      	mov	fp, r8
 801e5e2:	eb03 0e02 	add.w	lr, r3, r2
				for (int32_t y = 0; y < dstH; y++) {
 801e5e6:	46c1      	mov	r9, r8
 801e5e8:	9201      	str	r2, [sp, #4]
 801e5ea:	9502      	str	r5, [sp, #8]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e5ec:	ea4f 472b 	mov.w	r7, fp, asr #16
 801e5f0:	2500      	movs	r5, #0
 801e5f2:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 801e5f6:	fb04 f707 	mul.w	r7, r4, r7
					for (int32_t x = 0; x < dstW; x++)
 801e5fa:	4419      	add	r1, r3
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801e5fc:	eb07 4225 	add.w	r2, r7, r5, asr #16
					for (int32_t x = 0; x < dstW; x++)
 801e600:	3103      	adds	r1, #3
 801e602:	4465      	add	r5, ip
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801e604:	eb02 0242 	add.w	r2, r2, r2, lsl #1
					for (int32_t x = 0; x < dstW; x++)
 801e608:	458e      	cmp	lr, r1
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801e60a:	eb00 0602 	add.w	r6, r0, r2
 801e60e:	5a82      	ldrh	r2, [r0, r2]
 801e610:	78b6      	ldrb	r6, [r6, #2]
 801e612:	f821 2c03 	strh.w	r2, [r1, #-3]
 801e616:	f801 6c01 	strb.w	r6, [r1, #-1]
					for (int32_t x = 0; x < dstW; x++)
 801e61a:	d1ef      	bne.n	801e5fc <STM32Ipl_Downscale+0x25c>
				for (int32_t y = 0; y < dstH; y++) {
 801e61c:	9a00      	ldr	r2, [sp, #0]
 801e61e:	f109 0901 	add.w	r9, r9, #1
 801e622:	4493      	add	fp, r2
 801e624:	9a02      	ldr	r2, [sp, #8]
 801e626:	45ca      	cmp	sl, r9
 801e628:	4490      	add	r8, r2
 801e62a:	9a01      	ldr	r2, [sp, #4]
 801e62c:	4496      	add	lr, r2
 801e62e:	d1dd      	bne.n	801e5ec <STM32Ipl_Downscale+0x24c>
 801e630:	e741      	b.n	801e4b6 <STM32Ipl_Downscale+0x116>
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801e632:	f04f 0e00 	mov.w	lr, #0
 801e636:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 801e63a:	006b      	lsls	r3, r5, #1
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e63c:	68ff      	ldr	r7, [r7, #12]
 801e63e:	eb0b 0645 	add.w	r6, fp, r5, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801e642:	46f1      	mov	r9, lr
				for (int32_t y = 0; y < dstH; y++) {
 801e644:	46f0      	mov	r8, lr
 801e646:	9301      	str	r3, [sp, #4]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e648:	ea4f 4029 	mov.w	r0, r9, asr #16
 801e64c:	2300      	movs	r3, #0
 801e64e:	eb0b 024e 	add.w	r2, fp, lr, lsl #1
 801e652:	fb04 f000 	mul.w	r0, r4, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801e656:	eb00 4123 	add.w	r1, r0, r3, asr #16
					for (int32_t x = 0; x < dstW; x++)
 801e65a:	4463      	add	r3, ip
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801e65c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801e660:	f822 1b02 	strh.w	r1, [r2], #2
					for (int32_t x = 0; x < dstW; x++)
 801e664:	4296      	cmp	r6, r2
 801e666:	d1f6      	bne.n	801e656 <STM32Ipl_Downscale+0x2b6>
				for (int32_t y = 0; y < dstH; y++) {
 801e668:	9b00      	ldr	r3, [sp, #0]
 801e66a:	f108 0801 	add.w	r8, r8, #1
 801e66e:	44ae      	add	lr, r5
 801e670:	4499      	add	r9, r3
 801e672:	45c2      	cmp	sl, r8
 801e674:	9b01      	ldr	r3, [sp, #4]
 801e676:	441e      	add	r6, r3
 801e678:	d1e6      	bne.n	801e648 <STM32Ipl_Downscale+0x2a8>
 801e67a:	e71c      	b.n	801e4b6 <STM32Ipl_Downscale+0x116>
		switch (src->bpp) {
 801e67c:	f04f 0e00 	mov.w	lr, #0
 801e680:	4629      	mov	r1, r5
 801e682:	f8dd 8000 	ldr.w	r8, [sp]
				for (int32_t y = 0; y < dstH; y++) {
 801e686:	4670      	mov	r0, lr
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801e688:	68f3      	ldr	r3, [r6, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e68a:	ea4f 492e 	mov.w	r9, lr, asr #16
 801e68e:	68fa      	ldr	r2, [r7, #12]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801e690:	fb00 f101 	mul.w	r1, r0, r1
					for (int32_t x = 0; x < dstW; x++)
 801e694:	fb04 2909 	mla	r9, r4, r9, r2
 801e698:	195c      	adds	r4, r3, r5
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801e69a:	2200      	movs	r2, #0
 801e69c:	440b      	add	r3, r1
 801e69e:	440c      	add	r4, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801e6a0:	1411      	asrs	r1, r2, #16
					for (int32_t x = 0; x < dstW; x++)
 801e6a2:	4462      	add	r2, ip
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801e6a4:	f819 1001 	ldrb.w	r1, [r9, r1]
 801e6a8:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 801e6ac:	429c      	cmp	r4, r3
 801e6ae:	d1f7      	bne.n	801e6a0 <STM32Ipl_Downscale+0x300>
				for (int32_t y = 0; y < dstH; y++) {
 801e6b0:	3001      	adds	r0, #1
 801e6b2:	44c6      	add	lr, r8
 801e6b4:	4582      	cmp	sl, r0
 801e6b6:	f43f aefe 	beq.w	801e4b6 <STM32Ipl_Downscale+0x116>
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6ba:	683c      	ldr	r4, [r7, #0]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801e6bc:	6831      	ldr	r1, [r6, #0]
 801e6be:	e7e3      	b.n	801e688 <STM32Ipl_Downscale+0x2e8>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6c0:	341f      	adds	r4, #31
 801e6c2:	f8d7 900c 	ldr.w	r9, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801e6c6:	2700      	movs	r7, #0
 801e6c8:	68f2      	ldr	r2, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6ca:	0963      	lsrs	r3, r4, #5
				for (int32_t y = 0; y < dstH; y++) {
 801e6cc:	4683      	mov	fp, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e6ce:	f04f 0801 	mov.w	r8, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801e6d2:	463c      	mov	r4, r7
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6d4:	9302      	str	r3, [sp, #8]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801e6d6:	f105 031f 	add.w	r3, r5, #31
 801e6da:	095b      	lsrs	r3, r3, #5
 801e6dc:	e9cd 0a04 	strd	r0, sl, [sp, #16]
 801e6e0:	9303      	str	r3, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6e2:	ea4f 4a24 	mov.w	sl, r4, asr #16
 801e6e6:	9b02      	ldr	r3, [sp, #8]
					for (int32_t x = 0; x < dstW; x++)
 801e6e8:	9904      	ldr	r1, [sp, #16]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801e6ea:	2600      	movs	r6, #0
 801e6ec:	fb03 fa0a 	mul.w	sl, r3, sl
 801e6f0:	9401      	str	r4, [sp, #4]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e6f2:	eb0a 5366 	add.w	r3, sl, r6, asr #21
 801e6f6:	f3c6 4004 	ubfx	r0, r6, #16, #5
 801e6fa:	eb07 1e61 	add.w	lr, r7, r1, asr #5
					for (int32_t x = 0; x < dstW; x++)
 801e6fe:	4466      	add	r6, ip
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e700:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e704:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 801e708:	40c3      	lsrs	r3, r0
 801e70a:	f001 001f 	and.w	r0, r1, #31
					for (int32_t x = 0; x < dstW; x++)
 801e70e:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e710:	f003 0301 	and.w	r3, r3, #1
					for (int32_t x = 0; x < dstW; x++)
 801e714:	428d      	cmp	r5, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801e716:	fa03 f300 	lsl.w	r3, r3, r0
 801e71a:	fa08 f000 	lsl.w	r0, r8, r0
 801e71e:	ea24 0000 	bic.w	r0, r4, r0
 801e722:	ea43 0300 	orr.w	r3, r3, r0
 801e726:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 801e72a:	d1e2      	bne.n	801e6f2 <STM32Ipl_Downscale+0x352>
				for (int32_t y = 0; y < dstH; y++) {
 801e72c:	9b00      	ldr	r3, [sp, #0]
 801e72e:	f10b 0b01 	add.w	fp, fp, #1
 801e732:	9c01      	ldr	r4, [sp, #4]
 801e734:	441c      	add	r4, r3
 801e736:	9b03      	ldr	r3, [sp, #12]
 801e738:	441f      	add	r7, r3
 801e73a:	9b05      	ldr	r3, [sp, #20]
 801e73c:	455b      	cmp	r3, fp
 801e73e:	d1d0      	bne.n	801e6e2 <STM32Ipl_Downscale+0x342>
 801e740:	e6b9      	b.n	801e4b6 <STM32Ipl_Downscale+0x116>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801e742:	f06f 0004 	mvn.w	r0, #4
}
 801e746:	b007      	add	sp, #28
 801e748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801e74c:	f06f 0001 	mvn.w	r0, #1
 801e750:	e6b2      	b.n	801e4b8 <STM32Ipl_Downscale+0x118>
 801e752:	f06f 0001 	mvn.w	r0, #1
}
 801e756:	4770      	bx	lr

0801e758 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801e758:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801e75a:	e9d0 2300 	ldrd	r2, r3, [r0]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801e75e:	4c14      	ldr	r4, [pc, #80]	@ (801e7b0 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801e760:	6881      	ldr	r1, [r0, #8]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801e762:	4e14      	ldr	r6, [pc, #80]	@ (801e7b4 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801e764:	e9c4 2300 	strd	r2, r3, [r4]
  FuncDriver.FillRect       = pDrv->FillRect;
 801e768:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801e76c:	e9c4 1302 	strd	r1, r3, [r4, #8]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801e770:	e9d0 3505 	ldrd	r3, r5, [r0, #20]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801e774:	e9c4 2304 	strd	r2, r3, [r4, #16]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801e778:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801e77c:	e9c4 5306 	strd	r5, r3, [r4, #24]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801e780:	6222      	str	r2, [r4, #32]
  DrawProp->LcdLayer = 0;
 801e782:	2500      	movs	r5, #0
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801e784:	e9d0 2109 	ldrd	r2, r1, [r0, #36]	@ 0x24
  DrawProp->LcdLayer = 0;
 801e788:	e9c6 5503 	strd	r5, r5, [r6, #12]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801e78c:	62a1      	str	r1, [r4, #40]	@ 0x28
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801e78e:	4628      	mov	r0, r5
 801e790:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801e794:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801e796:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801e798:	6a23      	ldr	r3, [r4, #32]
 801e79a:	f106 0118 	add.w	r1, r6, #24
 801e79e:	4628      	mov	r0, r5
 801e7a0:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801e7a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e7a4:	f106 011c 	add.w	r1, r6, #28
 801e7a8:	4628      	mov	r0, r5
}
 801e7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801e7ae:	4718      	bx	r3
 801e7b0:	24009a08 	.word	0x24009a08
 801e7b4:	24009a38 	.word	0x24009a38

0801e7b8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801e7b8:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801e7ba:	4b05      	ldr	r3, [pc, #20]	@ (801e7d0 <UTIL_LCD_SetLayer+0x18>)
 801e7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7be:	b133      	cbz	r3, 801e7ce <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801e7c0:	4d04      	ldr	r5, [pc, #16]	@ (801e7d4 <UTIL_LCD_SetLayer+0x1c>)
 801e7c2:	4604      	mov	r4, r0
 801e7c4:	4601      	mov	r1, r0
 801e7c6:	6928      	ldr	r0, [r5, #16]
 801e7c8:	4798      	blx	r3
 801e7ca:	b900      	cbnz	r0, 801e7ce <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801e7cc:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801e7ce:	bd38      	pop	{r3, r4, r5, pc}
 801e7d0:	24009a08 	.word	0x24009a08
 801e7d4:	24009a38 	.word	0x24009a38

0801e7d8 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801e7d8:	4a02      	ldr	r2, [pc, #8]	@ (801e7e4 <UTIL_LCD_SetTextColor+0xc>)
 801e7da:	68d3      	ldr	r3, [r2, #12]
 801e7dc:	015b      	lsls	r3, r3, #5
 801e7de:	50d0      	str	r0, [r2, r3]
}
 801e7e0:	4770      	bx	lr
 801e7e2:	bf00      	nop
 801e7e4:	24009a38 	.word	0x24009a38

0801e7e8 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801e7e8:	4b02      	ldr	r3, [pc, #8]	@ (801e7f4 <UTIL_LCD_SetBackColor+0xc>)
 801e7ea:	68da      	ldr	r2, [r3, #12]
 801e7ec:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801e7f0:	6058      	str	r0, [r3, #4]
}
 801e7f2:	4770      	bx	lr
 801e7f4:	24009a38 	.word	0x24009a38

0801e7f8 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801e7f8:	4b02      	ldr	r3, [pc, #8]	@ (801e804 <UTIL_LCD_SetFont+0xc>)
 801e7fa:	68da      	ldr	r2, [r3, #12]
 801e7fc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801e800:	6098      	str	r0, [r3, #8]
}
 801e802:	4770      	bx	lr
 801e804:	24009a38 	.word	0x24009a38

0801e808 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801e808:	4b02      	ldr	r3, [pc, #8]	@ (801e814 <UTIL_LCD_GetFont+0xc>)
 801e80a:	68da      	ldr	r2, [r3, #12]
 801e80c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801e810:	6898      	ldr	r0, [r3, #8]
 801e812:	4770      	bx	lr
 801e814:	24009a38 	.word	0x24009a38

0801e818 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 801e818:	b570      	push	{r4, r5, r6, lr}
 801e81a:	461c      	mov	r4, r3
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e81c:	4b11      	ldr	r3, [pc, #68]	@ (801e864 <UTIL_LCD_DrawHLine+0x4c>)
 801e81e:	4d12      	ldr	r5, [pc, #72]	@ (801e868 <UTIL_LCD_DrawHLine+0x50>)
{
 801e820:	4684      	mov	ip, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e822:	69de      	ldr	r6, [r3, #28]
{
 801e824:	b082      	sub	sp, #8
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e826:	68ad      	ldr	r5, [r5, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e828:	2e02      	cmp	r6, #2
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e82a:	6918      	ldr	r0, [r3, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e82c:	d006      	beq.n	801e83c <UTIL_LCD_DrawHLine+0x24>
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801e82e:	4613      	mov	r3, r2
 801e830:	460a      	mov	r2, r1
 801e832:	4661      	mov	r1, ip
 801e834:	9400      	str	r4, [sp, #0]
 801e836:	47a8      	blx	r5
  }
}
 801e838:	b002      	add	sp, #8
 801e83a:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e83c:	4613      	mov	r3, r2
 801e83e:	0a26      	lsrs	r6, r4, #8
 801e840:	460a      	mov	r2, r1
 801e842:	4661      	mov	r1, ip
 801e844:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 801e848:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e84c:	f3c4 0ec4 	ubfx	lr, r4, #3, #5
 801e850:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e854:	ea4c 0406 	orr.w	r4, ip, r6
 801e858:	ea44 040e 	orr.w	r4, r4, lr
 801e85c:	9400      	str	r4, [sp, #0]
 801e85e:	47a8      	blx	r5
}
 801e860:	b002      	add	sp, #8
 801e862:	bd70      	pop	{r4, r5, r6, pc}
 801e864:	24009a38 	.word	0x24009a38
 801e868:	24009a08 	.word	0x24009a08

0801e86c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 801e86c:	b570      	push	{r4, r5, r6, lr}
 801e86e:	461c      	mov	r4, r3
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e870:	4b11      	ldr	r3, [pc, #68]	@ (801e8b8 <UTIL_LCD_DrawVLine+0x4c>)
 801e872:	4d12      	ldr	r5, [pc, #72]	@ (801e8bc <UTIL_LCD_DrawVLine+0x50>)
{
 801e874:	4684      	mov	ip, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e876:	69de      	ldr	r6, [r3, #28]
{
 801e878:	b082      	sub	sp, #8
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e87a:	68ed      	ldr	r5, [r5, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e87c:	2e02      	cmp	r6, #2
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e87e:	6918      	ldr	r0, [r3, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e880:	d006      	beq.n	801e890 <UTIL_LCD_DrawVLine+0x24>
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801e882:	4613      	mov	r3, r2
 801e884:	460a      	mov	r2, r1
 801e886:	4661      	mov	r1, ip
 801e888:	9400      	str	r4, [sp, #0]
 801e88a:	47a8      	blx	r5
  }
}
 801e88c:	b002      	add	sp, #8
 801e88e:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801e890:	4613      	mov	r3, r2
 801e892:	0a26      	lsrs	r6, r4, #8
 801e894:	460a      	mov	r2, r1
 801e896:	4661      	mov	r1, ip
 801e898:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 801e89c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e8a0:	f3c4 0ec4 	ubfx	lr, r4, #3, #5
 801e8a4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e8a8:	ea4c 0406 	orr.w	r4, ip, r6
 801e8ac:	ea44 040e 	orr.w	r4, r4, lr
 801e8b0:	9400      	str	r4, [sp, #0]
 801e8b2:	47a8      	blx	r5
}
 801e8b4:	b002      	add	sp, #8
 801e8b6:	bd70      	pop	{r4, r5, r6, pc}
 801e8b8:	24009a38 	.word	0x24009a38
 801e8bc:	24009a08 	.word	0x24009a08

0801e8c0 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801e8c0:	4a13      	ldr	r2, [pc, #76]	@ (801e910 <UTIL_LCD_Clear+0x50>)
{
 801e8c2:	4601      	mov	r1, r0
 801e8c4:	b570      	push	{r4, r5, r6, lr}
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e8c6:	69d6      	ldr	r6, [r2, #28]
{
 801e8c8:	b082      	sub	sp, #8
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801e8ca:	4c12      	ldr	r4, [pc, #72]	@ (801e914 <UTIL_LCD_Clear+0x54>)
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e8cc:	2e02      	cmp	r6, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801e8ce:	6953      	ldr	r3, [r2, #20]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801e8d0:	6924      	ldr	r4, [r4, #16]
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801e8d2:	6995      	ldr	r5, [r2, #24]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801e8d4:	6910      	ldr	r0, [r2, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e8d6:	d006      	beq.n	801e8e6 <UTIL_LCD_Clear+0x26>
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801e8d8:	2200      	movs	r2, #0
 801e8da:	9101      	str	r1, [sp, #4]
 801e8dc:	9500      	str	r5, [sp, #0]
 801e8de:	4611      	mov	r1, r2
 801e8e0:	47a0      	blx	r4
}
 801e8e2:	b002      	add	sp, #8
 801e8e4:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801e8e6:	9500      	str	r5, [sp, #0]
 801e8e8:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 801e8ec:	0a0d      	lsrs	r5, r1, #8
 801e8ee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801e8f2:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e8fc:	ea4c 0c05 	orr.w	ip, ip, r5
 801e900:	ea4c 0101 	orr.w	r1, ip, r1
 801e904:	9101      	str	r1, [sp, #4]
 801e906:	4611      	mov	r1, r2
 801e908:	47a0      	blx	r4
}
 801e90a:	b002      	add	sp, #8
 801e90c:	bd70      	pop	{r4, r5, r6, pc}
 801e90e:	bf00      	nop
 801e910:	24009a38 	.word	0x24009a38
 801e914:	24009a08 	.word	0x24009a08

0801e918 <UTIL_LCD_DisplayChar>:
{
 801e918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e91c:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 801ea90 <UTIL_LCD_DisplayChar+0x178>
{
 801e920:	b0ad      	sub	sp, #180	@ 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e922:	3a20      	subs	r2, #32
 801e924:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
 801e928:	9004      	str	r0, [sp, #16]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e92a:	eb08 1443 	add.w	r4, r8, r3, lsl #5
 801e92e:	0158      	lsls	r0, r3, #5
 801e930:	68a3      	ldr	r3, [r4, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e932:	889d      	ldrh	r5, [r3, #4]
 801e934:	88dc      	ldrh	r4, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e936:	681f      	ldr	r7, [r3, #0]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e938:	462b      	mov	r3, r5
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801e93a:	fb04 f202 	mul.w	r2, r4, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e93e:	3307      	adds	r3, #7
 801e940:	9502      	str	r5, [sp, #8]
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801e942:	f023 0607 	bic.w	r6, r3, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e946:	10dd      	asrs	r5, r3, #3
  offset =  8 *((width + 7)/8) -  width ;
 801e948:	9606      	str	r6, [sp, #24]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801e94a:	fb05 f202 	mul.w	r2, r5, r2

  for(i = 0; i < height; i++)
 801e94e:	2c00      	cmp	r4, #0
 801e950:	d07f      	beq.n	801ea52 <UTIL_LCD_DisplayChar+0x13a>
 801e952:	4417      	add	r7, r2
 801e954:	190a      	adds	r2, r1, r4
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801e956:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
 801e95a:	9b02      	ldr	r3, [sp, #8]
 801e95c:	9205      	str	r2, [sp, #20]
 801e95e:	aa14      	add	r2, sp, #80	@ 0x50
 801e960:	1c4e      	adds	r6, r1, #1

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801e962:	2401      	movs	r4, #1
 801e964:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e968:	aa08      	add	r2, sp, #32
 801e96a:	4601      	mov	r1, r0
 801e96c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e970:	9503      	str	r5, [sp, #12]
    switch(((width + 7)/8))
 801e972:	f1bb 0f01 	cmp.w	fp, #1
 801e976:	f106 3aff 	add.w	sl, r6, #4294967295
      line =  pchar[0];
 801e97a:	783b      	ldrb	r3, [r7, #0]
    switch(((width + 7)/8))
 801e97c:	d005      	beq.n	801e98a <UTIL_LCD_DisplayChar+0x72>
 801e97e:	f1bb 0f02 	cmp.w	fp, #2
 801e982:	d17c      	bne.n	801ea7e <UTIL_LCD_DisplayChar+0x166>
      line =  (pchar[0]<< 8) | pchar[1];
 801e984:	883b      	ldrh	r3, [r7, #0]
 801e986:	ba5b      	rev16	r3, r3
 801e988:	b29b      	uxth	r3, r3
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e98a:	4441      	add	r1, r8
 801e98c:	69ca      	ldr	r2, [r1, #28]
 801e98e:	2a02      	cmp	r2, #2
      for (j = 0; j < width; j++)
 801e990:	9a02      	ldr	r2, [sp, #8]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e992:	d02d      	beq.n	801e9f0 <UTIL_LCD_DisplayChar+0xd8>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801e994:	b182      	cbz	r2, 801e9b8 <UTIL_LCD_DisplayChar+0xa0>
 801e996:	9a06      	ldr	r2, [sp, #24]
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801e998:	9d03      	ldr	r5, [sp, #12]
 801e99a:	e9d1 ce00 	ldrd	ip, lr, [r1]
 801e99e:	1e51      	subs	r1, r2, #1
 801e9a0:	aa14      	add	r2, sp, #80	@ 0x50
        if(line & (1 << (width- j + offset- 1)))
 801e9a2:	fa04 f001 	lsl.w	r0, r4, r1
 801e9a6:	4218      	tst	r0, r3
 801e9a8:	d11b      	bne.n	801e9e2 <UTIL_LCD_DisplayChar+0xca>
 801e9aa:	f842 eb04 	str.w	lr, [r2], #4
      for (j = 0; j < width; j++)
 801e9ae:	42aa      	cmp	r2, r5
 801e9b0:	f101 31ff 	add.w	r1, r1, #4294967295
 801e9b4:	d1f5      	bne.n	801e9a2 <UTIL_LCD_DisplayChar+0x8a>
 801e9b6:	9503      	str	r5, [sp, #12]
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801e9b8:	9b02      	ldr	r3, [sp, #8]
 801e9ba:	4652      	mov	r2, sl
 801e9bc:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801e9be:	445f      	add	r7, fp
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801e9c0:	9300      	str	r3, [sp, #0]
 801e9c2:	4b32      	ldr	r3, [pc, #200]	@ (801ea8c <UTIL_LCD_DisplayChar+0x174>)
 801e9c4:	9904      	ldr	r1, [sp, #16]
 801e9c6:	685b      	ldr	r3, [r3, #4]
 801e9c8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801e9cc:	461d      	mov	r5, r3
 801e9ce:	ab14      	add	r3, sp, #80	@ 0x50
 801e9d0:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801e9d2:	9b05      	ldr	r3, [sp, #20]
 801e9d4:	42b3      	cmp	r3, r6
 801e9d6:	d03c      	beq.n	801ea52 <UTIL_LCD_DisplayChar+0x13a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801e9d8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801e9dc:	3601      	adds	r6, #1
 801e9de:	0149      	lsls	r1, r1, #5
 801e9e0:	e7c7      	b.n	801e972 <UTIL_LCD_DisplayChar+0x5a>
 801e9e2:	f842 cb04 	str.w	ip, [r2], #4
      for (j = 0; j < width; j++)
 801e9e6:	4295      	cmp	r5, r2
 801e9e8:	f101 31ff 	add.w	r1, r1, #4294967295
 801e9ec:	d1d9      	bne.n	801e9a2 <UTIL_LCD_DisplayChar+0x8a>
 801e9ee:	e7e2      	b.n	801e9b6 <UTIL_LCD_DisplayChar+0x9e>
      for (j = 0; j < width; j++)
 801e9f0:	b1fa      	cbz	r2, 801ea32 <UTIL_LCD_DisplayChar+0x11a>
 801e9f2:	9a06      	ldr	r2, [sp, #24]
 801e9f4:	a808      	add	r0, sp, #32
 801e9f6:	9d03      	ldr	r5, [sp, #12]
 801e9f8:	f102 3cff 	add.w	ip, r2, #4294967295
 801e9fc:	f8cd b01c 	str.w	fp, [sp, #28]
        if(line & (1 << (width- j + offset- 1)))
 801ea00:	fa04 f20c 	lsl.w	r2, r4, ip
 801ea04:	421a      	tst	r2, r3
 801ea06:	d027      	beq.n	801ea58 <UTIL_LCD_DisplayChar+0x140>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801ea08:	680a      	ldr	r2, [r1, #0]
      for (j = 0; j < width; j++)
 801ea0a:	f10c 3cff 	add.w	ip, ip, #4294967295
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801ea0e:	f3c2 0ec4 	ubfx	lr, r2, #3, #5
 801ea12:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 801ea16:	0952      	lsrs	r2, r2, #5
 801ea18:	ea4e 2ecb 	orr.w	lr, lr, fp, lsl #11
 801ea1c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ea20:	ea4e 0e02 	orr.w	lr, lr, r2
 801ea24:	f820 eb02 	strh.w	lr, [r0], #2
      for (j = 0; j < width; j++)
 801ea28:	4548      	cmp	r0, r9
 801ea2a:	d1e9      	bne.n	801ea00 <UTIL_LCD_DisplayChar+0xe8>
 801ea2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ea30:	9503      	str	r5, [sp, #12]
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801ea32:	9b02      	ldr	r3, [sp, #8]
 801ea34:	4652      	mov	r2, sl
 801ea36:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801ea38:	445f      	add	r7, fp
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801ea3a:	9300      	str	r3, [sp, #0]
 801ea3c:	4b13      	ldr	r3, [pc, #76]	@ (801ea8c <UTIL_LCD_DisplayChar+0x174>)
 801ea3e:	9904      	ldr	r1, [sp, #16]
 801ea40:	685b      	ldr	r3, [r3, #4]
 801ea42:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ea46:	461d      	mov	r5, r3
 801ea48:	ab08      	add	r3, sp, #32
 801ea4a:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801ea4c:	9b05      	ldr	r3, [sp, #20]
 801ea4e:	42b3      	cmp	r3, r6
 801ea50:	d1c2      	bne.n	801e9d8 <UTIL_LCD_DisplayChar+0xc0>
}
 801ea52:	b02d      	add	sp, #180	@ 0xb4
 801ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801ea58:	684a      	ldr	r2, [r1, #4]
      for (j = 0; j < width; j++)
 801ea5a:	f10c 3cff 	add.w	ip, ip, #4294967295
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801ea5e:	f3c2 0ec4 	ubfx	lr, r2, #3, #5
 801ea62:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 801ea66:	0952      	lsrs	r2, r2, #5
 801ea68:	ea4e 2ecb 	orr.w	lr, lr, fp, lsl #11
 801ea6c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ea70:	ea4e 0e02 	orr.w	lr, lr, r2
 801ea74:	f820 eb02 	strh.w	lr, [r0], #2
      for (j = 0; j < width; j++)
 801ea78:	4581      	cmp	r9, r0
 801ea7a:	d1c1      	bne.n	801ea00 <UTIL_LCD_DisplayChar+0xe8>
 801ea7c:	e7d6      	b.n	801ea2c <UTIL_LCD_DisplayChar+0x114>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801ea7e:	787a      	ldrb	r2, [r7, #1]
 801ea80:	041b      	lsls	r3, r3, #16
 801ea82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ea86:	78ba      	ldrb	r2, [r7, #2]
 801ea88:	4313      	orrs	r3, r2
      break;
 801ea8a:	e77e      	b.n	801e98a <UTIL_LCD_DisplayChar+0x72>
 801ea8c:	24009a08 	.word	0x24009a08
 801ea90:	24009a38 	.word	0x24009a38

0801ea94 <UTIL_LCD_DisplayStringAt>:
{
 801ea94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea98:	4604      	mov	r4, r0
  while (*ptr++) size ++ ;
 801ea9a:	4610      	mov	r0, r2
{
 801ea9c:	4615      	mov	r5, r2
 801ea9e:	b082      	sub	sp, #8
  while (*ptr++) size ++ ;
 801eaa0:	f810 2b01 	ldrb.w	r2, [r0], #1
{
 801eaa4:	460e      	mov	r6, r1
 801eaa6:	461f      	mov	r7, r3
  while (*ptr++) size ++ ;
 801eaa8:	2a00      	cmp	r2, #0
 801eaaa:	d047      	beq.n	801eb3c <UTIL_LCD_DisplayStringAt+0xa8>
 801eaac:	9201      	str	r2, [sp, #4]
 801eaae:	f7f1 fb17 	bl	80100e0 <strlen>
 801eab2:	9a01      	ldr	r2, [sp, #4]
 801eab4:	3001      	adds	r0, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801eab6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801eb40 <UTIL_LCD_DisplayStringAt+0xac>
  switch (Mode)
 801eaba:	2f01      	cmp	r7, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801eabc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eac0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801eac4:	eb08 1343 	add.w	r3, r8, r3, lsl #5
 801eac8:	689b      	ldr	r3, [r3, #8]
 801eaca:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 801eace:	fbb1 f3fc 	udiv	r3, r1, ip
  switch (Mode)
 801ead2:	d02d      	beq.n	801eb30 <UTIL_LCD_DisplayStringAt+0x9c>
 801ead4:	2f02      	cmp	r7, #2
 801ead6:	d026      	beq.n	801eb26 <UTIL_LCD_DisplayStringAt+0x92>
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ead8:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801eada:	1e60      	subs	r0, r4, #1
 801eadc:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
    refcolumn = 1;
 801eae0:	4298      	cmp	r0, r3
 801eae2:	bf88      	it	hi
 801eae4:	2401      	movhi	r4, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801eae6:	458c      	cmp	ip, r1
 801eae8:	d81a      	bhi.n	801eb20 <UTIL_LCD_DisplayStringAt+0x8c>
 801eaea:	b1ca      	cbz	r2, 801eb20 <UTIL_LCD_DisplayStringAt+0x8c>
 801eaec:	f1c5 0701 	rsb	r7, r5, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	4631      	mov	r1, r6
 801eaf4:	f7ff ff10 	bl	801e918 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801eaf8:	f8d8 200c 	ldr.w	r2, [r8, #12]
    i++;
 801eafc:	1978      	adds	r0, r7, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801eafe:	f8d8 3014 	ldr.w	r3, [r8, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801eb02:	eb08 1142 	add.w	r1, r8, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801eb06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801eb0a:	6889      	ldr	r1, [r1, #8]
 801eb0c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801eb10:	fb00 331c 	mls	r3, r0, ip, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801eb14:	4464      	add	r4, ip
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801eb16:	b29b      	uxth	r3, r3
 801eb18:	459c      	cmp	ip, r3
 801eb1a:	d801      	bhi.n	801eb20 <UTIL_LCD_DisplayStringAt+0x8c>
 801eb1c:	2a00      	cmp	r2, #0
 801eb1e:	d1e7      	bne.n	801eaf0 <UTIL_LCD_DisplayStringAt+0x5c>
}
 801eb20:	b002      	add	sp, #8
 801eb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801eb26:	1a1b      	subs	r3, r3, r0
 801eb28:	fb0c f303 	mul.w	r3, ip, r3
 801eb2c:	1b1c      	subs	r4, r3, r4
      break;
 801eb2e:	e7d3      	b.n	801ead8 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801eb30:	1a1b      	subs	r3, r3, r0
 801eb32:	fb0c f303 	mul.w	r3, ip, r3
 801eb36:	eb04 0453 	add.w	r4, r4, r3, lsr #1
      break;
 801eb3a:	e7cd      	b.n	801ead8 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 801eb3c:	4610      	mov	r0, r2
 801eb3e:	e7ba      	b.n	801eab6 <UTIL_LCD_DisplayStringAt+0x22>
 801eb40:	24009a38 	.word	0x24009a38

0801eb44 <UTIL_LCD_DrawRect>:
{
 801eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb48:	4d3e      	ldr	r5, [pc, #248]	@ (801ec44 <UTIL_LCD_DrawRect+0x100>)
{
 801eb4a:	4698      	mov	r8, r3
 801eb4c:	b083      	sub	sp, #12
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb4e:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 801ec48 <UTIL_LCD_DrawRect+0x104>
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb52:	69eb      	ldr	r3, [r5, #28]
{
 801eb54:	4682      	mov	sl, r0
 801eb56:	460f      	mov	r7, r1
 801eb58:	4614      	mov	r4, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb5a:	2b02      	cmp	r3, #2
{
 801eb5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb5e:	6928      	ldr	r0, [r5, #16]
 801eb60:	f8d9 b008 	ldr.w	fp, [r9, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb64:	d02d      	beq.n	801ebc2 <UTIL_LCD_DrawRect+0x7e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801eb66:	4613      	mov	r3, r2
 801eb68:	9600      	str	r6, [sp, #0]
 801eb6a:	460a      	mov	r2, r1
 801eb6c:	4651      	mov	r1, sl
 801eb6e:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb70:	69eb      	ldr	r3, [r5, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801eb72:	f108 32ff 	add.w	r2, r8, #4294967295
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb76:	f8d9 b008 	ldr.w	fp, [r9, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb7a:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801eb7c:	443a      	add	r2, r7
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb7e:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb80:	d051      	beq.n	801ec26 <UTIL_LCD_DrawRect+0xe2>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801eb82:	4623      	mov	r3, r4
 801eb84:	4651      	mov	r1, sl
 801eb86:	9600      	str	r6, [sp, #0]
 801eb88:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb8a:	69eb      	ldr	r3, [r5, #28]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb8c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb90:	2b02      	cmp	r3, #2
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eb92:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eb94:	d037      	beq.n	801ec06 <UTIL_LCD_DrawRect+0xc2>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801eb96:	4643      	mov	r3, r8
 801eb98:	463a      	mov	r2, r7
 801eb9a:	4651      	mov	r1, sl
 801eb9c:	9600      	str	r6, [sp, #0]
 801eb9e:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eba0:	69eb      	ldr	r3, [r5, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801eba2:	3c01      	subs	r4, #1
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801eba4:	f8d9 e00c 	ldr.w	lr, [r9, #12]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801eba8:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801ebaa:	eb04 010a 	add.w	r1, r4, sl
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ebae:	6928      	ldr	r0, [r5, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ebb0:	d017      	beq.n	801ebe2 <UTIL_LCD_DrawRect+0x9e>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ebb2:	4643      	mov	r3, r8
 801ebb4:	463a      	mov	r2, r7
 801ebb6:	46f4      	mov	ip, lr
 801ebb8:	960c      	str	r6, [sp, #48]	@ 0x30
}
 801ebba:	b003      	add	sp, #12
 801ebbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ebc0:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ebc2:	0973      	lsrs	r3, r6, #5
 801ebc4:	0a32      	lsrs	r2, r6, #8
 801ebc6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ebca:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801ebce:	4313      	orrs	r3, r2
 801ebd0:	f3c6 02c4 	ubfx	r2, r6, #3, #5
 801ebd4:	4313      	orrs	r3, r2
 801ebd6:	460a      	mov	r2, r1
 801ebd8:	4651      	mov	r1, sl
 801ebda:	9300      	str	r3, [sp, #0]
 801ebdc:	4623      	mov	r3, r4
 801ebde:	47d8      	blx	fp
}
 801ebe0:	e7c6      	b.n	801eb70 <UTIL_LCD_DrawRect+0x2c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ebe2:	0974      	lsrs	r4, r6, #5
 801ebe4:	4643      	mov	r3, r8
 801ebe6:	0a35      	lsrs	r5, r6, #8
 801ebe8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ebec:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801ebf0:	463a      	mov	r2, r7
 801ebf2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ebf6:	46f4      	mov	ip, lr
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ebf8:	432c      	orrs	r4, r5
 801ebfa:	4326      	orrs	r6, r4
 801ebfc:	960c      	str	r6, [sp, #48]	@ 0x30
}
 801ebfe:	b003      	add	sp, #12
 801ec00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ec04:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ec06:	0973      	lsrs	r3, r6, #5
 801ec08:	4651      	mov	r1, sl
 801ec0a:	0a32      	lsrs	r2, r6, #8
 801ec0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ec10:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801ec14:	4313      	orrs	r3, r2
 801ec16:	f3c6 02c4 	ubfx	r2, r6, #3, #5
 801ec1a:	4313      	orrs	r3, r2
 801ec1c:	463a      	mov	r2, r7
 801ec1e:	9300      	str	r3, [sp, #0]
 801ec20:	4643      	mov	r3, r8
 801ec22:	47d8      	blx	fp
}
 801ec24:	e7bc      	b.n	801eba0 <UTIL_LCD_DrawRect+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ec26:	0973      	lsrs	r3, r6, #5
 801ec28:	0a31      	lsrs	r1, r6, #8
 801ec2a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ec2e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801ec32:	430b      	orrs	r3, r1
 801ec34:	f3c6 01c4 	ubfx	r1, r6, #3, #5
 801ec38:	430b      	orrs	r3, r1
 801ec3a:	4651      	mov	r1, sl
 801ec3c:	9300      	str	r3, [sp, #0]
 801ec3e:	4623      	mov	r3, r4
 801ec40:	47d8      	blx	fp
}
 801ec42:	e7a2      	b.n	801eb8a <UTIL_LCD_DrawRect+0x46>
 801ec44:	24009a38 	.word	0x24009a38
 801ec48:	24009a08 	.word	0x24009a08

0801ec4c <ai_buffer_get_size>:
 801ec4c:	b368      	cbz	r0, 801ecaa <ai_buffer_get_size+0x5e>
 801ec4e:	4b17      	ldr	r3, [pc, #92]	@ (801ecac <ai_buffer_get_size+0x60>)
 801ec50:	4a17      	ldr	r2, [pc, #92]	@ (801ecb0 <ai_buffer_get_size+0x64>)
 801ec52:	b410      	push	{r4}
 801ec54:	6804      	ldr	r4, [r0, #0]
 801ec56:	4023      	ands	r3, r4
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	d123      	bne.n	801eca4 <ai_buffer_get_size+0x58>
 801ec5c:	b311      	cbz	r1, 801eca4 <ai_buffer_get_size+0x58>
 801ec5e:	6984      	ldr	r4, [r0, #24]
 801ec60:	6862      	ldr	r2, [r4, #4]
 801ec62:	321f      	adds	r2, #31
 801ec64:	f022 021f 	bic.w	r2, r2, #31
 801ec68:	7d03      	ldrb	r3, [r0, #20]
 801ec6a:	6941      	ldr	r1, [r0, #20]
 801ec6c:	f1a3 0301 	sub.w	r3, r3, #1
 801ec70:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801ec74:	fab3 f383 	clz	r3, r3
 801ec78:	095b      	lsrs	r3, r3, #5
 801ec7a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801ec7e:	da0c      	bge.n	801ec9a <ai_buffer_get_size+0x4e>
 801ec80:	2b01      	cmp	r3, #1
 801ec82:	d103      	bne.n	801ec8c <ai_buffer_get_size+0x40>
 801ec84:	2802      	cmp	r0, #2
 801ec86:	f04f 0302 	mov.w	r3, #2
 801ec8a:	d006      	beq.n	801ec9a <ai_buffer_get_size+0x4e>
 801ec8c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801ec90:	3301      	adds	r3, #1
 801ec92:	4298      	cmp	r0, r3
 801ec94:	fb01 f202 	mul.w	r2, r1, r2
 801ec98:	d1f2      	bne.n	801ec80 <ai_buffer_get_size+0x34>
 801ec9a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801ec9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eca2:	4770      	bx	lr
 801eca4:	6984      	ldr	r4, [r0, #24]
 801eca6:	6862      	ldr	r2, [r4, #4]
 801eca8:	e7de      	b.n	801ec68 <ai_buffer_get_size+0x1c>
 801ecaa:	4770      	bx	lr
 801ecac:	017fffff 	.word	0x017fffff
 801ecb0:	000400c0 	.word	0x000400c0

0801ecb4 <ai_buffer_array_sane>:
 801ecb4:	b138      	cbz	r0, 801ecc6 <ai_buffer_array_sane+0x12>
 801ecb6:	6843      	ldr	r3, [r0, #4]
 801ecb8:	b123      	cbz	r3, 801ecc4 <ai_buffer_array_sane+0x10>
 801ecba:	8840      	ldrh	r0, [r0, #2]
 801ecbc:	3800      	subs	r0, #0
 801ecbe:	bf18      	it	ne
 801ecc0:	2001      	movne	r0, #1
 801ecc2:	4770      	bx	lr
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	4770      	bx	lr

0801ecc8 <ai_buffer_array_item_set_address>:
 801ecc8:	b150      	cbz	r0, 801ece0 <ai_buffer_array_item_set_address+0x18>
 801ecca:	6843      	ldr	r3, [r0, #4]
 801eccc:	b14b      	cbz	r3, 801ece2 <ai_buffer_array_item_set_address+0x1a>
 801ecce:	8840      	ldrh	r0, [r0, #2]
 801ecd0:	b900      	cbnz	r0, 801ecd4 <ai_buffer_array_item_set_address+0xc>
 801ecd2:	4770      	bx	lr
 801ecd4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801ecd8:	2001      	movs	r0, #1
 801ecda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801ecde:	605a      	str	r2, [r3, #4]
 801ece0:	4770      	bx	lr
 801ece2:	4618      	mov	r0, r3
 801ece4:	4770      	bx	lr
 801ece6:	bf00      	nop

0801ece8 <ai_platform_get_weights_map>:
 801ece8:	2900      	cmp	r1, #0
 801ecea:	bf18      	it	ne
 801ecec:	2800      	cmpne	r0, #0
 801ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecf0:	bf0c      	ite	eq
 801ecf2:	2401      	moveq	r4, #1
 801ecf4:	2400      	movne	r4, #0
 801ecf6:	2a00      	cmp	r2, #0
 801ecf8:	bf08      	it	eq
 801ecfa:	f044 0401 	orreq.w	r4, r4, #1
 801ecfe:	b114      	cbz	r4, 801ed06 <ai_platform_get_weights_map+0x1e>
 801ed00:	2400      	movs	r4, #0
 801ed02:	4620      	mov	r0, r4
 801ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed06:	4616      	mov	r6, r2
 801ed08:	4b22      	ldr	r3, [pc, #136]	@ (801ed94 <ai_platform_get_weights_map+0xac>)
 801ed0a:	6812      	ldr	r2, [r2, #0]
 801ed0c:	4605      	mov	r5, r0
 801ed0e:	460f      	mov	r7, r1
 801ed10:	429a      	cmp	r2, r3
 801ed12:	d022      	beq.n	801ed5a <ai_platform_get_weights_map+0x72>
 801ed14:	6870      	ldr	r0, [r6, #4]
 801ed16:	2800      	cmp	r0, #0
 801ed18:	d0f2      	beq.n	801ed00 <ai_platform_get_weights_map+0x18>
 801ed1a:	6806      	ldr	r6, [r0, #0]
 801ed1c:	429e      	cmp	r6, r3
 801ed1e:	d006      	beq.n	801ed2e <ai_platform_get_weights_map+0x46>
 801ed20:	f1a1 0401 	sub.w	r4, r1, #1
 801ed24:	6028      	str	r0, [r5, #0]
 801ed26:	fab4 f484 	clz	r4, r4
 801ed2a:	0964      	lsrs	r4, r4, #5
 801ed2c:	e7e9      	b.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed2e:	3d04      	subs	r5, #4
 801ed30:	4602      	mov	r2, r0
 801ed32:	4621      	mov	r1, r4
 801ed34:	e000      	b.n	801ed38 <ai_platform_get_weights_map+0x50>
 801ed36:	4619      	mov	r1, r3
 801ed38:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801ed3c:	42b3      	cmp	r3, r6
 801ed3e:	d025      	beq.n	801ed8c <ai_platform_get_weights_map+0xa4>
 801ed40:	f845 3f04 	str.w	r3, [r5, #4]!
 801ed44:	1c4b      	adds	r3, r1, #1
 801ed46:	429f      	cmp	r7, r3
 801ed48:	d8f5      	bhi.n	801ed36 <ai_platform_get_weights_map+0x4e>
 801ed4a:	d1da      	bne.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed4c:	3102      	adds	r1, #2
 801ed4e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801ed52:	42b3      	cmp	r3, r6
 801ed54:	d1d5      	bne.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed56:	2401      	movs	r4, #1
 801ed58:	e7d3      	b.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed5a:	1d30      	adds	r0, r6, #4
 801ed5c:	f7ff ffaa 	bl	801ecb4 <ai_buffer_array_sane>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	d0cd      	beq.n	801ed00 <ai_platform_get_weights_map+0x18>
 801ed64:	88f3      	ldrh	r3, [r6, #6]
 801ed66:	429f      	cmp	r7, r3
 801ed68:	d1ca      	bne.n	801ed00 <ai_platform_get_weights_map+0x18>
 801ed6a:	3d04      	subs	r5, #4
 801ed6c:	4622      	mov	r2, r4
 801ed6e:	68b3      	ldr	r3, [r6, #8]
 801ed70:	4423      	add	r3, r4
 801ed72:	341c      	adds	r4, #28
 801ed74:	685b      	ldr	r3, [r3, #4]
 801ed76:	b123      	cbz	r3, 801ed82 <ai_platform_get_weights_map+0x9a>
 801ed78:	3201      	adds	r2, #1
 801ed7a:	f845 3f04 	str.w	r3, [r5, #4]!
 801ed7e:	4297      	cmp	r7, r2
 801ed80:	d8f5      	bhi.n	801ed6e <ai_platform_get_weights_map+0x86>
 801ed82:	1abc      	subs	r4, r7, r2
 801ed84:	fab4 f484 	clz	r4, r4
 801ed88:	0964      	lsrs	r4, r4, #5
 801ed8a:	e7ba      	b.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed8c:	428f      	cmp	r7, r1
 801ed8e:	d1b8      	bne.n	801ed02 <ai_platform_get_weights_map+0x1a>
 801ed90:	e7e1      	b.n	801ed56 <ai_platform_get_weights_map+0x6e>
 801ed92:	bf00      	nop
 801ed94:	a1facade 	.word	0xa1facade

0801ed98 <ai_platform_get_activations_map>:
 801ed98:	2900      	cmp	r1, #0
 801ed9a:	bf18      	it	ne
 801ed9c:	2800      	cmpne	r0, #0
 801ed9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eda0:	bf0c      	ite	eq
 801eda2:	2401      	moveq	r4, #1
 801eda4:	2400      	movne	r4, #0
 801eda6:	2a00      	cmp	r2, #0
 801eda8:	bf08      	it	eq
 801edaa:	f044 0401 	orreq.w	r4, r4, #1
 801edae:	b114      	cbz	r4, 801edb6 <ai_platform_get_activations_map+0x1e>
 801edb0:	2400      	movs	r4, #0
 801edb2:	4620      	mov	r0, r4
 801edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edb6:	4616      	mov	r6, r2
 801edb8:	4b22      	ldr	r3, [pc, #136]	@ (801ee44 <ai_platform_get_activations_map+0xac>)
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	4605      	mov	r5, r0
 801edbe:	460f      	mov	r7, r1
 801edc0:	429a      	cmp	r2, r3
 801edc2:	d022      	beq.n	801ee0a <ai_platform_get_activations_map+0x72>
 801edc4:	6a30      	ldr	r0, [r6, #32]
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d0f2      	beq.n	801edb0 <ai_platform_get_activations_map+0x18>
 801edca:	6806      	ldr	r6, [r0, #0]
 801edcc:	429e      	cmp	r6, r3
 801edce:	d006      	beq.n	801edde <ai_platform_get_activations_map+0x46>
 801edd0:	f1a1 0401 	sub.w	r4, r1, #1
 801edd4:	6028      	str	r0, [r5, #0]
 801edd6:	fab4 f484 	clz	r4, r4
 801edda:	0964      	lsrs	r4, r4, #5
 801eddc:	e7e9      	b.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801edde:	3d04      	subs	r5, #4
 801ede0:	4602      	mov	r2, r0
 801ede2:	4621      	mov	r1, r4
 801ede4:	e000      	b.n	801ede8 <ai_platform_get_activations_map+0x50>
 801ede6:	4619      	mov	r1, r3
 801ede8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801edec:	42b3      	cmp	r3, r6
 801edee:	d026      	beq.n	801ee3e <ai_platform_get_activations_map+0xa6>
 801edf0:	f845 3f04 	str.w	r3, [r5, #4]!
 801edf4:	1c4b      	adds	r3, r1, #1
 801edf6:	429f      	cmp	r7, r3
 801edf8:	d8f5      	bhi.n	801ede6 <ai_platform_get_activations_map+0x4e>
 801edfa:	d1da      	bne.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801edfc:	3102      	adds	r1, #2
 801edfe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801ee02:	42b3      	cmp	r3, r6
 801ee04:	d1d5      	bne.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801ee06:	2401      	movs	r4, #1
 801ee08:	e7d3      	b.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801ee0a:	f106 000c 	add.w	r0, r6, #12
 801ee0e:	f7ff ff51 	bl	801ecb4 <ai_buffer_array_sane>
 801ee12:	2800      	cmp	r0, #0
 801ee14:	d0cc      	beq.n	801edb0 <ai_platform_get_activations_map+0x18>
 801ee16:	89f3      	ldrh	r3, [r6, #14]
 801ee18:	429f      	cmp	r7, r3
 801ee1a:	d1c9      	bne.n	801edb0 <ai_platform_get_activations_map+0x18>
 801ee1c:	3d04      	subs	r5, #4
 801ee1e:	4622      	mov	r2, r4
 801ee20:	6933      	ldr	r3, [r6, #16]
 801ee22:	4423      	add	r3, r4
 801ee24:	341c      	adds	r4, #28
 801ee26:	685b      	ldr	r3, [r3, #4]
 801ee28:	b123      	cbz	r3, 801ee34 <ai_platform_get_activations_map+0x9c>
 801ee2a:	3201      	adds	r2, #1
 801ee2c:	f845 3f04 	str.w	r3, [r5, #4]!
 801ee30:	4297      	cmp	r7, r2
 801ee32:	d8f5      	bhi.n	801ee20 <ai_platform_get_activations_map+0x88>
 801ee34:	1abc      	subs	r4, r7, r2
 801ee36:	fab4 f484 	clz	r4, r4
 801ee3a:	0964      	lsrs	r4, r4, #5
 801ee3c:	e7b9      	b.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801ee3e:	428f      	cmp	r7, r1
 801ee40:	d1b7      	bne.n	801edb2 <ai_platform_get_activations_map+0x1a>
 801ee42:	e7e0      	b.n	801ee06 <ai_platform_get_activations_map+0x6e>
 801ee44:	a1facade 	.word	0xa1facade

0801ee48 <ai_platform_bind_network_params>:
 801ee48:	2a00      	cmp	r2, #0
 801ee4a:	bf18      	it	ne
 801ee4c:	2900      	cmpne	r1, #0
 801ee4e:	d010      	beq.n	801ee72 <ai_platform_bind_network_params+0x2a>
 801ee50:	b178      	cbz	r0, 801ee72 <ai_platform_bind_network_params+0x2a>
 801ee52:	4603      	mov	r3, r0
 801ee54:	4808      	ldr	r0, [pc, #32]	@ (801ee78 <ai_platform_bind_network_params+0x30>)
 801ee56:	f103 0c0c 	add.w	ip, r3, #12
 801ee5a:	f843 0b04 	str.w	r0, [r3], #4
 801ee5e:	c903      	ldmia	r1, {r0, r1}
 801ee60:	e883 0003 	stmia.w	r3, {r0, r1}
 801ee64:	2301      	movs	r3, #1
 801ee66:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ee6a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ee6e:	4618      	mov	r0, r3
 801ee70:	4770      	bx	lr
 801ee72:	2300      	movs	r3, #0
 801ee74:	4618      	mov	r0, r3
 801ee76:	4770      	bx	lr
 801ee78:	a1facade 	.word	0xa1facade

0801ee7c <ai_platform_network_get_error>:
 801ee7c:	4b04      	ldr	r3, [pc, #16]	@ (801ee90 <ai_platform_network_get_error+0x14>)
 801ee7e:	6802      	ldr	r2, [r0, #0]
 801ee80:	4393      	bics	r3, r2
 801ee82:	d102      	bne.n	801ee8a <ai_platform_network_get_error+0xe>
 801ee84:	300c      	adds	r0, #12
 801ee86:	f000 bc73 	b.w	801f770 <core_get_error>
 801ee8a:	f241 0010 	movw	r0, #4112	@ 0x1010
 801ee8e:	4770      	bx	lr
 801ee90:	a1c00100 	.word	0xa1c00100

0801ee94 <ai_platform_network_set_error>:
 801ee94:	b110      	cbz	r0, 801ee9c <ai_platform_network_set_error+0x8>
 801ee96:	300c      	adds	r0, #12
 801ee98:	f000 bc70 	b.w	801f77c <core_set_error>
 801ee9c:	4770      	bx	lr
 801ee9e:	bf00      	nop

0801eea0 <ai_platform_inputs_get>:
 801eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eea4:	4b39      	ldr	r3, [pc, #228]	@ (801ef8c <ai_platform_inputs_get+0xec>)
 801eea6:	b085      	sub	sp, #20
 801eea8:	6802      	ldr	r2, [r0, #0]
 801eeaa:	4393      	bics	r3, r2
 801eeac:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801eeb0:	d162      	bne.n	801ef78 <ai_platform_inputs_get+0xd8>
 801eeb2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d051      	beq.n	801ef5c <ai_platform_inputs_get+0xbc>
 801eeb8:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801eebc:	f1ba 0f00 	cmp.w	sl, #0
 801eec0:	d04c      	beq.n	801ef5c <ai_platform_inputs_get+0xbc>
 801eec2:	f04f 0900 	mov.w	r9, #0
 801eec6:	464d      	mov	r5, r9
 801eec8:	e016      	b.n	801eef8 <ai_platform_inputs_get+0x58>
 801eeca:	9901      	ldr	r1, [sp, #4]
 801eecc:	2301      	movs	r3, #1
 801eece:	f848 3001 	str.w	r3, [r8, r1]
 801eed2:	69b1      	ldr	r1, [r6, #24]
 801eed4:	f04f 0301 	mov.w	r3, #1
 801eed8:	684e      	ldr	r6, [r1, #4]
 801eeda:	3501      	adds	r5, #1
 801eedc:	f109 091c 	add.w	r9, r9, #28
 801eee0:	7523      	strb	r3, [r4, #20]
 801eee2:	2300      	movs	r3, #0
 801eee4:	6961      	ldr	r1, [r4, #20]
 801eee6:	6020      	str	r0, [r4, #0]
 801eee8:	f36b 211f 	bfi	r1, fp, #8, #24
 801eeec:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801eef0:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801eef4:	e9c4 1205 	strd	r1, r2, [r4, #20]
 801eef8:	f8ba 3000 	ldrh.w	r3, [sl]
 801eefc:	b2ac      	uxth	r4, r5
 801eefe:	42ab      	cmp	r3, r5
 801ef00:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801ef04:	9301      	str	r3, [sp, #4]
 801ef06:	d93b      	bls.n	801ef80 <ai_platform_inputs_get+0xe0>
 801ef08:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d037      	beq.n	801ef80 <ai_platform_inputs_get+0xe0>
 801ef10:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801ef14:	2e00      	cmp	r6, #0
 801ef16:	d033      	beq.n	801ef80 <ai_platform_inputs_get+0xe0>
 801ef18:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ef1c:	69b2      	ldr	r2, [r6, #24]
 801ef1e:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801ef22:	6810      	ldr	r0, [r2, #0]
 801ef24:	68b3      	ldr	r3, [r6, #8]
 801ef26:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 801ef2a:	68f2      	ldr	r2, [r6, #12]
 801ef2c:	444c      	add	r4, r9
 801ef2e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801ef32:	9200      	str	r2, [sp, #0]
 801ef34:	f012 fea0 	bl	8031c78 <ai_array_to_buffer_fmt>
 801ef38:	69b1      	ldr	r1, [r6, #24]
 801ef3a:	9a00      	ldr	r2, [sp, #0]
 801ef3c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801ef40:	2f00      	cmp	r7, #0
 801ef42:	d0c7      	beq.n	801eed4 <ai_platform_inputs_get+0x34>
 801ef44:	2100      	movs	r1, #0
 801ef46:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 801ef4a:	6831      	ldr	r1, [r6, #0]
 801ef4c:	6079      	str	r1, [r7, #4]
 801ef4e:	b111      	cbz	r1, 801ef56 <ai_platform_inputs_get+0xb6>
 801ef50:	8849      	ldrh	r1, [r1, #2]
 801ef52:	2900      	cmp	r1, #0
 801ef54:	d1b9      	bne.n	801eeca <ai_platform_inputs_get+0x2a>
 801ef56:	69b1      	ldr	r1, [r6, #24]
 801ef58:	2700      	movs	r7, #0
 801ef5a:	e7bb      	b.n	801eed4 <ai_platform_inputs_get+0x34>
 801ef5c:	9803      	ldr	r0, [sp, #12]
 801ef5e:	2400      	movs	r4, #0
 801ef60:	2218      	movs	r2, #24
 801ef62:	2111      	movs	r1, #17
 801ef64:	300c      	adds	r0, #12
 801ef66:	f000 fc09 	bl	801f77c <core_set_error>
 801ef6a:	4620      	mov	r0, r4
 801ef6c:	9b02      	ldr	r3, [sp, #8]
 801ef6e:	b103      	cbz	r3, 801ef72 <ai_platform_inputs_get+0xd2>
 801ef70:	801c      	strh	r4, [r3, #0]
 801ef72:	b005      	add	sp, #20
 801ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef78:	2000      	movs	r0, #0
 801ef7a:	b005      	add	sp, #20
 801ef7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef80:	2c00      	cmp	r4, #0
 801ef82:	d0eb      	beq.n	801ef5c <ai_platform_inputs_get+0xbc>
 801ef84:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ef88:	6858      	ldr	r0, [r3, #4]
 801ef8a:	e7ef      	b.n	801ef6c <ai_platform_inputs_get+0xcc>
 801ef8c:	a1c00100 	.word	0xa1c00100

0801ef90 <ai_platform_outputs_get>:
 801ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef94:	4b38      	ldr	r3, [pc, #224]	@ (801f078 <ai_platform_outputs_get+0xe8>)
 801ef96:	b085      	sub	sp, #20
 801ef98:	6802      	ldr	r2, [r0, #0]
 801ef9a:	4393      	bics	r3, r2
 801ef9c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801efa0:	d15f      	bne.n	801f062 <ai_platform_outputs_get+0xd2>
 801efa2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801efa4:	2b01      	cmp	r3, #1
 801efa6:	d94e      	bls.n	801f046 <ai_platform_outputs_get+0xb6>
 801efa8:	f04f 0900 	mov.w	r9, #0
 801efac:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801efb0:	464d      	mov	r5, r9
 801efb2:	e016      	b.n	801efe2 <ai_platform_outputs_get+0x52>
 801efb4:	9901      	ldr	r1, [sp, #4]
 801efb6:	2301      	movs	r3, #1
 801efb8:	f848 3001 	str.w	r3, [r8, r1]
 801efbc:	69b1      	ldr	r1, [r6, #24]
 801efbe:	f04f 0301 	mov.w	r3, #1
 801efc2:	684e      	ldr	r6, [r1, #4]
 801efc4:	3501      	adds	r5, #1
 801efc6:	f109 091c 	add.w	r9, r9, #28
 801efca:	7523      	strb	r3, [r4, #20]
 801efcc:	2300      	movs	r3, #0
 801efce:	6961      	ldr	r1, [r4, #20]
 801efd0:	6020      	str	r0, [r4, #0]
 801efd2:	f36b 211f 	bfi	r1, fp, #8, #24
 801efd6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801efda:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801efde:	e9c4 1205 	strd	r1, r2, [r4, #20]
 801efe2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801efe6:	b2ac      	uxth	r4, r5
 801efe8:	42ab      	cmp	r3, r5
 801efea:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801efee:	9301      	str	r3, [sp, #4]
 801eff0:	d93b      	bls.n	801f06a <ai_platform_outputs_get+0xda>
 801eff2:	f8da 3010 	ldr.w	r3, [sl, #16]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d037      	beq.n	801f06a <ai_platform_outputs_get+0xda>
 801effa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801effe:	2e00      	cmp	r6, #0
 801f000:	d033      	beq.n	801f06a <ai_platform_outputs_get+0xda>
 801f002:	f8da 3014 	ldr.w	r3, [sl, #20]
 801f006:	69b2      	ldr	r2, [r6, #24]
 801f008:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801f00c:	6810      	ldr	r0, [r2, #0]
 801f00e:	68b3      	ldr	r3, [r6, #8]
 801f010:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 801f014:	68f2      	ldr	r2, [r6, #12]
 801f016:	444c      	add	r4, r9
 801f018:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801f01c:	9200      	str	r2, [sp, #0]
 801f01e:	f012 fe2b 	bl	8031c78 <ai_array_to_buffer_fmt>
 801f022:	69b1      	ldr	r1, [r6, #24]
 801f024:	9a00      	ldr	r2, [sp, #0]
 801f026:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801f02a:	2f00      	cmp	r7, #0
 801f02c:	d0c7      	beq.n	801efbe <ai_platform_outputs_get+0x2e>
 801f02e:	2100      	movs	r1, #0
 801f030:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 801f034:	6831      	ldr	r1, [r6, #0]
 801f036:	6079      	str	r1, [r7, #4]
 801f038:	b111      	cbz	r1, 801f040 <ai_platform_outputs_get+0xb0>
 801f03a:	8849      	ldrh	r1, [r1, #2]
 801f03c:	2900      	cmp	r1, #0
 801f03e:	d1b9      	bne.n	801efb4 <ai_platform_outputs_get+0x24>
 801f040:	69b1      	ldr	r1, [r6, #24]
 801f042:	2700      	movs	r7, #0
 801f044:	e7bb      	b.n	801efbe <ai_platform_outputs_get+0x2e>
 801f046:	9803      	ldr	r0, [sp, #12]
 801f048:	2400      	movs	r4, #0
 801f04a:	2218      	movs	r2, #24
 801f04c:	2111      	movs	r1, #17
 801f04e:	300c      	adds	r0, #12
 801f050:	f000 fb94 	bl	801f77c <core_set_error>
 801f054:	4620      	mov	r0, r4
 801f056:	9b02      	ldr	r3, [sp, #8]
 801f058:	b103      	cbz	r3, 801f05c <ai_platform_outputs_get+0xcc>
 801f05a:	801c      	strh	r4, [r3, #0]
 801f05c:	b005      	add	sp, #20
 801f05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f062:	2000      	movs	r0, #0
 801f064:	b005      	add	sp, #20
 801f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f06a:	2c00      	cmp	r4, #0
 801f06c:	d0eb      	beq.n	801f046 <ai_platform_outputs_get+0xb6>
 801f06e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801f072:	6858      	ldr	r0, [r3, #4]
 801f074:	e7ef      	b.n	801f056 <ai_platform_outputs_get+0xc6>
 801f076:	bf00      	nop
 801f078:	a1c00100 	.word	0xa1c00100

0801f07c <ai_platform_network_create>:
 801f07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f080:	b083      	sub	sp, #12
 801f082:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801f086:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801f08a:	b320      	cbz	r0, 801f0d6 <ai_platform_network_create+0x5a>
 801f08c:	6002      	str	r2, [r0, #0]
 801f08e:	4616      	mov	r6, r2
 801f090:	461f      	mov	r7, r3
 801f092:	4604      	mov	r4, r0
 801f094:	f000 fb6a 	bl	801f76c <core_init>
 801f098:	b970      	cbnz	r0, 801f0b8 <ai_platform_network_create+0x3c>
 801f09a:	2530      	movs	r5, #48	@ 0x30
 801f09c:	2300      	movs	r3, #0
 801f09e:	6023      	str	r3, [r4, #0]
 801f0a0:	2410      	movs	r4, #16
 801f0a2:	464a      	mov	r2, r9
 801f0a4:	4641      	mov	r1, r8
 801f0a6:	4638      	mov	r0, r7
 801f0a8:	f012 fe90 	bl	8031dcc <ai_version_get>
 801f0ac:	60b0      	str	r0, [r6, #8]
 801f0ae:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801f0b2:	b003      	add	sp, #12
 801f0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	4641      	mov	r1, r8
 801f0bc:	4638      	mov	r0, r7
 801f0be:	f012 fe85 	bl	8031dcc <ai_version_get>
 801f0c2:	4605      	mov	r5, r0
 801f0c4:	2200      	movs	r2, #0
 801f0c6:	2105      	movs	r1, #5
 801f0c8:	2001      	movs	r0, #1
 801f0ca:	f012 fe7f 	bl	8031dcc <ai_version_get>
 801f0ce:	4285      	cmp	r5, r0
 801f0d0:	d008      	beq.n	801f0e4 <ai_platform_network_create+0x68>
 801f0d2:	2501      	movs	r5, #1
 801f0d4:	e7e2      	b.n	801f09c <ai_platform_network_create+0x20>
 801f0d6:	2510      	movs	r5, #16
 801f0d8:	462c      	mov	r4, r5
 801f0da:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801f0de:	b003      	add	sp, #12
 801f0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0e4:	4b05      	ldr	r3, [pc, #20]	@ (801f0fc <ai_platform_network_create+0x80>)
 801f0e6:	a801      	add	r0, sp, #4
 801f0e8:	9301      	str	r3, [sp, #4]
 801f0ea:	f000 fd23 	bl	801fb34 <ai_check_custom_types>
 801f0ee:	b110      	cbz	r0, 801f0f6 <ai_platform_network_create+0x7a>
 801f0f0:	2400      	movs	r4, #0
 801f0f2:	4625      	mov	r5, r4
 801f0f4:	e7d5      	b.n	801f0a2 <ai_platform_network_create+0x26>
 801f0f6:	2502      	movs	r5, #2
 801f0f8:	e7d0      	b.n	801f09c <ai_platform_network_create+0x20>
 801f0fa:	bf00      	nop
 801f0fc:	84048403 	.word	0x84048403

0801f100 <ai_platform_network_init>:
 801f100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f104:	4a5c      	ldr	r2, [pc, #368]	@ (801f278 <ai_platform_network_init+0x178>)
 801f106:	460c      	mov	r4, r1
 801f108:	6801      	ldr	r1, [r0, #0]
 801f10a:	438a      	bics	r2, r1
 801f10c:	d133      	bne.n	801f176 <ai_platform_network_init+0x76>
 801f10e:	4605      	mov	r5, r0
 801f110:	2c00      	cmp	r4, #0
 801f112:	f000 8093 	beq.w	801f23c <ai_platform_network_init+0x13c>
 801f116:	f8d4 b000 	ldr.w	fp, [r4]
 801f11a:	4a58      	ldr	r2, [pc, #352]	@ (801f27c <ai_platform_network_init+0x17c>)
 801f11c:	4593      	cmp	fp, r2
 801f11e:	d10f      	bne.n	801f140 <ai_platform_network_init+0x40>
 801f120:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 801f124:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801f128:	4b53      	ldr	r3, [pc, #332]	@ (801f278 <ai_platform_network_init+0x178>)
 801f12a:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 801f12e:	0c32      	lsrs	r2, r6, #16
 801f130:	4299      	cmp	r1, r3
 801f132:	d02c      	beq.n	801f18e <ai_platform_network_init+0x8e>
 801f134:	2303      	movs	r3, #3
 801f136:	462c      	mov	r4, r5
 801f138:	612b      	str	r3, [r5, #16]
 801f13a:	4620      	mov	r0, r4
 801f13c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f140:	4627      	mov	r7, r4
 801f142:	2101      	movs	r1, #1
 801f144:	6864      	ldr	r4, [r4, #4]
 801f146:	4638      	mov	r0, r7
 801f148:	f107 081c 	add.w	r8, r7, #28
 801f14c:	f7ff fd7e 	bl	801ec4c <ai_buffer_get_size>
 801f150:	4606      	mov	r6, r0
 801f152:	2101      	movs	r1, #1
 801f154:	4640      	mov	r0, r8
 801f156:	f8d7 9020 	ldr.w	r9, [r7, #32]
 801f15a:	f7ff fd77 	bl	801ec4c <ai_buffer_get_size>
 801f15e:	b976      	cbnz	r6, 801f17e <ai_platform_network_init+0x7e>
 801f160:	2800      	cmp	r0, #0
 801f162:	d150      	bne.n	801f206 <ai_platform_network_init+0x106>
 801f164:	4680      	mov	r8, r0
 801f166:	4686      	mov	lr, r0
 801f168:	4606      	mov	r6, r0
 801f16a:	4607      	mov	r7, r0
 801f16c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801f170:	6829      	ldr	r1, [r5, #0]
 801f172:	0436      	lsls	r6, r6, #16
 801f174:	e7d8      	b.n	801f128 <ai_platform_network_init+0x28>
 801f176:	2400      	movs	r4, #0
 801f178:	4620      	mov	r0, r4
 801f17a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f17e:	2800      	cmp	r0, #0
 801f180:	d13b      	bne.n	801f1fa <ai_platform_network_init+0xfa>
 801f182:	4680      	mov	r8, r0
 801f184:	4686      	mov	lr, r0
 801f186:	2c00      	cmp	r4, #0
 801f188:	d05e      	beq.n	801f248 <ai_platform_network_init+0x148>
 801f18a:	2601      	movs	r6, #1
 801f18c:	e7ee      	b.n	801f16c <ai_platform_network_init+0x6c>
 801f18e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801f190:	4293      	cmp	r3, r2
 801f192:	4b3a      	ldr	r3, [pc, #232]	@ (801f27c <ai_platform_network_init+0x17c>)
 801f194:	d33e      	bcc.n	801f214 <ai_platform_network_init+0x114>
 801f196:	459b      	cmp	fp, r3
 801f198:	d03e      	beq.n	801f218 <ai_platform_network_init+0x118>
 801f19a:	b1a2      	cbz	r2, 801f1c6 <ai_platform_network_init+0xc6>
 801f19c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f1a0:	f04f 0c00 	mov.w	ip, #0
 801f1a4:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801f1a8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801f1aa:	eb07 0b0c 	add.w	fp, r7, ip
 801f1ae:	4464      	add	r4, ip
 801f1b0:	f10c 0c1c 	add.w	ip, ip, #28
 801f1b4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801f1b8:	45cc      	cmp	ip, r9
 801f1ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f1bc:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 801f1c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801f1c4:	d1f0      	bne.n	801f1a8 <ai_platform_network_init+0xa8>
 801f1c6:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 801f1c8:	622e      	str	r6, [r5, #32]
 801f1ca:	4553      	cmp	r3, sl
 801f1cc:	d34b      	bcc.n	801f266 <ai_platform_network_init+0x166>
 801f1ce:	f1ba 0f00 	cmp.w	sl, #0
 801f1d2:	d025      	beq.n	801f220 <ai_platform_network_init+0x120>
 801f1d4:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 801f1d8:	2700      	movs	r7, #0
 801f1da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801f1de:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 801f1e0:	eb08 0607 	add.w	r6, r8, r7
 801f1e4:	443c      	add	r4, r7
 801f1e6:	371c      	adds	r7, #28
 801f1e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801f1ea:	4557      	cmp	r7, sl
 801f1ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f1ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801f1f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801f1f6:	d1f2      	bne.n	801f1de <ai_platform_network_init+0xde>
 801f1f8:	e012      	b.n	801f220 <ai_platform_network_init+0x120>
 801f1fa:	f1b9 0f00 	cmp.w	r9, #0
 801f1fe:	d015      	beq.n	801f22c <ai_platform_network_init+0x12c>
 801f200:	f04f 0e01 	mov.w	lr, #1
 801f204:	e7bf      	b.n	801f186 <ai_platform_network_init+0x86>
 801f206:	f1b9 0f00 	cmp.w	r9, #0
 801f20a:	d00f      	beq.n	801f22c <ai_platform_network_init+0x12c>
 801f20c:	f04f 0e01 	mov.w	lr, #1
 801f210:	4637      	mov	r7, r6
 801f212:	e7ab      	b.n	801f16c <ai_platform_network_init+0x6c>
 801f214:	459b      	cmp	fp, r3
 801f216:	d11e      	bne.n	801f256 <ai_platform_network_init+0x156>
 801f218:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 801f21c:	e9c5 6708 	strd	r6, r7, [r5, #32]
 801f220:	4628      	mov	r0, r5
 801f222:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 801f226:	f000 fcad 	bl	801fb84 <ai_layers_init_all>
 801f22a:	e783      	b.n	801f134 <ai_platform_network_init+0x34>
 801f22c:	2213      	movs	r2, #19
 801f22e:	2110      	movs	r1, #16
 801f230:	f105 000c 	add.w	r0, r5, #12
 801f234:	2400      	movs	r4, #0
 801f236:	f000 faa1 	bl	801f77c <core_set_error>
 801f23a:	e77e      	b.n	801f13a <ai_platform_network_init+0x3a>
 801f23c:	2211      	movs	r2, #17
 801f23e:	2110      	movs	r1, #16
 801f240:	300c      	adds	r0, #12
 801f242:	f000 fa9b 	bl	801f77c <core_set_error>
 801f246:	e778      	b.n	801f13a <ai_platform_network_init+0x3a>
 801f248:	2212      	movs	r2, #18
 801f24a:	2110      	movs	r1, #16
 801f24c:	f105 000c 	add.w	r0, r5, #12
 801f250:	f000 fa94 	bl	801f77c <core_set_error>
 801f254:	e771      	b.n	801f13a <ai_platform_network_init+0x3a>
 801f256:	2212      	movs	r2, #18
 801f258:	2116      	movs	r1, #22
 801f25a:	f105 000c 	add.w	r0, r5, #12
 801f25e:	2400      	movs	r4, #0
 801f260:	f000 fa8c 	bl	801f77c <core_set_error>
 801f264:	e769      	b.n	801f13a <ai_platform_network_init+0x3a>
 801f266:	2213      	movs	r2, #19
 801f268:	2116      	movs	r1, #22
 801f26a:	f105 000c 	add.w	r0, r5, #12
 801f26e:	2400      	movs	r4, #0
 801f270:	f000 fa84 	bl	801f77c <core_set_error>
 801f274:	e761      	b.n	801f13a <ai_platform_network_init+0x3a>
 801f276:	bf00      	nop
 801f278:	a1c00100 	.word	0xa1c00100
 801f27c:	a1facade 	.word	0xa1facade

0801f280 <ai_platform_network_post_init>:
 801f280:	b538      	push	{r3, r4, r5, lr}
 801f282:	4b16      	ldr	r3, [pc, #88]	@ (801f2dc <ai_platform_network_post_init+0x5c>)
 801f284:	6802      	ldr	r2, [r0, #0]
 801f286:	ea02 0103 	and.w	r1, r2, r3
 801f28a:	4393      	bics	r3, r2
 801f28c:	d108      	bne.n	801f2a0 <ai_platform_network_post_init+0x20>
 801f28e:	6903      	ldr	r3, [r0, #16]
 801f290:	4604      	mov	r4, r0
 801f292:	f013 0502 	ands.w	r5, r3, #2
 801f296:	d005      	beq.n	801f2a4 <ai_platform_network_post_init+0x24>
 801f298:	428a      	cmp	r2, r1
 801f29a:	d00a      	beq.n	801f2b2 <ai_platform_network_post_init+0x32>
 801f29c:	2001      	movs	r0, #1
 801f29e:	bd38      	pop	{r3, r4, r5, pc}
 801f2a0:	2000      	movs	r0, #0
 801f2a2:	bd38      	pop	{r3, r4, r5, pc}
 801f2a4:	2210      	movs	r2, #16
 801f2a6:	2111      	movs	r1, #17
 801f2a8:	300c      	adds	r0, #12
 801f2aa:	f000 fa67 	bl	801f77c <core_set_error>
 801f2ae:	4628      	mov	r0, r5
 801f2b0:	bd38      	pop	{r3, r4, r5, pc}
 801f2b2:	f000 fc75 	bl	801fba0 <ai_layers_post_init_all>
 801f2b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d0ef      	beq.n	801f29c <ai_platform_network_post_init+0x1c>
 801f2bc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801f2be:	e008      	b.n	801f2d2 <ai_platform_network_post_init+0x52>
 801f2c0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 801f2c4:	4798      	blx	r3
 801f2c6:	692b      	ldr	r3, [r5, #16]
 801f2c8:	42ab      	cmp	r3, r5
 801f2ca:	461d      	mov	r5, r3
 801f2cc:	d0e6      	beq.n	801f29c <ai_platform_network_post_init+0x1c>
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d0e4      	beq.n	801f29c <ai_platform_network_post_init+0x1c>
 801f2d2:	4629      	mov	r1, r5
 801f2d4:	2000      	movs	r0, #0
 801f2d6:	2d00      	cmp	r5, #0
 801f2d8:	d1f2      	bne.n	801f2c0 <ai_platform_network_post_init+0x40>
 801f2da:	e7df      	b.n	801f29c <ai_platform_network_post_init+0x1c>
 801f2dc:	a1c00100 	.word	0xa1c00100

0801f2e0 <ai_platform_network_process>:
 801f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e4:	b085      	sub	sp, #20
 801f2e6:	4bb7      	ldr	r3, [pc, #732]	@ (801f5c4 <ai_platform_network_process+0x2e4>)
 801f2e8:	9202      	str	r2, [sp, #8]
 801f2ea:	6802      	ldr	r2, [r0, #0]
 801f2ec:	4393      	bics	r3, r2
 801f2ee:	f040 8142 	bne.w	801f576 <ai_platform_network_process+0x296>
 801f2f2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801f2f4:	4605      	mov	r5, r0
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	f000 8126 	beq.w	801f548 <ai_platform_network_process+0x268>
 801f2fc:	6903      	ldr	r3, [r0, #16]
 801f2fe:	2200      	movs	r2, #0
 801f300:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 801f304:	f003 0303 	and.w	r3, r3, #3
 801f308:	6182      	str	r2, [r0, #24]
 801f30a:	2b03      	cmp	r3, #3
 801f30c:	f040 8122 	bne.w	801f554 <ai_platform_network_process+0x274>
 801f310:	2900      	cmp	r1, #0
 801f312:	f000 8136 	beq.w	801f582 <ai_platform_network_process+0x2a2>
 801f316:	fab8 f788 	clz	r7, r8
 801f31a:	097f      	lsrs	r7, r7, #5
 801f31c:	f1b8 0f00 	cmp.w	r8, #0
 801f320:	f000 812f 	beq.w	801f582 <ai_platform_network_process+0x2a2>
 801f324:	f8b8 3000 	ldrh.w	r3, [r8]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	f000 812a 	beq.w	801f582 <ai_platform_network_process+0x2a2>
 801f32e:	698b      	ldr	r3, [r1, #24]
 801f330:	460e      	mov	r6, r1
 801f332:	9003      	str	r0, [sp, #12]
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	9301      	str	r3, [sp, #4]
 801f338:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d072      	beq.n	801f426 <ai_platform_network_process+0x146>
 801f340:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801f344:	2c00      	cmp	r4, #0
 801f346:	d06e      	beq.n	801f426 <ai_platform_network_process+0x146>
 801f348:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f34c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801f350:	f8d3 a000 	ldr.w	sl, [r3]
 801f354:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 801f358:	f000 8112 	beq.w	801f580 <ai_platform_network_process+0x2a0>
 801f35c:	69a3      	ldr	r3, [r4, #24]
 801f35e:	2101      	movs	r1, #1
 801f360:	4630      	mov	r0, r6
 801f362:	685d      	ldr	r5, [r3, #4]
 801f364:	f7ff fc72 	bl	801ec4c <ai_buffer_get_size>
 801f368:	4285      	cmp	r5, r0
 801f36a:	f0c0 8115 	bcc.w	801f598 <ai_platform_network_process+0x2b8>
 801f36e:	68e0      	ldr	r0, [r4, #12]
 801f370:	69b1      	ldr	r1, [r6, #24]
 801f372:	68c2      	ldr	r2, [r0, #12]
 801f374:	68cb      	ldr	r3, [r1, #12]
 801f376:	429a      	cmp	r2, r3
 801f378:	f040 810e 	bne.w	801f598 <ai_platform_network_process+0x2b8>
 801f37c:	6882      	ldr	r2, [r0, #8]
 801f37e:	688b      	ldr	r3, [r1, #8]
 801f380:	429a      	cmp	r2, r3
 801f382:	f040 8109 	bne.w	801f598 <ai_platform_network_process+0x2b8>
 801f386:	6842      	ldr	r2, [r0, #4]
 801f388:	684b      	ldr	r3, [r1, #4]
 801f38a:	429a      	cmp	r2, r3
 801f38c:	f040 8104 	bne.w	801f598 <ai_platform_network_process+0x2b8>
 801f390:	69a3      	ldr	r3, [r4, #24]
 801f392:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f396:	f012 fd07 	bl	8031da8 <ai_array_get_data_byte_size>
 801f39a:	4605      	mov	r5, r0
 801f39c:	4620      	mov	r0, r4
 801f39e:	f012 fd1b 	bl	8031dd8 <get_tensor_byte_size>
 801f3a2:	4285      	cmp	r5, r0
 801f3a4:	f0c0 80f8 	bcc.w	801f598 <ai_platform_network_process+0x2b8>
 801f3a8:	69a3      	ldr	r3, [r4, #24]
 801f3aa:	6818      	ldr	r0, [r3, #0]
 801f3ac:	f012 fc64 	bl	8031c78 <ai_array_to_buffer_fmt>
 801f3b0:	6833      	ldr	r3, [r6, #0]
 801f3b2:	4058      	eors	r0, r3
 801f3b4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801f3b8:	f040 81a4 	bne.w	801f704 <ai_platform_network_process+0x424>
 801f3bc:	6873      	ldr	r3, [r6, #4]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f000 80de 	beq.w	801f580 <ai_platform_network_process+0x2a0>
 801f3c4:	69b3      	ldr	r3, [r6, #24]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	f000 81a4 	beq.w	801f716 <ai_platform_network_process+0x436>
 801f3ce:	9a01      	ldr	r2, [sp, #4]
 801f3d0:	4620      	mov	r0, r4
 801f3d2:	3701      	adds	r7, #1
 801f3d4:	361c      	adds	r6, #28
 801f3d6:	429a      	cmp	r2, r3
 801f3d8:	bf38      	it	cc
 801f3da:	461a      	movcc	r2, r3
 801f3dc:	9201      	str	r2, [sp, #4]
 801f3de:	f012 fcfb 	bl	8031dd8 <get_tensor_byte_size>
 801f3e2:	f8c9 0008 	str.w	r0, [r9, #8]
 801f3e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	fb00 f303 	mul.w	r3, r0, r3
 801f3f0:	f8c9 300c 	str.w	r3, [r9, #12]
 801f3f4:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801f3f8:	440b      	add	r3, r1
 801f3fa:	f8c9 1004 	str.w	r1, [r9, #4]
 801f3fe:	f84a 300b 	str.w	r3, [sl, fp]
 801f402:	69a0      	ldr	r0, [r4, #24]
 801f404:	6803      	ldr	r3, [r0, #0]
 801f406:	009a      	lsls	r2, r3, #2
 801f408:	f100 80af 	bmi.w	801f56a <ai_platform_network_process+0x28a>
 801f40c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801f410:	1a9b      	subs	r3, r3, r2
 801f412:	4419      	add	r1, r3
 801f414:	6081      	str	r1, [r0, #8]
 801f416:	69a3      	ldr	r3, [r4, #24]
 801f418:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f41c:	60da      	str	r2, [r3, #12]
 801f41e:	f8b8 3000 	ldrh.w	r3, [r8]
 801f422:	42bb      	cmp	r3, r7
 801f424:	d888      	bhi.n	801f338 <ai_platform_network_process+0x58>
 801f426:	9d03      	ldr	r5, [sp, #12]
 801f428:	9b02      	ldr	r3, [sp, #8]
 801f42a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	f000 817b 	beq.w	801f728 <ai_platform_network_process+0x448>
 801f432:	2a01      	cmp	r2, #1
 801f434:	f240 80bd 	bls.w	801f5b2 <ai_platform_network_process+0x2d2>
 801f438:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 801f43c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f440:	2b00      	cmp	r3, #0
 801f442:	f000 80b6 	beq.w	801f5b2 <ai_platform_network_process+0x2d2>
 801f446:	2700      	movs	r7, #0
 801f448:	f8dd b008 	ldr.w	fp, [sp, #8]
 801f44c:	9502      	str	r5, [sp, #8]
 801f44e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f452:	2b00      	cmp	r3, #0
 801f454:	f000 80bd 	beq.w	801f5d2 <ai_platform_network_process+0x2f2>
 801f458:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801f45c:	2e00      	cmp	r6, #0
 801f45e:	f000 80b8 	beq.w	801f5d2 <ai_platform_network_process+0x2f2>
 801f462:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f466:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801f46a:	681c      	ldr	r4, [r3, #0]
 801f46c:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 801f470:	f000 8170 	beq.w	801f754 <ai_platform_network_process+0x474>
 801f474:	69b3      	ldr	r3, [r6, #24]
 801f476:	2101      	movs	r1, #1
 801f478:	4658      	mov	r0, fp
 801f47a:	685d      	ldr	r5, [r3, #4]
 801f47c:	f7ff fbe6 	bl	801ec4c <ai_buffer_get_size>
 801f480:	4285      	cmp	r5, r0
 801f482:	f0c0 8095 	bcc.w	801f5b0 <ai_platform_network_process+0x2d0>
 801f486:	68f0      	ldr	r0, [r6, #12]
 801f488:	f8db 1018 	ldr.w	r1, [fp, #24]
 801f48c:	68c2      	ldr	r2, [r0, #12]
 801f48e:	68cb      	ldr	r3, [r1, #12]
 801f490:	429a      	cmp	r2, r3
 801f492:	f040 808d 	bne.w	801f5b0 <ai_platform_network_process+0x2d0>
 801f496:	6882      	ldr	r2, [r0, #8]
 801f498:	688b      	ldr	r3, [r1, #8]
 801f49a:	429a      	cmp	r2, r3
 801f49c:	f040 8088 	bne.w	801f5b0 <ai_platform_network_process+0x2d0>
 801f4a0:	6842      	ldr	r2, [r0, #4]
 801f4a2:	684b      	ldr	r3, [r1, #4]
 801f4a4:	429a      	cmp	r2, r3
 801f4a6:	f040 8083 	bne.w	801f5b0 <ai_platform_network_process+0x2d0>
 801f4aa:	69b3      	ldr	r3, [r6, #24]
 801f4ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4b0:	f012 fc7a 	bl	8031da8 <ai_array_get_data_byte_size>
 801f4b4:	9003      	str	r0, [sp, #12]
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	f012 fc8e 	bl	8031dd8 <get_tensor_byte_size>
 801f4bc:	9b03      	ldr	r3, [sp, #12]
 801f4be:	4283      	cmp	r3, r0
 801f4c0:	d376      	bcc.n	801f5b0 <ai_platform_network_process+0x2d0>
 801f4c2:	69b3      	ldr	r3, [r6, #24]
 801f4c4:	6818      	ldr	r0, [r3, #0]
 801f4c6:	f012 fbd7 	bl	8031c78 <ai_array_to_buffer_fmt>
 801f4ca:	f8db 3000 	ldr.w	r3, [fp]
 801f4ce:	4058      	eors	r0, r3
 801f4d0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801f4d4:	f040 812c 	bne.w	801f730 <ai_platform_network_process+0x450>
 801f4d8:	f8db 3004 	ldr.w	r3, [fp, #4]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	f000 8139 	beq.w	801f754 <ai_platform_network_process+0x474>
 801f4e2:	f8db 3018 	ldr.w	r3, [fp, #24]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f000 812a 	beq.w	801f742 <ai_platform_network_process+0x462>
 801f4ee:	9a01      	ldr	r2, [sp, #4]
 801f4f0:	4630      	mov	r0, r6
 801f4f2:	3701      	adds	r7, #1
 801f4f4:	f10b 0b1c 	add.w	fp, fp, #28
 801f4f8:	429a      	cmp	r2, r3
 801f4fa:	bf38      	it	cc
 801f4fc:	461a      	movcc	r2, r3
 801f4fe:	9201      	str	r2, [sp, #4]
 801f500:	f012 fc6a 	bl	8031dd8 <get_tensor_byte_size>
 801f504:	f8c8 0008 	str.w	r0, [r8, #8]
 801f508:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	fb00 f303 	mul.w	r3, r0, r3
 801f512:	f8c8 300c 	str.w	r3, [r8, #12]
 801f516:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 801f51a:	440b      	add	r3, r1
 801f51c:	f8c8 1004 	str.w	r1, [r8, #4]
 801f520:	f844 300a 	str.w	r3, [r4, sl]
 801f524:	69b0      	ldr	r0, [r6, #24]
 801f526:	6803      	ldr	r3, [r0, #0]
 801f528:	009b      	lsls	r3, r3, #2
 801f52a:	d44d      	bmi.n	801f5c8 <ai_platform_network_process+0x2e8>
 801f52c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801f530:	1a9b      	subs	r3, r3, r2
 801f532:	4419      	add	r1, r3
 801f534:	6081      	str	r1, [r0, #8]
 801f536:	69b3      	ldr	r3, [r6, #24]
 801f538:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f53c:	60da      	str	r2, [r3, #12]
 801f53e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f542:	42bb      	cmp	r3, r7
 801f544:	d883      	bhi.n	801f44e <ai_platform_network_process+0x16e>
 801f546:	e044      	b.n	801f5d2 <ai_platform_network_process+0x2f2>
 801f548:	6902      	ldr	r2, [r0, #16]
 801f54a:	6183      	str	r3, [r0, #24]
 801f54c:	f002 0203 	and.w	r2, r2, #3
 801f550:	2a03      	cmp	r2, #3
 801f552:	d016      	beq.n	801f582 <ai_platform_network_process+0x2a2>
 801f554:	2230      	movs	r2, #48	@ 0x30
 801f556:	2111      	movs	r1, #17
 801f558:	f105 000c 	add.w	r0, r5, #12
 801f55c:	2400      	movs	r4, #0
 801f55e:	f000 f90d 	bl	801f77c <core_set_error>
 801f562:	4620      	mov	r0, r4
 801f564:	b005      	add	sp, #20
 801f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56a:	f8b8 3000 	ldrh.w	r3, [r8]
 801f56e:	429f      	cmp	r7, r3
 801f570:	f4ff aee2 	bcc.w	801f338 <ai_platform_network_process+0x58>
 801f574:	e757      	b.n	801f426 <ai_platform_network_process+0x146>
 801f576:	2400      	movs	r4, #0
 801f578:	4620      	mov	r0, r4
 801f57a:	b005      	add	sp, #20
 801f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f580:	9d03      	ldr	r5, [sp, #12]
 801f582:	2400      	movs	r4, #0
 801f584:	2217      	movs	r2, #23
 801f586:	2112      	movs	r1, #18
 801f588:	f105 000c 	add.w	r0, r5, #12
 801f58c:	f000 f8f6 	bl	801f77c <core_set_error>
 801f590:	4620      	mov	r0, r4
 801f592:	b005      	add	sp, #20
 801f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f598:	9d03      	ldr	r5, [sp, #12]
 801f59a:	2400      	movs	r4, #0
 801f59c:	2218      	movs	r2, #24
 801f59e:	2112      	movs	r1, #18
 801f5a0:	f105 000c 	add.w	r0, r5, #12
 801f5a4:	f000 f8ea 	bl	801f77c <core_set_error>
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	b005      	add	sp, #20
 801f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5b0:	9d02      	ldr	r5, [sp, #8]
 801f5b2:	2218      	movs	r2, #24
 801f5b4:	2113      	movs	r1, #19
 801f5b6:	f105 000c 	add.w	r0, r5, #12
 801f5ba:	2400      	movs	r4, #0
 801f5bc:	f000 f8de 	bl	801f77c <core_set_error>
 801f5c0:	e7cf      	b.n	801f562 <ai_platform_network_process+0x282>
 801f5c2:	bf00      	nop
 801f5c4:	a1c00100 	.word	0xa1c00100
 801f5c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f5cc:	429f      	cmp	r7, r3
 801f5ce:	f4ff af3e 	bcc.w	801f44e <ai_platform_network_process+0x16e>
 801f5d2:	9d02      	ldr	r5, [sp, #8]
 801f5d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f5d8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801f5da:	832b      	strh	r3, [r5, #24]
 801f5dc:	2a00      	cmp	r2, #0
 801f5de:	f040 808b 	bne.w	801f6f8 <ai_platform_network_process+0x418>
 801f5e2:	4616      	mov	r6, r2
 801f5e4:	4617      	mov	r7, r2
 801f5e6:	8b6c      	ldrh	r4, [r5, #26]
 801f5e8:	429c      	cmp	r4, r3
 801f5ea:	d2ba      	bcs.n	801f562 <ai_platform_network_process+0x282>
 801f5ec:	46ab      	mov	fp, r5
 801f5ee:	2e00      	cmp	r6, #0
 801f5f0:	d030      	beq.n	801f654 <ai_platform_network_process+0x374>
 801f5f2:	f04f 0800 	mov.w	r8, #0
 801f5f6:	e014      	b.n	801f622 <ai_platform_network_process+0x342>
 801f5f8:	6882      	ldr	r2, [r0, #8]
 801f5fa:	68c5      	ldr	r5, [r0, #12]
 801f5fc:	6863      	ldr	r3, [r4, #4]
 801f5fe:	1b52      	subs	r2, r2, r5
 801f600:	4413      	add	r3, r2
 801f602:	6083      	str	r3, [r0, #8]
 801f604:	698b      	ldr	r3, [r1, #24]
 801f606:	6862      	ldr	r2, [r4, #4]
 801f608:	60da      	str	r2, [r3, #12]
 801f60a:	f859 200a 	ldr.w	r2, [r9, sl]
 801f60e:	f108 0801 	add.w	r8, r8, #1
 801f612:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801f616:	440b      	add	r3, r1
 801f618:	4293      	cmp	r3, r2
 801f61a:	d301      	bcc.n	801f620 <ai_platform_network_process+0x340>
 801f61c:	68e3      	ldr	r3, [r4, #12]
 801f61e:	1ad3      	subs	r3, r2, r3
 801f620:	6063      	str	r3, [r4, #4]
 801f622:	8833      	ldrh	r3, [r6, #0]
 801f624:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801f628:	4543      	cmp	r3, r8
 801f62a:	d913      	bls.n	801f654 <ai_platform_network_process+0x374>
 801f62c:	6873      	ldr	r3, [r6, #4]
 801f62e:	b18b      	cbz	r3, 801f654 <ai_platform_network_process+0x374>
 801f630:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801f634:	b171      	cbz	r1, 801f654 <ai_platform_network_process+0x374>
 801f636:	6988      	ldr	r0, [r1, #24]
 801f638:	68b2      	ldr	r2, [r6, #8]
 801f63a:	6803      	ldr	r3, [r0, #0]
 801f63c:	f8d2 9000 	ldr.w	r9, [r2]
 801f640:	009d      	lsls	r5, r3, #2
 801f642:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801f646:	d5d7      	bpl.n	801f5f8 <ai_platform_network_process+0x318>
 801f648:	6881      	ldr	r1, [r0, #8]
 801f64a:	68a2      	ldr	r2, [r4, #8]
 801f64c:	6860      	ldr	r0, [r4, #4]
 801f64e:	f004 fb91 	bl	8023d74 <st_int8_copy>
 801f652:	e7da      	b.n	801f60a <ai_platform_network_process+0x32a>
 801f654:	4658      	mov	r0, fp
 801f656:	f000 fab7 	bl	801fbc8 <ai_layers_forward_all>
 801f65a:	2f00      	cmp	r7, #0
 801f65c:	d03d      	beq.n	801f6da <ai_platform_network_process+0x3fa>
 801f65e:	2400      	movs	r4, #0
 801f660:	e016      	b.n	801f690 <ai_platform_network_process+0x3b0>
 801f662:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801f666:	f859 100a 	ldr.w	r1, [r9, sl]
 801f66a:	4413      	add	r3, r2
 801f66c:	428b      	cmp	r3, r1
 801f66e:	d302      	bcc.n	801f676 <ai_platform_network_process+0x396>
 801f670:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f674:	1acb      	subs	r3, r1, r3
 801f676:	f8c8 3004 	str.w	r3, [r8, #4]
 801f67a:	6981      	ldr	r1, [r0, #24]
 801f67c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801f680:	1b52      	subs	r2, r2, r5
 801f682:	4413      	add	r3, r2
 801f684:	608b      	str	r3, [r1, #8]
 801f686:	6983      	ldr	r3, [r0, #24]
 801f688:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f68c:	60da      	str	r2, [r3, #12]
 801f68e:	3401      	adds	r4, #1
 801f690:	883b      	ldrh	r3, [r7, #0]
 801f692:	42a3      	cmp	r3, r4
 801f694:	d921      	bls.n	801f6da <ai_platform_network_process+0x3fa>
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	b1fb      	cbz	r3, 801f6da <ai_platform_network_process+0x3fa>
 801f69a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f69e:	b1e0      	cbz	r0, 801f6da <ai_platform_network_process+0x3fa>
 801f6a0:	68ba      	ldr	r2, [r7, #8]
 801f6a2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801f6a6:	6983      	ldr	r3, [r0, #24]
 801f6a8:	f8d2 9000 	ldr.w	r9, [r2]
 801f6ac:	681a      	ldr	r2, [r3, #0]
 801f6ae:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801f6b2:	0092      	lsls	r2, r2, #2
 801f6b4:	d5d5      	bpl.n	801f662 <ai_platform_network_process+0x382>
 801f6b6:	6898      	ldr	r0, [r3, #8]
 801f6b8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 801f6bc:	f004 fb5a 	bl	8023d74 <st_int8_copy>
 801f6c0:	f859 200a 	ldr.w	r2, [r9, sl]
 801f6c4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801f6c8:	440b      	add	r3, r1
 801f6ca:	4293      	cmp	r3, r2
 801f6cc:	d302      	bcc.n	801f6d4 <ai_platform_network_process+0x3f4>
 801f6ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f6d2:	1ad3      	subs	r3, r2, r3
 801f6d4:	f8c8 3004 	str.w	r3, [r8, #4]
 801f6d8:	e7d9      	b.n	801f68e <ai_platform_network_process+0x3ae>
 801f6da:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 801f6de:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801f6e2:	3401      	adds	r4, #1
 801f6e4:	b2a4      	uxth	r4, r4
 801f6e6:	42a3      	cmp	r3, r4
 801f6e8:	f8ab 401a 	strh.w	r4, [fp, #26]
 801f6ec:	f63f af7f 	bhi.w	801f5ee <ai_platform_network_process+0x30e>
 801f6f0:	4620      	mov	r0, r4
 801f6f2:	b005      	add	sp, #20
 801f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6f8:	2a01      	cmp	r2, #1
 801f6fa:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 801f6fc:	d033      	beq.n	801f766 <ai_platform_network_process+0x486>
 801f6fe:	f106 070c 	add.w	r7, r6, #12
 801f702:	e770      	b.n	801f5e6 <ai_platform_network_process+0x306>
 801f704:	9d03      	ldr	r5, [sp, #12]
 801f706:	2219      	movs	r2, #25
 801f708:	2112      	movs	r1, #18
 801f70a:	2400      	movs	r4, #0
 801f70c:	f105 000c 	add.w	r0, r5, #12
 801f710:	f000 f834 	bl	801f77c <core_set_error>
 801f714:	e725      	b.n	801f562 <ai_platform_network_process+0x282>
 801f716:	9d03      	ldr	r5, [sp, #12]
 801f718:	4604      	mov	r4, r0
 801f71a:	2221      	movs	r2, #33	@ 0x21
 801f71c:	2112      	movs	r1, #18
 801f71e:	f105 000c 	add.w	r0, r5, #12
 801f722:	f000 f82b 	bl	801f77c <core_set_error>
 801f726:	e71c      	b.n	801f562 <ai_platform_network_process+0x282>
 801f728:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f72c:	832b      	strh	r3, [r5, #24]
 801f72e:	e755      	b.n	801f5dc <ai_platform_network_process+0x2fc>
 801f730:	9d02      	ldr	r5, [sp, #8]
 801f732:	2219      	movs	r2, #25
 801f734:	2113      	movs	r1, #19
 801f736:	2400      	movs	r4, #0
 801f738:	f105 000c 	add.w	r0, r5, #12
 801f73c:	f000 f81e 	bl	801f77c <core_set_error>
 801f740:	e70f      	b.n	801f562 <ai_platform_network_process+0x282>
 801f742:	9d02      	ldr	r5, [sp, #8]
 801f744:	4604      	mov	r4, r0
 801f746:	2221      	movs	r2, #33	@ 0x21
 801f748:	2113      	movs	r1, #19
 801f74a:	f105 000c 	add.w	r0, r5, #12
 801f74e:	f000 f815 	bl	801f77c <core_set_error>
 801f752:	e706      	b.n	801f562 <ai_platform_network_process+0x282>
 801f754:	9d02      	ldr	r5, [sp, #8]
 801f756:	2217      	movs	r2, #23
 801f758:	2113      	movs	r1, #19
 801f75a:	2400      	movs	r4, #0
 801f75c:	f105 000c 	add.w	r0, r5, #12
 801f760:	f000 f80c 	bl	801f77c <core_set_error>
 801f764:	e6fd      	b.n	801f562 <ai_platform_network_process+0x282>
 801f766:	2700      	movs	r7, #0
 801f768:	e73d      	b.n	801f5e6 <ai_platform_network_process+0x306>
 801f76a:	bf00      	nop

0801f76c <core_init>:
 801f76c:	2001      	movs	r0, #1
 801f76e:	4770      	bx	lr

0801f770 <core_get_error>:
 801f770:	4603      	mov	r3, r0
 801f772:	2200      	movs	r2, #0
 801f774:	6800      	ldr	r0, [r0, #0]
 801f776:	601a      	str	r2, [r3, #0]
 801f778:	4770      	bx	lr
 801f77a:	bf00      	nop

0801f77c <core_set_error>:
 801f77c:	4603      	mov	r3, r0
 801f77e:	7800      	ldrb	r0, [r0, #0]
 801f780:	b108      	cbz	r0, 801f786 <core_set_error+0xa>
 801f782:	2000      	movs	r0, #0
 801f784:	4770      	bx	lr
 801f786:	7019      	strb	r1, [r3, #0]
 801f788:	2001      	movs	r0, #1
 801f78a:	6819      	ldr	r1, [r3, #0]
 801f78c:	f362 211f 	bfi	r1, r2, #8, #24
 801f790:	6019      	str	r1, [r3, #0]
 801f792:	4770      	bx	lr

0801f794 <node_convert>:
 801f794:	6982      	ldr	r2, [r0, #24]
 801f796:	8813      	ldrh	r3, [r2, #0]
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d038      	beq.n	801f80e <node_convert+0x7a>
 801f79c:	6852      	ldr	r2, [r2, #4]
 801f79e:	6850      	ldr	r0, [r2, #4]
 801f7a0:	b100      	cbz	r0, 801f7a4 <node_convert+0x10>
 801f7a2:	6800      	ldr	r0, [r0, #0]
 801f7a4:	2b01      	cmp	r3, #1
 801f7a6:	f000 80e6 	beq.w	801f976 <node_convert+0x1e2>
 801f7aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7ac:	6915      	ldr	r5, [r2, #16]
 801f7ae:	b083      	sub	sp, #12
 801f7b0:	b105      	cbz	r5, 801f7b4 <node_convert+0x20>
 801f7b2:	682d      	ldr	r5, [r5, #0]
 801f7b4:	6883      	ldr	r3, [r0, #8]
 801f7b6:	0a1b      	lsrs	r3, r3, #8
 801f7b8:	f000 809b 	beq.w	801f8f2 <node_convert+0x15e>
 801f7bc:	68c1      	ldr	r1, [r0, #12]
 801f7be:	2401      	movs	r4, #1
 801f7c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f7c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f7c8:	4299      	cmp	r1, r3
 801f7ca:	fb02 f404 	mul.w	r4, r2, r4
 801f7ce:	d1f9      	bne.n	801f7c4 <node_convert+0x30>
 801f7d0:	6982      	ldr	r2, [r0, #24]
 801f7d2:	69ae      	ldr	r6, [r5, #24]
 801f7d4:	6813      	ldr	r3, [r2, #0]
 801f7d6:	f3c3 4143 	ubfx	r1, r3, #17, #4
 801f7da:	2901      	cmp	r1, #1
 801f7dc:	d019      	beq.n	801f812 <node_convert+0x7e>
 801f7de:	6801      	ldr	r1, [r0, #0]
 801f7e0:	68b5      	ldr	r5, [r6, #8]
 801f7e2:	2900      	cmp	r1, #0
 801f7e4:	d032      	beq.n	801f84c <node_convert+0xb8>
 801f7e6:	684e      	ldr	r6, [r1, #4]
 801f7e8:	6890      	ldr	r0, [r2, #8]
 801f7ea:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 801f7ee:	2e00      	cmp	r6, #0
 801f7f0:	d06b      	beq.n	801f8ca <node_convert+0x136>
 801f7f2:	884b      	ldrh	r3, [r1, #2]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d151      	bne.n	801f89c <node_convert+0x108>
 801f7f8:	2a00      	cmp	r2, #0
 801f7fa:	d068      	beq.n	801f8ce <node_convert+0x13a>
 801f7fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f800:	4622      	mov	r2, r4
 801f802:	4629      	mov	r1, r5
 801f804:	b003      	add	sp, #12
 801f806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f80a:	f001 bd63 	b.w	80212d4 <forward_lite_node_convert_integer_is8of32>
 801f80e:	685b      	ldr	r3, [r3, #4]
 801f810:	deff      	udf	#255	@ 0xff
 801f812:	682d      	ldr	r5, [r5, #0]
 801f814:	6890      	ldr	r0, [r2, #8]
 801f816:	2d00      	cmp	r5, #0
 801f818:	d06d      	beq.n	801f8f6 <node_convert+0x162>
 801f81a:	6833      	ldr	r3, [r6, #0]
 801f81c:	686a      	ldr	r2, [r5, #4]
 801f81e:	68b1      	ldr	r1, [r6, #8]
 801f820:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 801f824:	2a00      	cmp	r2, #0
 801f826:	d041      	beq.n	801f8ac <node_convert+0x118>
 801f828:	886d      	ldrh	r5, [r5, #2]
 801f82a:	2d00      	cmp	r5, #0
 801f82c:	d043      	beq.n	801f8b6 <node_convert+0x122>
 801f82e:	6815      	ldr	r5, [r2, #0]
 801f830:	ed95 0a00 	vldr	s0, [r5]
 801f834:	2b00      	cmp	r3, #0
 801f836:	f000 8097 	beq.w	801f968 <node_convert+0x1d4>
 801f83a:	6853      	ldr	r3, [r2, #4]
 801f83c:	f993 3000 	ldrsb.w	r3, [r3]
 801f840:	4622      	mov	r2, r4
 801f842:	b003      	add	sp, #12
 801f844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f848:	f001 bd48 	b.w	80212dc <forward_lite_node_convert_integer_if32os8>
 801f84c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801f850:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 801f854:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 801f858:	6890      	ldr	r0, [r2, #8]
 801f85a:	1b8e      	subs	r6, r1, r6
 801f85c:	2908      	cmp	r1, #8
 801f85e:	4622      	mov	r2, r4
 801f860:	4629      	mov	r1, r5
 801f862:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 801f866:	eba6 0603 	sub.w	r6, r6, r3
 801f86a:	d06f      	beq.n	801f94c <node_convert+0x1b8>
 801f86c:	f004 f992 	bl	8023b94 <st_int16_to_f32>
 801f870:	b196      	cbz	r6, 801f898 <node_convert+0x104>
 801f872:	ee07 6a90 	vmov	s15, r6
 801f876:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801f87a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801f87e:	f017 f953 	bl	8036b28 <powf>
 801f882:	b14c      	cbz	r4, 801f898 <node_convert+0x104>
 801f884:	2300      	movs	r3, #0
 801f886:	ecf5 7a01 	vldmia	r5!, {s15}
 801f88a:	3301      	adds	r3, #1
 801f88c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f890:	42a3      	cmp	r3, r4
 801f892:	ed45 7a01 	vstr	s15, [r5, #-4]
 801f896:	d1f6      	bne.n	801f886 <node_convert+0xf2>
 801f898:	b003      	add	sp, #12
 801f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f89c:	6833      	ldr	r3, [r6, #0]
 801f89e:	ed93 0a00 	vldr	s0, [r3]
 801f8a2:	6873      	ldr	r3, [r6, #4]
 801f8a4:	b1ea      	cbz	r2, 801f8e2 <node_convert+0x14e>
 801f8a6:	f993 3000 	ldrsb.w	r3, [r3]
 801f8aa:	e7a9      	b.n	801f800 <node_convert+0x6c>
 801f8ac:	b12b      	cbz	r3, 801f8ba <node_convert+0x126>
 801f8ae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f8b2:	4613      	mov	r3, r2
 801f8b4:	e7c4      	b.n	801f840 <node_convert+0xac>
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d159      	bne.n	801f96e <node_convert+0x1da>
 801f8ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f8be:	4622      	mov	r2, r4
 801f8c0:	b003      	add	sp, #12
 801f8c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f8c6:	f001 bd0b 	b.w	80212e0 <forward_lite_node_convert_integer_if32ou8>
 801f8ca:	2a00      	cmp	r2, #0
 801f8cc:	d141      	bne.n	801f952 <node_convert+0x1be>
 801f8ce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f8d2:	2300      	movs	r3, #0
 801f8d4:	4622      	mov	r2, r4
 801f8d6:	4629      	mov	r1, r5
 801f8d8:	b003      	add	sp, #12
 801f8da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f8de:	f001 bcfb 	b.w	80212d8 <forward_lite_node_convert_integer_iu8of32>
 801f8e2:	781b      	ldrb	r3, [r3, #0]
 801f8e4:	4622      	mov	r2, r4
 801f8e6:	4629      	mov	r1, r5
 801f8e8:	b003      	add	sp, #12
 801f8ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f8ee:	f001 bcf3 	b.w	80212d8 <forward_lite_node_convert_integer_iu8of32>
 801f8f2:	2401      	movs	r4, #1
 801f8f4:	e76c      	b.n	801f7d0 <node_convert+0x3c>
 801f8f6:	6832      	ldr	r2, [r6, #0]
 801f8f8:	f3c2 17c6 	ubfx	r7, r2, #7, #7
 801f8fc:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 801f900:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 801f904:	1afb      	subs	r3, r7, r3
 801f906:	3340      	adds	r3, #64	@ 0x40
 801f908:	1a9b      	subs	r3, r3, r2
 801f90a:	d016      	beq.n	801f93a <node_convert+0x1a6>
 801f90c:	425b      	negs	r3, r3
 801f90e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801f912:	9001      	str	r0, [sp, #4]
 801f914:	ee00 3a90 	vmov	s1, r3
 801f918:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801f91c:	f017 f904 	bl	8036b28 <powf>
 801f920:	9801      	ldr	r0, [sp, #4]
 801f922:	b154      	cbz	r4, 801f93a <node_convert+0x1a6>
 801f924:	462b      	mov	r3, r5
 801f926:	4602      	mov	r2, r0
 801f928:	ecf2 7a01 	vldmia	r2!, {s15}
 801f92c:	3301      	adds	r3, #1
 801f92e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f932:	42a3      	cmp	r3, r4
 801f934:	ed42 7a01 	vstr	s15, [r2, #-4]
 801f938:	d1f6      	bne.n	801f928 <node_convert+0x194>
 801f93a:	2f08      	cmp	r7, #8
 801f93c:	d00d      	beq.n	801f95a <node_convert+0x1c6>
 801f93e:	4622      	mov	r2, r4
 801f940:	68b1      	ldr	r1, [r6, #8]
 801f942:	b003      	add	sp, #12
 801f944:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f948:	f003 bfa2 	b.w	8023890 <st_f32_to_int16>
 801f94c:	f004 fdfa 	bl	8024544 <st_int8_to_f32>
 801f950:	e78e      	b.n	801f870 <node_convert+0xdc>
 801f952:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f956:	4633      	mov	r3, r6
 801f958:	e752      	b.n	801f800 <node_convert+0x6c>
 801f95a:	4622      	mov	r2, r4
 801f95c:	68b1      	ldr	r1, [r6, #8]
 801f95e:	b003      	add	sp, #12
 801f960:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f964:	f004 b84a 	b.w	80239fc <st_f32_to_int8>
 801f968:	6853      	ldr	r3, [r2, #4]
 801f96a:	781b      	ldrb	r3, [r3, #0]
 801f96c:	e7a7      	b.n	801f8be <node_convert+0x12a>
 801f96e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801f972:	462b      	mov	r3, r5
 801f974:	e764      	b.n	801f840 <node_convert+0xac>
 801f976:	2300      	movs	r3, #0
 801f978:	685b      	ldr	r3, [r3, #4]
 801f97a:	deff      	udf	#255	@ 0xff

0801f97c <node_convert_integer>:
 801f97c:	6982      	ldr	r2, [r0, #24]
 801f97e:	8813      	ldrh	r3, [r2, #0]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d058      	beq.n	801fa36 <node_convert_integer+0xba>
 801f984:	b570      	push	{r4, r5, r6, lr}
 801f986:	6852      	ldr	r2, [r2, #4]
 801f988:	b082      	sub	sp, #8
 801f98a:	6855      	ldr	r5, [r2, #4]
 801f98c:	b105      	cbz	r5, 801f990 <node_convert_integer+0x14>
 801f98e:	682d      	ldr	r5, [r5, #0]
 801f990:	2b01      	cmp	r3, #1
 801f992:	f000 80cc 	beq.w	801fb2e <node_convert_integer+0x1b2>
 801f996:	6916      	ldr	r6, [r2, #16]
 801f998:	b106      	cbz	r6, 801f99c <node_convert_integer+0x20>
 801f99a:	6836      	ldr	r6, [r6, #0]
 801f99c:	68ab      	ldr	r3, [r5, #8]
 801f99e:	0a1b      	lsrs	r3, r3, #8
 801f9a0:	f000 80a4 	beq.w	801faec <node_convert_integer+0x170>
 801f9a4:	68e8      	ldr	r0, [r5, #12]
 801f9a6:	2201      	movs	r2, #1
 801f9a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f9ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f9b0:	4298      	cmp	r0, r3
 801f9b2:	fb01 f202 	mul.w	r2, r1, r2
 801f9b6:	d1f9      	bne.n	801f9ac <node_convert_integer+0x30>
 801f9b8:	682b      	ldr	r3, [r5, #0]
 801f9ba:	6834      	ldr	r4, [r6, #0]
 801f9bc:	b18b      	cbz	r3, 801f9e2 <node_convert_integer+0x66>
 801f9be:	6859      	ldr	r1, [r3, #4]
 801f9c0:	b179      	cbz	r1, 801f9e2 <node_convert_integer+0x66>
 801f9c2:	8858      	ldrh	r0, [r3, #2]
 801f9c4:	b168      	cbz	r0, 801f9e2 <node_convert_integer+0x66>
 801f9c6:	6809      	ldr	r1, [r1, #0]
 801f9c8:	edd1 7a00 	vldr	s15, [r1]
 801f9cc:	b16c      	cbz	r4, 801f9ea <node_convert_integer+0x6e>
 801f9ce:	6861      	ldr	r1, [r4, #4]
 801f9d0:	b159      	cbz	r1, 801f9ea <node_convert_integer+0x6e>
 801f9d2:	8860      	ldrh	r0, [r4, #2]
 801f9d4:	b148      	cbz	r0, 801f9ea <node_convert_integer+0x6e>
 801f9d6:	6809      	ldr	r1, [r1, #0]
 801f9d8:	ed91 7a00 	vldr	s14, [r1]
 801f9dc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801f9e0:	e007      	b.n	801f9f2 <node_convert_integer+0x76>
 801f9e2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801f9e6:	2c00      	cmp	r4, #0
 801f9e8:	d1f1      	bne.n	801f9ce <node_convert_integer+0x52>
 801f9ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f9ee:	eeb0 0a67 	vmov.f32	s0, s15
 801f9f2:	69a8      	ldr	r0, [r5, #24]
 801f9f4:	69b5      	ldr	r5, [r6, #24]
 801f9f6:	6806      	ldr	r6, [r0, #0]
 801f9f8:	6829      	ldr	r1, [r5, #0]
 801f9fa:	0236      	lsls	r6, r6, #8
 801f9fc:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 801fa00:	d41b      	bmi.n	801fa3a <node_convert_integer+0xbe>
 801fa02:	2900      	cmp	r1, #0
 801fa04:	d153      	bne.n	801faae <node_convert_integer+0x132>
 801fa06:	6880      	ldr	r0, [r0, #8]
 801fa08:	68a9      	ldr	r1, [r5, #8]
 801fa0a:	b13b      	cbz	r3, 801fa1c <node_convert_integer+0xa0>
 801fa0c:	685d      	ldr	r5, [r3, #4]
 801fa0e:	2d00      	cmp	r5, #0
 801fa10:	f000 8082 	beq.w	801fb18 <node_convert_integer+0x19c>
 801fa14:	885b      	ldrh	r3, [r3, #2]
 801fa16:	b10b      	cbz	r3, 801fa1c <node_convert_integer+0xa0>
 801fa18:	686b      	ldr	r3, [r5, #4]
 801fa1a:	781b      	ldrb	r3, [r3, #0]
 801fa1c:	b134      	cbz	r4, 801fa2c <node_convert_integer+0xb0>
 801fa1e:	6865      	ldr	r5, [r4, #4]
 801fa20:	2d00      	cmp	r5, #0
 801fa22:	d06d      	beq.n	801fb00 <node_convert_integer+0x184>
 801fa24:	8864      	ldrh	r4, [r4, #2]
 801fa26:	b10c      	cbz	r4, 801fa2c <node_convert_integer+0xb0>
 801fa28:	686c      	ldr	r4, [r5, #4]
 801fa2a:	7824      	ldrb	r4, [r4, #0]
 801fa2c:	9400      	str	r4, [sp, #0]
 801fa2e:	f001 fc61 	bl	80212f4 <forward_lite_node_convert_integer_iu8ou8>
 801fa32:	b002      	add	sp, #8
 801fa34:	bd70      	pop	{r4, r5, r6, pc}
 801fa36:	685b      	ldr	r3, [r3, #4]
 801fa38:	deff      	udf	#255	@ 0xff
 801fa3a:	6880      	ldr	r0, [r0, #8]
 801fa3c:	b1b9      	cbz	r1, 801fa6e <node_convert_integer+0xf2>
 801fa3e:	68a9      	ldr	r1, [r5, #8]
 801fa40:	b13b      	cbz	r3, 801fa52 <node_convert_integer+0xd6>
 801fa42:	685d      	ldr	r5, [r3, #4]
 801fa44:	2d00      	cmp	r5, #0
 801fa46:	d057      	beq.n	801faf8 <node_convert_integer+0x17c>
 801fa48:	885b      	ldrh	r3, [r3, #2]
 801fa4a:	b113      	cbz	r3, 801fa52 <node_convert_integer+0xd6>
 801fa4c:	686b      	ldr	r3, [r5, #4]
 801fa4e:	f993 3000 	ldrsb.w	r3, [r3]
 801fa52:	b13c      	cbz	r4, 801fa64 <node_convert_integer+0xe8>
 801fa54:	6865      	ldr	r5, [r4, #4]
 801fa56:	2d00      	cmp	r5, #0
 801fa58:	d04c      	beq.n	801faf4 <node_convert_integer+0x178>
 801fa5a:	8864      	ldrh	r4, [r4, #2]
 801fa5c:	b114      	cbz	r4, 801fa64 <node_convert_integer+0xe8>
 801fa5e:	686c      	ldr	r4, [r5, #4]
 801fa60:	f994 4000 	ldrsb.w	r4, [r4]
 801fa64:	9400      	str	r4, [sp, #0]
 801fa66:	f001 fc3d 	bl	80212e4 <forward_lite_node_convert_integer_is8os8>
 801fa6a:	b002      	add	sp, #8
 801fa6c:	bd70      	pop	{r4, r5, r6, pc}
 801fa6e:	68a9      	ldr	r1, [r5, #8]
 801fa70:	b13b      	cbz	r3, 801fa82 <node_convert_integer+0x106>
 801fa72:	685d      	ldr	r5, [r3, #4]
 801fa74:	2d00      	cmp	r5, #0
 801fa76:	d04b      	beq.n	801fb10 <node_convert_integer+0x194>
 801fa78:	885b      	ldrh	r3, [r3, #2]
 801fa7a:	b113      	cbz	r3, 801fa82 <node_convert_integer+0x106>
 801fa7c:	686b      	ldr	r3, [r5, #4]
 801fa7e:	f993 3000 	ldrsb.w	r3, [r3]
 801fa82:	b134      	cbz	r4, 801fa92 <node_convert_integer+0x116>
 801fa84:	6865      	ldr	r5, [r4, #4]
 801fa86:	2d00      	cmp	r5, #0
 801fa88:	d03c      	beq.n	801fb04 <node_convert_integer+0x188>
 801fa8a:	8864      	ldrh	r4, [r4, #2]
 801fa8c:	b10c      	cbz	r4, 801fa92 <node_convert_integer+0x116>
 801fa8e:	686c      	ldr	r4, [r5, #4]
 801fa90:	7824      	ldrb	r4, [r4, #0]
 801fa92:	eef4 7a47 	vcmp.f32	s15, s14
 801fa96:	9400      	str	r4, [sp, #0]
 801fa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa9c:	d103      	bne.n	801faa6 <node_convert_integer+0x12a>
 801fa9e:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 801faa2:	42a5      	cmp	r5, r4
 801faa4:	d040      	beq.n	801fb28 <node_convert_integer+0x1ac>
 801faa6:	f001 fc37 	bl	8021318 <forward_lite_node_convert_integer_is8ou8>
 801faaa:	b002      	add	sp, #8
 801faac:	bd70      	pop	{r4, r5, r6, pc}
 801faae:	b12b      	cbz	r3, 801fabc <node_convert_integer+0x140>
 801fab0:	6859      	ldr	r1, [r3, #4]
 801fab2:	b349      	cbz	r1, 801fb08 <node_convert_integer+0x18c>
 801fab4:	885b      	ldrh	r3, [r3, #2]
 801fab6:	b10b      	cbz	r3, 801fabc <node_convert_integer+0x140>
 801fab8:	684b      	ldr	r3, [r1, #4]
 801faba:	781b      	ldrb	r3, [r3, #0]
 801fabc:	b134      	cbz	r4, 801facc <node_convert_integer+0x150>
 801fabe:	6861      	ldr	r1, [r4, #4]
 801fac0:	b1b1      	cbz	r1, 801faf0 <node_convert_integer+0x174>
 801fac2:	8864      	ldrh	r4, [r4, #2]
 801fac4:	b114      	cbz	r4, 801facc <node_convert_integer+0x150>
 801fac6:	6849      	ldr	r1, [r1, #4]
 801fac8:	f991 4000 	ldrsb.w	r4, [r1]
 801facc:	eef4 7a47 	vcmp.f32	s15, s14
 801fad0:	6880      	ldr	r0, [r0, #8]
 801fad2:	68a9      	ldr	r1, [r5, #8]
 801fad4:	9400      	str	r4, [sp, #0]
 801fad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fada:	d103      	bne.n	801fae4 <node_convert_integer+0x168>
 801fadc:	f104 0580 	add.w	r5, r4, #128	@ 0x80
 801fae0:	42ab      	cmp	r3, r5
 801fae2:	d01e      	beq.n	801fb22 <node_convert_integer+0x1a6>
 801fae4:	f001 fc0e 	bl	8021304 <forward_lite_node_convert_integer_iu8os8>
 801fae8:	b002      	add	sp, #8
 801faea:	bd70      	pop	{r4, r5, r6, pc}
 801faec:	2201      	movs	r2, #1
 801faee:	e763      	b.n	801f9b8 <node_convert_integer+0x3c>
 801faf0:	460c      	mov	r4, r1
 801faf2:	e7eb      	b.n	801facc <node_convert_integer+0x150>
 801faf4:	462c      	mov	r4, r5
 801faf6:	e7b5      	b.n	801fa64 <node_convert_integer+0xe8>
 801faf8:	462b      	mov	r3, r5
 801fafa:	2c00      	cmp	r4, #0
 801fafc:	d1aa      	bne.n	801fa54 <node_convert_integer+0xd8>
 801fafe:	e7b1      	b.n	801fa64 <node_convert_integer+0xe8>
 801fb00:	462c      	mov	r4, r5
 801fb02:	e793      	b.n	801fa2c <node_convert_integer+0xb0>
 801fb04:	462c      	mov	r4, r5
 801fb06:	e7c4      	b.n	801fa92 <node_convert_integer+0x116>
 801fb08:	460b      	mov	r3, r1
 801fb0a:	2c00      	cmp	r4, #0
 801fb0c:	d1d7      	bne.n	801fabe <node_convert_integer+0x142>
 801fb0e:	e7dd      	b.n	801facc <node_convert_integer+0x150>
 801fb10:	462b      	mov	r3, r5
 801fb12:	2c00      	cmp	r4, #0
 801fb14:	d1b6      	bne.n	801fa84 <node_convert_integer+0x108>
 801fb16:	e7bc      	b.n	801fa92 <node_convert_integer+0x116>
 801fb18:	462b      	mov	r3, r5
 801fb1a:	2c00      	cmp	r4, #0
 801fb1c:	f47f af7f 	bne.w	801fa1e <node_convert_integer+0xa2>
 801fb20:	e784      	b.n	801fa2c <node_convert_integer+0xb0>
 801fb22:	f001 fbf7 	bl	8021314 <forward_lite_node_convert_integer_iu8os8_fast>
 801fb26:	e784      	b.n	801fa32 <node_convert_integer+0xb6>
 801fb28:	f001 fbfe 	bl	8021328 <forward_lite_node_convert_integer_is8ou8_fast>
 801fb2c:	e781      	b.n	801fa32 <node_convert_integer+0xb6>
 801fb2e:	2300      	movs	r3, #0
 801fb30:	685b      	ldr	r3, [r3, #4]
 801fb32:	deff      	udf	#255	@ 0xff

0801fb34 <ai_check_custom_types>:
 801fb34:	b082      	sub	sp, #8
 801fb36:	4b12      	ldr	r3, [pc, #72]	@ (801fb80 <ai_check_custom_types+0x4c>)
 801fb38:	9301      	str	r3, [sp, #4]
 801fb3a:	b118      	cbz	r0, 801fb44 <ai_check_custom_types+0x10>
 801fb3c:	7803      	ldrb	r3, [r0, #0]
 801fb3e:	2b03      	cmp	r3, #3
 801fb40:	d002      	beq.n	801fb48 <ai_check_custom_types+0x14>
 801fb42:	2000      	movs	r0, #0
 801fb44:	b002      	add	sp, #8
 801fb46:	4770      	bx	lr
 801fb48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801fb4c:	4293      	cmp	r3, r2
 801fb4e:	d004      	beq.n	801fb5a <ai_check_custom_types+0x26>
 801fb50:	2001      	movs	r0, #1
 801fb52:	f080 0001 	eor.w	r0, r0, #1
 801fb56:	b002      	add	sp, #8
 801fb58:	4770      	bx	lr
 801fb5a:	7842      	ldrb	r2, [r0, #1]
 801fb5c:	3001      	adds	r0, #1
 801fb5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801fb62:	429a      	cmp	r2, r3
 801fb64:	d1f4      	bne.n	801fb50 <ai_check_custom_types+0x1c>
 801fb66:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801fb6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801fb6e:	429a      	cmp	r2, r3
 801fb70:	d1ee      	bne.n	801fb50 <ai_check_custom_types+0x1c>
 801fb72:	7842      	ldrb	r2, [r0, #1]
 801fb74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801fb78:	429a      	cmp	r2, r3
 801fb7a:	d1e9      	bne.n	801fb50 <ai_check_custom_types+0x1c>
 801fb7c:	2000      	movs	r0, #0
 801fb7e:	e7e8      	b.n	801fb52 <ai_check_custom_types+0x1e>
 801fb80:	84048403 	.word	0x84048403

0801fb84 <ai_layers_init_all>:
 801fb84:	2100      	movs	r1, #0
 801fb86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801fb88:	b13b      	cbz	r3, 801fb9a <ai_layers_init_all+0x16>
 801fb8a:	691a      	ldr	r2, [r3, #16]
 801fb8c:	3101      	adds	r1, #1
 801fb8e:	60d8      	str	r0, [r3, #12]
 801fb90:	429a      	cmp	r2, r3
 801fb92:	4613      	mov	r3, r2
 801fb94:	d001      	beq.n	801fb9a <ai_layers_init_all+0x16>
 801fb96:	2a00      	cmp	r2, #0
 801fb98:	d1f6      	bne.n	801fb88 <ai_layers_init_all+0x4>
 801fb9a:	4608      	mov	r0, r1
 801fb9c:	4770      	bx	lr
 801fb9e:	bf00      	nop

0801fba0 <ai_layers_post_init_all>:
 801fba0:	b538      	push	{r3, r4, r5, lr}
 801fba2:	2500      	movs	r5, #0
 801fba4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801fba6:	b16c      	cbz	r4, 801fbc4 <ai_layers_post_init_all+0x24>
 801fba8:	6863      	ldr	r3, [r4, #4]
 801fbaa:	07db      	lsls	r3, r3, #31
 801fbac:	d504      	bpl.n	801fbb8 <ai_layers_post_init_all+0x18>
 801fbae:	6a23      	ldr	r3, [r4, #32]
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	b10b      	cbz	r3, 801fbb8 <ai_layers_post_init_all+0x18>
 801fbb4:	3501      	adds	r5, #1
 801fbb6:	4798      	blx	r3
 801fbb8:	6923      	ldr	r3, [r4, #16]
 801fbba:	42a3      	cmp	r3, r4
 801fbbc:	461c      	mov	r4, r3
 801fbbe:	d001      	beq.n	801fbc4 <ai_layers_post_init_all+0x24>
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d1f0      	bne.n	801fba6 <ai_layers_post_init_all+0x6>
 801fbc4:	4628      	mov	r0, r5
 801fbc6:	bd38      	pop	{r3, r4, r5, pc}

0801fbc8 <ai_layers_forward_all>:
 801fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbcc:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801fbd0:	4604      	mov	r4, r0
 801fbd2:	f1b8 0f00 	cmp.w	r8, #0
 801fbd6:	d02a      	beq.n	801fc2e <ai_layers_forward_all+0x66>
 801fbd8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801fbda:	63c1      	str	r1, [r0, #60]	@ 0x3c
 801fbdc:	b319      	cbz	r1, 801fc26 <ai_layers_forward_all+0x5e>
 801fbde:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801fbe0:	2001      	movs	r0, #1
 801fbe2:	47c0      	blx	r8
 801fbe4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801fbe6:	b1f6      	cbz	r6, 801fc26 <ai_layers_forward_all+0x5e>
 801fbe8:	2700      	movs	r7, #0
 801fbea:	4631      	mov	r1, r6
 801fbec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801fbee:	2002      	movs	r0, #2
 801fbf0:	47c0      	blx	r8
 801fbf2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801fbf4:	4628      	mov	r0, r5
 801fbf6:	696b      	ldr	r3, [r5, #20]
 801fbf8:	4798      	blx	r3
 801fbfa:	692e      	ldr	r6, [r5, #16]
 801fbfc:	2003      	movs	r0, #3
 801fbfe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801fc00:	42b5      	cmp	r5, r6
 801fc02:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801fc04:	d007      	beq.n	801fc16 <ai_layers_forward_all+0x4e>
 801fc06:	47c0      	blx	r8
 801fc08:	3701      	adds	r7, #1
 801fc0a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801fc0c:	2e00      	cmp	r6, #0
 801fc0e:	d1ec      	bne.n	801fbea <ai_layers_forward_all+0x22>
 801fc10:	4638      	mov	r0, r7
 801fc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc16:	2003      	movs	r0, #3
 801fc18:	3701      	adds	r7, #1
 801fc1a:	47c0      	blx	r8
 801fc1c:	2300      	movs	r3, #0
 801fc1e:	4638      	mov	r0, r7
 801fc20:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801fc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc26:	2700      	movs	r7, #0
 801fc28:	4638      	mov	r0, r7
 801fc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc2e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801fc30:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801fc32:	2d00      	cmp	r5, #0
 801fc34:	d0f7      	beq.n	801fc26 <ai_layers_forward_all+0x5e>
 801fc36:	4647      	mov	r7, r8
 801fc38:	696b      	ldr	r3, [r5, #20]
 801fc3a:	4628      	mov	r0, r5
 801fc3c:	4798      	blx	r3
 801fc3e:	462b      	mov	r3, r5
 801fc40:	692d      	ldr	r5, [r5, #16]
 801fc42:	429d      	cmp	r5, r3
 801fc44:	d004      	beq.n	801fc50 <ai_layers_forward_all+0x88>
 801fc46:	3701      	adds	r7, #1
 801fc48:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801fc4a:	2d00      	cmp	r5, #0
 801fc4c:	d1f4      	bne.n	801fc38 <ai_layers_forward_all+0x70>
 801fc4e:	e7df      	b.n	801fc10 <ai_layers_forward_all+0x48>
 801fc50:	2300      	movs	r3, #0
 801fc52:	3701      	adds	r7, #1
 801fc54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801fc56:	e7db      	b.n	801fc10 <ai_layers_forward_all+0x48>

0801fc58 <forward_conv2d_rgb_sssa8_ch>:
 801fc58:	6982      	ldr	r2, [r0, #24]
 801fc5a:	8813      	ldrh	r3, [r2, #0]
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	f000 80a8 	beq.w	801fdb2 <forward_conv2d_rgb_sssa8_ch+0x15a>
 801fc62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc66:	6854      	ldr	r4, [r2, #4]
 801fc68:	b097      	sub	sp, #92	@ 0x5c
 801fc6a:	6861      	ldr	r1, [r4, #4]
 801fc6c:	b101      	cbz	r1, 801fc70 <forward_conv2d_rgb_sssa8_ch+0x18>
 801fc6e:	6809      	ldr	r1, [r1, #0]
 801fc70:	2b01      	cmp	r3, #1
 801fc72:	f000 80b7 	beq.w	801fde4 <forward_conv2d_rgb_sssa8_ch+0x18c>
 801fc76:	6922      	ldr	r2, [r4, #16]
 801fc78:	b102      	cbz	r2, 801fc7c <forward_conv2d_rgb_sssa8_ch+0x24>
 801fc7a:	6812      	ldr	r2, [r2, #0]
 801fc7c:	2b02      	cmp	r3, #2
 801fc7e:	f000 80ac 	beq.w	801fdda <forward_conv2d_rgb_sssa8_ch+0x182>
 801fc82:	69e5      	ldr	r5, [r4, #28]
 801fc84:	2d00      	cmp	r5, #0
 801fc86:	f000 80a0 	beq.w	801fdca <forward_conv2d_rgb_sssa8_ch+0x172>
 801fc8a:	8b26      	ldrh	r6, [r4, #24]
 801fc8c:	f8d5 e000 	ldr.w	lr, [r5]
 801fc90:	2e01      	cmp	r6, #1
 801fc92:	f240 809c 	bls.w	801fdce <forward_conv2d_rgb_sssa8_ch+0x176>
 801fc96:	686d      	ldr	r5, [r5, #4]
 801fc98:	2b03      	cmp	r3, #3
 801fc9a:	f000 80a6 	beq.w	801fdea <forward_conv2d_rgb_sssa8_ch+0x192>
 801fc9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	f000 8096 	beq.w	801fdd2 <forward_conv2d_rgb_sssa8_ch+0x17a>
 801fca6:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801fca8:	b104      	cbz	r4, 801fcac <forward_conv2d_rgb_sssa8_ch+0x54>
 801fcaa:	685a      	ldr	r2, [r3, #4]
 801fcac:	681c      	ldr	r4, [r3, #0]
 801fcae:	69ab      	ldr	r3, [r5, #24]
 801fcb0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801fcb4:	689b      	ldr	r3, [r3, #8]
 801fcb6:	68d4      	ldr	r4, [r2, #12]
 801fcb8:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcba:	68cb      	ldr	r3, [r1, #12]
 801fcbc:	680d      	ldr	r5, [r1, #0]
 801fcbe:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801fcc2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801fcc4:	f8de 6000 	ldr.w	r6, [lr]
 801fcc8:	889b      	ldrh	r3, [r3, #4]
 801fcca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fccc:	f8de 300c 	ldr.w	r3, [lr, #12]
 801fcd0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801fcd4:	88a3      	ldrh	r3, [r4, #4]
 801fcd6:	68a4      	ldr	r4, [r4, #8]
 801fcd8:	9411      	str	r4, [sp, #68]	@ 0x44
 801fcda:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 801fcdc:	9412      	str	r4, [sp, #72]	@ 0x48
 801fcde:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801fce2:	9415      	str	r4, [sp, #84]	@ 0x54
 801fce4:	6814      	ldr	r4, [r2, #0]
 801fce6:	2d00      	cmp	r5, #0
 801fce8:	d068      	beq.n	801fdbc <forward_conv2d_rgb_sssa8_ch+0x164>
 801fcea:	686f      	ldr	r7, [r5, #4]
 801fcec:	2f00      	cmp	r7, #0
 801fcee:	d065      	beq.n	801fdbc <forward_conv2d_rgb_sssa8_ch+0x164>
 801fcf0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 801fcf4:	f1b8 0f00 	cmp.w	r8, #0
 801fcf8:	d060      	beq.n	801fdbc <forward_conv2d_rgb_sssa8_ch+0x164>
 801fcfa:	683f      	ldr	r7, [r7, #0]
 801fcfc:	ed97 0a00 	vldr	s0, [r7]
 801fd00:	2c00      	cmp	r4, #0
 801fd02:	d058      	beq.n	801fdb6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 801fd04:	6867      	ldr	r7, [r4, #4]
 801fd06:	2f00      	cmp	r7, #0
 801fd08:	d055      	beq.n	801fdb6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 801fd0a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 801fd0e:	f1b8 0f00 	cmp.w	r8, #0
 801fd12:	d050      	beq.n	801fdb6 <forward_conv2d_rgb_sssa8_ch+0x15e>
 801fd14:	683f      	ldr	r7, [r7, #0]
 801fd16:	edd7 0a00 	vldr	s1, [r7]
 801fd1a:	6997      	ldr	r7, [r2, #24]
 801fd1c:	6989      	ldr	r1, [r1, #24]
 801fd1e:	f8de 2018 	ldr.w	r2, [lr, #24]
 801fd22:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801fd26:	f890 8041 	ldrb.w	r8, [r0, #65]	@ 0x41
 801fd2a:	688f      	ldr	r7, [r1, #8]
 801fd2c:	6892      	ldr	r2, [r2, #8]
 801fd2e:	b116      	cbz	r6, 801fd36 <forward_conv2d_rgb_sssa8_ch+0xde>
 801fd30:	6876      	ldr	r6, [r6, #4]
 801fd32:	b106      	cbz	r6, 801fd36 <forward_conv2d_rgb_sssa8_ch+0xde>
 801fd34:	6836      	ldr	r6, [r6, #0]
 801fd36:	b13d      	cbz	r5, 801fd48 <forward_conv2d_rgb_sssa8_ch+0xf0>
 801fd38:	6869      	ldr	r1, [r5, #4]
 801fd3a:	2900      	cmp	r1, #0
 801fd3c:	d041      	beq.n	801fdc2 <forward_conv2d_rgb_sssa8_ch+0x16a>
 801fd3e:	886d      	ldrh	r5, [r5, #2]
 801fd40:	b115      	cbz	r5, 801fd48 <forward_conv2d_rgb_sssa8_ch+0xf0>
 801fd42:	6849      	ldr	r1, [r1, #4]
 801fd44:	f991 5000 	ldrsb.w	r5, [r1]
 801fd48:	b13c      	cbz	r4, 801fd5a <forward_conv2d_rgb_sssa8_ch+0x102>
 801fd4a:	6861      	ldr	r1, [r4, #4]
 801fd4c:	2900      	cmp	r1, #0
 801fd4e:	d03a      	beq.n	801fdc6 <forward_conv2d_rgb_sssa8_ch+0x16e>
 801fd50:	8864      	ldrh	r4, [r4, #2]
 801fd52:	b114      	cbz	r4, 801fd5a <forward_conv2d_rgb_sssa8_ch+0x102>
 801fd54:	6849      	ldr	r1, [r1, #4]
 801fd56:	f991 4000 	ldrsb.w	r4, [r1]
 801fd5a:	edcd 0a0e 	vstr	s1, [sp, #56]	@ 0x38
 801fd5e:	ed8d 0a0d 	vstr	s0, [sp, #52]	@ 0x34
 801fd62:	e9dc 0100 	ldrd	r0, r1, [ip]
 801fd66:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801fd6a:	f011 fff5 	bl	8031d58 <ai_array_get_byte_size>
 801fd6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fd70:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 801fd74:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 801fd78:	9109      	str	r1, [sp, #36]	@ 0x24
 801fd7a:	fa1f f189 	uxth.w	r1, r9
 801fd7e:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 801fd82:	9504      	str	r5, [sp, #16]
 801fd84:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
 801fd88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fd8a:	4638      	mov	r0, r7
 801fd8c:	9303      	str	r3, [sp, #12]
 801fd8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fd90:	9302      	str	r3, [sp, #8]
 801fd92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd94:	e9cd 4605 	strd	r4, r6, [sp, #20]
 801fd98:	fa1f f48a 	uxth.w	r4, sl
 801fd9c:	9301      	str	r3, [sp, #4]
 801fd9e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801fda2:	e9cd 8b07 	strd	r8, fp, [sp, #28]
 801fda6:	9400      	str	r4, [sp, #0]
 801fda8:	f002 fcf0 	bl	802278c <forward_lite_conv2d_rgb_sssa8_ch>
 801fdac:	b017      	add	sp, #92	@ 0x5c
 801fdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb2:	685b      	ldr	r3, [r3, #4]
 801fdb4:	deff      	udf	#255	@ 0xff
 801fdb6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801fdba:	e7ae      	b.n	801fd1a <forward_conv2d_rgb_sssa8_ch+0xc2>
 801fdbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801fdc0:	e79e      	b.n	801fd00 <forward_conv2d_rgb_sssa8_ch+0xa8>
 801fdc2:	460d      	mov	r5, r1
 801fdc4:	e7c0      	b.n	801fd48 <forward_conv2d_rgb_sssa8_ch+0xf0>
 801fdc6:	460c      	mov	r4, r1
 801fdc8:	e7c7      	b.n	801fd5a <forward_conv2d_rgb_sssa8_ch+0x102>
 801fdca:	46ae      	mov	lr, r5
 801fdcc:	e764      	b.n	801fc98 <forward_conv2d_rgb_sssa8_ch+0x40>
 801fdce:	2500      	movs	r5, #0
 801fdd0:	e762      	b.n	801fc98 <forward_conv2d_rgb_sssa8_ch+0x40>
 801fdd2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801fdd4:	b922      	cbnz	r2, 801fde0 <forward_conv2d_rgb_sssa8_ch+0x188>
 801fdd6:	6993      	ldr	r3, [r2, #24]
 801fdd8:	deff      	udf	#255	@ 0xff
 801fdda:	2300      	movs	r3, #0
 801fddc:	685b      	ldr	r3, [r3, #4]
 801fdde:	deff      	udf	#255	@ 0xff
 801fde0:	68db      	ldr	r3, [r3, #12]
 801fde2:	deff      	udf	#255	@ 0xff
 801fde4:	2300      	movs	r3, #0
 801fde6:	685b      	ldr	r3, [r3, #4]
 801fde8:	deff      	udf	#255	@ 0xff
 801fdea:	2300      	movs	r3, #0
 801fdec:	685b      	ldr	r3, [r3, #4]
 801fdee:	deff      	udf	#255	@ 0xff

0801fdf0 <forward_conv2d_deep_3x3_sssa8_ch>:
 801fdf0:	6982      	ldr	r2, [r0, #24]
 801fdf2:	8813      	ldrh	r3, [r2, #0]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	f000 80a6 	beq.w	801ff46 <forward_conv2d_deep_3x3_sssa8_ch+0x156>
 801fdfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdfe:	6854      	ldr	r4, [r2, #4]
 801fe00:	b099      	sub	sp, #100	@ 0x64
 801fe02:	6861      	ldr	r1, [r4, #4]
 801fe04:	b101      	cbz	r1, 801fe08 <forward_conv2d_deep_3x3_sssa8_ch+0x18>
 801fe06:	6809      	ldr	r1, [r1, #0]
 801fe08:	2b01      	cmp	r3, #1
 801fe0a:	f000 80b5 	beq.w	801ff78 <forward_conv2d_deep_3x3_sssa8_ch+0x188>
 801fe0e:	6922      	ldr	r2, [r4, #16]
 801fe10:	b102      	cbz	r2, 801fe14 <forward_conv2d_deep_3x3_sssa8_ch+0x24>
 801fe12:	6812      	ldr	r2, [r2, #0]
 801fe14:	2b02      	cmp	r3, #2
 801fe16:	f000 80aa 	beq.w	801ff6e <forward_conv2d_deep_3x3_sssa8_ch+0x17e>
 801fe1a:	69e5      	ldr	r5, [r4, #28]
 801fe1c:	2d00      	cmp	r5, #0
 801fe1e:	f000 809e 	beq.w	801ff5e <forward_conv2d_deep_3x3_sssa8_ch+0x16e>
 801fe22:	8b26      	ldrh	r6, [r4, #24]
 801fe24:	f8d5 e000 	ldr.w	lr, [r5]
 801fe28:	2e01      	cmp	r6, #1
 801fe2a:	f240 809a 	bls.w	801ff62 <forward_conv2d_deep_3x3_sssa8_ch+0x172>
 801fe2e:	686d      	ldr	r5, [r5, #4]
 801fe30:	2b03      	cmp	r3, #3
 801fe32:	f000 80a4 	beq.w	801ff7e <forward_conv2d_deep_3x3_sssa8_ch+0x18e>
 801fe36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	f000 8094 	beq.w	801ff66 <forward_conv2d_deep_3x3_sssa8_ch+0x176>
 801fe3e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801fe40:	b104      	cbz	r4, 801fe44 <forward_conv2d_deep_3x3_sssa8_ch+0x54>
 801fe42:	685a      	ldr	r2, [r3, #4]
 801fe44:	681c      	ldr	r4, [r3, #0]
 801fe46:	69ab      	ldr	r3, [r5, #24]
 801fe48:	68d6      	ldr	r6, [r2, #12]
 801fe4a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801fe4e:	689b      	ldr	r3, [r3, #8]
 801fe50:	88b7      	ldrh	r7, [r6, #4]
 801fe52:	68cc      	ldr	r4, [r1, #12]
 801fe54:	9316      	str	r3, [sp, #88]	@ 0x58
 801fe56:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801fe5a:	9712      	str	r7, [sp, #72]	@ 0x48
 801fe5c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fe5e:	68f7      	ldr	r7, [r6, #12]
 801fe60:	88a3      	ldrh	r3, [r4, #4]
 801fe62:	68b6      	ldr	r6, [r6, #8]
 801fe64:	680d      	ldr	r5, [r1, #0]
 801fe66:	9614      	str	r6, [sp, #80]	@ 0x50
 801fe68:	9713      	str	r7, [sp, #76]	@ 0x4c
 801fe6a:	f8de 6000 	ldr.w	r6, [lr]
 801fe6e:	e9d4 4b02 	ldrd	r4, fp, [r4, #8]
 801fe72:	9415      	str	r4, [sp, #84]	@ 0x54
 801fe74:	6814      	ldr	r4, [r2, #0]
 801fe76:	2d00      	cmp	r5, #0
 801fe78:	d06a      	beq.n	801ff50 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 801fe7a:	686f      	ldr	r7, [r5, #4]
 801fe7c:	2f00      	cmp	r7, #0
 801fe7e:	d067      	beq.n	801ff50 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 801fe80:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 801fe84:	f1b8 0f00 	cmp.w	r8, #0
 801fe88:	d062      	beq.n	801ff50 <forward_conv2d_deep_3x3_sssa8_ch+0x160>
 801fe8a:	683f      	ldr	r7, [r7, #0]
 801fe8c:	ed97 0a00 	vldr	s0, [r7]
 801fe90:	2c00      	cmp	r4, #0
 801fe92:	d05a      	beq.n	801ff4a <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 801fe94:	6867      	ldr	r7, [r4, #4]
 801fe96:	2f00      	cmp	r7, #0
 801fe98:	d057      	beq.n	801ff4a <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 801fe9a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 801fe9e:	f1b8 0f00 	cmp.w	r8, #0
 801fea2:	d052      	beq.n	801ff4a <forward_conv2d_deep_3x3_sssa8_ch+0x15a>
 801fea4:	683f      	ldr	r7, [r7, #0]
 801fea6:	edd7 0a00 	vldr	s1, [r7]
 801feaa:	698f      	ldr	r7, [r1, #24]
 801feac:	6992      	ldr	r2, [r2, #24]
 801feae:	f8de 1018 	ldr.w	r1, [lr, #24]
 801feb2:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 801feb6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 801feba:	68bf      	ldr	r7, [r7, #8]
 801febc:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801fec0:	b116      	cbz	r6, 801fec8 <forward_conv2d_deep_3x3_sssa8_ch+0xd8>
 801fec2:	6876      	ldr	r6, [r6, #4]
 801fec4:	b106      	cbz	r6, 801fec8 <forward_conv2d_deep_3x3_sssa8_ch+0xd8>
 801fec6:	6836      	ldr	r6, [r6, #0]
 801fec8:	b13d      	cbz	r5, 801feda <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 801feca:	6869      	ldr	r1, [r5, #4]
 801fecc:	2900      	cmp	r1, #0
 801fece:	d042      	beq.n	801ff56 <forward_conv2d_deep_3x3_sssa8_ch+0x166>
 801fed0:	886d      	ldrh	r5, [r5, #2]
 801fed2:	b115      	cbz	r5, 801feda <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 801fed4:	6849      	ldr	r1, [r1, #4]
 801fed6:	f991 5000 	ldrsb.w	r5, [r1]
 801feda:	b13c      	cbz	r4, 801feec <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 801fedc:	6861      	ldr	r1, [r4, #4]
 801fede:	2900      	cmp	r1, #0
 801fee0:	d03b      	beq.n	801ff5a <forward_conv2d_deep_3x3_sssa8_ch+0x16a>
 801fee2:	8864      	ldrh	r4, [r4, #2]
 801fee4:	b114      	cbz	r4, 801feec <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 801fee6:	6849      	ldr	r1, [r1, #4]
 801fee8:	f991 4000 	ldrsb.w	r4, [r1]
 801feec:	9311      	str	r3, [sp, #68]	@ 0x44
 801feee:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 801fef2:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 801fef6:	e9dc 0100 	ldrd	r0, r1, [ip]
 801fefa:	f011 ff2d 	bl	8031d58 <ai_array_get_byte_size>
 801fefe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff00:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 801ff04:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 801ff08:	9209      	str	r2, [sp, #36]	@ 0x24
 801ff0a:	fa1f f28b 	uxth.w	r2, fp
 801ff0e:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 801ff12:	f8bd 1054 	ldrh.w	r1, [sp, #84]	@ 0x54
 801ff16:	9503      	str	r5, [sp, #12]
 801ff18:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 801ff1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ff1e:	4638      	mov	r0, r7
 801ff20:	e9cd 4604 	strd	r4, r6, [sp, #16]
 801ff24:	9302      	str	r3, [sp, #8]
 801ff26:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 801ff2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ff2c:	9408      	str	r4, [sp, #32]
 801ff2e:	2401      	movs	r4, #1
 801ff30:	e9cd 8300 	strd	r8, r3, [sp]
 801ff34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ff36:	940a      	str	r4, [sp, #40]	@ 0x28
 801ff38:	e9cd 9a06 	strd	r9, sl, [sp, #24]
 801ff3c:	f002 fb7e 	bl	802263c <forward_lite_conv2d_deep_3x3_sssa8_ch>
 801ff40:	b019      	add	sp, #100	@ 0x64
 801ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff46:	685b      	ldr	r3, [r3, #4]
 801ff48:	deff      	udf	#255	@ 0xff
 801ff4a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801ff4e:	e7ac      	b.n	801feaa <forward_conv2d_deep_3x3_sssa8_ch+0xba>
 801ff50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ff54:	e79c      	b.n	801fe90 <forward_conv2d_deep_3x3_sssa8_ch+0xa0>
 801ff56:	460d      	mov	r5, r1
 801ff58:	e7bf      	b.n	801feda <forward_conv2d_deep_3x3_sssa8_ch+0xea>
 801ff5a:	460c      	mov	r4, r1
 801ff5c:	e7c6      	b.n	801feec <forward_conv2d_deep_3x3_sssa8_ch+0xfc>
 801ff5e:	46ae      	mov	lr, r5
 801ff60:	e766      	b.n	801fe30 <forward_conv2d_deep_3x3_sssa8_ch+0x40>
 801ff62:	2500      	movs	r5, #0
 801ff64:	e764      	b.n	801fe30 <forward_conv2d_deep_3x3_sssa8_ch+0x40>
 801ff66:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801ff68:	b922      	cbnz	r2, 801ff74 <forward_conv2d_deep_3x3_sssa8_ch+0x184>
 801ff6a:	6993      	ldr	r3, [r2, #24]
 801ff6c:	deff      	udf	#255	@ 0xff
 801ff6e:	2300      	movs	r3, #0
 801ff70:	685b      	ldr	r3, [r3, #4]
 801ff72:	deff      	udf	#255	@ 0xff
 801ff74:	68db      	ldr	r3, [r3, #12]
 801ff76:	deff      	udf	#255	@ 0xff
 801ff78:	2300      	movs	r3, #0
 801ff7a:	685b      	ldr	r3, [r3, #4]
 801ff7c:	deff      	udf	#255	@ 0xff
 801ff7e:	2300      	movs	r3, #0
 801ff80:	685b      	ldr	r3, [r3, #4]
 801ff82:	deff      	udf	#255	@ 0xff

0801ff84 <forward_dw_3x3_sssa8_ch>:
 801ff84:	6982      	ldr	r2, [r0, #24]
 801ff86:	8813      	ldrh	r3, [r2, #0]
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	f000 80a4 	beq.w	80200d6 <forward_dw_3x3_sssa8_ch+0x152>
 801ff8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff92:	6854      	ldr	r4, [r2, #4]
 801ff94:	b099      	sub	sp, #100	@ 0x64
 801ff96:	6861      	ldr	r1, [r4, #4]
 801ff98:	b101      	cbz	r1, 801ff9c <forward_dw_3x3_sssa8_ch+0x18>
 801ff9a:	6809      	ldr	r1, [r1, #0]
 801ff9c:	2b01      	cmp	r3, #1
 801ff9e:	f000 80b3 	beq.w	8020108 <forward_dw_3x3_sssa8_ch+0x184>
 801ffa2:	6922      	ldr	r2, [r4, #16]
 801ffa4:	b102      	cbz	r2, 801ffa8 <forward_dw_3x3_sssa8_ch+0x24>
 801ffa6:	6812      	ldr	r2, [r2, #0]
 801ffa8:	2b02      	cmp	r3, #2
 801ffaa:	f000 80a8 	beq.w	80200fe <forward_dw_3x3_sssa8_ch+0x17a>
 801ffae:	69e5      	ldr	r5, [r4, #28]
 801ffb0:	2d00      	cmp	r5, #0
 801ffb2:	f000 809c 	beq.w	80200ee <forward_dw_3x3_sssa8_ch+0x16a>
 801ffb6:	8b26      	ldrh	r6, [r4, #24]
 801ffb8:	682f      	ldr	r7, [r5, #0]
 801ffba:	2e01      	cmp	r6, #1
 801ffbc:	f240 8099 	bls.w	80200f2 <forward_dw_3x3_sssa8_ch+0x16e>
 801ffc0:	686d      	ldr	r5, [r5, #4]
 801ffc2:	2b03      	cmp	r3, #3
 801ffc4:	f000 80a3 	beq.w	802010e <forward_dw_3x3_sssa8_ch+0x18a>
 801ffc8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	f000 8093 	beq.w	80200f6 <forward_dw_3x3_sssa8_ch+0x172>
 801ffd0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801ffd2:	b104      	cbz	r4, 801ffd6 <forward_dw_3x3_sssa8_ch+0x52>
 801ffd4:	685a      	ldr	r2, [r3, #4]
 801ffd6:	681c      	ldr	r4, [r3, #0]
 801ffd8:	69ab      	ldr	r3, [r5, #24]
 801ffda:	68d6      	ldr	r6, [r2, #12]
 801ffdc:	689b      	ldr	r3, [r3, #8]
 801ffde:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801ffe2:	9316      	str	r3, [sp, #88]	@ 0x58
 801ffe4:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 801ffe6:	68cc      	ldr	r4, [r1, #12]
 801ffe8:	9314      	str	r3, [sp, #80]	@ 0x50
 801ffea:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801ffec:	68f0      	ldr	r0, [r6, #12]
 801ffee:	680d      	ldr	r5, [r1, #0]
 801fff0:	9012      	str	r0, [sp, #72]	@ 0x48
 801fff2:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801fff6:	9315      	str	r3, [sp, #84]	@ 0x54
 801fff8:	683e      	ldr	r6, [r7, #0]
 801fffa:	88a3      	ldrh	r3, [r4, #4]
 801fffc:	e9d4 0a02 	ldrd	r0, sl, [r4, #8]
 8020000:	6814      	ldr	r4, [r2, #0]
 8020002:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020004:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8020008:	9017      	str	r0, [sp, #92]	@ 0x5c
 802000a:	2d00      	cmp	r5, #0
 802000c:	d068      	beq.n	80200e0 <forward_dw_3x3_sssa8_ch+0x15c>
 802000e:	6868      	ldr	r0, [r5, #4]
 8020010:	2800      	cmp	r0, #0
 8020012:	d065      	beq.n	80200e0 <forward_dw_3x3_sssa8_ch+0x15c>
 8020014:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8020018:	f1be 0f00 	cmp.w	lr, #0
 802001c:	d060      	beq.n	80200e0 <forward_dw_3x3_sssa8_ch+0x15c>
 802001e:	6800      	ldr	r0, [r0, #0]
 8020020:	ed90 0a00 	vldr	s0, [r0]
 8020024:	2c00      	cmp	r4, #0
 8020026:	d058      	beq.n	80200da <forward_dw_3x3_sssa8_ch+0x156>
 8020028:	6860      	ldr	r0, [r4, #4]
 802002a:	2800      	cmp	r0, #0
 802002c:	d055      	beq.n	80200da <forward_dw_3x3_sssa8_ch+0x156>
 802002e:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8020032:	f1be 0f00 	cmp.w	lr, #0
 8020036:	d050      	beq.n	80200da <forward_dw_3x3_sssa8_ch+0x156>
 8020038:	6800      	ldr	r0, [r0, #0]
 802003a:	edd0 0a00 	vldr	s1, [r0]
 802003e:	6988      	ldr	r0, [r1, #24]
 8020040:	6992      	ldr	r2, [r2, #24]
 8020042:	69b9      	ldr	r1, [r7, #24]
 8020044:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8020048:	6887      	ldr	r7, [r0, #8]
 802004a:	f8d1 8008 	ldr.w	r8, [r1, #8]
 802004e:	b116      	cbz	r6, 8020056 <forward_dw_3x3_sssa8_ch+0xd2>
 8020050:	6876      	ldr	r6, [r6, #4]
 8020052:	b106      	cbz	r6, 8020056 <forward_dw_3x3_sssa8_ch+0xd2>
 8020054:	6836      	ldr	r6, [r6, #0]
 8020056:	b13d      	cbz	r5, 8020068 <forward_dw_3x3_sssa8_ch+0xe4>
 8020058:	6869      	ldr	r1, [r5, #4]
 802005a:	2900      	cmp	r1, #0
 802005c:	d043      	beq.n	80200e6 <forward_dw_3x3_sssa8_ch+0x162>
 802005e:	886d      	ldrh	r5, [r5, #2]
 8020060:	b115      	cbz	r5, 8020068 <forward_dw_3x3_sssa8_ch+0xe4>
 8020062:	6849      	ldr	r1, [r1, #4]
 8020064:	f991 5000 	ldrsb.w	r5, [r1]
 8020068:	b13c      	cbz	r4, 802007a <forward_dw_3x3_sssa8_ch+0xf6>
 802006a:	6861      	ldr	r1, [r4, #4]
 802006c:	2900      	cmp	r1, #0
 802006e:	d03c      	beq.n	80200ea <forward_dw_3x3_sssa8_ch+0x166>
 8020070:	8864      	ldrh	r4, [r4, #2]
 8020072:	b114      	cbz	r4, 802007a <forward_dw_3x3_sssa8_ch+0xf6>
 8020074:	6849      	ldr	r1, [r1, #4]
 8020076:	f991 4000 	ldrsb.w	r4, [r1]
 802007a:	9311      	str	r3, [sp, #68]	@ 0x44
 802007c:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8020080:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 8020084:	e9dc 0100 	ldrd	r0, r1, [ip]
 8020088:	f011 fe66 	bl	8031d58 <ai_array_get_byte_size>
 802008c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802008e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8020092:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8020096:	9209      	str	r2, [sp, #36]	@ 0x24
 8020098:	fa1f f28a 	uxth.w	r2, sl
 802009c:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 80200a0:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80200a4:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 80200a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80200aa:	4638      	mov	r0, r7
 80200ac:	9303      	str	r3, [sp, #12]
 80200ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80200b0:	e9cd 5404 	strd	r5, r4, [sp, #16]
 80200b4:	9302      	str	r3, [sp, #8]
 80200b6:	fa1f f48b 	uxth.w	r4, fp
 80200ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80200bc:	9408      	str	r4, [sp, #32]
 80200be:	2400      	movs	r4, #0
 80200c0:	e9cd 8300 	strd	r8, r3, [sp]
 80200c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80200c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80200c8:	e9cd 6906 	strd	r6, r9, [sp, #24]
 80200cc:	f001 fb0e 	bl	80216ec <forward_lite_dw_3x3_sssa8_ch>
 80200d0:	b019      	add	sp, #100	@ 0x64
 80200d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200d6:	685b      	ldr	r3, [r3, #4]
 80200d8:	deff      	udf	#255	@ 0xff
 80200da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80200de:	e7ae      	b.n	802003e <forward_dw_3x3_sssa8_ch+0xba>
 80200e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80200e4:	e79e      	b.n	8020024 <forward_dw_3x3_sssa8_ch+0xa0>
 80200e6:	460d      	mov	r5, r1
 80200e8:	e7be      	b.n	8020068 <forward_dw_3x3_sssa8_ch+0xe4>
 80200ea:	460c      	mov	r4, r1
 80200ec:	e7c5      	b.n	802007a <forward_dw_3x3_sssa8_ch+0xf6>
 80200ee:	462f      	mov	r7, r5
 80200f0:	e767      	b.n	801ffc2 <forward_dw_3x3_sssa8_ch+0x3e>
 80200f2:	2500      	movs	r5, #0
 80200f4:	e765      	b.n	801ffc2 <forward_dw_3x3_sssa8_ch+0x3e>
 80200f6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80200f8:	b922      	cbnz	r2, 8020104 <forward_dw_3x3_sssa8_ch+0x180>
 80200fa:	6993      	ldr	r3, [r2, #24]
 80200fc:	deff      	udf	#255	@ 0xff
 80200fe:	2300      	movs	r3, #0
 8020100:	685b      	ldr	r3, [r3, #4]
 8020102:	deff      	udf	#255	@ 0xff
 8020104:	68db      	ldr	r3, [r3, #12]
 8020106:	deff      	udf	#255	@ 0xff
 8020108:	2300      	movs	r3, #0
 802010a:	685b      	ldr	r3, [r3, #4]
 802010c:	deff      	udf	#255	@ 0xff
 802010e:	2300      	movs	r3, #0
 8020110:	685b      	ldr	r3, [r3, #4]
 8020112:	deff      	udf	#255	@ 0xff

08020114 <forward_tile>:
 8020114:	6983      	ldr	r3, [r0, #24]
 8020116:	881a      	ldrh	r2, [r3, #0]
 8020118:	2a00      	cmp	r2, #0
 802011a:	f000 80cb 	beq.w	80202b4 <forward_tile+0x1a0>
 802011e:	6859      	ldr	r1, [r3, #4]
 8020120:	684b      	ldr	r3, [r1, #4]
 8020122:	b103      	cbz	r3, 8020126 <forward_tile+0x12>
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	2a01      	cmp	r2, #1
 8020128:	f000 80cd 	beq.w	80202c6 <forward_tile+0x1b2>
 802012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020130:	690a      	ldr	r2, [r1, #16]
 8020132:	b097      	sub	sp, #92	@ 0x5c
 8020134:	b102      	cbz	r2, 8020138 <forward_tile+0x24>
 8020136:	6812      	ldr	r2, [r2, #0]
 8020138:	68d9      	ldr	r1, [r3, #12]
 802013a:	689d      	ldr	r5, [r3, #8]
 802013c:	68cc      	ldr	r4, [r1, #12]
 802013e:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 8020142:	9408      	str	r4, [sp, #32]
 8020144:	688c      	ldr	r4, [r1, #8]
 8020146:	9409      	str	r4, [sp, #36]	@ 0x24
 8020148:	f3c5 2417 	ubfx	r4, r5, #8, #24
 802014c:	f0c0 80b4 	bcc.w	80202b8 <forward_tile+0x1a4>
 8020150:	690d      	ldr	r5, [r1, #16]
 8020152:	2c05      	cmp	r4, #5
 8020154:	9507      	str	r5, [sp, #28]
 8020156:	f000 80b3 	beq.w	80202c0 <forward_tile+0x1ac>
 802015a:	6949      	ldr	r1, [r1, #20]
 802015c:	9102      	str	r1, [sp, #8]
 802015e:	6991      	ldr	r1, [r2, #24]
 8020160:	69c0      	ldr	r0, [r0, #28]
 8020162:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8020166:	6882      	ldr	r2, [r0, #8]
 8020168:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
 802016c:	8895      	ldrh	r5, [r2, #4]
 802016e:	6880      	ldr	r0, [r0, #8]
 8020170:	691b      	ldr	r3, [r3, #16]
 8020172:	9014      	str	r0, [sp, #80]	@ 0x50
 8020174:	8810      	ldrh	r0, [r2, #0]
 8020176:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 802017a:	f8b2 8008 	ldrh.w	r8, [r2, #8]
 802017e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8020182:	900a      	str	r0, [sp, #40]	@ 0x28
 8020184:	8850      	ldrh	r0, [r2, #2]
 8020186:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020188:	88d0      	ldrh	r0, [r2, #6]
 802018a:	68ca      	ldr	r2, [r1, #12]
 802018c:	900c      	str	r0, [sp, #48]	@ 0x30
 802018e:	9215      	str	r2, [sp, #84]	@ 0x54
 8020190:	688a      	ldr	r2, [r1, #8]
 8020192:	920d      	str	r2, [sp, #52]	@ 0x34
 8020194:	bf34      	ite	cc
 8020196:	2200      	movcc	r2, #0
 8020198:	690a      	ldrcs	r2, [r1, #16]
 802019a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 802019e:	bf0c      	ite	eq
 80201a0:	f8d1 a014 	ldreq.w	sl, [r1, #20]
 80201a4:	f04f 0a00 	movne.w	sl, #0
 80201a8:	2c05      	cmp	r4, #5
 80201aa:	9205      	str	r2, [sp, #20]
 80201ac:	d804      	bhi.n	80201b8 <forward_tile+0xa4>
 80201ae:	bf14      	ite	ne
 80201b0:	f8dd a034 	ldrne.w	sl, [sp, #52]	@ 0x34
 80201b4:	f8dd a014 	ldreq.w	sl, [sp, #20]
 80201b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d077      	beq.n	80202ae <forward_tile+0x19a>
 80201be:	9b08      	ldr	r3, [sp, #32]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d074      	beq.n	80202ae <forward_tile+0x19a>
 80201c4:	fb05 f30a 	mul.w	r3, r5, sl
 80201c8:	46d1      	mov	r9, sl
 80201ca:	46c2      	mov	sl, r8
 80201cc:	9300      	str	r3, [sp, #0]
 80201ce:	2300      	movs	r3, #0
 80201d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80201d2:	2300      	movs	r3, #0
 80201d4:	9304      	str	r3, [sp, #16]
 80201d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80201d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d057      	beq.n	802028e <forward_tile+0x17a>
 80201de:	2300      	movs	r3, #0
 80201e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80201e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d04c      	beq.n	8020282 <forward_tile+0x16e>
 80201e8:	9b04      	ldr	r3, [sp, #16]
 80201ea:	4657      	mov	r7, sl
 80201ec:	9303      	str	r3, [sp, #12]
 80201ee:	2300      	movs	r3, #0
 80201f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80201f2:	9b07      	ldr	r3, [sp, #28]
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d039      	beq.n	802026c <forward_tile+0x158>
 80201f8:	9b03      	ldr	r3, [sp, #12]
 80201fa:	9306      	str	r3, [sp, #24]
 80201fc:	2300      	movs	r3, #0
 80201fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8020200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020202:	b34b      	cbz	r3, 8020258 <forward_tile+0x144>
 8020204:	2300      	movs	r3, #0
 8020206:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020208:	9b02      	ldr	r3, [sp, #8]
 802020a:	b1fb      	cbz	r3, 802024c <forward_tile+0x138>
 802020c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802020e:	9a06      	ldr	r2, [sp, #24]
 8020210:	eb03 0a02 	add.w	sl, r3, r2
 8020214:	2300      	movs	r3, #0
 8020216:	9301      	str	r3, [sp, #4]
 8020218:	b18f      	cbz	r7, 802023e <forward_tile+0x12a>
 802021a:	2600      	movs	r6, #0
 802021c:	b165      	cbz	r5, 8020238 <forward_tile+0x124>
 802021e:	46d8      	mov	r8, fp
 8020220:	2400      	movs	r4, #0
 8020222:	3401      	adds	r4, #1
 8020224:	4641      	mov	r1, r8
 8020226:	464a      	mov	r2, r9
 8020228:	4650      	mov	r0, sl
 802022a:	f003 fda3 	bl	8023d74 <st_int8_copy>
 802022e:	42ac      	cmp	r4, r5
 8020230:	44c8      	add	r8, r9
 8020232:	d1f6      	bne.n	8020222 <forward_tile+0x10e>
 8020234:	9b00      	ldr	r3, [sp, #0]
 8020236:	449b      	add	fp, r3
 8020238:	3601      	adds	r6, #1
 802023a:	42be      	cmp	r6, r7
 802023c:	d1ee      	bne.n	802021c <forward_tile+0x108>
 802023e:	9b01      	ldr	r3, [sp, #4]
 8020240:	44ca      	add	sl, r9
 8020242:	9a02      	ldr	r2, [sp, #8]
 8020244:	3301      	adds	r3, #1
 8020246:	429a      	cmp	r2, r3
 8020248:	9301      	str	r3, [sp, #4]
 802024a:	d1e5      	bne.n	8020218 <forward_tile+0x104>
 802024c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802024e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020250:	3301      	adds	r3, #1
 8020252:	4293      	cmp	r3, r2
 8020254:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020256:	d1d7      	bne.n	8020208 <forward_tile+0xf4>
 8020258:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802025a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 802025e:	3301      	adds	r3, #1
 8020260:	440a      	add	r2, r1
 8020262:	9312      	str	r3, [sp, #72]	@ 0x48
 8020264:	9206      	str	r2, [sp, #24]
 8020266:	9a07      	ldr	r2, [sp, #28]
 8020268:	4293      	cmp	r3, r2
 802026a:	d1c9      	bne.n	8020200 <forward_tile+0xec>
 802026c:	9a03      	ldr	r2, [sp, #12]
 802026e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020272:	440a      	add	r2, r1
 8020274:	3301      	adds	r3, #1
 8020276:	9203      	str	r2, [sp, #12]
 8020278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802027a:	9311      	str	r3, [sp, #68]	@ 0x44
 802027c:	429a      	cmp	r2, r3
 802027e:	d1b8      	bne.n	80201f2 <forward_tile+0xde>
 8020280:	46ba      	mov	sl, r7
 8020282:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020286:	3301      	adds	r3, #1
 8020288:	429a      	cmp	r2, r3
 802028a:	9310      	str	r3, [sp, #64]	@ 0x40
 802028c:	d1a9      	bne.n	80201e2 <forward_tile+0xce>
 802028e:	9a04      	ldr	r2, [sp, #16]
 8020290:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8020292:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020294:	440a      	add	r2, r1
 8020296:	3301      	adds	r3, #1
 8020298:	9204      	str	r2, [sp, #16]
 802029a:	9a08      	ldr	r2, [sp, #32]
 802029c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802029e:	429a      	cmp	r2, r3
 80202a0:	d19a      	bne.n	80201d8 <forward_tile+0xc4>
 80202a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80202a6:	3301      	adds	r3, #1
 80202a8:	429a      	cmp	r2, r3
 80202aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80202ac:	d191      	bne.n	80201d2 <forward_tile+0xbe>
 80202ae:	b017      	add	sp, #92	@ 0x5c
 80202b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202b4:	6853      	ldr	r3, [r2, #4]
 80202b6:	deff      	udf	#255	@ 0xff
 80202b8:	2101      	movs	r1, #1
 80202ba:	9107      	str	r1, [sp, #28]
 80202bc:	9102      	str	r1, [sp, #8]
 80202be:	e74e      	b.n	802015e <forward_tile+0x4a>
 80202c0:	2101      	movs	r1, #1
 80202c2:	9102      	str	r1, [sp, #8]
 80202c4:	e74b      	b.n	802015e <forward_tile+0x4a>
 80202c6:	2300      	movs	r3, #0
 80202c8:	685b      	ldr	r3, [r3, #4]
 80202ca:	deff      	udf	#255	@ 0xff

080202cc <forward_pad>:
 80202cc:	7f03      	ldrb	r3, [r0, #28]
 80202ce:	2b03      	cmp	r3, #3
 80202d0:	d80b      	bhi.n	80202ea <forward_pad+0x1e>
 80202d2:	e8df f003 	tbb	[pc, r3]
 80202d6:	0608      	.short	0x0608
 80202d8:	0204      	.short	0x0204
 80202da:	f000 bb05 	b.w	80208e8 <forward_pad_8bit_ch1st_3x3_constant>
 80202de:	f000 bb95 	b.w	8020a0c <forward_pad_edge>
 80202e2:	f000 bbd5 	b.w	8020a90 <forward_pad_reflect>
 80202e6:	f000 bb49 	b.w	802097c <forward_pad_constant>
 80202ea:	4770      	bx	lr

080202ec <forward_concat>:
 80202ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f0:	ed2d 8b04 	vpush	{d8-d9}
 80202f4:	6982      	ldr	r2, [r0, #24]
 80202f6:	b087      	sub	sp, #28
 80202f8:	8813      	ldrh	r3, [r2, #0]
 80202fa:	9002      	str	r0, [sp, #8]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	f000 8290 	beq.w	8020822 <forward_concat+0x536>
 8020302:	2b01      	cmp	r3, #1
 8020304:	6856      	ldr	r6, [r2, #4]
 8020306:	f000 828c 	beq.w	8020822 <forward_concat+0x536>
 802030a:	6933      	ldr	r3, [r6, #16]
 802030c:	9301      	str	r3, [sp, #4]
 802030e:	b10b      	cbz	r3, 8020314 <forward_concat+0x28>
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	9301      	str	r3, [sp, #4]
 8020314:	8830      	ldrh	r0, [r6, #0]
 8020316:	2300      	movs	r3, #0
 8020318:	4604      	mov	r4, r0
 802031a:	4619      	mov	r1, r3
 802031c:	e00c      	b.n	8020338 <forward_concat+0x4c>
 802031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020322:	b172      	cbz	r2, 8020342 <forward_concat+0x56>
 8020324:	6992      	ldr	r2, [r2, #24]
 8020326:	3301      	adds	r3, #1
 8020328:	6812      	ldr	r2, [r2, #0]
 802032a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 802032e:	2a01      	cmp	r2, #1
 8020330:	bf0c      	ite	eq
 8020332:	2201      	moveq	r2, #1
 8020334:	2202      	movne	r2, #2
 8020336:	4311      	orrs	r1, r2
 8020338:	4298      	cmp	r0, r3
 802033a:	d002      	beq.n	8020342 <forward_concat+0x56>
 802033c:	6872      	ldr	r2, [r6, #4]
 802033e:	2a00      	cmp	r2, #0
 8020340:	d1ed      	bne.n	802031e <forward_concat+0x32>
 8020342:	9b01      	ldr	r3, [sp, #4]
 8020344:	699a      	ldr	r2, [r3, #24]
 8020346:	6813      	ldr	r3, [r2, #0]
 8020348:	6897      	ldr	r7, [r2, #8]
 802034a:	f3c3 4243 	ubfx	r2, r3, #17, #4
 802034e:	2a01      	cmp	r2, #1
 8020350:	d137      	bne.n	80203c2 <forward_concat+0xd6>
 8020352:	2901      	cmp	r1, #1
 8020354:	d13c      	bne.n	80203d0 <forward_concat+0xe4>
 8020356:	f04f 0b00 	mov.w	fp, #0
 802035a:	455c      	cmp	r4, fp
 802035c:	d933      	bls.n	80203c6 <forward_concat+0xda>
 802035e:	6873      	ldr	r3, [r6, #4]
 8020360:	b38b      	cbz	r3, 80203c6 <forward_concat+0xda>
 8020362:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8020366:	b374      	cbz	r4, 80203c6 <forward_concat+0xda>
 8020368:	9b02      	ldr	r3, [sp, #8]
 802036a:	6961      	ldr	r1, [r4, #20]
 802036c:	69d8      	ldr	r0, [r3, #28]
 802036e:	68e2      	ldr	r2, [r4, #12]
 8020370:	9b01      	ldr	r3, [sp, #4]
 8020372:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8020376:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 802037a:	68db      	ldr	r3, [r3, #12]
 802037c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8020380:	fb02 f905 	mul.w	r9, r2, r5
 8020384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8020388:	e9dc 0100 	ldrd	r0, r1, [ip]
 802038c:	fb03 f805 	mul.w	r8, r3, r5
 8020390:	f011 fce2 	bl	8031d58 <ai_array_get_byte_size>
 8020394:	69a3      	ldr	r3, [r4, #24]
 8020396:	fbb0 f0f9 	udiv	r0, r0, r9
 802039a:	689c      	ldr	r4, [r3, #8]
 802039c:	fb09 4500 	mla	r5, r9, r0, r4
 80203a0:	42ac      	cmp	r4, r5
 80203a2:	d209      	bcs.n	80203b8 <forward_concat+0xcc>
 80203a4:	46ba      	mov	sl, r7
 80203a6:	4620      	mov	r0, r4
 80203a8:	444c      	add	r4, r9
 80203aa:	4651      	mov	r1, sl
 80203ac:	464a      	mov	r2, r9
 80203ae:	f003 fce1 	bl	8023d74 <st_int8_copy>
 80203b2:	42a5      	cmp	r5, r4
 80203b4:	44c2      	add	sl, r8
 80203b6:	d8f6      	bhi.n	80203a6 <forward_concat+0xba>
 80203b8:	444f      	add	r7, r9
 80203ba:	f10b 0b01 	add.w	fp, fp, #1
 80203be:	8834      	ldrh	r4, [r6, #0]
 80203c0:	e7cb      	b.n	802035a <forward_concat+0x6e>
 80203c2:	2901      	cmp	r1, #1
 80203c4:	d108      	bne.n	80203d8 <forward_concat+0xec>
 80203c6:	b007      	add	sp, #28
 80203c8:	ecbd 8b04 	vpop	{d8-d9}
 80203cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203d0:	2a01      	cmp	r2, #1
 80203d2:	d1f6      	bne.n	80203c2 <forward_concat+0xd6>
 80203d4:	078a      	lsls	r2, r1, #30
 80203d6:	d4f6      	bmi.n	80203c6 <forward_concat+0xda>
 80203d8:	9a01      	ldr	r2, [sp, #4]
 80203da:	6811      	ldr	r1, [r2, #0]
 80203dc:	460c      	mov	r4, r1
 80203de:	2900      	cmp	r1, #0
 80203e0:	f000 8209 	beq.w	80207f6 <forward_concat+0x50a>
 80203e4:	684a      	ldr	r2, [r1, #4]
 80203e6:	2a00      	cmp	r2, #0
 80203e8:	f000 8205 	beq.w	80207f6 <forward_concat+0x50a>
 80203ec:	8849      	ldrh	r1, [r1, #2]
 80203ee:	2900      	cmp	r1, #0
 80203f0:	f000 8201 	beq.w	80207f6 <forward_concat+0x50a>
 80203f4:	6812      	ldr	r2, [r2, #0]
 80203f6:	edd2 8a00 	vldr	s17, [r2]
 80203fa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80203fe:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8020402:	9603      	str	r6, [sp, #12]
 8020404:	4626      	mov	r6, r4
 8020406:	9305      	str	r3, [sp, #20]
 8020408:	2300      	movs	r3, #0
 802040a:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 802040e:	ed9f 8ab2 	vldr	s16, [pc, #712]	@ 80206d8 <forward_concat+0x3ec>
 8020412:	4699      	mov	r9, r3
 8020414:	4548      	cmp	r0, r9
 8020416:	d9d6      	bls.n	80203c6 <forward_concat+0xda>
 8020418:	9b03      	ldr	r3, [sp, #12]
 802041a:	685b      	ldr	r3, [r3, #4]
 802041c:	2b00      	cmp	r3, #0
 802041e:	d0d2      	beq.n	80203c6 <forward_concat+0xda>
 8020420:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8020424:	2b00      	cmp	r3, #0
 8020426:	d0ce      	beq.n	80203c6 <forward_concat+0xda>
 8020428:	9a02      	ldr	r2, [sp, #8]
 802042a:	9304      	str	r3, [sp, #16]
 802042c:	69d2      	ldr	r2, [r2, #28]
 802042e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
 8020432:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8020436:	68d9      	ldr	r1, [r3, #12]
 8020438:	9b01      	ldr	r3, [sp, #4]
 802043a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802043e:	fb01 fb04 	mul.w	fp, r1, r4
 8020442:	68d9      	ldr	r1, [r3, #12]
 8020444:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8020448:	fb02 f804 	mul.w	r8, r2, r4
 802044c:	e9d0 4100 	ldrd	r4, r1, [r0]
 8020450:	4620      	mov	r0, r4
 8020452:	f011 fc81 	bl	8031d58 <ai_array_get_byte_size>
 8020456:	9b04      	ldr	r3, [sp, #16]
 8020458:	f3c4 4243 	ubfx	r2, r4, #17, #4
 802045c:	6999      	ldr	r1, [r3, #24]
 802045e:	2a01      	cmp	r2, #1
 8020460:	688c      	ldr	r4, [r1, #8]
 8020462:	fbb0 f0fb 	udiv	r0, r0, fp
 8020466:	fb0b 4500 	mla	r5, fp, r0, r4
 802046a:	d05f      	beq.n	802052c <forward_concat+0x240>
 802046c:	681a      	ldr	r2, [r3, #0]
 802046e:	2a00      	cmp	r2, #0
 8020470:	f000 80d3 	beq.w	802061a <forward_concat+0x32e>
 8020474:	6851      	ldr	r1, [r2, #4]
 8020476:	2900      	cmp	r1, #0
 8020478:	f000 8141 	beq.w	80206fe <forward_concat+0x412>
 802047c:	8850      	ldrh	r0, [r2, #2]
 802047e:	2800      	cmp	r0, #0
 8020480:	f000 813a 	beq.w	80206f8 <forward_concat+0x40c>
 8020484:	680b      	ldr	r3, [r1, #0]
 8020486:	edd3 6a00 	vldr	s13, [r3]
 802048a:	684b      	ldr	r3, [r1, #4]
 802048c:	f993 0000 	ldrsb.w	r0, [r3]
 8020490:	2e00      	cmp	r6, #0
 8020492:	f000 80c8 	beq.w	8020626 <forward_concat+0x33a>
 8020496:	6873      	ldr	r3, [r6, #4]
 8020498:	2b00      	cmp	r3, #0
 802049a:	f000 8134 	beq.w	8020706 <forward_concat+0x41a>
 802049e:	8871      	ldrh	r1, [r6, #2]
 80204a0:	b111      	cbz	r1, 80204a8 <forward_concat+0x1bc>
 80204a2:	685b      	ldr	r3, [r3, #4]
 80204a4:	f993 1000 	ldrsb.w	r1, [r3]
 80204a8:	eef4 8a66 	vcmp.f32	s17, s13
 80204ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204b0:	bf0c      	ite	eq
 80204b2:	2301      	moveq	r3, #1
 80204b4:	2300      	movne	r3, #0
 80204b6:	4288      	cmp	r0, r1
 80204b8:	d102      	bne.n	80204c0 <forward_concat+0x1d4>
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	f040 80b5 	bne.w	802062a <forward_concat+0x33e>
 80204c0:	9905      	ldr	r1, [sp, #20]
 80204c2:	2900      	cmp	r1, #0
 80204c4:	d17e      	bne.n	80205c4 <forward_concat+0x2d8>
 80204c6:	2a00      	cmp	r2, #0
 80204c8:	f000 8198 	beq.w	80207fc <forward_concat+0x510>
 80204cc:	6851      	ldr	r1, [r2, #4]
 80204ce:	2900      	cmp	r1, #0
 80204d0:	f000 818a 	beq.w	80207e8 <forward_concat+0x4fc>
 80204d4:	8852      	ldrh	r2, [r2, #2]
 80204d6:	2a00      	cmp	r2, #0
 80204d8:	f000 8186 	beq.w	80207e8 <forward_concat+0x4fc>
 80204dc:	684a      	ldr	r2, [r1, #4]
 80204de:	f892 c000 	ldrb.w	ip, [r2]
 80204e2:	2e00      	cmp	r6, #0
 80204e4:	f000 8185 	beq.w	80207f2 <forward_concat+0x506>
 80204e8:	6871      	ldr	r1, [r6, #4]
 80204ea:	2900      	cmp	r1, #0
 80204ec:	f000 818c 	beq.w	8020808 <forward_concat+0x51c>
 80204f0:	8872      	ldrh	r2, [r6, #2]
 80204f2:	b10a      	cbz	r2, 80204f8 <forward_concat+0x20c>
 80204f4:	684a      	ldr	r2, [r1, #4]
 80204f6:	7812      	ldrb	r2, [r2, #0]
 80204f8:	4594      	cmp	ip, r2
 80204fa:	f040 8109 	bne.w	8020710 <forward_concat+0x424>
 80204fe:	2b00      	cmp	r3, #0
 8020500:	f000 8106 	beq.w	8020710 <forward_concat+0x424>
 8020504:	42ac      	cmp	r4, r5
 8020506:	d209      	bcs.n	802051c <forward_concat+0x230>
 8020508:	46ba      	mov	sl, r7
 802050a:	4620      	mov	r0, r4
 802050c:	445c      	add	r4, fp
 802050e:	4651      	mov	r1, sl
 8020510:	465a      	mov	r2, fp
 8020512:	f003 fc2f 	bl	8023d74 <st_int8_copy>
 8020516:	42a5      	cmp	r5, r4
 8020518:	44c2      	add	sl, r8
 802051a:	d8f6      	bhi.n	802050a <forward_concat+0x21e>
 802051c:	eb07 0e0b 	add.w	lr, r7, fp
 8020520:	4677      	mov	r7, lr
 8020522:	9b03      	ldr	r3, [sp, #12]
 8020524:	f109 0901 	add.w	r9, r9, #1
 8020528:	8818      	ldrh	r0, [r3, #0]
 802052a:	e773      	b.n	8020414 <forward_concat+0x128>
 802052c:	f1bb 0f00 	cmp.w	fp, #0
 8020530:	4659      	mov	r1, fp
 8020532:	9b05      	ldr	r3, [sp, #20]
 8020534:	bfb8      	it	lt
 8020536:	f10b 0103 	addlt.w	r1, fp, #3
 802053a:	1089      	asrs	r1, r1, #2
 802053c:	2b00      	cmp	r3, #0
 802053e:	f040 8084 	bne.w	802064a <forward_concat+0x35e>
 8020542:	2e00      	cmp	r6, #0
 8020544:	f000 80e1 	beq.w	802070a <forward_concat+0x41e>
 8020548:	6873      	ldr	r3, [r6, #4]
 802054a:	2b00      	cmp	r3, #0
 802054c:	f000 80dd 	beq.w	802070a <forward_concat+0x41e>
 8020550:	8872      	ldrh	r2, [r6, #2]
 8020552:	2a00      	cmp	r2, #0
 8020554:	f000 80d9 	beq.w	802070a <forward_concat+0x41e>
 8020558:	685b      	ldr	r3, [r3, #4]
 802055a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802055e:	781b      	ldrb	r3, [r3, #0]
 8020560:	ee06 3a90 	vmov	s13, r3
 8020564:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020568:	ee76 6aa7 	vadd.f32	s13, s13, s15
 802056c:	42ac      	cmp	r4, r5
 802056e:	d227      	bcs.n	80205c0 <forward_concat+0x2d4>
 8020570:	f1bb 0f03 	cmp.w	fp, #3
 8020574:	eba8 0801 	sub.w	r8, r8, r1
 8020578:	dd22      	ble.n	80205c0 <forward_concat+0x2d4>
 802057a:	46be      	mov	lr, r7
 802057c:	46f4      	mov	ip, lr
 802057e:	4620      	mov	r0, r4
 8020580:	2200      	movs	r2, #0
 8020582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020586:	eef0 7a66 	vmov.f32	s15, s13
 802058a:	ee07 3a10 	vmov	s14, r3
 802058e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020592:	eee7 7a09 	vfma.f32	s15, s14, s18
 8020596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802059a:	ee17 3a90 	vmov	r3, s15
 802059e:	f383 0308 	usat	r3, #8, r3
 80205a2:	3201      	adds	r2, #1
 80205a4:	f80c 3b01 	strb.w	r3, [ip], #1
 80205a8:	4291      	cmp	r1, r2
 80205aa:	dcea      	bgt.n	8020582 <forward_concat+0x296>
 80205ac:	f1bb 0f03 	cmp.w	fp, #3
 80205b0:	bfcc      	ite	gt
 80205b2:	460b      	movgt	r3, r1
 80205b4:	2301      	movle	r3, #1
 80205b6:	441c      	add	r4, r3
 80205b8:	4443      	add	r3, r8
 80205ba:	42a5      	cmp	r5, r4
 80205bc:	449e      	add	lr, r3
 80205be:	d8dd      	bhi.n	802057c <forward_concat+0x290>
 80205c0:	440f      	add	r7, r1
 80205c2:	e7ae      	b.n	8020522 <forward_concat+0x236>
 80205c4:	b142      	cbz	r2, 80205d8 <forward_concat+0x2ec>
 80205c6:	6851      	ldr	r1, [r2, #4]
 80205c8:	2900      	cmp	r1, #0
 80205ca:	f000 811f 	beq.w	802080c <forward_concat+0x520>
 80205ce:	8852      	ldrh	r2, [r2, #2]
 80205d0:	b112      	cbz	r2, 80205d8 <forward_concat+0x2ec>
 80205d2:	684a      	ldr	r2, [r1, #4]
 80205d4:	f992 2000 	ldrsb.w	r2, [r2]
 80205d8:	2e00      	cmp	r6, #0
 80205da:	f000 8111 	beq.w	8020800 <forward_concat+0x514>
 80205de:	6870      	ldr	r0, [r6, #4]
 80205e0:	2800      	cmp	r0, #0
 80205e2:	f000 810f 	beq.w	8020804 <forward_concat+0x518>
 80205e6:	8871      	ldrh	r1, [r6, #2]
 80205e8:	b111      	cbz	r1, 80205f0 <forward_concat+0x304>
 80205ea:	6841      	ldr	r1, [r0, #4]
 80205ec:	f991 1000 	ldrsb.w	r1, [r1]
 80205f0:	428a      	cmp	r2, r1
 80205f2:	f040 80bf 	bne.w	8020774 <forward_concat+0x488>
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	f000 80bc 	beq.w	8020774 <forward_concat+0x488>
 80205fc:	42ac      	cmp	r4, r5
 80205fe:	d28d      	bcs.n	802051c <forward_concat+0x230>
 8020600:	46ba      	mov	sl, r7
 8020602:	4620      	mov	r0, r4
 8020604:	445c      	add	r4, fp
 8020606:	4651      	mov	r1, sl
 8020608:	465a      	mov	r2, fp
 802060a:	f003 fbb3 	bl	8023d74 <st_int8_copy>
 802060e:	42a5      	cmp	r5, r4
 8020610:	44c2      	add	sl, r8
 8020612:	d8f6      	bhi.n	8020602 <forward_concat+0x316>
 8020614:	eb07 0e0b 	add.w	lr, r7, fp
 8020618:	e782      	b.n	8020520 <forward_concat+0x234>
 802061a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802061e:	4610      	mov	r0, r2
 8020620:	2e00      	cmp	r6, #0
 8020622:	f47f af38 	bne.w	8020496 <forward_concat+0x1aa>
 8020626:	4631      	mov	r1, r6
 8020628:	e73e      	b.n	80204a8 <forward_concat+0x1bc>
 802062a:	42ac      	cmp	r4, r5
 802062c:	f4bf af76 	bcs.w	802051c <forward_concat+0x230>
 8020630:	46ba      	mov	sl, r7
 8020632:	4620      	mov	r0, r4
 8020634:	445c      	add	r4, fp
 8020636:	4651      	mov	r1, sl
 8020638:	465a      	mov	r2, fp
 802063a:	f003 fb9b 	bl	8023d74 <st_int8_copy>
 802063e:	42a5      	cmp	r5, r4
 8020640:	44c2      	add	sl, r8
 8020642:	d8f6      	bhi.n	8020632 <forward_concat+0x346>
 8020644:	eb07 0e0b 	add.w	lr, r7, fp
 8020648:	e76a      	b.n	8020520 <forward_concat+0x234>
 802064a:	2e00      	cmp	r6, #0
 802064c:	f000 80e0 	beq.w	8020810 <forward_concat+0x524>
 8020650:	6873      	ldr	r3, [r6, #4]
 8020652:	2b00      	cmp	r3, #0
 8020654:	f000 80e2 	beq.w	802081c <forward_concat+0x530>
 8020658:	8872      	ldrh	r2, [r6, #2]
 802065a:	2a00      	cmp	r2, #0
 802065c:	f000 80db 	beq.w	8020816 <forward_concat+0x52a>
 8020660:	685b      	ldr	r3, [r3, #4]
 8020662:	f993 3000 	ldrsb.w	r3, [r3]
 8020666:	ee06 3a90 	vmov	s13, r3
 802066a:	42ac      	cmp	r4, r5
 802066c:	d2a8      	bcs.n	80205c0 <forward_concat+0x2d4>
 802066e:	f1bb 0f03 	cmp.w	fp, #3
 8020672:	eba8 0801 	sub.w	r8, r8, r1
 8020676:	dda3      	ble.n	80205c0 <forward_concat+0x2d4>
 8020678:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802067c:	46be      	mov	lr, r7
 802067e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8020682:	46f4      	mov	ip, lr
 8020684:	4620      	mov	r0, r4
 8020686:	2200      	movs	r2, #0
 8020688:	f810 3b01 	ldrb.w	r3, [r0], #1
 802068c:	eef0 7a66 	vmov.f32	s15, s13
 8020690:	ee07 3a10 	vmov	s14, r3
 8020694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020698:	eee7 7a09 	vfma.f32	s15, s14, s18
 802069c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80206a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206a4:	d41a      	bmi.n	80206dc <forward_concat+0x3f0>
 80206a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80206aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80206ae:	ee17 3a90 	vmov	r3, s15
 80206b2:	f303 0307 	ssat	r3, #8, r3
 80206b6:	3201      	adds	r2, #1
 80206b8:	f80c 3b01 	strb.w	r3, [ip], #1
 80206bc:	4291      	cmp	r1, r2
 80206be:	dce3      	bgt.n	8020688 <forward_concat+0x39c>
 80206c0:	f1bb 0f03 	cmp.w	fp, #3
 80206c4:	bfcc      	ite	gt
 80206c6:	460b      	movgt	r3, r1
 80206c8:	2301      	movle	r3, #1
 80206ca:	441c      	add	r4, r3
 80206cc:	4443      	add	r3, r8
 80206ce:	42a5      	cmp	r5, r4
 80206d0:	449e      	add	lr, r3
 80206d2:	d8d6      	bhi.n	8020682 <forward_concat+0x396>
 80206d4:	440f      	add	r7, r1
 80206d6:	e724      	b.n	8020522 <forward_concat+0x236>
 80206d8:	3efffffc 	.word	0x3efffffc
 80206dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80206e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80206e4:	ee17 3a90 	vmov	r3, s15
 80206e8:	f303 0307 	ssat	r3, #8, r3
 80206ec:	3201      	adds	r2, #1
 80206ee:	f80c 3b01 	strb.w	r3, [ip], #1
 80206f2:	428a      	cmp	r2, r1
 80206f4:	dbc8      	blt.n	8020688 <forward_concat+0x39c>
 80206f6:	e7e3      	b.n	80206c0 <forward_concat+0x3d4>
 80206f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80206fc:	e6c8      	b.n	8020490 <forward_concat+0x1a4>
 80206fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020702:	4608      	mov	r0, r1
 8020704:	e6c4      	b.n	8020490 <forward_concat+0x1a4>
 8020706:	4619      	mov	r1, r3
 8020708:	e6ce      	b.n	80204a8 <forward_concat+0x1bc>
 802070a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 802070e:	e72d      	b.n	802056c <forward_concat+0x280>
 8020710:	42ac      	cmp	r4, r5
 8020712:	ee69 6a26 	vmul.f32	s13, s18, s13
 8020716:	f4bf af01 	bcs.w	802051c <forward_concat+0x230>
 802071a:	f1bb 0f00 	cmp.w	fp, #0
 802071e:	f77f aefd 	ble.w	802051c <forward_concat+0x230>
 8020722:	ee07 2a90 	vmov	s15, r2
 8020726:	eb07 0e0b 	add.w	lr, r7, fp
 802072a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802072e:	4670      	mov	r0, lr
 8020730:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020734:	ee36 6a27 	vadd.f32	s12, s12, s15
 8020738:	463a      	mov	r2, r7
 802073a:	4621      	mov	r1, r4
 802073c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020740:	eeb0 7a46 	vmov.f32	s14, s12
 8020744:	eba3 030c 	sub.w	r3, r3, ip
 8020748:	ee07 3a90 	vmov	s15, r3
 802074c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020750:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8020754:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8020758:	ee17 3a90 	vmov	r3, s15
 802075c:	f383 0308 	usat	r3, #8, r3
 8020760:	f802 3b01 	strb.w	r3, [r2], #1
 8020764:	4282      	cmp	r2, r0
 8020766:	d1e9      	bne.n	802073c <forward_concat+0x450>
 8020768:	445c      	add	r4, fp
 802076a:	4447      	add	r7, r8
 802076c:	4440      	add	r0, r8
 802076e:	42ac      	cmp	r4, r5
 8020770:	d3e2      	bcc.n	8020738 <forward_concat+0x44c>
 8020772:	e6d5      	b.n	8020520 <forward_concat+0x234>
 8020774:	42ac      	cmp	r4, r5
 8020776:	ee69 6a26 	vmul.f32	s13, s18, s13
 802077a:	f4bf aecf 	bcs.w	802051c <forward_concat+0x230>
 802077e:	f1bb 0f00 	cmp.w	fp, #0
 8020782:	f77f aecb 	ble.w	802051c <forward_concat+0x230>
 8020786:	ee07 1a90 	vmov	s15, r1
 802078a:	eb04 000b 	add.w	r0, r4, fp
 802078e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8020792:	46bc      	mov	ip, r7
 8020794:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8020798:	4601      	mov	r1, r0
 802079a:	46e6      	mov	lr, ip
 802079c:	f914 3b01 	ldrsb.w	r3, [r4], #1
 80207a0:	1a9b      	subs	r3, r3, r2
 80207a2:	ee07 3a90 	vmov	s15, r3
 80207a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80207aa:	eef0 7a46 	vmov.f32	s15, s12
 80207ae:	eee7 7a26 	vfma.f32	s15, s14, s13
 80207b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80207b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207ba:	bf4c      	ite	mi
 80207bc:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 80207c0:	ee77 7aa5 	vaddpl.f32	s15, s15, s11
 80207c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80207c8:	ee17 3a90 	vmov	r3, s15
 80207cc:	f303 0307 	ssat	r3, #8, r3
 80207d0:	428c      	cmp	r4, r1
 80207d2:	f80e 3b01 	strb.w	r3, [lr], #1
 80207d6:	d1e1      	bne.n	802079c <forward_concat+0x4b0>
 80207d8:	42a8      	cmp	r0, r5
 80207da:	44c4      	add	ip, r8
 80207dc:	4459      	add	r1, fp
 80207de:	4604      	mov	r4, r0
 80207e0:	f4bf ae9c 	bcs.w	802051c <forward_concat+0x230>
 80207e4:	4458      	add	r0, fp
 80207e6:	e7d8      	b.n	802079a <forward_concat+0x4ae>
 80207e8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80207ec:	2e00      	cmp	r6, #0
 80207ee:	f47f ae7b 	bne.w	80204e8 <forward_concat+0x1fc>
 80207f2:	4632      	mov	r2, r6
 80207f4:	e680      	b.n	80204f8 <forward_concat+0x20c>
 80207f6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80207fa:	e5fe      	b.n	80203fa <forward_concat+0x10e>
 80207fc:	468c      	mov	ip, r1
 80207fe:	e670      	b.n	80204e2 <forward_concat+0x1f6>
 8020800:	4631      	mov	r1, r6
 8020802:	e6f5      	b.n	80205f0 <forward_concat+0x304>
 8020804:	4601      	mov	r1, r0
 8020806:	e6f3      	b.n	80205f0 <forward_concat+0x304>
 8020808:	460a      	mov	r2, r1
 802080a:	e675      	b.n	80204f8 <forward_concat+0x20c>
 802080c:	460a      	mov	r2, r1
 802080e:	e6e3      	b.n	80205d8 <forward_concat+0x2ec>
 8020810:	ee06 6a90 	vmov	s13, r6
 8020814:	e729      	b.n	802066a <forward_concat+0x37e>
 8020816:	ee06 2a90 	vmov	s13, r2
 802081a:	e726      	b.n	802066a <forward_concat+0x37e>
 802081c:	ee06 3a90 	vmov	s13, r3
 8020820:	e723      	b.n	802066a <forward_concat+0x37e>
 8020822:	2300      	movs	r3, #0
 8020824:	685b      	ldr	r3, [r3, #4]
 8020826:	deff      	udf	#255	@ 0xff

08020828 <forward_sm_integer>:
 8020828:	b5f0      	push	{r4, r5, r6, r7, lr}
 802082a:	6983      	ldr	r3, [r0, #24]
 802082c:	b087      	sub	sp, #28
 802082e:	881e      	ldrh	r6, [r3, #0]
 8020830:	2e00      	cmp	r6, #0
 8020832:	d047      	beq.n	80208c4 <forward_sm_integer+0x9c>
 8020834:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8020838:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802083c:	b105      	cbz	r5, 8020840 <forward_sm_integer+0x18>
 802083e:	682d      	ldr	r5, [r5, #0]
 8020840:	2e01      	cmp	r6, #1
 8020842:	d04b      	beq.n	80208dc <forward_sm_integer+0xb4>
 8020844:	f8dc 7010 	ldr.w	r7, [ip, #16]
 8020848:	b107      	cbz	r7, 802084c <forward_sm_integer+0x24>
 802084a:	683f      	ldr	r7, [r7, #0]
 802084c:	68ab      	ldr	r3, [r5, #8]
 802084e:	0a1b      	lsrs	r3, r3, #8
 8020850:	d040      	beq.n	80208d4 <forward_sm_integer+0xac>
 8020852:	68ec      	ldr	r4, [r5, #12]
 8020854:	2201      	movs	r2, #1
 8020856:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802085a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802085e:	429c      	cmp	r4, r3
 8020860:	fb01 f202 	mul.w	r2, r1, r2
 8020864:	d1f9      	bne.n	802085a <forward_sm_integer+0x32>
 8020866:	69c3      	ldr	r3, [r0, #28]
 8020868:	2e03      	cmp	r6, #3
 802086a:	689c      	ldr	r4, [r3, #8]
 802086c:	d936      	bls.n	80208dc <forward_sm_integer+0xb4>
 802086e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8020872:	2b00      	cmp	r3, #0
 8020874:	d030      	beq.n	80208d8 <forward_sm_integer+0xb0>
 8020876:	6819      	ldr	r1, [r3, #0]
 8020878:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 802087c:	6989      	ldr	r1, [r1, #24]
 802087e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8020882:	68e9      	ldr	r1, [r5, #12]
 8020884:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8020888:	6929      	ldr	r1, [r5, #16]
 802088a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 802088e:	d21b      	bcs.n	80208c8 <forward_sm_integer+0xa0>
 8020890:	6969      	ldr	r1, [r5, #20]
 8020892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020896:	69a8      	ldr	r0, [r5, #24]
 8020898:	4d12      	ldr	r5, [pc, #72]	@ (80208e4 <forward_sm_integer+0xbc>)
 802089a:	6801      	ldr	r1, [r0, #0]
 802089c:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 80208a0:	42a9      	cmp	r1, r5
 80208a2:	69bd      	ldr	r5, [r7, #24]
 80208a4:	6881      	ldr	r1, [r0, #8]
 80208a6:	68a8      	ldr	r0, [r5, #8]
 80208a8:	f8cd c010 	str.w	ip, [sp, #16]
 80208ac:	68a5      	ldr	r5, [r4, #8]
 80208ae:	9503      	str	r5, [sp, #12]
 80208b0:	6865      	ldr	r5, [r4, #4]
 80208b2:	9502      	str	r5, [sp, #8]
 80208b4:	6824      	ldr	r4, [r4, #0]
 80208b6:	e9cd 6400 	strd	r6, r4, [sp]
 80208ba:	d007      	beq.n	80208cc <forward_sm_integer+0xa4>
 80208bc:	f002 faae 	bl	8022e1c <forward_lite_nl_softmax_iu8ou8>
 80208c0:	b007      	add	sp, #28
 80208c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208c4:	6873      	ldr	r3, [r6, #4]
 80208c6:	deff      	udf	#255	@ 0xff
 80208c8:	2300      	movs	r3, #0
 80208ca:	e7e4      	b.n	8020896 <forward_sm_integer+0x6e>
 80208cc:	f002 fa9c 	bl	8022e08 <forward_lite_nl_softmax_is8os8>
 80208d0:	b007      	add	sp, #28
 80208d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208d4:	2201      	movs	r2, #1
 80208d6:	e7c6      	b.n	8020866 <forward_sm_integer+0x3e>
 80208d8:	699b      	ldr	r3, [r3, #24]
 80208da:	deff      	udf	#255	@ 0xff
 80208dc:	2300      	movs	r3, #0
 80208de:	685b      	ldr	r3, [r3, #4]
 80208e0:	deff      	udf	#255	@ 0xff
 80208e2:	bf00      	nop
 80208e4:	00840440 	.word	0x00840440

080208e8 <forward_pad_8bit_ch1st_3x3_constant>:
 80208e8:	6982      	ldr	r2, [r0, #24]
 80208ea:	8813      	ldrh	r3, [r2, #0]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d03e      	beq.n	802096e <forward_pad_8bit_ch1st_3x3_constant+0x86>
 80208f0:	6852      	ldr	r2, [r2, #4]
 80208f2:	6851      	ldr	r1, [r2, #4]
 80208f4:	b101      	cbz	r1, 80208f8 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 80208f6:	6809      	ldr	r1, [r1, #0]
 80208f8:	2b01      	cmp	r3, #1
 80208fa:	d03c      	beq.n	8020976 <forward_pad_8bit_ch1st_3x3_constant+0x8e>
 80208fc:	6913      	ldr	r3, [r2, #16]
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d037      	beq.n	8020972 <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8020902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020906:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	@ 0x24
 802090a:	681f      	ldr	r7, [r3, #0]
 802090c:	b085      	sub	sp, #20
 802090e:	68cb      	ldr	r3, [r1, #12]
 8020910:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 8020914:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8020918:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 802091c:	68db      	ldr	r3, [r3, #12]
 802091e:	6892      	ldr	r2, [r2, #8]
 8020920:	e9d5 0400 	ldrd	r0, r4, [r5]
 8020924:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 8020928:	4320      	orrs	r0, r4
 802092a:	6875      	ldr	r5, [r6, #4]
 802092c:	b204      	sxth	r4, r0
 802092e:	6888      	ldr	r0, [r1, #8]
 8020930:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 8020934:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8020938:	6889      	ldr	r1, [r1, #8]
 802093a:	68f7      	ldr	r7, [r6, #12]
 802093c:	b974      	cbnz	r4, 802095c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 802093e:	f1b8 0f02 	cmp.w	r8, #2
 8020942:	d10b      	bne.n	802095c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8020944:	f1b9 0f02 	cmp.w	r9, #2
 8020948:	d108      	bne.n	802095c <forward_pad_8bit_ch1st_3x3_constant+0x74>
 802094a:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 802094e:	e9cd c500 	strd	ip, r5, [sp]
 8020952:	f002 fa6d 	bl	8022e30 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8020956:	b005      	add	sp, #20
 8020958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802095c:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8020960:	e9cd c500 	strd	ip, r5, [sp]
 8020964:	f002 fa98 	bl	8022e98 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 8020968:	b005      	add	sp, #20
 802096a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802096e:	685b      	ldr	r3, [r3, #4]
 8020970:	deff      	udf	#255	@ 0xff
 8020972:	699b      	ldr	r3, [r3, #24]
 8020974:	deff      	udf	#255	@ 0xff
 8020976:	2300      	movs	r3, #0
 8020978:	685b      	ldr	r3, [r3, #4]
 802097a:	deff      	udf	#255	@ 0xff

0802097c <forward_pad_constant>:
 802097c:	6982      	ldr	r2, [r0, #24]
 802097e:	8813      	ldrh	r3, [r2, #0]
 8020980:	2b00      	cmp	r3, #0
 8020982:	d03b      	beq.n	80209fc <forward_pad_constant+0x80>
 8020984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020988:	6852      	ldr	r2, [r2, #4]
 802098a:	b088      	sub	sp, #32
 802098c:	6854      	ldr	r4, [r2, #4]
 802098e:	b104      	cbz	r4, 8020992 <forward_pad_constant+0x16>
 8020990:	6824      	ldr	r4, [r4, #0]
 8020992:	2b01      	cmp	r3, #1
 8020994:	d034      	beq.n	8020a00 <forward_pad_constant+0x84>
 8020996:	6913      	ldr	r3, [r2, #16]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d034      	beq.n	8020a06 <forward_pad_constant+0x8a>
 802099c:	6819      	ldr	r1, [r3, #0]
 802099e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80209a0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80209a2:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 80209a6:	69a3      	ldr	r3, [r4, #24]
 80209a8:	6967      	ldr	r7, [r4, #20]
 80209aa:	f8d3 8000 	ldr.w	r8, [r3]
 80209ae:	6892      	ldr	r2, [r2, #8]
 80209b0:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 80209b4:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 80209b8:	6889      	ldr	r1, [r1, #8]
 80209ba:	fb0e f606 	mul.w	r6, lr, r6
 80209be:	6898      	ldr	r0, [r3, #8]
 80209c0:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 80209c4:	9606      	str	r6, [sp, #24]
 80209c6:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80209ca:	fb0e f606 	mul.w	r6, lr, r6
 80209ce:	9605      	str	r6, [sp, #20]
 80209d0:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 80209d4:	fb0c f606 	mul.w	r6, ip, r6
 80209d8:	9604      	str	r6, [sp, #16]
 80209da:	f9b5 5000 	ldrsh.w	r5, [r5]
 80209de:	fb0c f505 	mul.w	r5, ip, r5
 80209e2:	9503      	str	r5, [sp, #12]
 80209e4:	68fd      	ldr	r5, [r7, #12]
 80209e6:	9502      	str	r5, [sp, #8]
 80209e8:	687d      	ldr	r5, [r7, #4]
 80209ea:	9501      	str	r5, [sp, #4]
 80209ec:	68e4      	ldr	r4, [r4, #12]
 80209ee:	68e4      	ldr	r4, [r4, #12]
 80209f0:	9400      	str	r4, [sp, #0]
 80209f2:	f002 fb11 	bl	8023018 <forward_lite_pad_constant>
 80209f6:	b008      	add	sp, #32
 80209f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209fc:	685b      	ldr	r3, [r3, #4]
 80209fe:	deff      	udf	#255	@ 0xff
 8020a00:	2300      	movs	r3, #0
 8020a02:	685b      	ldr	r3, [r3, #4]
 8020a04:	deff      	udf	#255	@ 0xff
 8020a06:	699b      	ldr	r3, [r3, #24]
 8020a08:	deff      	udf	#255	@ 0xff
 8020a0a:	bf00      	nop

08020a0c <forward_pad_edge>:
 8020a0c:	6982      	ldr	r2, [r0, #24]
 8020a0e:	8813      	ldrh	r3, [r2, #0]
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	d035      	beq.n	8020a80 <forward_pad_edge+0x74>
 8020a14:	6851      	ldr	r1, [r2, #4]
 8020a16:	684a      	ldr	r2, [r1, #4]
 8020a18:	b102      	cbz	r2, 8020a1c <forward_pad_edge+0x10>
 8020a1a:	6812      	ldr	r2, [r2, #0]
 8020a1c:	2b01      	cmp	r3, #1
 8020a1e:	d031      	beq.n	8020a84 <forward_pad_edge+0x78>
 8020a20:	690b      	ldr	r3, [r1, #16]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d031      	beq.n	8020a8a <forward_pad_edge+0x7e>
 8020a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	b089      	sub	sp, #36	@ 0x24
 8020a2c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8020a2e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020a32:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8020a36:	6990      	ldr	r0, [r2, #24]
 8020a38:	6957      	ldr	r7, [r2, #20]
 8020a3a:	6880      	ldr	r0, [r0, #8]
 8020a3c:	f8de 200c 	ldr.w	r2, [lr, #12]
 8020a40:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8020a44:	f9b5 3000 	ldrsh.w	r3, [r5]
 8020a48:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8020a4c:	6889      	ldr	r1, [r1, #8]
 8020a4e:	fb04 f606 	mul.w	r6, r4, r6
 8020a52:	9606      	str	r6, [sp, #24]
 8020a54:	f8dc c008 	ldr.w	ip, [ip, #8]
 8020a58:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8020a5c:	9403      	str	r4, [sp, #12]
 8020a5e:	fb0c f606 	mul.w	r6, ip, r6
 8020a62:	fb03 f404 	mul.w	r4, r3, r4
 8020a66:	9605      	str	r6, [sp, #20]
 8020a68:	9404      	str	r4, [sp, #16]
 8020a6a:	68bc      	ldr	r4, [r7, #8]
 8020a6c:	9402      	str	r4, [sp, #8]
 8020a6e:	68fc      	ldr	r4, [r7, #12]
 8020a70:	9401      	str	r4, [sp, #4]
 8020a72:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8020a76:	9400      	str	r4, [sp, #0]
 8020a78:	f002 fb6a 	bl	8023150 <forward_lite_pad_edge>
 8020a7c:	b009      	add	sp, #36	@ 0x24
 8020a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a80:	685b      	ldr	r3, [r3, #4]
 8020a82:	deff      	udf	#255	@ 0xff
 8020a84:	2300      	movs	r3, #0
 8020a86:	685b      	ldr	r3, [r3, #4]
 8020a88:	deff      	udf	#255	@ 0xff
 8020a8a:	699b      	ldr	r3, [r3, #24]
 8020a8c:	deff      	udf	#255	@ 0xff
 8020a8e:	bf00      	nop

08020a90 <forward_pad_reflect>:
 8020a90:	6982      	ldr	r2, [r0, #24]
 8020a92:	8813      	ldrh	r3, [r2, #0]
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d044      	beq.n	8020b22 <forward_pad_reflect+0x92>
 8020a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a9c:	6852      	ldr	r2, [r2, #4]
 8020a9e:	b08f      	sub	sp, #60	@ 0x3c
 8020aa0:	6857      	ldr	r7, [r2, #4]
 8020aa2:	b107      	cbz	r7, 8020aa6 <forward_pad_reflect+0x16>
 8020aa4:	683f      	ldr	r7, [r7, #0]
 8020aa6:	2b01      	cmp	r3, #1
 8020aa8:	d03d      	beq.n	8020b26 <forward_pad_reflect+0x96>
 8020aaa:	6913      	ldr	r3, [r2, #16]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d03d      	beq.n	8020b2c <forward_pad_reflect+0x9c>
 8020ab0:	6819      	ldr	r1, [r3, #0]
 8020ab2:	68fa      	ldr	r2, [r7, #12]
 8020ab4:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8020ab8:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8020abc:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 8020ac0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8020ac2:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8020ac6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8020aca:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8020ace:	f9b4 b000 	ldrsh.w	fp, [r4]
 8020ad2:	6889      	ldr	r1, [r1, #8]
 8020ad4:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8020ad8:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8020adc:	fb05 f606 	mul.w	r6, r5, r6
 8020ae0:	6880      	ldr	r0, [r0, #8]
 8020ae2:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8020ae6:	bf2c      	ite	cs
 8020ae8:	6912      	ldrcs	r2, [r2, #16]
 8020aea:	2201      	movcc	r2, #1
 8020aec:	960c      	str	r6, [sp, #48]	@ 0x30
 8020aee:	fb05 f60e 	mul.w	r6, r5, lr
 8020af2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020af4:	fb0c f60b 	mul.w	r6, ip, fp
 8020af8:	960a      	str	r6, [sp, #40]	@ 0x28
 8020afa:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8020afe:	9409      	str	r4, [sp, #36]	@ 0x24
 8020b00:	e9cd eb07 	strd	lr, fp, [sp, #28]
 8020b04:	e9cd c505 	strd	ip, r5, [sp, #20]
 8020b08:	68bc      	ldr	r4, [r7, #8]
 8020b0a:	9404      	str	r4, [sp, #16]
 8020b0c:	68fc      	ldr	r4, [r7, #12]
 8020b0e:	f8cd 8000 	str.w	r8, [sp]
 8020b12:	9403      	str	r4, [sp, #12]
 8020b14:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8020b18:	f002 fb8c 	bl	8023234 <forward_lite_pad_reflect>
 8020b1c:	b00f      	add	sp, #60	@ 0x3c
 8020b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b22:	685b      	ldr	r3, [r3, #4]
 8020b24:	deff      	udf	#255	@ 0xff
 8020b26:	2300      	movs	r3, #0
 8020b28:	685b      	ldr	r3, [r3, #4]
 8020b2a:	deff      	udf	#255	@ 0xff
 8020b2c:	68db      	ldr	r3, [r3, #12]
 8020b2e:	deff      	udf	#255	@ 0xff

08020b30 <forward_ap_integer_INT8>:
 8020b30:	6983      	ldr	r3, [r0, #24]
 8020b32:	881a      	ldrh	r2, [r3, #0]
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	d059      	beq.n	8020bec <forward_ap_integer_INT8+0xbc>
 8020b38:	6859      	ldr	r1, [r3, #4]
 8020b3a:	684b      	ldr	r3, [r1, #4]
 8020b3c:	b103      	cbz	r3, 8020b40 <forward_ap_integer_INT8+0x10>
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	2a01      	cmp	r2, #1
 8020b42:	f000 80df 	beq.w	8020d04 <forward_ap_integer_INT8+0x1d4>
 8020b46:	690a      	ldr	r2, [r1, #16]
 8020b48:	2a00      	cmp	r2, #0
 8020b4a:	f000 80de 	beq.w	8020d0a <forward_ap_integer_INT8+0x1da>
 8020b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b52:	68de      	ldr	r6, [r3, #12]
 8020b54:	b095      	sub	sp, #84	@ 0x54
 8020b56:	6811      	ldr	r1, [r2, #0]
 8020b58:	681c      	ldr	r4, [r3, #0]
 8020b5a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8020b5e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8020b62:	8932      	ldrh	r2, [r6, #8]
 8020b64:	89b3      	ldrh	r3, [r6, #12]
 8020b66:	8b86      	ldrh	r6, [r0, #28]
 8020b68:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8020b6a:	960d      	str	r6, [sp, #52]	@ 0x34
 8020b6c:	8c06      	ldrh	r6, [r0, #32]
 8020b6e:	68cd      	ldr	r5, [r1, #12]
 8020b70:	960e      	str	r6, [sp, #56]	@ 0x38
 8020b72:	88be      	ldrh	r6, [r7, #4]
 8020b74:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8020b78:	960f      	str	r6, [sp, #60]	@ 0x3c
 8020b7a:	883e      	ldrh	r6, [r7, #0]
 8020b7c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8020b80:	9610      	str	r6, [sp, #64]	@ 0x40
 8020b82:	8c86      	ldrh	r6, [r0, #36]	@ 0x24
 8020b84:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8020b86:	9611      	str	r6, [sp, #68]	@ 0x44
 8020b88:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8020b8c:	680e      	ldr	r6, [r1, #0]
 8020b8e:	9012      	str	r0, [sp, #72]	@ 0x48
 8020b90:	2c00      	cmp	r4, #0
 8020b92:	d054      	beq.n	8020c3e <forward_ap_integer_INT8+0x10e>
 8020b94:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8020b98:	f1b9 0f00 	cmp.w	r9, #0
 8020b9c:	d028      	beq.n	8020bf0 <forward_ap_integer_INT8+0xc0>
 8020b9e:	8865      	ldrh	r5, [r4, #2]
 8020ba0:	2d00      	cmp	r5, #0
 8020ba2:	d077      	beq.n	8020c94 <forward_ap_integer_INT8+0x164>
 8020ba4:	f8d9 1000 	ldr.w	r1, [r9]
 8020ba8:	ed91 0a00 	vldr	s0, [r1]
 8020bac:	2e00      	cmp	r6, #0
 8020bae:	d075      	beq.n	8020c9c <forward_ap_integer_INT8+0x16c>
 8020bb0:	6877      	ldr	r7, [r6, #4]
 8020bb2:	b327      	cbz	r7, 8020bfe <forward_ap_integer_INT8+0xce>
 8020bb4:	8871      	ldrh	r1, [r6, #2]
 8020bb6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020bb8:	2900      	cmp	r1, #0
 8020bba:	d031      	beq.n	8020c20 <forward_ap_integer_INT8+0xf0>
 8020bbc:	683d      	ldr	r5, [r7, #0]
 8020bbe:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020bc2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020bc6:	edd5 0a00 	vldr	s1, [r5]
 8020bca:	f1b9 0f00 	cmp.w	r9, #0
 8020bce:	d034      	beq.n	8020c3a <forward_ap_integer_INT8+0x10a>
 8020bd0:	8864      	ldrh	r4, [r4, #2]
 8020bd2:	b304      	cbz	r4, 8020c16 <forward_ap_integer_INT8+0xe6>
 8020bd4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020bd8:	f994 4000 	ldrsb.w	r4, [r4]
 8020bdc:	b1f6      	cbz	r6, 8020c1c <forward_ap_integer_INT8+0xec>
 8020bde:	b1ef      	cbz	r7, 8020c1c <forward_ap_integer_INT8+0xec>
 8020be0:	8875      	ldrh	r5, [r6, #2]
 8020be2:	9513      	str	r5, [sp, #76]	@ 0x4c
 8020be4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020be6:	2d00      	cmp	r5, #0
 8020be8:	d03e      	beq.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020bea:	e03a      	b.n	8020c62 <forward_ap_integer_INT8+0x132>
 8020bec:	6853      	ldr	r3, [r2, #4]
 8020bee:	deff      	udf	#255	@ 0xff
 8020bf0:	2e00      	cmp	r6, #0
 8020bf2:	d05d      	beq.n	8020cb0 <forward_ap_integer_INT8+0x180>
 8020bf4:	6877      	ldr	r7, [r6, #4]
 8020bf6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020bfa:	2f00      	cmp	r7, #0
 8020bfc:	d1da      	bne.n	8020bb4 <forward_ap_integer_INT8+0x84>
 8020bfe:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020c02:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020c06:	f1b9 0f00 	cmp.w	r9, #0
 8020c0a:	d076      	beq.n	8020cfa <forward_ap_integer_INT8+0x1ca>
 8020c0c:	8864      	ldrh	r4, [r4, #2]
 8020c0e:	2c00      	cmp	r4, #0
 8020c10:	d16c      	bne.n	8020cec <forward_ap_integer_INT8+0x1bc>
 8020c12:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020c16:	2400      	movs	r4, #0
 8020c18:	2f00      	cmp	r7, #0
 8020c1a:	d1e1      	bne.n	8020be0 <forward_ap_integer_INT8+0xb0>
 8020c1c:	2500      	movs	r5, #0
 8020c1e:	e023      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020c20:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020c24:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020c28:	2c00      	cmp	r4, #0
 8020c2a:	d03d      	beq.n	8020ca8 <forward_ap_integer_INT8+0x178>
 8020c2c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8020c30:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020c34:	f1b9 0f00 	cmp.w	r9, #0
 8020c38:	d1ca      	bne.n	8020bd0 <forward_ap_integer_INT8+0xa0>
 8020c3a:	464c      	mov	r4, r9
 8020c3c:	e7d2      	b.n	8020be4 <forward_ap_integer_INT8+0xb4>
 8020c3e:	2e00      	cmp	r6, #0
 8020c40:	d036      	beq.n	8020cb0 <forward_ap_integer_INT8+0x180>
 8020c42:	6877      	ldr	r7, [r6, #4]
 8020c44:	2f00      	cmp	r7, #0
 8020c46:	d03e      	beq.n	8020cc6 <forward_ap_integer_INT8+0x196>
 8020c48:	8871      	ldrh	r1, [r6, #2]
 8020c4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020c4e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020c50:	2900      	cmp	r1, #0
 8020c52:	d0e5      	beq.n	8020c20 <forward_ap_integer_INT8+0xf0>
 8020c54:	683d      	ldr	r5, [r7, #0]
 8020c56:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020c5a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020c5e:	edd5 0a00 	vldr	s1, [r5]
 8020c62:	687d      	ldr	r5, [r7, #4]
 8020c64:	f995 5000 	ldrsb.w	r5, [r5]
 8020c68:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
 8020c6c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020c6e:	9406      	str	r4, [sp, #24]
 8020c70:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020c72:	9405      	str	r4, [sp, #20]
 8020c74:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020c76:	9404      	str	r4, [sp, #16]
 8020c78:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020c7a:	9403      	str	r4, [sp, #12]
 8020c7c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020c7e:	9402      	str	r4, [sp, #8]
 8020c80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c82:	e9cd e807 	strd	lr, r8, [sp, #28]
 8020c86:	e9cd c400 	strd	ip, r4, [sp]
 8020c8a:	f000 fb4f 	bl	802132c <forward_lite_avepool_is8os8>
 8020c8e:	b015      	add	sp, #84	@ 0x54
 8020c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020c98:	2e00      	cmp	r6, #0
 8020c9a:	d189      	bne.n	8020bb0 <forward_ap_integer_INT8+0x80>
 8020c9c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020ca0:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020ca4:	b9d5      	cbnz	r5, 8020cdc <forward_ap_integer_INT8+0x1ac>
 8020ca6:	462c      	mov	r4, r5
 8020ca8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020cac:	4625      	mov	r5, r4
 8020cae:	e7db      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020cb0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020cb4:	4634      	mov	r4, r6
 8020cb6:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020cba:	4635      	mov	r5, r6
 8020cbc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020cc0:	eef0 0a40 	vmov.f32	s1, s0
 8020cc4:	e7d0      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020cc6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020cca:	463c      	mov	r4, r7
 8020ccc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8020cd0:	463d      	mov	r5, r7
 8020cd2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8020cd6:	eef0 0a40 	vmov.f32	s1, s0
 8020cda:	e7c5      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020cdc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020ce0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020ce4:	4635      	mov	r5, r6
 8020ce6:	f994 4000 	ldrsb.w	r4, [r4]
 8020cea:	e7bd      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020cec:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020cf0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020cf4:	f994 4000 	ldrsb.w	r4, [r4]
 8020cf8:	e790      	b.n	8020c1c <forward_ap_integer_INT8+0xec>
 8020cfa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020cfe:	464c      	mov	r4, r9
 8020d00:	464d      	mov	r5, r9
 8020d02:	e7b1      	b.n	8020c68 <forward_ap_integer_INT8+0x138>
 8020d04:	2300      	movs	r3, #0
 8020d06:	685b      	ldr	r3, [r3, #4]
 8020d08:	deff      	udf	#255	@ 0xff
 8020d0a:	68d3      	ldr	r3, [r2, #12]
 8020d0c:	deff      	udf	#255	@ 0xff
 8020d0e:	bf00      	nop

08020d10 <forward_pw_sssa8_ch>:
 8020d10:	6982      	ldr	r2, [r0, #24]
 8020d12:	8813      	ldrh	r3, [r2, #0]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	f000 80a4 	beq.w	8020e62 <forward_pw_sssa8_ch+0x152>
 8020d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d1e:	6854      	ldr	r4, [r2, #4]
 8020d20:	b099      	sub	sp, #100	@ 0x64
 8020d22:	6861      	ldr	r1, [r4, #4]
 8020d24:	b101      	cbz	r1, 8020d28 <forward_pw_sssa8_ch+0x18>
 8020d26:	6809      	ldr	r1, [r1, #0]
 8020d28:	2b01      	cmp	r3, #1
 8020d2a:	f000 80b3 	beq.w	8020e94 <forward_pw_sssa8_ch+0x184>
 8020d2e:	6922      	ldr	r2, [r4, #16]
 8020d30:	b102      	cbz	r2, 8020d34 <forward_pw_sssa8_ch+0x24>
 8020d32:	6812      	ldr	r2, [r2, #0]
 8020d34:	2b02      	cmp	r3, #2
 8020d36:	f000 80a8 	beq.w	8020e8a <forward_pw_sssa8_ch+0x17a>
 8020d3a:	69e5      	ldr	r5, [r4, #28]
 8020d3c:	2d00      	cmp	r5, #0
 8020d3e:	f000 809c 	beq.w	8020e7a <forward_pw_sssa8_ch+0x16a>
 8020d42:	8b26      	ldrh	r6, [r4, #24]
 8020d44:	f8d5 e000 	ldr.w	lr, [r5]
 8020d48:	2e01      	cmp	r6, #1
 8020d4a:	f240 8098 	bls.w	8020e7e <forward_pw_sssa8_ch+0x16e>
 8020d4e:	686d      	ldr	r5, [r5, #4]
 8020d50:	2b03      	cmp	r3, #3
 8020d52:	f000 80a2 	beq.w	8020e9a <forward_pw_sssa8_ch+0x18a>
 8020d56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	f000 8092 	beq.w	8020e82 <forward_pw_sssa8_ch+0x172>
 8020d5e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8020d60:	b104      	cbz	r4, 8020d64 <forward_pw_sssa8_ch+0x54>
 8020d62:	685a      	ldr	r2, [r3, #4]
 8020d64:	681c      	ldr	r4, [r3, #0]
 8020d66:	69ab      	ldr	r3, [r5, #24]
 8020d68:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8020d6c:	689b      	ldr	r3, [r3, #8]
 8020d6e:	68d4      	ldr	r4, [r2, #12]
 8020d70:	9316      	str	r3, [sp, #88]	@ 0x58
 8020d72:	88a4      	ldrh	r4, [r4, #4]
 8020d74:	68cb      	ldr	r3, [r1, #12]
 8020d76:	9413      	str	r4, [sp, #76]	@ 0x4c
 8020d78:	889c      	ldrh	r4, [r3, #4]
 8020d7a:	680d      	ldr	r5, [r1, #0]
 8020d7c:	9412      	str	r4, [sp, #72]	@ 0x48
 8020d7e:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
 8020d80:	f8de 6000 	ldr.w	r6, [lr]
 8020d84:	9415      	str	r4, [sp, #84]	@ 0x54
 8020d86:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8020d8a:	e9d3 3b02 	ldrd	r3, fp, [r3, #8]
 8020d8e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020d90:	9314      	str	r3, [sp, #80]	@ 0x50
 8020d92:	6814      	ldr	r4, [r2, #0]
 8020d94:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8020d96:	2d00      	cmp	r5, #0
 8020d98:	d068      	beq.n	8020e6c <forward_pw_sssa8_ch+0x15c>
 8020d9a:	686f      	ldr	r7, [r5, #4]
 8020d9c:	2f00      	cmp	r7, #0
 8020d9e:	d065      	beq.n	8020e6c <forward_pw_sssa8_ch+0x15c>
 8020da0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8020da4:	f1b8 0f00 	cmp.w	r8, #0
 8020da8:	d060      	beq.n	8020e6c <forward_pw_sssa8_ch+0x15c>
 8020daa:	683f      	ldr	r7, [r7, #0]
 8020dac:	ed97 0a00 	vldr	s0, [r7]
 8020db0:	2c00      	cmp	r4, #0
 8020db2:	d058      	beq.n	8020e66 <forward_pw_sssa8_ch+0x156>
 8020db4:	6867      	ldr	r7, [r4, #4]
 8020db6:	2f00      	cmp	r7, #0
 8020db8:	d055      	beq.n	8020e66 <forward_pw_sssa8_ch+0x156>
 8020dba:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8020dbe:	f1b8 0f00 	cmp.w	r8, #0
 8020dc2:	d050      	beq.n	8020e66 <forward_pw_sssa8_ch+0x156>
 8020dc4:	683f      	ldr	r7, [r7, #0]
 8020dc6:	edd7 0a00 	vldr	s1, [r7]
 8020dca:	698f      	ldr	r7, [r1, #24]
 8020dcc:	6992      	ldr	r2, [r2, #24]
 8020dce:	f8de 1018 	ldr.w	r1, [lr, #24]
 8020dd2:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 8020dd6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8020dda:	68bf      	ldr	r7, [r7, #8]
 8020ddc:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8020de0:	b116      	cbz	r6, 8020de8 <forward_pw_sssa8_ch+0xd8>
 8020de2:	6876      	ldr	r6, [r6, #4]
 8020de4:	b106      	cbz	r6, 8020de8 <forward_pw_sssa8_ch+0xd8>
 8020de6:	6836      	ldr	r6, [r6, #0]
 8020de8:	b13d      	cbz	r5, 8020dfa <forward_pw_sssa8_ch+0xea>
 8020dea:	6869      	ldr	r1, [r5, #4]
 8020dec:	2900      	cmp	r1, #0
 8020dee:	d040      	beq.n	8020e72 <forward_pw_sssa8_ch+0x162>
 8020df0:	886d      	ldrh	r5, [r5, #2]
 8020df2:	b115      	cbz	r5, 8020dfa <forward_pw_sssa8_ch+0xea>
 8020df4:	6849      	ldr	r1, [r1, #4]
 8020df6:	f991 5000 	ldrsb.w	r5, [r1]
 8020dfa:	b13c      	cbz	r4, 8020e0c <forward_pw_sssa8_ch+0xfc>
 8020dfc:	6861      	ldr	r1, [r4, #4]
 8020dfe:	2900      	cmp	r1, #0
 8020e00:	d039      	beq.n	8020e76 <forward_pw_sssa8_ch+0x166>
 8020e02:	8864      	ldrh	r4, [r4, #2]
 8020e04:	b114      	cbz	r4, 8020e0c <forward_pw_sssa8_ch+0xfc>
 8020e06:	6849      	ldr	r1, [r1, #4]
 8020e08:	f991 4000 	ldrsb.w	r4, [r1]
 8020e0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8020e0e:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8020e12:	ed8d 0a0f 	vstr	s0, [sp, #60]	@ 0x3c
 8020e16:	e9dc 0100 	ldrd	r0, r1, [ip]
 8020e1a:	f010 ff9d 	bl	8031d58 <ai_array_get_byte_size>
 8020e1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020e20:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8020e24:	fa1f f28b 	uxth.w	r2, fp
 8020e28:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 8020e2c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 8020e30:	9505      	str	r5, [sp, #20]
 8020e32:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 8020e36:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020e38:	4638      	mov	r0, r7
 8020e3a:	9304      	str	r3, [sp, #16]
 8020e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020e3e:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8020e42:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8020e46:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e4a:	9400      	str	r4, [sp, #0]
 8020e4c:	2401      	movs	r4, #1
 8020e4e:	9301      	str	r3, [sp, #4]
 8020e50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020e52:	940a      	str	r4, [sp, #40]	@ 0x28
 8020e54:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 8020e58:	f001 f9de 	bl	8022218 <forward_lite_pw_sssa8_ch>
 8020e5c:	b019      	add	sp, #100	@ 0x64
 8020e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e62:	685b      	ldr	r3, [r3, #4]
 8020e64:	deff      	udf	#255	@ 0xff
 8020e66:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8020e6a:	e7ae      	b.n	8020dca <forward_pw_sssa8_ch+0xba>
 8020e6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020e70:	e79e      	b.n	8020db0 <forward_pw_sssa8_ch+0xa0>
 8020e72:	460d      	mov	r5, r1
 8020e74:	e7c1      	b.n	8020dfa <forward_pw_sssa8_ch+0xea>
 8020e76:	460c      	mov	r4, r1
 8020e78:	e7c8      	b.n	8020e0c <forward_pw_sssa8_ch+0xfc>
 8020e7a:	46ae      	mov	lr, r5
 8020e7c:	e768      	b.n	8020d50 <forward_pw_sssa8_ch+0x40>
 8020e7e:	2500      	movs	r5, #0
 8020e80:	e766      	b.n	8020d50 <forward_pw_sssa8_ch+0x40>
 8020e82:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8020e84:	b922      	cbnz	r2, 8020e90 <forward_pw_sssa8_ch+0x180>
 8020e86:	6993      	ldr	r3, [r2, #24]
 8020e88:	deff      	udf	#255	@ 0xff
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	685b      	ldr	r3, [r3, #4]
 8020e8e:	deff      	udf	#255	@ 0xff
 8020e90:	68db      	ldr	r3, [r3, #12]
 8020e92:	deff      	udf	#255	@ 0xff
 8020e94:	2300      	movs	r3, #0
 8020e96:	685b      	ldr	r3, [r3, #4]
 8020e98:	deff      	udf	#255	@ 0xff
 8020e9a:	2300      	movs	r3, #0
 8020e9c:	685b      	ldr	r3, [r3, #4]
 8020e9e:	deff      	udf	#255	@ 0xff

08020ea0 <forward_eltwise_integer_INT8>:
 8020ea0:	6982      	ldr	r2, [r0, #24]
 8020ea2:	8813      	ldrh	r3, [r2, #0]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d04e      	beq.n	8020f46 <forward_eltwise_integer_INT8+0xa6>
 8020ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eac:	ed2d 8b02 	vpush	{d8}
 8020eb0:	6852      	ldr	r2, [r2, #4]
 8020eb2:	b0ab      	sub	sp, #172	@ 0xac
 8020eb4:	6854      	ldr	r4, [r2, #4]
 8020eb6:	2c00      	cmp	r4, #0
 8020eb8:	f000 81d2 	beq.w	8021260 <forward_eltwise_integer_INT8+0x3c0>
 8020ebc:	e9d4 5400 	ldrd	r5, r4, [r4]
 8020ec0:	2b01      	cmp	r3, #1
 8020ec2:	f000 81d1 	beq.w	8021268 <forward_eltwise_integer_INT8+0x3c8>
 8020ec6:	6916      	ldr	r6, [r2, #16]
 8020ec8:	b106      	cbz	r6, 8020ecc <forward_eltwise_integer_INT8+0x2c>
 8020eca:	6836      	ldr	r6, [r6, #0]
 8020ecc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8020ed0:	f105 0108 	add.w	r1, r5, #8
 8020ed4:	f104 0b08 	add.w	fp, r4, #8
 8020ed8:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 8020edc:	68a0      	ldr	r0, [r4, #8]
 8020ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020ee0:	ea8c 0300 	eor.w	r3, ip, r0
 8020ee4:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 8020ee8:	f033 03ff 	bics.w	r3, r3, #255	@ 0xff
 8020eec:	d10e      	bne.n	8020f0c <forward_eltwise_integer_INT8+0x6c>
 8020eee:	4663      	mov	r3, ip
 8020ef0:	4686      	mov	lr, r0
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	f000 81b0 	beq.w	8021258 <forward_eltwise_integer_INT8+0x3b8>
 8020ef8:	3b01      	subs	r3, #1
 8020efa:	68e2      	ldr	r2, [r4, #12]
 8020efc:	68e8      	ldr	r0, [r5, #12]
 8020efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020f02:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8020f06:	4290      	cmp	r0, r2
 8020f08:	d0f3      	beq.n	8020ef2 <forward_eltwise_integer_INT8+0x52>
 8020f0a:	4670      	mov	r0, lr
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	9308      	str	r3, [sp, #32]
 8020f10:	f10c 33ff 	add.w	r3, ip, #4294967295
 8020f14:	009b      	lsls	r3, r3, #2
 8020f16:	e005      	b.n	8020f24 <forward_eltwise_integer_INT8+0x84>
 8020f18:	68ea      	ldr	r2, [r5, #12]
 8020f1a:	58d2      	ldr	r2, [r2, r3]
 8020f1c:	3b04      	subs	r3, #4
 8020f1e:	2a01      	cmp	r2, #1
 8020f20:	f040 8197 	bne.w	8021252 <forward_eltwise_integer_INT8+0x3b2>
 8020f24:	1d1a      	adds	r2, r3, #4
 8020f26:	d1f7      	bne.n	8020f18 <forward_eltwise_integer_INT8+0x78>
 8020f28:	f04f 0a01 	mov.w	sl, #1
 8020f2c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8020f30:	b158      	cbz	r0, 8020f4a <forward_eltwise_integer_INT8+0xaa>
 8020f32:	3801      	subs	r0, #1
 8020f34:	68e3      	ldr	r3, [r4, #12]
 8020f36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8020f3a:	2b01      	cmp	r3, #1
 8020f3c:	d0f8      	beq.n	8020f30 <forward_eltwise_integer_INT8+0x90>
 8020f3e:	2300      	movs	r3, #0
 8020f40:	46d1      	mov	r9, sl
 8020f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f44:	e005      	b.n	8020f52 <forward_eltwise_integer_INT8+0xb2>
 8020f46:	685b      	ldr	r3, [r3, #4]
 8020f48:	deff      	udf	#255	@ 0xff
 8020f4a:	2301      	movs	r3, #1
 8020f4c:	f08a 0901 	eor.w	r9, sl, #1
 8020f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f52:	6972      	ldr	r2, [r6, #20]
 8020f54:	2000      	movs	r0, #0
 8020f56:	696b      	ldr	r3, [r5, #20]
 8020f58:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8020f5c:	aa1b      	add	r2, sp, #108	@ 0x6c
 8020f5e:	685b      	ldr	r3, [r3, #4]
 8020f60:	9216      	str	r2, [sp, #88]	@ 0x58
 8020f62:	f240 5201 	movw	r2, #1281	@ 0x501
 8020f66:	901f      	str	r0, [sp, #124]	@ 0x7c
 8020f68:	9215      	str	r2, [sp, #84]	@ 0x54
 8020f6a:	465a      	mov	r2, fp
 8020f6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8020f6e:	910c      	str	r1, [sp, #48]	@ 0x30
 8020f70:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 8020f74:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
 8020f78:	a815      	add	r0, sp, #84	@ 0x54
 8020f7a:	f010 ff43 	bl	8031e04 <core_get_broadcasted_shape>
 8020f7e:	69ab      	ldr	r3, [r5, #24]
 8020f80:	f8d5 c000 	ldr.w	ip, [r5]
 8020f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8020f86:	6832      	ldr	r2, [r6, #0]
 8020f88:	6820      	ldr	r0, [r4, #0]
 8020f8a:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	@ 0x30
 8020f8e:	f1bc 0f00 	cmp.w	ip, #0
 8020f92:	d019      	beq.n	8020fc8 <forward_eltwise_integer_INT8+0x128>
 8020f94:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8020f98:	b1b5      	cbz	r5, 8020fc8 <forward_eltwise_integer_INT8+0x128>
 8020f9a:	f8bc e002 	ldrh.w	lr, [ip, #2]
 8020f9e:	f1be 0f00 	cmp.w	lr, #0
 8020fa2:	d011      	beq.n	8020fc8 <forward_eltwise_integer_INT8+0x128>
 8020fa4:	682d      	ldr	r5, [r5, #0]
 8020fa6:	682d      	ldr	r5, [r5, #0]
 8020fa8:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020faa:	b990      	cbnz	r0, 8020fd2 <forward_eltwise_integer_INT8+0x132>
 8020fac:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8020fb0:	9510      	str	r5, [sp, #64]	@ 0x40
 8020fb2:	b1da      	cbz	r2, 8020fec <forward_eltwise_integer_INT8+0x14c>
 8020fb4:	6855      	ldr	r5, [r2, #4]
 8020fb6:	b1cd      	cbz	r5, 8020fec <forward_eltwise_integer_INT8+0x14c>
 8020fb8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8020fbc:	f1be 0f00 	cmp.w	lr, #0
 8020fc0:	d014      	beq.n	8020fec <forward_eltwise_integer_INT8+0x14c>
 8020fc2:	682d      	ldr	r5, [r5, #0]
 8020fc4:	682d      	ldr	r5, [r5, #0]
 8020fc6:	e013      	b.n	8020ff0 <forward_eltwise_integer_INT8+0x150>
 8020fc8:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8020fcc:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020fce:	2800      	cmp	r0, #0
 8020fd0:	d0ec      	beq.n	8020fac <forward_eltwise_integer_INT8+0x10c>
 8020fd2:	6845      	ldr	r5, [r0, #4]
 8020fd4:	2d00      	cmp	r5, #0
 8020fd6:	d0e9      	beq.n	8020fac <forward_eltwise_integer_INT8+0x10c>
 8020fd8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8020fdc:	f1be 0f00 	cmp.w	lr, #0
 8020fe0:	d0e4      	beq.n	8020fac <forward_eltwise_integer_INT8+0x10c>
 8020fe2:	682d      	ldr	r5, [r5, #0]
 8020fe4:	682d      	ldr	r5, [r5, #0]
 8020fe6:	9510      	str	r5, [sp, #64]	@ 0x40
 8020fe8:	2a00      	cmp	r2, #0
 8020fea:	d1e3      	bne.n	8020fb4 <forward_eltwise_integer_INT8+0x114>
 8020fec:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8020ff0:	69a4      	ldr	r4, [r4, #24]
 8020ff2:	69b6      	ldr	r6, [r6, #24]
 8020ff4:	9511      	str	r5, [sp, #68]	@ 0x44
 8020ff6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020ff8:	68a4      	ldr	r4, [r4, #8]
 8020ffa:	68ad      	ldr	r5, [r5, #8]
 8020ffc:	68b6      	ldr	r6, [r6, #8]
 8020ffe:	f1bc 0f00 	cmp.w	ip, #0
 8021002:	d00e      	beq.n	8021022 <forward_eltwise_integer_INT8+0x182>
 8021004:	f8dc e004 	ldr.w	lr, [ip, #4]
 8021008:	f1be 0f00 	cmp.w	lr, #0
 802100c:	f000 80ff 	beq.w	802120e <forward_eltwise_integer_INT8+0x36e>
 8021010:	f8bc c002 	ldrh.w	ip, [ip, #2]
 8021014:	f1bc 0f00 	cmp.w	ip, #0
 8021018:	d003      	beq.n	8021022 <forward_eltwise_integer_INT8+0x182>
 802101a:	f8de c004 	ldr.w	ip, [lr, #4]
 802101e:	f99c c000 	ldrsb.w	ip, [ip]
 8021022:	f88d c039 	strb.w	ip, [sp, #57]	@ 0x39
 8021026:	b158      	cbz	r0, 8021040 <forward_eltwise_integer_INT8+0x1a0>
 8021028:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802102c:	f1bc 0f00 	cmp.w	ip, #0
 8021030:	f000 80eb 	beq.w	802120a <forward_eltwise_integer_INT8+0x36a>
 8021034:	8840      	ldrh	r0, [r0, #2]
 8021036:	b118      	cbz	r0, 8021040 <forward_eltwise_integer_INT8+0x1a0>
 8021038:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802103c:	f990 0000 	ldrsb.w	r0, [r0]
 8021040:	f88d 003a 	strb.w	r0, [sp, #58]	@ 0x3a
 8021044:	b142      	cbz	r2, 8021058 <forward_eltwise_integer_INT8+0x1b8>
 8021046:	6850      	ldr	r0, [r2, #4]
 8021048:	2800      	cmp	r0, #0
 802104a:	f000 80dc 	beq.w	8021206 <forward_eltwise_integer_INT8+0x366>
 802104e:	8852      	ldrh	r2, [r2, #2]
 8021050:	b112      	cbz	r2, 8021058 <forward_eltwise_integer_INT8+0x1b8>
 8021052:	6842      	ldr	r2, [r0, #4]
 8021054:	f992 2000 	ldrsb.w	r2, [r2]
 8021058:	f88d 203b 	strb.w	r2, [sp, #59]	@ 0x3b
 802105c:	9a08      	ldr	r2, [sp, #32]
 802105e:	b912      	cbnz	r2, 8021066 <forward_eltwise_integer_INT8+0x1c6>
 8021060:	f1b9 0f00 	cmp.w	r9, #0
 8021064:	d02d      	beq.n	80210c2 <forward_eltwise_integer_INT8+0x222>
 8021066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021068:	4553      	cmp	r3, sl
 802106a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802106c:	bf14      	ite	ne
 802106e:	f1ca 0102 	rsbne	r1, sl, #2
 8021072:	2100      	moveq	r1, #0
 8021074:	0a1b      	lsrs	r3, r3, #8
 8021076:	f000 80f5 	beq.w	8021264 <forward_eltwise_integer_INT8+0x3c4>
 802107a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 802107c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8021080:	2301      	movs	r3, #1
 8021082:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8021086:	4297      	cmp	r7, r2
 8021088:	fb00 f303 	mul.w	r3, r0, r3
 802108c:	d1f9      	bne.n	8021082 <forward_eltwise_integer_INT8+0x1e2>
 802108e:	4622      	mov	r2, r4
 8021090:	f10d 043b 	add.w	r4, sp, #59	@ 0x3b
 8021094:	9106      	str	r1, [sp, #24]
 8021096:	4630      	mov	r0, r6
 8021098:	9405      	str	r4, [sp, #20]
 802109a:	ac11      	add	r4, sp, #68	@ 0x44
 802109c:	4629      	mov	r1, r5
 802109e:	9404      	str	r4, [sp, #16]
 80210a0:	f10d 043a 	add.w	r4, sp, #58	@ 0x3a
 80210a4:	9403      	str	r4, [sp, #12]
 80210a6:	ac10      	add	r4, sp, #64	@ 0x40
 80210a8:	9402      	str	r4, [sp, #8]
 80210aa:	f10d 0439 	add.w	r4, sp, #57	@ 0x39
 80210ae:	9401      	str	r4, [sp, #4]
 80210b0:	ac0f      	add	r4, sp, #60	@ 0x3c
 80210b2:	9400      	str	r4, [sp, #0]
 80210b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80210b6:	47a0      	blx	r4
 80210b8:	b02b      	add	sp, #172	@ 0xac
 80210ba:	ecbd 8b02 	vpop	{d8}
 80210be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c2:	aa20      	add	r2, sp, #128	@ 0x80
 80210c4:	a817      	add	r0, sp, #92	@ 0x5c
 80210c6:	9308      	str	r3, [sp, #32]
 80210c8:	9218      	str	r2, [sp, #96]	@ 0x60
 80210ca:	aa25      	add	r2, sp, #148	@ 0x94
 80210cc:	f8cd 9080 	str.w	r9, [sp, #128]	@ 0x80
 80210d0:	921a      	str	r2, [sp, #104]	@ 0x68
 80210d2:	f240 5202 	movw	r2, #1282	@ 0x502
 80210d6:	f8cd 9094 	str.w	r9, [sp, #148]	@ 0x94
 80210da:	9217      	str	r2, [sp, #92]	@ 0x5c
 80210dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80210de:	aa15      	add	r2, sp, #84	@ 0x54
 80210e0:	e9cd 9921 	strd	r9, r9, [sp, #132]	@ 0x84
 80210e4:	e9cd 9923 	strd	r9, r9, [sp, #140]	@ 0x8c
 80210e8:	e9cd 9926 	strd	r9, r9, [sp, #152]	@ 0x98
 80210ec:	e9cd 9928 	strd	r9, r9, [sp, #160]	@ 0xa0
 80210f0:	f010 feb0 	bl	8031e54 <core_compute_offsets>
 80210f4:	9b08      	ldr	r3, [sp, #32]
 80210f6:	aa15      	add	r2, sp, #84	@ 0x54
 80210f8:	4659      	mov	r1, fp
 80210fa:	a819      	add	r0, sp, #100	@ 0x64
 80210fc:	f010 feaa 	bl	8031e54 <core_compute_offsets>
 8021100:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021102:	68d3      	ldr	r3, [r2, #12]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d0d7      	beq.n	80210b8 <forward_eltwise_integer_INT8+0x218>
 8021108:	6891      	ldr	r1, [r2, #8]
 802110a:	eddf 8a59 	vldr	s17, [pc, #356]	@ 8021270 <forward_eltwise_integer_INT8+0x3d0>
 802110e:	468c      	mov	ip, r1
 8021110:	f8cd 9020 	str.w	r9, [sp, #32]
 8021114:	f1bc 0f00 	cmp.w	ip, #0
 8021118:	d0ce      	beq.n	80210b8 <forward_eltwise_integer_INT8+0x218>
 802111a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802111c:	f04f 0b00 	mov.w	fp, #0
 8021120:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8021124:	f04f 0a00 	mov.w	sl, #0
 8021128:	2804      	cmp	r0, #4
 802112a:	bf8c      	ite	hi
 802112c:	6911      	ldrhi	r1, [r2, #16]
 802112e:	2101      	movls	r1, #1
 8021130:	458a      	cmp	sl, r1
 8021132:	d26e      	bcs.n	8021212 <forward_eltwise_integer_INT8+0x372>
 8021134:	6851      	ldr	r1, [r2, #4]
 8021136:	2900      	cmp	r1, #0
 8021138:	d054      	beq.n	80211e4 <forward_eltwise_integer_INT8+0x344>
 802113a:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 802113e:	f04f 0900 	mov.w	r9, #0
 8021142:	f995 2000 	ldrsb.w	r2, [r5]
 8021146:	a814      	add	r0, sp, #80	@ 0x50
 8021148:	f99d 1039 	ldrsb.w	r1, [sp, #57]	@ 0x39
 802114c:	eddd 6a0f 	vldr	s13, [sp, #60]	@ 0x3c
 8021150:	1a53      	subs	r3, r2, r1
 8021152:	f99d 103a 	ldrsb.w	r1, [sp, #58]	@ 0x3a
 8021156:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 802115a:	ee07 3a90 	vmov	s15, r3
 802115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021166:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 802116a:	f994 2000 	ldrsb.w	r2, [r4]
 802116e:	1a53      	subs	r3, r2, r1
 8021170:	aa13      	add	r2, sp, #76	@ 0x4c
 8021172:	a912      	add	r1, sp, #72	@ 0x48
 8021174:	ee07 3a90 	vmov	s15, r3
 8021178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021180:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 8021184:	47b8      	blx	r7
 8021186:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 802118a:	eddd 6a11 	vldr	s13, [sp, #68]	@ 0x44
 802118e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8021192:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8021196:	ee07 3a10 	vmov	s14, r3
 802119a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802119e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80211a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80211a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211aa:	fe38 7a28 	vselgt.f32	s14, s16, s17
 80211ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80211b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80211b6:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80211ba:	ee17 2a10 	vmov	r2, s14
 80211be:	f302 0207 	ssat	r2, #8, r2
 80211c2:	7032      	strb	r2, [r6, #0]
 80211c4:	f109 0901 	add.w	r9, r9, #1
 80211c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80211ca:	4446      	add	r6, r8
 80211cc:	6852      	ldr	r2, [r2, #4]
 80211ce:	4415      	add	r5, r2
 80211d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80211d2:	6852      	ldr	r2, [r2, #4]
 80211d4:	4414      	add	r4, r2
 80211d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80211d8:	6851      	ldr	r1, [r2, #4]
 80211da:	4549      	cmp	r1, r9
 80211dc:	d8b1      	bhi.n	8021142 <forward_eltwise_integer_INT8+0x2a2>
 80211de:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80211e0:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80211e4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80211e6:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80211ea:	d302      	bcc.n	80211f2 <forward_eltwise_integer_INT8+0x352>
 80211ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80211ee:	6909      	ldr	r1, [r1, #16]
 80211f0:	440d      	add	r5, r1
 80211f2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80211f4:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80211f8:	d302      	bcc.n	8021200 <forward_eltwise_integer_INT8+0x360>
 80211fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80211fc:	6909      	ldr	r1, [r1, #16]
 80211fe:	440c      	add	r4, r1
 8021200:	f10a 0a01 	add.w	sl, sl, #1
 8021204:	e790      	b.n	8021128 <forward_eltwise_integer_INT8+0x288>
 8021206:	4602      	mov	r2, r0
 8021208:	e726      	b.n	8021058 <forward_eltwise_integer_INT8+0x1b8>
 802120a:	4660      	mov	r0, ip
 802120c:	e718      	b.n	8021040 <forward_eltwise_integer_INT8+0x1a0>
 802120e:	46f4      	mov	ip, lr
 8021210:	e707      	b.n	8021022 <forward_eltwise_integer_INT8+0x182>
 8021212:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8021216:	f10b 0b01 	add.w	fp, fp, #1
 802121a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802121c:	f8de 1008 	ldr.w	r1, [lr, #8]
 8021220:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8021224:	440d      	add	r5, r1
 8021226:	6899      	ldr	r1, [r3, #8]
 8021228:	45dc      	cmp	ip, fp
 802122a:	440c      	add	r4, r1
 802122c:	f63f af7a 	bhi.w	8021124 <forward_eltwise_integer_INT8+0x284>
 8021230:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021234:	9908      	ldr	r1, [sp, #32]
 8021236:	4405      	add	r5, r0
 8021238:	68d0      	ldr	r0, [r2, #12]
 802123a:	3101      	adds	r1, #1
 802123c:	68db      	ldr	r3, [r3, #12]
 802123e:	4288      	cmp	r0, r1
 8021240:	441c      	add	r4, r3
 8021242:	9108      	str	r1, [sp, #32]
 8021244:	f63f af66 	bhi.w	8021114 <forward_eltwise_integer_INT8+0x274>
 8021248:	b02b      	add	sp, #172	@ 0xac
 802124a:	ecbd 8b02 	vpop	{d8}
 802124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021252:	f04f 0a00 	mov.w	sl, #0
 8021256:	e669      	b.n	8020f2c <forward_eltwise_integer_INT8+0x8c>
 8021258:	2301      	movs	r3, #1
 802125a:	4670      	mov	r0, lr
 802125c:	9308      	str	r3, [sp, #32]
 802125e:	e657      	b.n	8020f10 <forward_eltwise_integer_INT8+0x70>
 8021260:	4625      	mov	r5, r4
 8021262:	e62d      	b.n	8020ec0 <forward_eltwise_integer_INT8+0x20>
 8021264:	2301      	movs	r3, #1
 8021266:	e712      	b.n	802108e <forward_eltwise_integer_INT8+0x1ee>
 8021268:	2300      	movs	r3, #0
 802126a:	685b      	ldr	r3, [r3, #4]
 802126c:	deff      	udf	#255	@ 0xff
 802126e:	bf00      	nop
 8021270:	befffffc 	.word	0xbefffffc

08021274 <forward_upsample_bilinear_is8os8>:
 8021274:	6982      	ldr	r2, [r0, #24]
 8021276:	8811      	ldrh	r1, [r2, #0]
 8021278:	b329      	cbz	r1, 80212c6 <forward_upsample_bilinear_is8os8+0x52>
 802127a:	4603      	mov	r3, r0
 802127c:	6850      	ldr	r0, [r2, #4]
 802127e:	6842      	ldr	r2, [r0, #4]
 8021280:	b102      	cbz	r2, 8021284 <forward_upsample_bilinear_is8os8+0x10>
 8021282:	6812      	ldr	r2, [r2, #0]
 8021284:	2901      	cmp	r1, #1
 8021286:	d020      	beq.n	80212ca <forward_upsample_bilinear_is8os8+0x56>
 8021288:	6901      	ldr	r1, [r0, #16]
 802128a:	b309      	cbz	r1, 80212d0 <forward_upsample_bilinear_is8os8+0x5c>
 802128c:	b570      	push	{r4, r5, r6, lr}
 802128e:	6809      	ldr	r1, [r1, #0]
 8021290:	b084      	sub	sp, #16
 8021292:	68d4      	ldr	r4, [r2, #12]
 8021294:	6990      	ldr	r0, [r2, #24]
 8021296:	698a      	ldr	r2, [r1, #24]
 8021298:	68cd      	ldr	r5, [r1, #12]
 802129a:	6891      	ldr	r1, [r2, #8]
 802129c:	6a1a      	ldr	r2, [r3, #32]
 802129e:	7f5e      	ldrb	r6, [r3, #29]
 80212a0:	6892      	ldr	r2, [r2, #8]
 80212a2:	68e3      	ldr	r3, [r4, #12]
 80212a4:	edd2 0a00 	vldr	s1, [r2]
 80212a8:	ed92 0a01 	vldr	s0, [r2, #4]
 80212ac:	6880      	ldr	r0, [r0, #8]
 80212ae:	68a2      	ldr	r2, [r4, #8]
 80212b0:	9603      	str	r6, [sp, #12]
 80212b2:	6864      	ldr	r4, [r4, #4]
 80212b4:	9402      	str	r4, [sp, #8]
 80212b6:	68ec      	ldr	r4, [r5, #12]
 80212b8:	9401      	str	r4, [sp, #4]
 80212ba:	68ac      	ldr	r4, [r5, #8]
 80212bc:	9400      	str	r4, [sp, #0]
 80212be:	f001 fce1 	bl	8022c84 <forward_lite_upsample_bilinear_is8os8>
 80212c2:	b004      	add	sp, #16
 80212c4:	bd70      	pop	{r4, r5, r6, pc}
 80212c6:	684b      	ldr	r3, [r1, #4]
 80212c8:	deff      	udf	#255	@ 0xff
 80212ca:	2300      	movs	r3, #0
 80212cc:	685b      	ldr	r3, [r3, #4]
 80212ce:	deff      	udf	#255	@ 0xff
 80212d0:	68cb      	ldr	r3, [r1, #12]
 80212d2:	deff      	udf	#255	@ 0xff

080212d4 <forward_lite_node_convert_integer_is8of32>:
 80212d4:	f000 b850 	b.w	8021378 <lite_convert_is8of32>

080212d8 <forward_lite_node_convert_integer_iu8of32>:
 80212d8:	f000 b860 	b.w	802139c <lite_convert_iu8of32>

080212dc <forward_lite_node_convert_integer_if32os8>:
 80212dc:	f000 b870 	b.w	80213c0 <lite_convert_if32os8>

080212e0 <forward_lite_node_convert_integer_if32ou8>:
 80212e0:	f000 b8a4 	b.w	802142c <lite_convert_if32ou8>

080212e4 <forward_lite_node_convert_integer_is8os8>:
 80212e4:	b410      	push	{r4}
 80212e6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80212ea:	9401      	str	r4, [sp, #4]
 80212ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80212f0:	f000 b8bc 	b.w	802146c <lite_convert_is8os8>

080212f4 <forward_lite_node_convert_integer_iu8ou8>:
 80212f4:	b410      	push	{r4}
 80212f6:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80212fa:	9401      	str	r4, [sp, #4]
 80212fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021300:	f000 b8f4 	b.w	80214ec <lite_convert_iu8ou8>

08021304 <forward_lite_node_convert_integer_iu8os8>:
 8021304:	b410      	push	{r4}
 8021306:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 802130a:	9401      	str	r4, [sp, #4]
 802130c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021310:	f000 b916 	b.w	8021540 <lite_convert_iu8os8>

08021314 <forward_lite_node_convert_integer_iu8os8_fast>:
 8021314:	f000 b954 	b.w	80215c0 <lite_convert_iu8os8_fast>

08021318 <forward_lite_node_convert_integer_is8ou8>:
 8021318:	b410      	push	{r4}
 802131a:	f89d 4004 	ldrb.w	r4, [sp, #4]
 802131e:	9401      	str	r4, [sp, #4]
 8021320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021324:	f000 b984 	b.w	8021630 <lite_convert_is8ou8>

08021328 <forward_lite_node_convert_integer_is8ou8_fast>:
 8021328:	f000 b9ac 	b.w	8021684 <lite_convert_is8ou8_fast>

0802132c <forward_lite_avepool_is8os8>:
 802132c:	b410      	push	{r4}
 802132e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8021332:	9401      	str	r4, [sp, #4]
 8021334:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8021338:	9402      	str	r4, [sp, #8]
 802133a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802133e:	9403      	str	r4, [sp, #12]
 8021340:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8021344:	9404      	str	r4, [sp, #16]
 8021346:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802134a:	9405      	str	r4, [sp, #20]
 802134c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021350:	9406      	str	r4, [sp, #24]
 8021352:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021356:	9407      	str	r4, [sp, #28]
 8021358:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 802135c:	9408      	str	r4, [sp, #32]
 802135e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8021362:	9409      	str	r4, [sp, #36]	@ 0x24
 8021364:	f99d 4028 	ldrsb.w	r4, [sp, #40]	@ 0x28
 8021368:	940a      	str	r4, [sp, #40]	@ 0x28
 802136a:	f99d 402c 	ldrsb.w	r4, [sp, #44]	@ 0x2c
 802136e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021374:	f002 b994 	b.w	80236a0 <st_int8_avepool>

08021378 <lite_convert_is8of32>:
 8021378:	2a00      	cmp	r2, #0
 802137a:	dd0e      	ble.n	802139a <lite_convert_is8of32+0x22>
 802137c:	4402      	add	r2, r0
 802137e:	f910 cb01 	ldrsb.w	ip, [r0], #1
 8021382:	ebac 0c03 	sub.w	ip, ip, r3
 8021386:	4290      	cmp	r0, r2
 8021388:	ee07 ca90 	vmov	s15, ip
 802138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021390:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021394:	ece1 7a01 	vstmia	r1!, {s15}
 8021398:	d1f1      	bne.n	802137e <lite_convert_is8of32+0x6>
 802139a:	4770      	bx	lr

0802139c <lite_convert_iu8of32>:
 802139c:	2a00      	cmp	r2, #0
 802139e:	dd0e      	ble.n	80213be <lite_convert_iu8of32+0x22>
 80213a0:	4402      	add	r2, r0
 80213a2:	f810 cb01 	ldrb.w	ip, [r0], #1
 80213a6:	ebac 0c03 	sub.w	ip, ip, r3
 80213aa:	4290      	cmp	r0, r2
 80213ac:	ee07 ca90 	vmov	s15, ip
 80213b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80213b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80213b8:	ece1 7a01 	vstmia	r1!, {s15}
 80213bc:	d1f1      	bne.n	80213a2 <lite_convert_iu8of32+0x6>
 80213be:	4770      	bx	lr

080213c0 <lite_convert_if32os8>:
 80213c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80213c4:	2a00      	cmp	r2, #0
 80213c6:	ee87 6a80 	vdiv.f32	s12, s15, s0
 80213ca:	ee07 3a90 	vmov	s15, r3
 80213ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80213d2:	dd28      	ble.n	8021426 <lite_convert_if32os8+0x66>
 80213d4:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 80213d8:	440a      	add	r2, r1
 80213da:	eddf 5a13 	vldr	s11, [pc, #76]	@ 8021428 <lite_convert_if32os8+0x68>
 80213de:	eef0 7a66 	vmov.f32	s15, s13
 80213e2:	ecb0 7a01 	vldmia	r0!, {s14}
 80213e6:	eee7 7a06 	vfma.f32	s15, s14, s12
 80213ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80213ee:	ee37 7a85 	vadd.f32	s14, s15, s10
 80213f2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80213f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80213fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021402:	db08      	blt.n	8021416 <lite_convert_if32os8+0x56>
 8021404:	ee17 3a10 	vmov	r3, s14
 8021408:	f303 0307 	ssat	r3, #8, r3
 802140c:	f801 3b01 	strb.w	r3, [r1], #1
 8021410:	4291      	cmp	r1, r2
 8021412:	d1e4      	bne.n	80213de <lite_convert_if32os8+0x1e>
 8021414:	4770      	bx	lr
 8021416:	ee17 3a90 	vmov	r3, s15
 802141a:	f303 0307 	ssat	r3, #8, r3
 802141e:	f801 3b01 	strb.w	r3, [r1], #1
 8021422:	4291      	cmp	r1, r2
 8021424:	d1db      	bne.n	80213de <lite_convert_if32os8+0x1e>
 8021426:	4770      	bx	lr
 8021428:	3efffffc 	.word	0x3efffffc

0802142c <lite_convert_if32ou8>:
 802142c:	ee07 3a10 	vmov	s14, r3
 8021430:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8021434:	2a00      	cmp	r2, #0
 8021436:	eef8 6a47 	vcvt.f32.u32	s13, s14
 802143a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 802143e:	dd14      	ble.n	802146a <lite_convert_if32ou8+0x3e>
 8021440:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8021444:	440a      	add	r2, r1
 8021446:	ee87 6a80 	vdiv.f32	s12, s15, s0
 802144a:	ecb0 7a01 	vldmia	r0!, {s14}
 802144e:	eef0 7a66 	vmov.f32	s15, s13
 8021452:	eee7 7a06 	vfma.f32	s15, s14, s12
 8021456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802145a:	ee17 3a90 	vmov	r3, s15
 802145e:	f383 0308 	usat	r3, #8, r3
 8021462:	f801 3b01 	strb.w	r3, [r1], #1
 8021466:	4291      	cmp	r1, r2
 8021468:	d1ef      	bne.n	802144a <lite_convert_if32ou8+0x1e>
 802146a:	4770      	bx	lr

0802146c <lite_convert_is8os8>:
 802146c:	b500      	push	{lr}
 802146e:	eb00 0e02 	add.w	lr, r0, r2
 8021472:	f9bd c004 	ldrsh.w	ip, [sp, #4]
 8021476:	4570      	cmp	r0, lr
 8021478:	d22a      	bcs.n	80214d0 <lite_convert_is8os8+0x64>
 802147a:	ee07 ca90 	vmov	s15, ip
 802147e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8021482:	3801      	subs	r0, #1
 8021484:	440a      	add	r2, r1
 8021486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802148a:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 80214e8 <lite_convert_is8os8+0x7c>
 802148e:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
 8021492:	ebac 0c03 	sub.w	ip, ip, r3
 8021496:	ee07 ca90 	vmov	s15, ip
 802149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802149e:	eef0 7a66 	vmov.f32	s15, s13
 80214a2:	eee7 7a00 	vfma.f32	s15, s14, s0
 80214a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80214aa:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80214ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80214b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80214ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80214be:	dd09      	ble.n	80214d4 <lite_convert_is8os8+0x68>
 80214c0:	ee17 ca10 	vmov	ip, s14
 80214c4:	f30c 0c07 	ssat	ip, #8, ip
 80214c8:	f801 cb01 	strb.w	ip, [r1], #1
 80214cc:	4291      	cmp	r1, r2
 80214ce:	d1de      	bne.n	802148e <lite_convert_is8os8+0x22>
 80214d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80214d4:	ee17 ca90 	vmov	ip, s15
 80214d8:	f30c 0c07 	ssat	ip, #8, ip
 80214dc:	f801 cb01 	strb.w	ip, [r1], #1
 80214e0:	4291      	cmp	r1, r2
 80214e2:	d1d4      	bne.n	802148e <lite_convert_is8os8+0x22>
 80214e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80214e8:	3efffffc 	.word	0x3efffffc

080214ec <lite_convert_iu8ou8>:
 80214ec:	ee07 3a90 	vmov	s15, r3
 80214f0:	f89d 3000 	ldrb.w	r3, [sp]
 80214f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80214f8:	ee06 3a90 	vmov	s13, r3
 80214fc:	1883      	adds	r3, r0, r2
 80214fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021502:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021506:	4298      	cmp	r0, r3
 8021508:	ee76 6a87 	vadd.f32	s13, s13, s14
 802150c:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8021510:	d215      	bcs.n	802153e <lite_convert_iu8ou8+0x52>
 8021512:	3801      	subs	r0, #1
 8021514:	440a      	add	r2, r1
 8021516:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 802151a:	eef0 7a66 	vmov.f32	s15, s13
 802151e:	ee07 3a10 	vmov	s14, r3
 8021522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021526:	eee7 7a00 	vfma.f32	s15, s14, s0
 802152a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802152e:	ee17 3a90 	vmov	r3, s15
 8021532:	f383 0308 	usat	r3, #8, r3
 8021536:	f801 3b01 	strb.w	r3, [r1], #1
 802153a:	4291      	cmp	r1, r2
 802153c:	d1eb      	bne.n	8021516 <lite_convert_iu8ou8+0x2a>
 802153e:	4770      	bx	lr

08021540 <lite_convert_iu8os8>:
 8021540:	ee07 3a90 	vmov	s15, r3
 8021544:	f99d 3000 	ldrsb.w	r3, [sp]
 8021548:	ee06 3a90 	vmov	s13, r3
 802154c:	1883      	adds	r3, r0, r2
 802154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021552:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021556:	4298      	cmp	r0, r3
 8021558:	eee7 6ac0 	vfms.f32	s13, s15, s0
 802155c:	d22d      	bcs.n	80215ba <lite_convert_iu8os8+0x7a>
 802155e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8021562:	3801      	subs	r0, #1
 8021564:	440a      	add	r2, r1
 8021566:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80215bc <lite_convert_iu8os8+0x7c>
 802156a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 802156e:	eef0 7a66 	vmov.f32	s15, s13
 8021572:	ee07 3a10 	vmov	s14, r3
 8021576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802157a:	eee7 7a00 	vfma.f32	s15, s14, s0
 802157e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021582:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8021586:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802158e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021596:	dd08      	ble.n	80215aa <lite_convert_iu8os8+0x6a>
 8021598:	ee17 3a10 	vmov	r3, s14
 802159c:	f303 0307 	ssat	r3, #8, r3
 80215a0:	f801 3b01 	strb.w	r3, [r1], #1
 80215a4:	4291      	cmp	r1, r2
 80215a6:	d1e0      	bne.n	802156a <lite_convert_iu8os8+0x2a>
 80215a8:	4770      	bx	lr
 80215aa:	ee17 3a90 	vmov	r3, s15
 80215ae:	f303 0307 	ssat	r3, #8, r3
 80215b2:	f801 3b01 	strb.w	r3, [r1], #1
 80215b6:	4291      	cmp	r1, r2
 80215b8:	d1d7      	bne.n	802156a <lite_convert_iu8os8+0x2a>
 80215ba:	4770      	bx	lr
 80215bc:	3efffffc 	.word	0x3efffffc

080215c0 <lite_convert_iu8os8_fast>:
 80215c0:	b570      	push	{r4, r5, r6, lr}
 80215c2:	1095      	asrs	r5, r2, #2
 80215c4:	2d00      	cmp	r5, #0
 80215c6:	dd31      	ble.n	802162c <lite_convert_iu8os8_fast+0x6c>
 80215c8:	00ae      	lsls	r6, r5, #2
 80215ca:	460c      	mov	r4, r1
 80215cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80215d0:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 80215d4:	f850 3b04 	ldr.w	r3, [r0], #4
 80215d8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 80215dc:	fa3f fc8c 	uxtb16	ip, ip
 80215e0:	fadc fc0e 	ssub16	ip, ip, lr
 80215e4:	fa3f f383 	uxtb16	r3, r3
 80215e8:	fad3 f30e 	ssub16	r3, r3, lr
 80215ec:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80215f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80215f4:	42a8      	cmp	r0, r5
 80215f6:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 80215fa:	ea43 030c 	orr.w	r3, r3, ip
 80215fe:	f844 3b04 	str.w	r3, [r4], #4
 8021602:	d1e7      	bne.n	80215d4 <lite_convert_iu8os8_fast+0x14>
 8021604:	4431      	add	r1, r6
 8021606:	f012 0203 	ands.w	r2, r2, #3
 802160a:	d00e      	beq.n	802162a <lite_convert_iu8os8_fast+0x6a>
 802160c:	782b      	ldrb	r3, [r5, #0]
 802160e:	3a01      	subs	r2, #1
 8021610:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8021614:	700b      	strb	r3, [r1, #0]
 8021616:	d008      	beq.n	802162a <lite_convert_iu8os8_fast+0x6a>
 8021618:	786b      	ldrb	r3, [r5, #1]
 802161a:	2a01      	cmp	r2, #1
 802161c:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8021620:	704b      	strb	r3, [r1, #1]
 8021622:	d002      	beq.n	802162a <lite_convert_iu8os8_fast+0x6a>
 8021624:	78ab      	ldrb	r3, [r5, #2]
 8021626:	3b80      	subs	r3, #128	@ 0x80
 8021628:	708b      	strb	r3, [r1, #2]
 802162a:	bd70      	pop	{r4, r5, r6, pc}
 802162c:	4605      	mov	r5, r0
 802162e:	e7ea      	b.n	8021606 <lite_convert_iu8os8_fast+0x46>

08021630 <lite_convert_is8ou8>:
 8021630:	ee07 3a90 	vmov	s15, r3
 8021634:	f89d 3000 	ldrb.w	r3, [sp]
 8021638:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802163c:	ee06 3a90 	vmov	s13, r3
 8021640:	1883      	adds	r3, r0, r2
 8021642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021646:	eef8 6a66 	vcvt.f32.u32	s13, s13
 802164a:	4298      	cmp	r0, r3
 802164c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8021650:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8021654:	d215      	bcs.n	8021682 <lite_convert_is8ou8+0x52>
 8021656:	3801      	subs	r0, #1
 8021658:	440a      	add	r2, r1
 802165a:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 802165e:	eef0 7a66 	vmov.f32	s15, s13
 8021662:	ee07 3a10 	vmov	s14, r3
 8021666:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802166a:	eee7 7a00 	vfma.f32	s15, s14, s0
 802166e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021672:	ee17 3a90 	vmov	r3, s15
 8021676:	f383 0308 	usat	r3, #8, r3
 802167a:	f801 3b01 	strb.w	r3, [r1], #1
 802167e:	4291      	cmp	r1, r2
 8021680:	d1eb      	bne.n	802165a <lite_convert_is8ou8+0x2a>
 8021682:	4770      	bx	lr

08021684 <lite_convert_is8ou8_fast>:
 8021684:	b570      	push	{r4, r5, r6, lr}
 8021686:	1095      	asrs	r5, r2, #2
 8021688:	2d00      	cmp	r5, #0
 802168a:	dd2d      	ble.n	80216e8 <lite_convert_is8ou8_fast+0x64>
 802168c:	00ae      	lsls	r6, r5, #2
 802168e:	460c      	mov	r4, r1
 8021690:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8021694:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 8021698:	f850 3b04 	ldr.w	r3, [r0], #4
 802169c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 80216a0:	fa2f fc8c 	sxtb16	ip, ip
 80216a4:	fa9c fc0e 	sadd16	ip, ip, lr
 80216a8:	fa2f f383 	sxtb16	r3, r3
 80216ac:	fa93 f30e 	sadd16	r3, r3, lr
 80216b0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80216b4:	42a8      	cmp	r0, r5
 80216b6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80216ba:	f844 3b04 	str.w	r3, [r4], #4
 80216be:	d1eb      	bne.n	8021698 <lite_convert_is8ou8_fast+0x14>
 80216c0:	4431      	add	r1, r6
 80216c2:	f012 0203 	ands.w	r2, r2, #3
 80216c6:	d00e      	beq.n	80216e6 <lite_convert_is8ou8_fast+0x62>
 80216c8:	782b      	ldrb	r3, [r5, #0]
 80216ca:	3a01      	subs	r2, #1
 80216cc:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80216d0:	700b      	strb	r3, [r1, #0]
 80216d2:	d008      	beq.n	80216e6 <lite_convert_is8ou8_fast+0x62>
 80216d4:	786b      	ldrb	r3, [r5, #1]
 80216d6:	2a01      	cmp	r2, #1
 80216d8:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80216dc:	704b      	strb	r3, [r1, #1]
 80216de:	d002      	beq.n	80216e6 <lite_convert_is8ou8_fast+0x62>
 80216e0:	78ab      	ldrb	r3, [r5, #2]
 80216e2:	3b80      	subs	r3, #128	@ 0x80
 80216e4:	708b      	strb	r3, [r1, #2]
 80216e6:	bd70      	pop	{r4, r5, r6, pc}
 80216e8:	4605      	mov	r5, r0
 80216ea:	e7ea      	b.n	80216c2 <lite_convert_is8ou8_fast+0x3e>

080216ec <forward_lite_dw_3x3_sssa8_ch>:
 80216ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216f0:	b09d      	sub	sp, #116	@ 0x74
 80216f2:	461c      	mov	r4, r3
 80216f4:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 80216f8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80216fc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8021700:	9206      	str	r2, [sp, #24]
 8021702:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	@ 0xa8
 8021706:	9305      	str	r3, [sp, #20]
 8021708:	920f      	str	r2, [sp, #60]	@ 0x3c
 802170a:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	@ 0xb8
 802170e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021710:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021712:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	@ 0xbc
 8021716:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
 802171a:	f99d 70ac 	ldrsb.w	r7, [sp, #172]	@ 0xac
 802171e:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
 8021722:	9019      	str	r0, [sp, #100]	@ 0x64
 8021724:	9104      	str	r1, [sp, #16]
 8021726:	9217      	str	r2, [sp, #92]	@ 0x5c
 8021728:	2b00      	cmp	r3, #0
 802172a:	f000 8424 	beq.w	8021f76 <forward_lite_dw_3x3_sssa8_ch+0x88a>
 802172e:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8021732:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8021734:	4621      	mov	r1, r4
 8021736:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8021738:	eb03 0209 	add.w	r2, r3, r9
 802173c:	eb09 0304 	add.w	r3, r9, r4
 8021740:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021744:	9210      	str	r2, [sp, #64]	@ 0x40
 8021746:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8021748:	461d      	mov	r5, r3
 802174a:	9312      	str	r3, [sp, #72]	@ 0x48
 802174c:	f001 fe1a 	bl	8023384 <align_factor_ch>
 8021750:	f06f 0315 	mvn.w	r3, #21
 8021754:	fb03 5304 	mla	r3, r3, r4, r5
 8021758:	9311      	str	r3, [sp, #68]	@ 0x44
 802175a:	b1d4      	cbz	r4, 8021792 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 802175c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802175e:	2100      	movs	r1, #0
 8021760:	2601      	movs	r6, #1
 8021762:	f1a3 0c02 	sub.w	ip, r3, #2
 8021766:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021768:	1d18      	adds	r0, r3, #4
 802176a:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 802176e:	3101      	adds	r1, #1
 8021770:	1e5a      	subs	r2, r3, #1
 8021772:	fa06 f503 	lsl.w	r5, r6, r3
 8021776:	fa07 f303 	lsl.w	r3, r7, r3
 802177a:	b292      	uxth	r2, r2
 802177c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8021780:	2a14      	cmp	r2, #20
 8021782:	f200 83f0 	bhi.w	8021f66 <forward_lite_dw_3x3_sssa8_ch+0x87a>
 8021786:	428c      	cmp	r4, r1
 8021788:	f840 3c04 	str.w	r3, [r0, #-4]
 802178c:	f100 0004 	add.w	r0, r0, #4
 8021790:	dceb      	bgt.n	802176a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8021792:	9a05      	ldr	r2, [sp, #20]
 8021794:	2c03      	cmp	r4, #3
 8021796:	9b04      	ldr	r3, [sp, #16]
 8021798:	fb04 f202 	mul.w	r2, r4, r2
 802179c:	fb04 f303 	mul.w	r3, r4, r3
 80217a0:	9214      	str	r2, [sp, #80]	@ 0x50
 80217a2:	9a06      	ldr	r2, [sp, #24]
 80217a4:	fb03 f202 	mul.w	r2, r3, r2
 80217a8:	eba3 0308 	sub.w	r3, r3, r8
 80217ac:	9307      	str	r3, [sp, #28]
 80217ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80217b0:	9218      	str	r2, [sp, #96]	@ 0x60
 80217b2:	f1c3 0300 	rsb	r3, r3, #0
 80217b6:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80217ba:	bf8c      	ite	hi
 80217bc:	1ee3      	subhi	r3, r4, #3
 80217be:	2300      	movls	r3, #0
 80217c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80217c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	f000 82b6 	beq.w	8021d36 <forward_lite_dw_3x3_sssa8_ch+0x64a>
 80217ca:	f004 0303 	and.w	r3, r4, #3
 80217ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80217d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80217d2:	2a00      	cmp	r2, #0
 80217d4:	f000 82af 	beq.w	8021d36 <forward_lite_dw_3x3_sssa8_ch+0x64a>
 80217d8:	3b01      	subs	r3, #1
 80217da:	46b4      	mov	ip, r6
 80217dc:	46a0      	mov	r8, r4
 80217de:	b29b      	uxth	r3, r3
 80217e0:	9315      	str	r3, [sp, #84]	@ 0x54
 80217e2:	2300      	movs	r3, #0
 80217e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80217e6:	46de      	mov	lr, fp
 80217e8:	46c3      	mov	fp, r8
 80217ea:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80217ee:	fb03 2301 	mla	r3, r3, r1, r2
 80217f2:	9306      	str	r3, [sp, #24]
 80217f4:	2300      	movs	r3, #0
 80217f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80217f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	f000 8397 	beq.w	8021f2e <forward_lite_dw_3x3_sssa8_ch+0x842>
 8021800:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8021804:	2400      	movs	r4, #0
 8021806:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8021808:	930b      	str	r3, [sp, #44]	@ 0x2c
 802180a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802180c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802180e:	f103 0010 	add.w	r0, r3, #16
 8021812:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021814:	9203      	str	r2, [sp, #12]
 8021816:	3348      	adds	r3, #72	@ 0x48
 8021818:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802181a:	f8cd e000 	str.w	lr, [sp]
 802181e:	9405      	str	r4, [sp, #20]
 8021820:	9202      	str	r2, [sp, #8]
 8021822:	9004      	str	r0, [sp, #16]
 8021824:	9101      	str	r1, [sp, #4]
 8021826:	9906      	ldr	r1, [sp, #24]
 8021828:	9804      	ldr	r0, [sp, #16]
 802182a:	190a      	adds	r2, r1, r4
 802182c:	f853 5c48 	ldr.w	r5, [r3, #-72]
 8021830:	590c      	ldr	r4, [r1, r4]
 8021832:	f852 800b 	ldr.w	r8, [r2, fp]
 8021836:	eb02 070b 	add.w	r7, r2, fp
 802183a:	eac4 4108 	pkhbt	r1, r4, r8, lsl #16
 802183e:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 8021842:	eac8 4824 	pkhtb	r8, r8, r4, asr #16
 8021846:	e9cd 3008 	strd	r3, r0, [sp, #32]
 802184a:	f850 4c10 	ldr.w	r4, [r0, #-16]
 802184e:	fa2c f681 	sxtab16	r6, ip, r1
 8021852:	fb25 4606 	smlad	r6, r5, r6, r4
 8021856:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 802185a:	f853 4c44 	ldr.w	r4, [r3, #-68]
 802185e:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8021862:	fb24 5101 	smlad	r1, r4, r1, r5
 8021866:	f853 4c40 	ldr.w	r4, [r3, #-64]
 802186a:	f850 5c08 	ldr.w	r5, [r0, #-8]
 802186e:	fa2c fe88 	sxtab16	lr, ip, r8
 8021872:	fb24 5e0e 	smlad	lr, r4, lr, r5
 8021876:	fa2c f898 	sxtab16	r8, ip, r8, ror #8
 802187a:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 802187e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8021882:	fb24 5508 	smlad	r5, r4, r8, r5
 8021886:	9807      	ldr	r0, [sp, #28]
 8021888:	f857 800b 	ldr.w	r8, [r7, fp]
 802188c:	1817      	adds	r7, r2, r0
 802188e:	f853 4c38 	ldr.w	r4, [r3, #-56]
 8021892:	5812      	ldr	r2, [r2, r0]
 8021894:	eac8 4902 	pkhbt	r9, r8, r2, lsl #16
 8021898:	eac2 4228 	pkhtb	r2, r2, r8, asr #16
 802189c:	fa2c fa89 	sxtab16	sl, ip, r9
 80218a0:	eb07 080b 	add.w	r8, r7, fp
 80218a4:	fb24 660a 	smlad	r6, r4, sl, r6
 80218a8:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 80218ac:	f853 4c34 	ldr.w	r4, [r3, #-52]
 80218b0:	fb24 1409 	smlad	r4, r4, r9, r1
 80218b4:	f853 1c30 	ldr.w	r1, [r3, #-48]
 80218b8:	fa2c f982 	sxtab16	r9, ip, r2
 80218bc:	fb21 ee09 	smlad	lr, r1, r9, lr
 80218c0:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 80218c4:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80218c8:	fb21 5202 	smlad	r2, r1, r2, r5
 80218cc:	f857 a00b 	ldr.w	sl, [r7, fp]
 80218d0:	eb08 070b 	add.w	r7, r8, fp
 80218d4:	f858 100b 	ldr.w	r1, [r8, fp]
 80218d8:	f853 5c28 	ldr.w	r5, [r3, #-40]
 80218dc:	eb07 0800 	add.w	r8, r7, r0
 80218e0:	eaca 4901 	pkhbt	r9, sl, r1, lsl #16
 80218e4:	eac1 412a 	pkhtb	r1, r1, sl, asr #16
 80218e8:	fa2c fa89 	sxtab16	sl, ip, r9
 80218ec:	fb25 660a 	smlad	r6, r5, sl, r6
 80218f0:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 80218f4:	f853 5c24 	ldr.w	r5, [r3, #-36]
 80218f8:	fb25 4509 	smlad	r5, r5, r9, r4
 80218fc:	f853 4c20 	ldr.w	r4, [r3, #-32]
 8021900:	fa2c f981 	sxtab16	r9, ip, r1
 8021904:	fb24 ee09 	smlad	lr, r4, r9, lr
 8021908:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 802190c:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 8021910:	fb24 2101 	smlad	r1, r4, r1, r2
 8021914:	f857 9000 	ldr.w	r9, [r7, r0]
 8021918:	f858 200b 	ldr.w	r2, [r8, fp]
 802191c:	44d8      	add	r8, fp
 802191e:	eac9 4702 	pkhbt	r7, r9, r2, lsl #16
 8021922:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8021926:	eac2 4229 	pkhtb	r2, r2, r9, asr #16
 802192a:	fa2c f987 	sxtab16	r9, ip, r7
 802192e:	fb24 6609 	smlad	r6, r4, r9, r6
 8021932:	fa2c f797 	sxtab16	r7, ip, r7, ror #8
 8021936:	f853 4c14 	ldr.w	r4, [r3, #-20]
 802193a:	fb24 5707 	smlad	r7, r4, r7, r5
 802193e:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8021942:	fa2c f582 	sxtab16	r5, ip, r2
 8021946:	fb24 e505 	smlad	r5, r4, r5, lr
 802194a:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 802194e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8021952:	fb24 1202 	smlad	r2, r4, r2, r1
 8021956:	f858 100b 	ldr.w	r1, [r8, fp]
 802195a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802195c:	b24c      	sxtb	r4, r1
 802195e:	f833 ec08 	ldrh.w	lr, [r3, #-8]
 8021962:	f833 8c06 	ldrh.w	r8, [r3, #-6]
 8021966:	1a24      	subs	r4, r4, r0
 8021968:	f833 9c04 	ldrh.w	r9, [r3, #-4]
 802196c:	fb1e 6604 	smlabb	r6, lr, r4, r6
 8021970:	f341 2407 	sbfx	r4, r1, #8, #8
 8021974:	1a24      	subs	r4, r4, r0
 8021976:	fb18 7404 	smlabb	r4, r8, r4, r7
 802197a:	f341 4707 	sbfx	r7, r1, #16, #8
 802197e:	ebc0 6121 	rsb	r1, r0, r1, asr #24
 8021982:	1a3f      	subs	r7, r7, r0
 8021984:	9801      	ldr	r0, [sp, #4]
 8021986:	fb19 5907 	smlabb	r9, r9, r7, r5
 802198a:	f833 5c02 	ldrh.w	r5, [r3, #-2]
 802198e:	fb15 2a01 	smlabb	sl, r5, r1, r2
 8021992:	f9b0 1000 	ldrsh.w	r1, [r0]
 8021996:	2915      	cmp	r1, #21
 8021998:	f340 8217 	ble.w	8021dca <forward_lite_dw_3x3_sssa8_ch+0x6de>
 802199c:	f1a1 0802 	sub.w	r8, r1, #2
 80219a0:	2201      	movs	r2, #1
 80219a2:	9f03      	ldr	r7, [sp, #12]
 80219a4:	3901      	subs	r1, #1
 80219a6:	fa02 f808 	lsl.w	r8, r2, r8
 80219aa:	9d02      	ldr	r5, [sp, #8]
 80219ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80219b0:	f100 0e02 	add.w	lr, r0, #2
 80219b4:	fb56 8202 	smmla	r2, r6, r2, r8
 80219b8:	410a      	asrs	r2, r1
 80219ba:	f855 1b04 	ldr.w	r1, [r5], #4
 80219be:	440a      	add	r2, r1
 80219c0:	f302 0207 	ssat	r2, #8, r2
 80219c4:	9900      	ldr	r1, [sp, #0]
 80219c6:	b252      	sxtb	r2, r2
 80219c8:	1c4e      	adds	r6, r1, #1
 80219ca:	4608      	mov	r0, r1
 80219cc:	700a      	strb	r2, [r1, #0]
 80219ce:	f9be 1000 	ldrsh.w	r1, [lr]
 80219d2:	2915      	cmp	r1, #21
 80219d4:	f340 81e3 	ble.w	8021d9e <forward_lite_dw_3x3_sssa8_ch+0x6b2>
 80219d8:	f8d5 e000 	ldr.w	lr, [r5]
 80219dc:	1e8d      	subs	r5, r1, #2
 80219de:	683a      	ldr	r2, [r7, #0]
 80219e0:	3901      	subs	r1, #1
 80219e2:	2701      	movs	r7, #1
 80219e4:	fa07 f505 	lsl.w	r5, r7, r5
 80219e8:	9f03      	ldr	r7, [sp, #12]
 80219ea:	fb54 5202 	smmla	r2, r4, r2, r5
 80219ee:	410a      	asrs	r2, r1
 80219f0:	9901      	ldr	r1, [sp, #4]
 80219f2:	3708      	adds	r7, #8
 80219f4:	4472      	add	r2, lr
 80219f6:	f101 0e04 	add.w	lr, r1, #4
 80219fa:	9902      	ldr	r1, [sp, #8]
 80219fc:	3108      	adds	r1, #8
 80219fe:	f302 0207 	ssat	r2, #8, r2
 8021a02:	b252      	sxtb	r2, r2
 8021a04:	1c84      	adds	r4, r0, #2
 8021a06:	7032      	strb	r2, [r6, #0]
 8021a08:	f9be 5000 	ldrsh.w	r5, [lr]
 8021a0c:	2d15      	cmp	r5, #21
 8021a0e:	f340 8195 	ble.w	8021d3c <forward_lite_dw_3x3_sssa8_ch+0x650>
 8021a12:	680e      	ldr	r6, [r1, #0]
 8021a14:	2001      	movs	r0, #1
 8021a16:	1ea9      	subs	r1, r5, #2
 8021a18:	3d01      	subs	r5, #1
 8021a1a:	683a      	ldr	r2, [r7, #0]
 8021a1c:	fa00 f101 	lsl.w	r1, r0, r1
 8021a20:	9803      	ldr	r0, [sp, #12]
 8021a22:	fb59 1202 	smmla	r2, r9, r2, r1
 8021a26:	412a      	asrs	r2, r5
 8021a28:	f100 0e0c 	add.w	lr, r0, #12
 8021a2c:	4416      	add	r6, r2
 8021a2e:	9a01      	ldr	r2, [sp, #4]
 8021a30:	3206      	adds	r2, #6
 8021a32:	9902      	ldr	r1, [sp, #8]
 8021a34:	310c      	adds	r1, #12
 8021a36:	f306 0607 	ssat	r6, #8, r6
 8021a3a:	b276      	sxtb	r6, r6
 8021a3c:	9800      	ldr	r0, [sp, #0]
 8021a3e:	7026      	strb	r6, [r4, #0]
 8021a40:	1cc5      	adds	r5, r0, #3
 8021a42:	f9b2 6000 	ldrsh.w	r6, [r2]
 8021a46:	2e15      	cmp	r6, #21
 8021a48:	f340 8194 	ble.w	8021d74 <forward_lite_dw_3x3_sssa8_ch+0x688>
 8021a4c:	f8d1 9000 	ldr.w	r9, [r1]
 8021a50:	2001      	movs	r0, #1
 8021a52:	1eb1      	subs	r1, r6, #2
 8021a54:	9f01      	ldr	r7, [sp, #4]
 8021a56:	3e01      	subs	r6, #1
 8021a58:	9c03      	ldr	r4, [sp, #12]
 8021a5a:	3708      	adds	r7, #8
 8021a5c:	9a02      	ldr	r2, [sp, #8]
 8021a5e:	f8de e000 	ldr.w	lr, [lr]
 8021a62:	fa00 f101 	lsl.w	r1, r0, r1
 8021a66:	fb5a 1e0e 	smmla	lr, sl, lr, r1
 8021a6a:	fa4e f806 	asr.w	r8, lr, r6
 8021a6e:	3410      	adds	r4, #16
 8021a70:	3210      	adds	r2, #16
 8021a72:	463e      	mov	r6, r7
 8021a74:	44c8      	add	r8, r9
 8021a76:	940c      	str	r4, [sp, #48]	@ 0x30
 8021a78:	4691      	mov	r9, r2
 8021a7a:	f308 0807 	ssat	r8, #8, r8
 8021a7e:	fa4f f888 	sxtb.w	r8, r8
 8021a82:	9804      	ldr	r0, [sp, #16]
 8021a84:	9900      	ldr	r1, [sp, #0]
 8021a86:	3348      	adds	r3, #72	@ 0x48
 8021a88:	f885 8000 	strb.w	r8, [r5]
 8021a8c:	3010      	adds	r0, #16
 8021a8e:	9d05      	ldr	r5, [sp, #20]
 8021a90:	3104      	adds	r1, #4
 8021a92:	9004      	str	r0, [sp, #16]
 8021a94:	3504      	adds	r5, #4
 8021a96:	9202      	str	r2, [sp, #8]
 8021a98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021a9a:	468e      	mov	lr, r1
 8021a9c:	b2a8      	uxth	r0, r5
 8021a9e:	9403      	str	r4, [sp, #12]
 8021aa0:	9701      	str	r7, [sp, #4]
 8021aa2:	4290      	cmp	r0, r2
 8021aa4:	4604      	mov	r4, r0
 8021aa6:	9005      	str	r0, [sp, #20]
 8021aa8:	9100      	str	r1, [sp, #0]
 8021aaa:	f4ff aebc 	bcc.w	8021826 <forward_lite_dw_3x3_sssa8_ch+0x13a>
 8021aae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8021ab2:	9600      	str	r6, [sp, #0]
 8021ab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	f000 8127 	beq.w	8021d0a <forward_lite_dw_3x3_sssa8_ch+0x61e>
 8021abc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021abe:	9e08      	ldr	r6, [sp, #32]
 8021ac0:	9f07      	ldr	r7, [sp, #28]
 8021ac2:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021ac6:	18ca      	adds	r2, r1, r3
 8021ac8:	56c8      	ldrsb	r0, [r1, r3]
 8021aca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021acc:	1b40      	subs	r0, r0, r5
 8021ace:	eb02 044b 	add.w	r4, r2, fp, lsl #1
 8021ad2:	680b      	ldr	r3, [r1, #0]
 8021ad4:	8831      	ldrh	r1, [r6, #0]
 8021ad6:	fb11 3100 	smlabb	r1, r1, r0, r3
 8021ada:	f912 300b 	ldrsb.w	r3, [r2, fp]
 8021ade:	8870      	ldrh	r0, [r6, #2]
 8021ae0:	1b5b      	subs	r3, r3, r5
 8021ae2:	f912 201b 	ldrsb.w	r2, [r2, fp, lsl #1]
 8021ae6:	fb13 1300 	smlabb	r3, r3, r0, r1
 8021aea:	1b52      	subs	r2, r2, r5
 8021aec:	19e0      	adds	r0, r4, r7
 8021aee:	57e1      	ldrsb	r1, [r4, r7]
 8021af0:	88b4      	ldrh	r4, [r6, #4]
 8021af2:	1b49      	subs	r1, r1, r5
 8021af4:	fb12 3204 	smlabb	r2, r2, r4, r3
 8021af8:	88f3      	ldrh	r3, [r6, #6]
 8021afa:	eb00 044b 	add.w	r4, r0, fp, lsl #1
 8021afe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021b02:	f910 200b 	ldrsb.w	r2, [r0, fp]
 8021b06:	f910 301b 	ldrsb.w	r3, [r0, fp, lsl #1]
 8021b0a:	1b52      	subs	r2, r2, r5
 8021b0c:	8930      	ldrh	r0, [r6, #8]
 8021b0e:	1b5b      	subs	r3, r3, r5
 8021b10:	fb12 1200 	smlabb	r2, r2, r0, r1
 8021b14:	19e0      	adds	r0, r4, r7
 8021b16:	57e1      	ldrsb	r1, [r4, r7]
 8021b18:	8974      	ldrh	r4, [r6, #10]
 8021b1a:	1b49      	subs	r1, r1, r5
 8021b1c:	fb13 2304 	smlabb	r3, r3, r4, r2
 8021b20:	89b2      	ldrh	r2, [r6, #12]
 8021b22:	4634      	mov	r4, r6
 8021b24:	fb11 3202 	smlabb	r2, r1, r2, r3
 8021b28:	f910 100b 	ldrsb.w	r1, [r0, fp]
 8021b2c:	89f3      	ldrh	r3, [r6, #14]
 8021b2e:	1b49      	subs	r1, r1, r5
 8021b30:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8021b34:	fb11 2303 	smlabb	r3, r1, r3, r2
 8021b38:	9a05      	ldr	r2, [sp, #20]
 8021b3a:	1b40      	subs	r0, r0, r5
 8021b3c:	b229      	sxth	r1, r5
 8021b3e:	3201      	adds	r2, #1
 8021b40:	b296      	uxth	r6, r2
 8021b42:	8a22      	ldrh	r2, [r4, #16]
 8021b44:	fb10 3002 	smlabb	r0, r0, r2, r3
 8021b48:	9b00      	ldr	r3, [sp, #0]
 8021b4a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8021b4e:	2c15      	cmp	r4, #21
 8021b50:	f300 8199 	bgt.w	8021e86 <forward_lite_dw_3x3_sssa8_ch+0x79a>
 8021b54:	2c00      	cmp	r4, #0
 8021b56:	f340 81ca 	ble.w	8021eee <forward_lite_dw_3x3_sssa8_ch+0x802>
 8021b5a:	f8da 3000 	ldr.w	r3, [sl]
 8021b5e:	0040      	lsls	r0, r0, #1
 8021b60:	f8d9 2000 	ldr.w	r2, [r9]
 8021b64:	fb50 2003 	smmla	r0, r0, r3, r2
 8021b68:	4120      	asrs	r0, r4
 8021b6a:	f300 0307 	ssat	r3, #8, r0
 8021b6e:	b25b      	sxtb	r3, r3
 8021b70:	f10e 0701 	add.w	r7, lr, #1
 8021b74:	f88e 3000 	strb.w	r3, [lr]
 8021b78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	f000 80c3 	beq.w	8021d06 <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8021b80:	9b05      	ldr	r3, [sp, #20]
 8021b82:	3302      	adds	r3, #2
 8021b84:	fa1f f883 	uxth.w	r8, r3
 8021b88:	9b06      	ldr	r3, [sp, #24]
 8021b8a:	1998      	adds	r0, r3, r6
 8021b8c:	579a      	ldrsb	r2, [r3, r6]
 8021b8e:	9e08      	ldr	r6, [sp, #32]
 8021b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b92:	1a52      	subs	r2, r2, r1
 8021b94:	8a74      	ldrh	r4, [r6, #18]
 8021b96:	eb00 054b 	add.w	r5, r0, fp, lsl #1
 8021b9a:	685b      	ldr	r3, [r3, #4]
 8021b9c:	fb12 3204 	smlabb	r2, r2, r4, r3
 8021ba0:	f910 300b 	ldrsb.w	r3, [r0, fp]
 8021ba4:	8ab4      	ldrh	r4, [r6, #20]
 8021ba6:	1a5b      	subs	r3, r3, r1
 8021ba8:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8021bac:	fb13 2304 	smlabb	r3, r3, r4, r2
 8021bb0:	9a07      	ldr	r2, [sp, #28]
 8021bb2:	1a40      	subs	r0, r0, r1
 8021bb4:	18ac      	adds	r4, r5, r2
 8021bb6:	56aa      	ldrsb	r2, [r5, r2]
 8021bb8:	8af5      	ldrh	r5, [r6, #22]
 8021bba:	1a52      	subs	r2, r2, r1
 8021bbc:	fb10 3005 	smlabb	r0, r0, r5, r3
 8021bc0:	8b33      	ldrh	r3, [r6, #24]
 8021bc2:	eb04 054b 	add.w	r5, r4, fp, lsl #1
 8021bc6:	fb12 0203 	smlabb	r2, r2, r3, r0
 8021bca:	f914 300b 	ldrsb.w	r3, [r4, fp]
 8021bce:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 8021bd2:	1a5b      	subs	r3, r3, r1
 8021bd4:	8b74      	ldrh	r4, [r6, #26]
 8021bd6:	1a40      	subs	r0, r0, r1
 8021bd8:	fb13 2304 	smlabb	r3, r3, r4, r2
 8021bdc:	9a07      	ldr	r2, [sp, #28]
 8021bde:	18ac      	adds	r4, r5, r2
 8021be0:	56aa      	ldrsb	r2, [r5, r2]
 8021be2:	8bb5      	ldrh	r5, [r6, #28]
 8021be4:	1a52      	subs	r2, r2, r1
 8021be6:	fb10 3005 	smlabb	r0, r0, r5, r3
 8021bea:	8bf3      	ldrh	r3, [r6, #30]
 8021bec:	fb12 0203 	smlabb	r2, r2, r3, r0
 8021bf0:	f914 300b 	ldrsb.w	r3, [r4, fp]
 8021bf4:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 8021bf8:	1a5b      	subs	r3, r3, r1
 8021bfa:	8c34      	ldrh	r4, [r6, #32]
 8021bfc:	1a40      	subs	r0, r0, r1
 8021bfe:	fb13 2304 	smlabb	r3, r3, r4, r2
 8021c02:	8c72      	ldrh	r2, [r6, #34]	@ 0x22
 8021c04:	fb10 3002 	smlabb	r0, r0, r2, r3
 8021c08:	9b00      	ldr	r3, [sp, #0]
 8021c0a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8021c0e:	2c15      	cmp	r4, #21
 8021c10:	f300 814c 	bgt.w	8021eac <forward_lite_dw_3x3_sssa8_ch+0x7c0>
 8021c14:	2c00      	cmp	r4, #0
 8021c16:	f340 817d 	ble.w	8021f14 <forward_lite_dw_3x3_sssa8_ch+0x828>
 8021c1a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021c1e:	0040      	lsls	r0, r0, #1
 8021c20:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8021c24:	fb50 2003 	smmla	r0, r0, r3, r2
 8021c28:	4120      	asrs	r0, r4
 8021c2a:	f300 0307 	ssat	r3, #8, r0
 8021c2e:	1c7a      	adds	r2, r7, #1
 8021c30:	b25b      	sxtb	r3, r3
 8021c32:	9201      	str	r2, [sp, #4]
 8021c34:	703b      	strb	r3, [r7, #0]
 8021c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c38:	2b02      	cmp	r3, #2
 8021c3a:	d064      	beq.n	8021d06 <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8021c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c3e:	9f08      	ldr	r7, [sp, #32]
 8021c40:	6898      	ldr	r0, [r3, #8]
 8021c42:	9b00      	ldr	r3, [sp, #0]
 8021c44:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8021c48:	9b06      	ldr	r3, [sp, #24]
 8021c4a:	2e15      	cmp	r6, #21
 8021c4c:	f913 2008 	ldrsb.w	r2, [r3, r8]
 8021c50:	eb03 0408 	add.w	r4, r3, r8
 8021c54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8021c56:	eba2 0201 	sub.w	r2, r2, r1
 8021c5a:	f914 501b 	ldrsb.w	r5, [r4, fp, lsl #1]
 8021c5e:	fb13 0302 	smlabb	r3, r3, r2, r0
 8021c62:	f914 000b 	ldrsb.w	r0, [r4, fp]
 8021c66:	eb04 024b 	add.w	r2, r4, fp, lsl #1
 8021c6a:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8021c6c:	eba0 0001 	sub.w	r0, r0, r1
 8021c70:	eba5 0501 	sub.w	r5, r5, r1
 8021c74:	fb14 3400 	smlabb	r4, r4, r0, r3
 8021c78:	9b07      	ldr	r3, [sp, #28]
 8021c7a:	eb02 0003 	add.w	r0, r2, r3
 8021c7e:	56d2      	ldrsb	r2, [r2, r3]
 8021c80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8021c82:	eba2 0201 	sub.w	r2, r2, r1
 8021c86:	fb13 4305 	smlabb	r3, r3, r5, r4
 8021c8a:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8021c8c:	f910 500b 	ldrsb.w	r5, [r0, fp]
 8021c90:	fb14 3302 	smlabb	r3, r4, r2, r3
 8021c94:	eb00 024b 	add.w	r2, r0, fp, lsl #1
 8021c98:	eba5 0501 	sub.w	r5, r5, r1
 8021c9c:	f910 401b 	ldrsb.w	r4, [r0, fp, lsl #1]
 8021ca0:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8021ca2:	eba4 0401 	sub.w	r4, r4, r1
 8021ca6:	fb10 3005 	smlabb	r0, r0, r5, r3
 8021caa:	9b07      	ldr	r3, [sp, #28]
 8021cac:	eb02 0503 	add.w	r5, r2, r3
 8021cb0:	56d2      	ldrsb	r2, [r2, r3]
 8021cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8021cb4:	eba2 0201 	sub.w	r2, r2, r1
 8021cb8:	fb13 0304 	smlabb	r3, r3, r4, r0
 8021cbc:	8e38      	ldrh	r0, [r7, #48]	@ 0x30
 8021cbe:	fb10 3302 	smlabb	r3, r0, r2, r3
 8021cc2:	f915 200b 	ldrsb.w	r2, [r5, fp]
 8021cc6:	f915 001b 	ldrsb.w	r0, [r5, fp, lsl #1]
 8021cca:	eba2 0201 	sub.w	r2, r2, r1
 8021cce:	eba0 0001 	sub.w	r0, r0, r1
 8021cd2:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8021cd4:	fb11 3102 	smlabb	r1, r1, r2, r3
 8021cd8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8021cda:	fb13 1300 	smlabb	r3, r3, r0, r1
 8021cde:	f340 80f8 	ble.w	8021ed2 <forward_lite_dw_3x3_sssa8_ch+0x7e6>
 8021ce2:	1eb1      	subs	r1, r6, #2
 8021ce4:	1e74      	subs	r4, r6, #1
 8021ce6:	2501      	movs	r5, #1
 8021ce8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8021cec:	f8da 2008 	ldr.w	r2, [sl, #8]
 8021cf0:	fa05 f101 	lsl.w	r1, r5, r1
 8021cf4:	fb53 1202 	smmla	r2, r3, r2, r1
 8021cf8:	4122      	asrs	r2, r4
 8021cfa:	4402      	add	r2, r0
 8021cfc:	f302 0307 	ssat	r3, #8, r2
 8021d00:	b25b      	sxtb	r3, r3
 8021d02:	9a01      	ldr	r2, [sp, #4]
 8021d04:	7013      	strb	r3, [r2, #0]
 8021d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021d08:	449e      	add	lr, r3
 8021d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d0c:	9a06      	ldr	r2, [sp, #24]
 8021d0e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8021d10:	3301      	adds	r3, #1
 8021d12:	440a      	add	r2, r1
 8021d14:	b21b      	sxth	r3, r3
 8021d16:	9206      	str	r2, [sp, #24]
 8021d18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021d1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8021d1c:	429a      	cmp	r2, r3
 8021d1e:	f73f ad6b 	bgt.w	80217f8 <forward_lite_dw_3x3_sssa8_ch+0x10c>
 8021d22:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021d24:	46d8      	mov	r8, fp
 8021d26:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021d28:	46f3      	mov	fp, lr
 8021d2a:	3301      	adds	r3, #1
 8021d2c:	b21b      	sxth	r3, r3
 8021d2e:	428b      	cmp	r3, r1
 8021d30:	9316      	str	r3, [sp, #88]	@ 0x58
 8021d32:	f6ff ad58 	blt.w	80217e6 <forward_lite_dw_3x3_sssa8_ch+0xfa>
 8021d36:	b01d      	add	sp, #116	@ 0x74
 8021d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d3c:	2d00      	cmp	r5, #0
 8021d3e:	dd53      	ble.n	8021de8 <forward_lite_dw_3x3_sssa8_ch+0x6fc>
 8021d40:	683a      	ldr	r2, [r7, #0]
 8021d42:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8021d46:	6809      	ldr	r1, [r1, #0]
 8021d48:	fb56 1602 	smmla	r6, r6, r2, r1
 8021d4c:	9a02      	ldr	r2, [sp, #8]
 8021d4e:	412e      	asrs	r6, r5
 8021d50:	9803      	ldr	r0, [sp, #12]
 8021d52:	f102 010c 	add.w	r1, r2, #12
 8021d56:	9a01      	ldr	r2, [sp, #4]
 8021d58:	f100 0e0c 	add.w	lr, r0, #12
 8021d5c:	3206      	adds	r2, #6
 8021d5e:	f306 0607 	ssat	r6, #8, r6
 8021d62:	b276      	sxtb	r6, r6
 8021d64:	9800      	ldr	r0, [sp, #0]
 8021d66:	7026      	strb	r6, [r4, #0]
 8021d68:	1cc5      	adds	r5, r0, #3
 8021d6a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8021d6e:	2e15      	cmp	r6, #21
 8021d70:	f73f ae6c 	bgt.w	8021a4c <forward_lite_dw_3x3_sssa8_ch+0x360>
 8021d74:	2e00      	cmp	r6, #0
 8021d76:	dd70      	ble.n	8021e5a <forward_lite_dw_3x3_sssa8_ch+0x76e>
 8021d78:	9c03      	ldr	r4, [sp, #12]
 8021d7a:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8021d7e:	9a02      	ldr	r2, [sp, #8]
 8021d80:	9f01      	ldr	r7, [sp, #4]
 8021d82:	3410      	adds	r4, #16
 8021d84:	3210      	adds	r2, #16
 8021d86:	f8de e000 	ldr.w	lr, [lr]
 8021d8a:	3708      	adds	r7, #8
 8021d8c:	6809      	ldr	r1, [r1, #0]
 8021d8e:	4691      	mov	r9, r2
 8021d90:	940c      	str	r4, [sp, #48]	@ 0x30
 8021d92:	fb58 180e 	smmla	r8, r8, lr, r1
 8021d96:	fa48 f806 	asr.w	r8, r8, r6
 8021d9a:	463e      	mov	r6, r7
 8021d9c:	e66d      	b.n	8021a7a <forward_lite_dw_3x3_sssa8_ch+0x38e>
 8021d9e:	2900      	cmp	r1, #0
 8021da0:	dd42      	ble.n	8021e28 <forward_lite_dw_3x3_sssa8_ch+0x73c>
 8021da2:	9803      	ldr	r0, [sp, #12]
 8021da4:	0062      	lsls	r2, r4, #1
 8021da6:	682d      	ldr	r5, [r5, #0]
 8021da8:	683c      	ldr	r4, [r7, #0]
 8021daa:	f100 0708 	add.w	r7, r0, #8
 8021dae:	fb52 5204 	smmla	r2, r2, r4, r5
 8021db2:	9801      	ldr	r0, [sp, #4]
 8021db4:	410a      	asrs	r2, r1
 8021db6:	9902      	ldr	r1, [sp, #8]
 8021db8:	f100 0e04 	add.w	lr, r0, #4
 8021dbc:	3108      	adds	r1, #8
 8021dbe:	f302 0207 	ssat	r2, #8, r2
 8021dc2:	9800      	ldr	r0, [sp, #0]
 8021dc4:	b252      	sxtb	r2, r2
 8021dc6:	1c84      	adds	r4, r0, #2
 8021dc8:	e61d      	b.n	8021a06 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8021dca:	2900      	cmp	r1, #0
 8021dcc:	dd1d      	ble.n	8021e0a <forward_lite_dw_3x3_sssa8_ch+0x71e>
 8021dce:	0072      	lsls	r2, r6, #1
 8021dd0:	f100 0e02 	add.w	lr, r0, #2
 8021dd4:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 8021dd8:	f857 6b04 	ldr.w	r6, [r7], #4
 8021ddc:	f855 8b04 	ldr.w	r8, [r5], #4
 8021de0:	fb52 8206 	smmla	r2, r2, r6, r8
 8021de4:	410a      	asrs	r2, r1
 8021de6:	e5eb      	b.n	80219c0 <forward_lite_dw_3x3_sssa8_ch+0x2d4>
 8021de8:	9a01      	ldr	r2, [sp, #4]
 8021dea:	f1c5 0501 	rsb	r5, r5, #1
 8021dee:	3206      	adds	r2, #6
 8021df0:	fa09 f505 	lsl.w	r5, r9, r5
 8021df4:	f305 051f 	ssat	r5, #32, r5
 8021df8:	9803      	ldr	r0, [sp, #12]
 8021dfa:	683e      	ldr	r6, [r7, #0]
 8021dfc:	f100 0e0c 	add.w	lr, r0, #12
 8021e00:	fb55 f516 	smmulr	r5, r5, r6
 8021e04:	680e      	ldr	r6, [r1, #0]
 8021e06:	442e      	add	r6, r5
 8021e08:	e613      	b.n	8021a32 <forward_lite_dw_3x3_sssa8_ch+0x346>
 8021e0a:	f1c1 0101 	rsb	r1, r1, #1
 8021e0e:	f100 0e02 	add.w	lr, r0, #2
 8021e12:	fa06 f101 	lsl.w	r1, r6, r1
 8021e16:	f301 011f 	ssat	r1, #32, r1
 8021e1a:	9f03      	ldr	r7, [sp, #12]
 8021e1c:	f857 2b04 	ldr.w	r2, [r7], #4
 8021e20:	fb51 f212 	smmulr	r2, r1, r2
 8021e24:	9d02      	ldr	r5, [sp, #8]
 8021e26:	e5c8      	b.n	80219ba <forward_lite_dw_3x3_sssa8_ch+0x2ce>
 8021e28:	9a01      	ldr	r2, [sp, #4]
 8021e2a:	f1c1 0101 	rsb	r1, r1, #1
 8021e2e:	f102 0e04 	add.w	lr, r2, #4
 8021e32:	fa04 f101 	lsl.w	r1, r4, r1
 8021e36:	f301 011f 	ssat	r1, #32, r1
 8021e3a:	9803      	ldr	r0, [sp, #12]
 8021e3c:	683a      	ldr	r2, [r7, #0]
 8021e3e:	f100 0708 	add.w	r7, r0, #8
 8021e42:	fb51 f112 	smmulr	r1, r1, r2
 8021e46:	682a      	ldr	r2, [r5, #0]
 8021e48:	440a      	add	r2, r1
 8021e4a:	9902      	ldr	r1, [sp, #8]
 8021e4c:	3108      	adds	r1, #8
 8021e4e:	f302 0207 	ssat	r2, #8, r2
 8021e52:	9800      	ldr	r0, [sp, #0]
 8021e54:	b252      	sxtb	r2, r2
 8021e56:	1c84      	adds	r4, r0, #2
 8021e58:	e5d5      	b.n	8021a06 <forward_lite_dw_3x3_sssa8_ch+0x31a>
 8021e5a:	9f01      	ldr	r7, [sp, #4]
 8021e5c:	f1c6 0201 	rsb	r2, r6, #1
 8021e60:	3708      	adds	r7, #8
 8021e62:	fa0a f202 	lsl.w	r2, sl, r2
 8021e66:	463e      	mov	r6, r7
 8021e68:	f302 021f 	ssat	r2, #32, r2
 8021e6c:	9c03      	ldr	r4, [sp, #12]
 8021e6e:	f8de e000 	ldr.w	lr, [lr]
 8021e72:	3410      	adds	r4, #16
 8021e74:	940c      	str	r4, [sp, #48]	@ 0x30
 8021e76:	fb52 fe1e 	smmulr	lr, r2, lr
 8021e7a:	9a02      	ldr	r2, [sp, #8]
 8021e7c:	6809      	ldr	r1, [r1, #0]
 8021e7e:	3210      	adds	r2, #16
 8021e80:	eb0e 0801 	add.w	r8, lr, r1
 8021e84:	e5f8      	b.n	8021a78 <forward_lite_dw_3x3_sssa8_ch+0x38c>
 8021e86:	1ea5      	subs	r5, r4, #2
 8021e88:	2301      	movs	r3, #1
 8021e8a:	3c01      	subs	r4, #1
 8021e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8021e90:	fa03 f505 	lsl.w	r5, r3, r5
 8021e94:	f8da 3000 	ldr.w	r3, [sl]
 8021e98:	fb50 5303 	smmla	r3, r0, r3, r5
 8021e9c:	4123      	asrs	r3, r4
 8021e9e:	4413      	add	r3, r2
 8021ea0:	f303 0307 	ssat	r3, #8, r3
 8021ea4:	b25b      	sxtb	r3, r3
 8021ea6:	f10e 0701 	add.w	r7, lr, #1
 8021eaa:	e663      	b.n	8021b74 <forward_lite_dw_3x3_sssa8_ch+0x488>
 8021eac:	1ea5      	subs	r5, r4, #2
 8021eae:	2301      	movs	r3, #1
 8021eb0:	3c01      	subs	r4, #1
 8021eb2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8021eb6:	fa03 f505 	lsl.w	r5, r3, r5
 8021eba:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021ebe:	fb50 5303 	smmla	r3, r0, r3, r5
 8021ec2:	4123      	asrs	r3, r4
 8021ec4:	4413      	add	r3, r2
 8021ec6:	f303 0307 	ssat	r3, #8, r3
 8021eca:	1c7a      	adds	r2, r7, #1
 8021ecc:	b25b      	sxtb	r3, r3
 8021ece:	9201      	str	r2, [sp, #4]
 8021ed0:	e6b0      	b.n	8021c34 <forward_lite_dw_3x3_sssa8_ch+0x548>
 8021ed2:	2e00      	cmp	r6, #0
 8021ed4:	dd37      	ble.n	8021f46 <forward_lite_dw_3x3_sssa8_ch+0x85a>
 8021ed6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8021eda:	005b      	lsls	r3, r3, #1
 8021edc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8021ee0:	fb53 1302 	smmla	r3, r3, r2, r1
 8021ee4:	4133      	asrs	r3, r6
 8021ee6:	f303 0307 	ssat	r3, #8, r3
 8021eea:	b25b      	sxtb	r3, r3
 8021eec:	e709      	b.n	8021d02 <forward_lite_dw_3x3_sssa8_ch+0x616>
 8021eee:	f1c4 0201 	rsb	r2, r4, #1
 8021ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8021ef6:	f302 021f 	ssat	r2, #32, r2
 8021efa:	f8da 3000 	ldr.w	r3, [sl]
 8021efe:	fb52 f213 	smmulr	r2, r2, r3
 8021f02:	f8d9 3000 	ldr.w	r3, [r9]
 8021f06:	4413      	add	r3, r2
 8021f08:	f303 0307 	ssat	r3, #8, r3
 8021f0c:	b25b      	sxtb	r3, r3
 8021f0e:	f10e 0701 	add.w	r7, lr, #1
 8021f12:	e62f      	b.n	8021b74 <forward_lite_dw_3x3_sssa8_ch+0x488>
 8021f14:	f1c4 0301 	rsb	r3, r4, #1
 8021f18:	fa00 f203 	lsl.w	r2, r0, r3
 8021f1c:	f302 021f 	ssat	r2, #32, r2
 8021f20:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021f24:	fb52 f213 	smmulr	r2, r2, r3
 8021f28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021f2c:	e7ca      	b.n	8021ec4 <forward_lite_dw_3x3_sssa8_ch+0x7d8>
 8021f2e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021f30:	f8dd a0c8 	ldr.w	sl, [sp, #200]	@ 0xc8
 8021f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f36:	e9dd 3910 	ldrd	r3, r9, [sp, #64]	@ 0x40
 8021f3a:	9308      	str	r3, [sp, #32]
 8021f3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021f3e:	9300      	str	r3, [sp, #0]
 8021f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021f42:	9305      	str	r3, [sp, #20]
 8021f44:	e5b6      	b.n	8021ab4 <forward_lite_dw_3x3_sssa8_ch+0x3c8>
 8021f46:	f1c6 0601 	rsb	r6, r6, #1
 8021f4a:	40b3      	lsls	r3, r6
 8021f4c:	f303 031f 	ssat	r3, #32, r3
 8021f50:	f8da 2008 	ldr.w	r2, [sl, #8]
 8021f54:	fb53 f212 	smmulr	r2, r3, r2
 8021f58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021f5c:	4413      	add	r3, r2
 8021f5e:	f303 0307 	ssat	r3, #8, r3
 8021f62:	b25b      	sxtb	r3, r3
 8021f64:	e6cd      	b.n	8021d02 <forward_lite_dw_3x3_sssa8_ch+0x616>
 8021f66:	42a1      	cmp	r1, r4
 8021f68:	f840 7c04 	str.w	r7, [r0, #-4]
 8021f6c:	f100 0004 	add.w	r0, r0, #4
 8021f70:	f6ff abfb 	blt.w	802176a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8021f74:	e40d      	b.n	8021792 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 8021f76:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8021f78:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8021f7c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8021f80:	9010      	str	r0, [sp, #64]	@ 0x40
 8021f82:	f000 8145 	beq.w	8022210 <forward_lite_dw_3x3_sssa8_ch+0xb24>
 8021f86:	f10c 33ff 	add.w	r3, ip, #4294967295
 8021f8a:	f10e 0204 	add.w	r2, lr, #4
 8021f8e:	4671      	mov	r1, lr
 8021f90:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8021f94:	b29b      	uxth	r3, r3
 8021f96:	eba9 0604 	sub.w	r6, r9, r4
 8021f9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021f9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8021fa2:	9300      	str	r3, [sp, #0]
 8021fa4:	eb0e 0304 	add.w	r3, lr, r4
 8021fa8:	9203      	str	r2, [sp, #12]
 8021faa:	00a2      	lsls	r2, r4, #2
 8021fac:	9202      	str	r2, [sp, #8]
 8021fae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8021fb2:	9201      	str	r2, [sp, #4]
 8021fb4:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021fb6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8021fb8:	f8d1 a000 	ldr.w	sl, [r1]
 8021fbc:	681a      	ldr	r2, [r3, #0]
 8021fbe:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8021fc2:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8021fc6:	f105 0a04 	add.w	sl, r5, #4
 8021fca:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8021fce:	fa2f fa80 	sxtb16	sl, r0
 8021fd2:	f8c5 a000 	str.w	sl, [r5]
 8021fd6:	fa2f f090 	sxtb16	r0, r0, ror #8
 8021fda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8021fdc:	6028      	str	r0, [r5, #0]
 8021fde:	3504      	adds	r5, #4
 8021fe0:	951b      	str	r5, [sp, #108]	@ 0x6c
 8021fe2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8021fe4:	fa2f f582 	sxtb16	r5, r2
 8021fe8:	3004      	adds	r0, #4
 8021fea:	f840 5c04 	str.w	r5, [r0, #-4]
 8021fee:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021ff0:	fa2f f292 	sxtb16	r2, r2, ror #8
 8021ff4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8021ff6:	6002      	str	r2, [r0, #0]
 8021ff8:	3004      	adds	r0, #4
 8021ffa:	f858 a001 	ldr.w	sl, [r8, r1]
 8021ffe:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022000:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8022002:	f858 2003 	ldr.w	r2, [r8, r3]
 8022006:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 802200a:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 802200e:	f105 0a04 	add.w	sl, r5, #4
 8022012:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8022016:	fa2f fa80 	sxtb16	sl, r0
 802201a:	f8c5 a000 	str.w	sl, [r5]
 802201e:	fa2f f090 	sxtb16	r0, r0, ror #8
 8022022:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8022024:	6028      	str	r0, [r5, #0]
 8022026:	3504      	adds	r5, #4
 8022028:	951b      	str	r5, [sp, #108]	@ 0x6c
 802202a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802202c:	fa2f f582 	sxtb16	r5, r2
 8022030:	3004      	adds	r0, #4
 8022032:	f840 5c04 	str.w	r5, [r0, #-4]
 8022036:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022038:	fa2f f292 	sxtb16	r2, r2, ror #8
 802203c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802203e:	6002      	str	r2, [r0, #0]
 8022040:	3004      	adds	r0, #4
 8022042:	9a03      	ldr	r2, [sp, #12]
 8022044:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022046:	f852 a003 	ldr.w	sl, [r2, r3]
 802204a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802204c:	9a02      	ldr	r2, [sp, #8]
 802204e:	58d2      	ldr	r2, [r2, r3]
 8022050:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8022054:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8022058:	f105 0a04 	add.w	sl, r5, #4
 802205c:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8022060:	fa2f fa80 	sxtb16	sl, r0
 8022064:	f8c5 a000 	str.w	sl, [r5]
 8022068:	fa2f f090 	sxtb16	r0, r0, ror #8
 802206c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802206e:	6028      	str	r0, [r5, #0]
 8022070:	3504      	adds	r5, #4
 8022072:	951b      	str	r5, [sp, #108]	@ 0x6c
 8022074:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022076:	fa2f f582 	sxtb16	r5, r2
 802207a:	3004      	adds	r0, #4
 802207c:	f840 5c04 	str.w	r5, [r0, #-4]
 8022080:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022082:	fa2f f292 	sxtb16	r2, r2, ror #8
 8022086:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022088:	6002      	str	r2, [r0, #0]
 802208a:	3004      	adds	r0, #4
 802208c:	9a01      	ldr	r2, [sp, #4]
 802208e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022090:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8022092:	f852 a003 	ldr.w	sl, [r2, r3]
 8022096:	5872      	ldr	r2, [r6, r1]
 8022098:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 802209c:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 80220a0:	f105 0a04 	add.w	sl, r5, #4
 80220a4:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 80220a8:	fa2f fa80 	sxtb16	sl, r0
 80220ac:	f8c5 a000 	str.w	sl, [r5]
 80220b0:	fa2f f090 	sxtb16	r0, r0, ror #8
 80220b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80220b6:	6028      	str	r0, [r5, #0]
 80220b8:	3504      	adds	r5, #4
 80220ba:	951b      	str	r5, [sp, #108]	@ 0x6c
 80220bc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80220be:	fa2f f582 	sxtb16	r5, r2
 80220c2:	3004      	adds	r0, #4
 80220c4:	f840 5c04 	str.w	r5, [r0, #-4]
 80220c8:	901b      	str	r0, [sp, #108]	@ 0x6c
 80220ca:	fa2f f292 	sxtb16	r2, r2, ror #8
 80220ce:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80220d0:	6002      	str	r2, [r0, #0]
 80220d2:	3004      	adds	r0, #4
 80220d4:	58f2      	ldr	r2, [r6, r3]
 80220d6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80220d8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80220da:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 80220de:	fa2f f585 	sxtb16	r5, r5
 80220e2:	8005      	strh	r5, [r0, #0]
 80220e4:	0c2d      	lsrs	r5, r5, #16
 80220e6:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 80220ea:	8045      	strh	r5, [r0, #2]
 80220ec:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 80220f0:	8082      	strh	r2, [r0, #4]
 80220f2:	0c12      	lsrs	r2, r2, #16
 80220f4:	3104      	adds	r1, #4
 80220f6:	3008      	adds	r0, #8
 80220f8:	f820 2c02 	strh.w	r2, [r0, #-2]
 80220fc:	3304      	adds	r3, #4
 80220fe:	9a00      	ldr	r2, [sp, #0]
 8022100:	428a      	cmp	r2, r1
 8022102:	f47f af57 	bne.w	8021fb4 <forward_lite_dw_3x3_sssa8_ch+0x8c8>
 8022106:	ea4f 038c 	mov.w	r3, ip, lsl #2
 802210a:	4602      	mov	r2, r0
 802210c:	fa1f fc83 	uxth.w	ip, r3
 8022110:	f014 0303 	ands.w	r3, r4, #3
 8022114:	f43f ab0d 	beq.w	8021732 <forward_lite_dw_3x3_sssa8_ch+0x46>
 8022118:	3b01      	subs	r3, #1
 802211a:	f10c 0101 	add.w	r1, ip, #1
 802211e:	b29e      	uxth	r6, r3
 8022120:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 8022124:	b288      	uxth	r0, r1
 8022126:	8013      	strh	r3, [r2, #0]
 8022128:	eb0e 030c 	add.w	r3, lr, ip
 802212c:	5719      	ldrsb	r1, [r3, r4]
 802212e:	8051      	strh	r1, [r2, #2]
 8022130:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8022134:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8022138:	8093      	strh	r3, [r2, #4]
 802213a:	570b      	ldrsb	r3, [r1, r4]
 802213c:	80d3      	strh	r3, [r2, #6]
 802213e:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8022142:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8022146:	8111      	strh	r1, [r2, #8]
 8022148:	5719      	ldrsb	r1, [r3, r4]
 802214a:	8151      	strh	r1, [r2, #10]
 802214c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8022150:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8022154:	8193      	strh	r3, [r2, #12]
 8022156:	570b      	ldrsb	r3, [r1, r4]
 8022158:	81d3      	strh	r3, [r2, #14]
 802215a:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 802215e:	8213      	strh	r3, [r2, #16]
 8022160:	2e00      	cmp	r6, #0
 8022162:	d043      	beq.n	80221ec <forward_lite_dw_3x3_sssa8_ch+0xb00>
 8022164:	f91e 3000 	ldrsb.w	r3, [lr, r0]
 8022168:	f10c 0c02 	add.w	ip, ip, #2
 802216c:	2e01      	cmp	r6, #1
 802216e:	8253      	strh	r3, [r2, #18]
 8022170:	eb0e 0300 	add.w	r3, lr, r0
 8022174:	fa1f f58c 	uxth.w	r5, ip
 8022178:	5719      	ldrsb	r1, [r3, r4]
 802217a:	8291      	strh	r1, [r2, #20]
 802217c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8022180:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8022184:	82d3      	strh	r3, [r2, #22]
 8022186:	570b      	ldrsb	r3, [r1, r4]
 8022188:	8313      	strh	r3, [r2, #24]
 802218a:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 802218e:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8022192:	8351      	strh	r1, [r2, #26]
 8022194:	5719      	ldrsb	r1, [r3, r4]
 8022196:	8391      	strh	r1, [r2, #28]
 8022198:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 802219c:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 80221a0:	83d3      	strh	r3, [r2, #30]
 80221a2:	570b      	ldrsb	r3, [r1, r4]
 80221a4:	8413      	strh	r3, [r2, #32]
 80221a6:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 80221aa:	8453      	strh	r3, [r2, #34]	@ 0x22
 80221ac:	d01e      	beq.n	80221ec <forward_lite_dw_3x3_sssa8_ch+0xb00>
 80221ae:	f91e 3005 	ldrsb.w	r3, [lr, r5]
 80221b2:	eb0e 0105 	add.w	r1, lr, r5
 80221b6:	8493      	strh	r3, [r2, #36]	@ 0x24
 80221b8:	570b      	ldrsb	r3, [r1, r4]
 80221ba:	84d3      	strh	r3, [r2, #38]	@ 0x26
 80221bc:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 80221c0:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80221c4:	8511      	strh	r1, [r2, #40]	@ 0x28
 80221c6:	5719      	ldrsb	r1, [r3, r4]
 80221c8:	8551      	strh	r1, [r2, #42]	@ 0x2a
 80221ca:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80221ce:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 80221d2:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80221d4:	570b      	ldrsb	r3, [r1, r4]
 80221d6:	85d3      	strh	r3, [r2, #46]	@ 0x2e
 80221d8:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 80221dc:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80221e0:	8611      	strh	r1, [r2, #48]	@ 0x30
 80221e2:	5719      	ldrsb	r1, [r3, r4]
 80221e4:	8651      	strh	r1, [r2, #50]	@ 0x32
 80221e6:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 80221ea:	8693      	strh	r3, [r2, #52]	@ 0x34
 80221ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80221ee:	44a1      	add	r9, r4
 80221f0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80221f2:	4621      	mov	r1, r4
 80221f4:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80221f8:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80221fa:	461d      	mov	r5, r3
 80221fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80221fe:	f001 f8c1 	bl	8023384 <align_factor_ch>
 8022202:	f06f 0315 	mvn.w	r3, #21
 8022206:	fb03 5304 	mla	r3, r3, r4, r5
 802220a:	9311      	str	r3, [sp, #68]	@ 0x44
 802220c:	f7ff baa6 	b.w	802175c <forward_lite_dw_3x3_sssa8_ch+0x70>
 8022210:	4602      	mov	r2, r0
 8022212:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8022216:	e77b      	b.n	8022110 <forward_lite_dw_3x3_sssa8_ch+0xa24>

08022218 <forward_lite_pw_sssa8_ch>:
 8022218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802221c:	b09b      	sub	sp, #108	@ 0x6c
 802221e:	460c      	mov	r4, r1
 8022220:	2b02      	cmp	r3, #2
 8022222:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 8022226:	9215      	str	r2, [sp, #84]	@ 0x54
 8022228:	9110      	str	r1, [sp, #64]	@ 0x40
 802222a:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	@ 0xa4
 802222e:	f8bd 2090 	ldrh.w	r2, [sp, #144]	@ 0x90
 8022232:	9111      	str	r1, [sp, #68]	@ 0x44
 8022234:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	@ 0xa8
 8022238:	f8bd a094 	ldrh.w	sl, [sp, #148]	@ 0x94
 802223c:	9119      	str	r1, [sp, #100]	@ 0x64
 802223e:	f89d 10b0 	ldrb.w	r1, [sp, #176]	@ 0xb0
 8022242:	9017      	str	r0, [sp, #92]	@ 0x5c
 8022244:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022246:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	@ 0xb8
 802224a:	9118      	str	r1, [sp, #96]	@ 0x60
 802224c:	f040 8097 	bne.w	802237e <forward_lite_pw_sssa8_ch+0x166>
 8022250:	2a02      	cmp	r2, #2
 8022252:	f040 8094 	bne.w	802237e <forward_lite_pw_sssa8_ch+0x166>
 8022256:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022258:	2b00      	cmp	r3, #0
 802225a:	f000 81c3 	beq.w	80225e4 <forward_lite_pw_sssa8_ch+0x3cc>
 802225e:	1e63      	subs	r3, r4, #1
 8022260:	ea4f 079a 	mov.w	r7, sl, lsr #2
 8022264:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8022268:	f00a 0503 	and.w	r5, sl, #3
 802226c:	085b      	lsrs	r3, r3, #1
 802226e:	f107 38ff 	add.w	r8, r7, #4294967295
 8022272:	00b9      	lsls	r1, r7, #2
 8022274:	900e      	str	r0, [sp, #56]	@ 0x38
 8022276:	fb0a f303 	mul.w	r3, sl, r3
 802227a:	9316      	str	r3, [sp, #88]	@ 0x58
 802227c:	fb04 f30a 	mul.w	r3, r4, sl
 8022280:	005b      	lsls	r3, r3, #1
 8022282:	9314      	str	r3, [sp, #80]	@ 0x50
 8022284:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022288:	f027 0901 	bic.w	r9, r7, #1
 802228c:	930d      	str	r3, [sp, #52]	@ 0x34
 802228e:	2300      	movs	r3, #0
 8022290:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 8022294:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022296:	9312      	str	r3, [sp, #72]	@ 0x48
 8022298:	2c00      	cmp	r4, #0
 802229a:	d047      	beq.n	802232c <forward_lite_pw_sssa8_ch+0x114>
 802229c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802229e:	f04f 0c00 	mov.w	ip, #0
 80222a2:	b34f      	cbz	r7, 80222f8 <forward_lite_pw_sssa8_ch+0xe0>
 80222a4:	ea43 0200 	orr.w	r2, r3, r0
 80222a8:	f1b8 0f08 	cmp.w	r8, #8
 80222ac:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80222b0:	bf94      	ite	ls
 80222b2:	2600      	movls	r6, #0
 80222b4:	2601      	movhi	r6, #1
 80222b6:	2a00      	cmp	r2, #0
 80222b8:	bf18      	it	ne
 80222ba:	2600      	movne	r6, #0
 80222bc:	2e00      	cmp	r6, #0
 80222be:	f000 8145 	beq.w	802254c <forward_lite_pw_sssa8_ch+0x334>
 80222c2:	43da      	mvns	r2, r3
 80222c4:	4402      	add	r2, r0
 80222c6:	2a06      	cmp	r2, #6
 80222c8:	f240 8140 	bls.w	802254c <forward_lite_pw_sssa8_ch+0x334>
 80222cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80222ce:	f1a3 0608 	sub.w	r6, r3, #8
 80222d2:	eb00 0b02 	add.w	fp, r0, r2
 80222d6:	4602      	mov	r2, r0
 80222d8:	3608      	adds	r6, #8
 80222da:	ed96 7b00 	vldr	d7, [r6]
 80222de:	eca2 7b02 	vstmia	r2!, {d7}
 80222e2:	4593      	cmp	fp, r2
 80222e4:	d1f8      	bne.n	80222d8 <forward_lite_pw_sssa8_ch+0xc0>
 80222e6:	454f      	cmp	r7, r9
 80222e8:	bf1c      	itt	ne
 80222ea:	f853 200e 	ldrne.w	r2, [r3, lr]
 80222ee:	f840 200e 	strne.w	r2, [r0, lr]
 80222f2:	185a      	adds	r2, r3, r1
 80222f4:	4613      	mov	r3, r2
 80222f6:	4408      	add	r0, r1
 80222f8:	b175      	cbz	r5, 8022318 <forward_lite_pw_sssa8_ch+0x100>
 80222fa:	f993 2000 	ldrsb.w	r2, [r3]
 80222fe:	2d01      	cmp	r5, #1
 8022300:	7002      	strb	r2, [r0, #0]
 8022302:	d007      	beq.n	8022314 <forward_lite_pw_sssa8_ch+0xfc>
 8022304:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8022308:	2d03      	cmp	r5, #3
 802230a:	7042      	strb	r2, [r0, #1]
 802230c:	d102      	bne.n	8022314 <forward_lite_pw_sssa8_ch+0xfc>
 802230e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8022312:	7082      	strb	r2, [r0, #2]
 8022314:	442b      	add	r3, r5
 8022316:	4428      	add	r0, r5
 8022318:	f10c 0c02 	add.w	ip, ip, #2
 802231c:	4453      	add	r3, sl
 802231e:	45a4      	cmp	ip, r4
 8022320:	dbbf      	blt.n	80222a2 <forward_lite_pw_sssa8_ch+0x8a>
 8022322:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022324:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022326:	4453      	add	r3, sl
 8022328:	18d3      	adds	r3, r2, r3
 802232a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802232c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802232e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8022330:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022332:	4432      	add	r2, r6
 8022334:	3302      	adds	r3, #2
 8022336:	920e      	str	r2, [sp, #56]	@ 0x38
 8022338:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802233a:	9312      	str	r3, [sp, #72]	@ 0x48
 802233c:	4293      	cmp	r3, r2
 802233e:	dbab      	blt.n	8022298 <forward_lite_pw_sssa8_ch+0x80>
 8022340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022342:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8022344:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8022346:	fb06 f304 	mul.w	r3, r6, r4
 802234a:	3401      	adds	r4, #1
 802234c:	1a85      	subs	r5, r0, r2
 802234e:	edcd 0a0e 	vstr	s1, [sp, #56]	@ 0x38
 8022352:	ed8d 0a0d 	vstr	s0, [sp, #52]	@ 0x34
 8022356:	ea4f 0864 	mov.w	r8, r4, asr #1
 802235a:	fb0a 5503 	mla	r5, sl, r3, r5
 802235e:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8022362:	4629      	mov	r1, r5
 8022364:	f001 fd06 	bl	8023d74 <st_int8_copy>
 8022368:	1c73      	adds	r3, r6, #1
 802236a:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 802236e:	ea4f 0b63 	mov.w	fp, r3, asr #1
 8022372:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8022376:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 802237a:	9315      	str	r3, [sp, #84]	@ 0x54
 802237c:	e003      	b.n	8022386 <forward_lite_pw_sssa8_ch+0x16e>
 802237e:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 8022382:	46a0      	mov	r8, r4
 8022384:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8022386:	fb08 f20b 	mul.w	r2, r8, fp
 802238a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802238c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802238e:	920d      	str	r2, [sp, #52]	@ 0x34
 8022390:	fb01 3302 	mla	r3, r1, r2, r3
 8022394:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022396:	4299      	cmp	r1, r3
 8022398:	d205      	bcs.n	80223a6 <forward_lite_pw_sssa8_ch+0x18e>
 802239a:	fb02 130a 	mla	r3, r2, sl, r1
 802239e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80223a0:	429a      	cmp	r2, r3
 80223a2:	f0c0 80cb 	bcc.w	802253c <forward_lite_pw_sssa8_ch+0x324>
 80223a6:	2301      	movs	r3, #1
 80223a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80223aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80223ac:	2701      	movs	r7, #1
 80223ae:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80223b0:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80223b2:	4631      	mov	r1, r6
 80223b4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 80223b8:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80223ba:	eb02 0903 	add.w	r9, r2, r3
 80223be:	464b      	mov	r3, r9
 80223c0:	f000 ffe0 	bl	8023384 <align_factor_ch>
 80223c4:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80223c6:	4633      	mov	r3, r6
 80223c8:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80223ca:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80223ce:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80223d2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80223d4:	b1eb      	cbz	r3, 8022412 <forward_lite_pw_sssa8_ch+0x1fa>
 80223d6:	46a4      	mov	ip, r4
 80223d8:	f1a9 0002 	sub.w	r0, r9, #2
 80223dc:	46be      	mov	lr, r7
 80223de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80223e0:	9512      	str	r5, [sp, #72]	@ 0x48
 80223e2:	e003      	b.n	80223ec <forward_lite_pw_sssa8_ch+0x1d4>
 80223e4:	6013      	str	r3, [r2, #0]
 80223e6:	3204      	adds	r2, #4
 80223e8:	42b2      	cmp	r2, r6
 80223ea:	d010      	beq.n	802240e <forward_lite_pw_sssa8_ch+0x1f6>
 80223ec:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 80223f0:	1e59      	subs	r1, r3, #1
 80223f2:	fa0e f503 	lsl.w	r5, lr, r3
 80223f6:	fa04 f303 	lsl.w	r3, r4, r3
 80223fa:	b289      	uxth	r1, r1
 80223fc:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8022400:	2914      	cmp	r1, #20
 8022402:	d9ef      	bls.n	80223e4 <forward_lite_pw_sssa8_ch+0x1cc>
 8022404:	6014      	str	r4, [r2, #0]
 8022406:	3204      	adds	r2, #4
 8022408:	2700      	movs	r7, #0
 802240a:	42b2      	cmp	r2, r6
 802240c:	d1ee      	bne.n	80223ec <forward_lite_pw_sssa8_ch+0x1d4>
 802240e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022410:	4664      	mov	r4, ip
 8022412:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022414:	2b01      	cmp	r3, #1
 8022416:	f000 80a2 	beq.w	802255e <forward_lite_pw_sssa8_ch+0x346>
 802241a:	2300      	movs	r3, #0
 802241c:	9312      	str	r3, [sp, #72]	@ 0x48
 802241e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022420:	07db      	lsls	r3, r3, #31
 8022422:	d55b      	bpl.n	80224dc <forward_lite_pw_sssa8_ch+0x2c4>
 8022424:	eb08 030b 	add.w	r3, r8, fp
 8022428:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802242a:	3302      	adds	r3, #2
 802242c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022430:	9314      	str	r3, [sp, #80]	@ 0x50
 8022432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022434:	2b00      	cmp	r3, #0
 8022436:	d04e      	beq.n	80224d6 <forward_lite_pw_sssa8_ch+0x2be>
 8022438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802243a:	fb08 fb0a 	mul.w	fp, r8, sl
 802243e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022440:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022442:	2b03      	cmp	r3, #3
 8022444:	bf08      	it	eq
 8022446:	f112 0f80 	cmneq.w	r2, #128	@ 0x80
 802244a:	bf0c      	ite	eq
 802244c:	2301      	moveq	r3, #1
 802244e:	2300      	movne	r3, #0
 8022450:	2940      	cmp	r1, #64	@ 0x40
 8022452:	bf08      	it	eq
 8022454:	f1ba 0f40 	cmpeq.w	sl, #64	@ 0x40
 8022458:	ea07 0203 	and.w	r2, r7, r3
 802245c:	fb01 f708 	mul.w	r7, r1, r8
 8022460:	bf0c      	ite	eq
 8022462:	2301      	moveq	r3, #1
 8022464:	2300      	movne	r3, #0
 8022466:	2c05      	cmp	r4, #5
 8022468:	f040 808f 	bne.w	802258a <forward_lite_pw_sssa8_ch+0x372>
 802246c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802246e:	2919      	cmp	r1, #25
 8022470:	f040 808b 	bne.w	802258a <forward_lite_pw_sssa8_ch+0x372>
 8022474:	2b00      	cmp	r3, #0
 8022476:	d034      	beq.n	80224e2 <forward_lite_pw_sssa8_ch+0x2ca>
 8022478:	2a00      	cmp	r2, #0
 802247a:	f040 80b5 	bne.w	80225e8 <forward_lite_pw_sssa8_ch+0x3d0>
 802247e:	4614      	mov	r4, r2
 8022480:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8022484:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 8022488:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802248a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802248c:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8022490:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022492:	4628      	mov	r0, r5
 8022494:	f8cd a010 	str.w	sl, [sp, #16]
 8022498:	3401      	adds	r4, #1
 802249a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802249c:	445d      	add	r5, fp
 802249e:	9126      	str	r1, [sp, #152]	@ 0x98
 80224a0:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 80224a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80224a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80224a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80224aa:	9308      	str	r3, [sp, #32]
 80224ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80224ae:	9307      	str	r3, [sp, #28]
 80224b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80224b2:	e9cd a305 	strd	sl, r3, [sp, #20]
 80224b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80224b8:	9303      	str	r3, [sp, #12]
 80224ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224bc:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80224c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80224c2:	9300      	str	r3, [sp, #0]
 80224c4:	4643      	mov	r3, r8
 80224c6:	f00e fcf3 	bl	8030eb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 80224ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80224cc:	44b8      	add	r8, r7
 80224ce:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80224d0:	42a3      	cmp	r3, r4
 80224d2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80224d4:	d1dc      	bne.n	8022490 <forward_lite_pw_sssa8_ch+0x278>
 80224d6:	b01b      	add	sp, #108	@ 0x6c
 80224d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224de:	9314      	str	r3, [sp, #80]	@ 0x50
 80224e0:	e7a7      	b.n	8022432 <forward_lite_pw_sssa8_ch+0x21a>
 80224e2:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 80224e6:	461c      	mov	r4, r3
 80224e8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80224ea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80224ec:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 80224f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80224f2:	4628      	mov	r0, r5
 80224f4:	9228      	str	r2, [sp, #160]	@ 0xa0
 80224f6:	3401      	adds	r4, #1
 80224f8:	9126      	str	r1, [sp, #152]	@ 0x98
 80224fa:	445d      	add	r5, fp
 80224fc:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 8022500:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022502:	9309      	str	r3, [sp, #36]	@ 0x24
 8022504:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022506:	9308      	str	r3, [sp, #32]
 8022508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802250a:	9307      	str	r3, [sp, #28]
 802250c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802250e:	e9cd a305 	strd	sl, r3, [sp, #20]
 8022512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022514:	9304      	str	r3, [sp, #16]
 8022516:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022518:	9303      	str	r3, [sp, #12]
 802251a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802251c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8022520:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8022522:	9300      	str	r3, [sp, #0]
 8022524:	4643      	mov	r3, r8
 8022526:	f00e fcc3 	bl	8030eb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 802252a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802252c:	44b8      	add	r8, r7
 802252e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022530:	42a3      	cmp	r3, r4
 8022532:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8022534:	d1dc      	bne.n	80224f0 <forward_lite_pw_sssa8_ch+0x2d8>
 8022536:	b01b      	add	sp, #108	@ 0x6c
 8022538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802253c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802253e:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8022542:	930e      	str	r3, [sp, #56]	@ 0x38
 8022544:	2301      	movs	r3, #1
 8022546:	469b      	mov	fp, r3
 8022548:	9315      	str	r3, [sp, #84]	@ 0x54
 802254a:	e72e      	b.n	80223aa <forward_lite_pw_sssa8_ch+0x192>
 802254c:	185a      	adds	r2, r3, r1
 802254e:	4606      	mov	r6, r0
 8022550:	f853 bb04 	ldr.w	fp, [r3], #4
 8022554:	429a      	cmp	r2, r3
 8022556:	f846 bb04 	str.w	fp, [r6], #4
 802255a:	d1f9      	bne.n	8022550 <forward_lite_pw_sssa8_ch+0x338>
 802255c:	e6ca      	b.n	80222f4 <forward_lite_pw_sssa8_ch+0xdc>
 802255e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022560:	f06f 0309 	mvn.w	r3, #9
 8022564:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8022566:	fb03 1302 	mla	r3, r3, r2, r1
 802256a:	fb02 f20a 	mul.w	r2, r2, sl
 802256e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8022572:	f6ff af52 	blt.w	802241a <forward_lite_pw_sssa8_ch+0x202>
 8022576:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022578:	4653      	mov	r3, sl
 802257a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802257c:	9826      	ldr	r0, [sp, #152]	@ 0x98
 802257e:	e9cd a600 	strd	sl, r6, [sp]
 8022582:	f001 ff9f 	bl	80244c4 <st_sssa8_ch_fullW_prefetch>
 8022586:	9612      	str	r6, [sp, #72]	@ 0x48
 8022588:	e749      	b.n	802241e <forward_lite_pw_sssa8_ch+0x206>
 802258a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 802258e:	2400      	movs	r4, #0
 8022590:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022592:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8022594:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8022598:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802259a:	4628      	mov	r0, r5
 802259c:	9228      	str	r2, [sp, #160]	@ 0xa0
 802259e:	3401      	adds	r4, #1
 80225a0:	9126      	str	r1, [sp, #152]	@ 0x98
 80225a2:	445d      	add	r5, fp
 80225a4:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 80225a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80225aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80225ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80225ae:	9308      	str	r3, [sp, #32]
 80225b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80225b2:	9307      	str	r3, [sp, #28]
 80225b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80225b6:	e9cd a305 	strd	sl, r3, [sp, #20]
 80225ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80225bc:	9304      	str	r3, [sp, #16]
 80225be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80225c0:	9303      	str	r3, [sp, #12]
 80225c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225c4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80225c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80225ca:	9300      	str	r3, [sp, #0]
 80225cc:	4643      	mov	r3, r8
 80225ce:	f00e fc6f 	bl	8030eb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 80225d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80225d4:	44b8      	add	r8, r7
 80225d6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80225d8:	42a3      	cmp	r3, r4
 80225da:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80225dc:	d1dc      	bne.n	8022598 <forward_lite_pw_sssa8_ch+0x380>
 80225de:	b01b      	add	sp, #108	@ 0x6c
 80225e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225e4:	461a      	mov	r2, r3
 80225e6:	e6ac      	b.n	8022342 <forward_lite_pw_sssa8_ch+0x12a>
 80225e8:	2400      	movs	r4, #0
 80225ea:	f04f 0a05 	mov.w	sl, #5
 80225ee:	f04f 0803 	mov.w	r8, #3
 80225f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80225f4:	4628      	mov	r0, r5
 80225f6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80225f8:	3401      	adds	r4, #1
 80225fa:	f8cd 801c 	str.w	r8, [sp, #28]
 80225fe:	445d      	add	r5, fp
 8022600:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 8022604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022606:	e9cd a308 	strd	sl, r3, [sp, #32]
 802260a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 802260e:	9306      	str	r3, [sp, #24]
 8022610:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022612:	9303      	str	r3, [sp, #12]
 8022614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022616:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802261a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802261c:	9300      	str	r3, [sp, #0]
 802261e:	2340      	movs	r3, #64	@ 0x40
 8022620:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8022624:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8022626:	461a      	mov	r2, r3
 8022628:	443a      	add	r2, r7
 802262a:	922d      	str	r2, [sp, #180]	@ 0xb4
 802262c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802262e:	f00e ffef 	bl	8031610 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 8022632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022634:	42a3      	cmp	r3, r4
 8022636:	d1dc      	bne.n	80225f2 <forward_lite_pw_sssa8_ch+0x3da>
 8022638:	e74d      	b.n	80224d6 <forward_lite_pw_sssa8_ch+0x2be>
 802263a:	bf00      	nop

0802263c <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 802263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022640:	b097      	sub	sp, #92	@ 0x5c
 8022642:	4605      	mov	r5, r0
 8022644:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
 8022648:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 802264c:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8022650:	f8bd 9084 	ldrh.w	r9, [sp, #132]	@ 0x84
 8022654:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8022656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022658:	fb03 f301 	mul.w	r3, r3, r1
 802265c:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 8022660:	9110      	str	r1, [sp, #64]	@ 0x40
 8022662:	fb09 6303 	mla	r3, r9, r3, r6
 8022666:	f99d 108c 	ldrsb.w	r1, [sp, #140]	@ 0x8c
 802266a:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 802266e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022670:	4298      	cmp	r0, r3
 8022672:	f89d 1098 	ldrb.w	r1, [sp, #152]	@ 0x98
 8022676:	f99d 7090 	ldrsb.w	r7, [sp, #144]	@ 0x90
 802267a:	9114      	str	r1, [sp, #80]	@ 0x50
 802267c:	d207      	bcs.n	802268e <forward_lite_conv2d_deep_3x3_sssa8_ch+0x52>
 802267e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022680:	fb03 f202 	mul.w	r2, r3, r2
 8022684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022686:	fb03 0202 	mla	r2, r3, r2, r0
 802268a:	4296      	cmp	r6, r2
 802268c:	d377      	bcc.n	802277e <forward_lite_conv2d_deep_3x3_sssa8_ch+0x142>
 802268e:	2301      	movs	r3, #1
 8022690:	9315      	str	r3, [sp, #84]	@ 0x54
 8022692:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022694:	4649      	mov	r1, r9
 8022696:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022698:	ea4f 0849 	mov.w	r8, r9, lsl #1
 802269c:	eba3 0449 	sub.w	r4, r3, r9, lsl #1
 80226a0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80226a2:	441c      	add	r4, r3
 80226a4:	461a      	mov	r2, r3
 80226a6:	4623      	mov	r3, r4
 80226a8:	f000 fe6c 	bl	8023384 <align_factor_ch>
 80226ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80226ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80226b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80226b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80226b6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80226ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80226bc:	f1b9 0f00 	cmp.w	r9, #0
 80226c0:	d062      	beq.n	8022788 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x14c>
 80226c2:	4623      	mov	r3, r4
 80226c4:	1d10      	adds	r0, r2, #4
 80226c6:	f04f 0e01 	mov.w	lr, #1
 80226ca:	eb04 0c08 	add.w	ip, r4, r8
 80226ce:	f933 2b02 	ldrsh.w	r2, [r3], #2
 80226d2:	1e51      	subs	r1, r2, #1
 80226d4:	fa0e f402 	lsl.w	r4, lr, r2
 80226d8:	fa07 f202 	lsl.w	r2, r7, r2
 80226dc:	b289      	uxth	r1, r1
 80226de:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 80226e2:	2914      	cmp	r1, #20
 80226e4:	d844      	bhi.n	8022770 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x134>
 80226e6:	459c      	cmp	ip, r3
 80226e8:	f840 2c04 	str.w	r2, [r0, #-4]
 80226ec:	f100 0004 	add.w	r0, r0, #4
 80226f0:	d1ed      	bne.n	80226ce <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 80226f2:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 80226f6:	189c      	adds	r4, r3, r2
 80226f8:	eba4 0408 	sub.w	r4, r4, r8
 80226fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8022700:	fb13 f802 	smulbb	r8, r3, r2
 8022704:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022706:	fa1f f888 	uxth.w	r8, r8
 802270a:	2b00      	cmp	r3, #0
 802270c:	d02d      	beq.n	802276a <forward_lite_conv2d_deep_3x3_sssa8_ch+0x12e>
 802270e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022710:	4659      	mov	r1, fp
 8022712:	2700      	movs	r7, #0
 8022714:	46cb      	mov	fp, r9
 8022716:	fb09 f002 	mul.w	r0, r9, r2
 802271a:	4652      	mov	r2, sl
 802271c:	4699      	mov	r9, r3
 802271e:	46a2      	mov	sl, r4
 8022720:	4644      	mov	r4, r8
 8022722:	4680      	mov	r8, r0
 8022724:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022726:	3701      	adds	r7, #1
 8022728:	4628      	mov	r0, r5
 802272a:	f8cd a004 	str.w	sl, [sp, #4]
 802272e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022730:	4425      	add	r5, r4
 8022732:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022734:	9222      	str	r2, [sp, #136]	@ 0x88
 8022736:	930a      	str	r3, [sp, #40]	@ 0x28
 8022738:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802273a:	9120      	str	r1, [sp, #128]	@ 0x80
 802273c:	9309      	str	r3, [sp, #36]	@ 0x24
 802273e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022740:	9308      	str	r3, [sp, #32]
 8022742:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022744:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8022748:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802274a:	9305      	str	r3, [sp, #20]
 802274c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802274e:	9304      	str	r3, [sp, #16]
 8022750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022752:	e9cd b302 	strd	fp, r3, [sp, #8]
 8022756:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022758:	9300      	str	r3, [sp, #0]
 802275a:	4633      	mov	r3, r6
 802275c:	f00d fc50 	bl	8030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>
 8022760:	45b9      	cmp	r9, r7
 8022762:	4446      	add	r6, r8
 8022764:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022766:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022768:	d1dc      	bne.n	8022724 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xe8>
 802276a:	b017      	add	sp, #92	@ 0x5c
 802276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022770:	459c      	cmp	ip, r3
 8022772:	f840 7c04 	str.w	r7, [r0, #-4]
 8022776:	f100 0004 	add.w	r0, r0, #4
 802277a:	d1a8      	bne.n	80226ce <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 802277c:	e7b9      	b.n	80226f2 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xb6>
 802277e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022780:	9315      	str	r3, [sp, #84]	@ 0x54
 8022782:	2301      	movs	r3, #1
 8022784:	9310      	str	r3, [sp, #64]	@ 0x40
 8022786:	e784      	b.n	8022692 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x56>
 8022788:	9311      	str	r3, [sp, #68]	@ 0x44
 802278a:	e7b5      	b.n	80226f8 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xbc>

0802278c <forward_lite_conv2d_rgb_sssa8_ch>:
 802278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022790:	461e      	mov	r6, r3
 8022792:	460f      	mov	r7, r1
 8022794:	005d      	lsls	r5, r3, #1
 8022796:	4680      	mov	r8, r0
 8022798:	4631      	mov	r1, r6
 802279a:	ed2d 8b02 	vpush	{d8}
 802279e:	b0d7      	sub	sp, #348	@ 0x15c
 80227a0:	ee08 2a10 	vmov	s16, r2
 80227a4:	ee08 2a90 	vmov	s17, r2
 80227a8:	9614      	str	r6, [sp, #80]	@ 0x50
 80227aa:	f8bd 618c 	ldrh.w	r6, [sp, #396]	@ 0x18c
 80227ae:	f8dd 91b0 	ldr.w	r9, [sp, #432]	@ 0x1b0
 80227b2:	9626      	str	r6, [sp, #152]	@ 0x98
 80227b4:	f8bd 6190 	ldrh.w	r6, [sp, #400]	@ 0x190
 80227b8:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
 80227bc:	f8bd 4188 	ldrh.w	r4, [sp, #392]	@ 0x188
 80227c0:	960f      	str	r6, [sp, #60]	@ 0x3c
 80227c2:	f99d 619c 	ldrsb.w	r6, [sp, #412]	@ 0x19c
 80227c6:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80227c8:	960b      	str	r6, [sp, #44]	@ 0x2c
 80227ca:	f89d 61a4 	ldrb.w	r6, [sp, #420]	@ 0x1a4
 80227ce:	941c      	str	r4, [sp, #112]	@ 0x70
 80227d0:	18d4      	adds	r4, r2, r3
 80227d2:	9627      	str	r6, [sp, #156]	@ 0x9c
 80227d4:	f8bd 61ac 	ldrh.w	r6, [sp, #428]	@ 0x1ac
 80227d8:	4623      	mov	r3, r4
 80227da:	9868      	ldr	r0, [sp, #416]	@ 0x1a0
 80227dc:	f99d b198 	ldrsb.w	fp, [sp, #408]	@ 0x198
 80227e0:	960e      	str	r6, [sp, #56]	@ 0x38
 80227e2:	f8dd a1a8 	ldr.w	sl, [sp, #424]	@ 0x1a8
 80227e6:	f000 fdcd 	bl	8023384 <align_factor_ch>
 80227ea:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80227ec:	ee18 1a10 	vmov	r1, s16
 80227f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80227f2:	9301      	str	r3, [sp, #4]
 80227f4:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 80227f6:	9e6d      	ldr	r6, [sp, #436]	@ 0x1b4
 80227f8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80227fa:	e9cd b302 	strd	fp, r3, [sp, #8]
 80227fe:	18ab      	adds	r3, r5, r2
 8022800:	9000      	str	r0, [sp, #0]
 8022802:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022806:	4616      	mov	r6, r2
 8022808:	9313      	str	r3, [sp, #76]	@ 0x4c
 802280a:	4603      	mov	r3, r0
 802280c:	2003      	movs	r0, #3
 802280e:	f001 fa27 	bl	8023c60 <st_sssa8_ch_convolve_rank1upd>
 8022812:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8022814:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022816:	fb10 f300 	smulbb	r3, r0, r0
 802281a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802281e:	b298      	uxth	r0, r3
 8022820:	ebc6 7346 	rsb	r3, r6, r6, lsl #29
 8022824:	9015      	str	r0, [sp, #84]	@ 0x54
 8022826:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 802282a:	932f      	str	r3, [sp, #188]	@ 0xbc
 802282c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8022830:	9330      	str	r3, [sp, #192]	@ 0xc0
 8022832:	b1de      	cbz	r6, 802286c <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 8022834:	4621      	mov	r1, r4
 8022836:	1d1a      	adds	r2, r3, #4
 8022838:	f04f 0e01 	mov.w	lr, #1
 802283c:	442c      	add	r4, r5
 802283e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022840:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8022844:	1e58      	subs	r0, r3, #1
 8022846:	fa0e fc03 	lsl.w	ip, lr, r3
 802284a:	fa06 f303 	lsl.w	r3, r6, r3
 802284e:	b280      	uxth	r0, r0
 8022850:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8022854:	2814      	cmp	r0, #20
 8022856:	f200 8116 	bhi.w	8022a86 <forward_lite_conv2d_rgb_sssa8_ch+0x2fa>
 802285a:	42a1      	cmp	r1, r4
 802285c:	f842 3c04 	str.w	r3, [r2, #-4]
 8022860:	f102 0204 	add.w	r2, r2, #4
 8022864:	d1ec      	bne.n	8022840 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 8022866:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 8022868:	eb03 0409 	add.w	r4, r3, r9
 802286c:	1b63      	subs	r3, r4, r5
 802286e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022870:	aa36      	add	r2, sp, #216	@ 0xd8
 8022872:	a94c      	add	r1, sp, #304	@ 0x130
 8022874:	9331      	str	r3, [sp, #196]	@ 0xc4
 8022876:	a842      	add	r0, sp, #264	@ 0x108
 8022878:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802287a:	f013 0f01 	tst.w	r3, #1
 802287e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022880:	bf18      	it	ne
 8022882:	3302      	addne	r3, #2
 8022884:	fb03 f303 	mul.w	r3, r3, r3
 8022888:	931d      	str	r3, [sp, #116]	@ 0x74
 802288a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802288c:	e9cd 333b 	strd	r3, r3, [sp, #236]	@ 0xec
 8022890:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022892:	e9cd 3350 	strd	r3, r3, [sp, #320]	@ 0x140
 8022896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022898:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
 802289c:	ab3e      	add	r3, sp, #248	@ 0xf8
 802289e:	9300      	str	r3, [sp, #0]
 80228a0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80228a2:	e9cd 443f 	strd	r4, r4, [sp, #252]	@ 0xfc
 80228a6:	e9cd 7737 	strd	r7, r7, [sp, #220]	@ 0xdc
 80228aa:	f000 fe85 	bl	80235b8 <ai_padding_opt_init>
 80228ae:	fb04 f304 	mul.w	r3, r4, r4
 80228b2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80228b4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	@ 0x50
 80228b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80228bc:	fb01 f403 	mul.w	r4, r1, r3
 80228c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228c4:	fb01 f202 	mul.w	r2, r1, r2
 80228c8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80228ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80228ce:	901e      	str	r0, [sp, #120]	@ 0x78
 80228d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80228d4:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 80228d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80228da:	bfa8      	it	ge
 80228dc:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 80228e0:	42a2      	cmp	r2, r4
 80228e2:	f340 81c4 	ble.w	8022c6e <forward_lite_conv2d_rgb_sssa8_ch+0x4e2>
 80228e6:	2300      	movs	r3, #0
 80228e8:	932b      	str	r3, [sp, #172]	@ 0xac
 80228ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80228ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80228f0:	b29b      	uxth	r3, r3
 80228f2:	4619      	mov	r1, r3
 80228f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80228f6:	4299      	cmp	r1, r3
 80228f8:	bf28      	it	cs
 80228fa:	4619      	movcs	r1, r3
 80228fc:	fbb3 f2f1 	udiv	r2, r3, r1
 8022900:	fb01 3312 	mls	r3, r1, r2, r3
 8022904:	b292      	uxth	r2, r2
 8022906:	912c      	str	r1, [sp, #176]	@ 0xb0
 8022908:	b29b      	uxth	r3, r3
 802290a:	9222      	str	r2, [sp, #136]	@ 0x88
 802290c:	b11b      	cbz	r3, 8022916 <forward_lite_conv2d_rgb_sssa8_ch+0x18a>
 802290e:	4613      	mov	r3, r2
 8022910:	3301      	adds	r3, #1
 8022912:	b29b      	uxth	r3, r3
 8022914:	9322      	str	r3, [sp, #136]	@ 0x88
 8022916:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022918:	2900      	cmp	r1, #0
 802291a:	f000 8196 	beq.w	8022c4a <forward_lite_conv2d_rgb_sssa8_ch+0x4be>
 802291e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8022920:	fa0f fb8b 	sxth.w	fp, fp
 8022924:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022926:	eba0 0280 	sub.w	r2, r0, r0, lsl #2
 802292a:	1b03      	subs	r3, r0, r4
 802292c:	1a26      	subs	r6, r4, r0
 802292e:	4490      	add	r8, r2
 8022930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022934:	962e      	str	r6, [sp, #184]	@ 0xb8
 8022936:	9628      	str	r6, [sp, #160]	@ 0xa0
 8022938:	4443      	add	r3, r8
 802293a:	46d8      	mov	r8, fp
 802293c:	46bb      	mov	fp, r7
 802293e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022940:	1ccb      	adds	r3, r1, #3
 8022942:	4453      	add	r3, sl
 8022944:	e9cd 3a23 	strd	r3, sl, [sp, #140]	@ 0x8c
 8022948:	1c8b      	adds	r3, r1, #2
 802294a:	9333      	str	r3, [sp, #204]	@ 0xcc
 802294c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802294e:	fb01 f303 	mul.w	r3, r1, r3
 8022952:	9334      	str	r3, [sp, #208]	@ 0xd0
 8022954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022956:	fb07 f303 	mul.w	r3, r7, r3
 802295a:	9335      	str	r3, [sp, #212]	@ 0xd4
 802295c:	fb07 f300 	mul.w	r3, r7, r0
 8022960:	9332      	str	r3, [sp, #200]	@ 0xc8
 8022962:	2300      	movs	r3, #0
 8022964:	9325      	str	r3, [sp, #148]	@ 0x94
 8022966:	2301      	movs	r3, #1
 8022968:	9321      	str	r3, [sp, #132]	@ 0x84
 802296a:	a842      	add	r0, sp, #264	@ 0x108
 802296c:	f000 fe7e 	bl	802366c <ai_padding_opt_phase1>
 8022970:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022972:	2b03      	cmp	r3, #3
 8022974:	f000 8176 	beq.w	8022c64 <forward_lite_conv2d_rgb_sssa8_ch+0x4d8>
 8022978:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802297a:	9318      	str	r3, [sp, #96]	@ 0x60
 802297c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802297e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022980:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022982:	2b00      	cmp	r3, #0
 8022984:	f000 8166 	beq.w	8022c54 <forward_lite_conv2d_rgb_sssa8_ch+0x4c8>
 8022988:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802298a:	2b00      	cmp	r3, #0
 802298c:	f000 8145 	beq.w	8022c1a <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 8022990:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022992:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8022994:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8022996:	469a      	mov	sl, r3
 8022998:	1a9a      	subs	r2, r3, r2
 802299a:	edcd 8a29 	vstr	s17, [sp, #164]	@ 0xa4
 802299e:	9210      	str	r2, [sp, #64]	@ 0x40
 80229a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80229a2:	9220      	str	r2, [sp, #128]	@ 0x80
 80229a4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80229a6:	1a52      	subs	r2, r2, r1
 80229a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80229aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80229ac:	921f      	str	r2, [sp, #124]	@ 0x7c
 80229ae:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80229b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80229b2:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80229b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80229b6:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80229b8:	ee08 2a10 	vmov	s16, r2
 80229bc:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80229be:	921a      	str	r2, [sp, #104]	@ 0x68
 80229c0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80229c2:	921b      	str	r2, [sp, #108]	@ 0x6c
 80229c4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80229c6:	4252      	negs	r2, r2
 80229c8:	922d      	str	r2, [sp, #180]	@ 0xb4
 80229ca:	9b46      	ldr	r3, [sp, #280]	@ 0x118
 80229cc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80229ce:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80229d0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80229d2:	9116      	str	r1, [sp, #88]	@ 0x58
 80229d4:	2100      	movs	r1, #0
 80229d6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80229d8:	9242      	str	r2, [sp, #264]	@ 0x108
 80229da:	9344      	str	r3, [sp, #272]	@ 0x110
 80229dc:	910c      	str	r1, [sp, #48]	@ 0x30
 80229de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80229e0:	e9dd 542d 	ldrd	r5, r4, [sp, #180]	@ 0xb4
 80229e4:	2a00      	cmp	r2, #0
 80229e6:	d045      	beq.n	8022a74 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 80229e8:	3a01      	subs	r2, #1
 80229ea:	9242      	str	r2, [sp, #264]	@ 0x108
 80229ec:	2201      	movs	r2, #1
 80229ee:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 80229f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80229f4:	458a      	cmp	sl, r1
 80229f6:	dd2d      	ble.n	8022a54 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 80229f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80229fc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80229fe:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 8022a02:	468c      	mov	ip, r1
 8022a04:	4402      	add	r2, r0
 8022a06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022a08:	42a5      	cmp	r5, r4
 8022a0a:	da1e      	bge.n	8022a4a <forward_lite_conv2d_rgb_sssa8_ch+0x2be>
 8022a0c:	1d9a      	adds	r2, r3, #6
 8022a0e:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 8022a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a14:	4629      	mov	r1, r5
 8022a16:	441e      	add	r6, r3
 8022a18:	4561      	cmp	r1, ip
 8022a1a:	460f      	mov	r7, r1
 8022a1c:	f04f 0000 	mov.w	r0, #0
 8022a20:	f1a2 0e06 	sub.w	lr, r2, #6
 8022a24:	bf38      	it	cc
 8022a26:	4667      	movcc	r7, ip
 8022a28:	4613      	mov	r3, r2
 8022a2a:	f368 000f 	bfi	r0, r8, #0, #16
 8022a2e:	45bb      	cmp	fp, r7
 8022a30:	f368 401f 	bfi	r0, r8, #16, #16
 8022a34:	d832      	bhi.n	8022a9c <forward_lite_conv2d_rgb_sssa8_ch+0x310>
 8022a36:	3101      	adds	r1, #1
 8022a38:	f822 8c06 	strh.w	r8, [r2, #-6]
 8022a3c:	f842 0c04 	str.w	r0, [r2, #-4]
 8022a40:	3603      	adds	r6, #3
 8022a42:	42a1      	cmp	r1, r4
 8022a44:	f102 0206 	add.w	r2, r2, #6
 8022a48:	d1e6      	bne.n	8022a18 <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 8022a4a:	f10c 0c01 	add.w	ip, ip, #1
 8022a4e:	44d9      	add	r9, fp
 8022a50:	45d4      	cmp	ip, sl
 8022a52:	d1d9      	bne.n	8022a08 <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 8022a54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022a56:	429a      	cmp	r2, r3
 8022a58:	d071      	beq.n	8022b3e <forward_lite_conv2d_rgb_sssa8_ch+0x3b2>
 8022a5a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022a5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022a5e:	440c      	add	r4, r1
 8022a60:	440d      	add	r5, r1
 8022a62:	3201      	adds	r2, #1
 8022a64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022a66:	428a      	cmp	r2, r1
 8022a68:	920c      	str	r2, [sp, #48]	@ 0x30
 8022a6a:	f000 808e 	beq.w	8022b8a <forward_lite_conv2d_rgb_sssa8_ch+0x3fe>
 8022a6e:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8022a70:	2a00      	cmp	r2, #0
 8022a72:	d1b9      	bne.n	80229e8 <forward_lite_conv2d_rgb_sssa8_ch+0x25c>
 8022a74:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8022a76:	bb5a      	cbnz	r2, 8022ad0 <forward_lite_conv2d_rgb_sssa8_ch+0x344>
 8022a78:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 8022a7a:	3a01      	subs	r2, #1
 8022a7c:	9244      	str	r2, [sp, #272]	@ 0x110
 8022a7e:	2201      	movs	r2, #1
 8022a80:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 8022a84:	e7b5      	b.n	80229f2 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 8022a86:	42a1      	cmp	r1, r4
 8022a88:	f842 6c04 	str.w	r6, [r2, #-4]
 8022a8c:	f102 0204 	add.w	r2, r2, #4
 8022a90:	f47f aed6 	bne.w	8022840 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 8022a94:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 8022a96:	eb03 0409 	add.w	r4, r3, r9
 8022a9a:	e6e7      	b.n	802286c <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 8022a9c:	f856 3b03 	ldr.w	r3, [r6], #3
 8022aa0:	3101      	adds	r1, #1
 8022aa2:	fa2f f083 	sxtb16	r0, r3
 8022aa6:	ea4f 2733 	mov.w	r7, r3, ror #8
 8022aaa:	42a1      	cmp	r1, r4
 8022aac:	4613      	mov	r3, r2
 8022aae:	f102 0206 	add.w	r2, r2, #6
 8022ab2:	fa2f f787 	sxtb16	r7, r7
 8022ab6:	eac7 0700 	pkhbt	r7, r7, r0
 8022aba:	f8ce 7002 	str.w	r7, [lr, #2]
 8022abe:	f822 0c0c 	strh.w	r0, [r2, #-12]
 8022ac2:	d1a9      	bne.n	8022a18 <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 8022ac4:	f10c 0c01 	add.w	ip, ip, #1
 8022ac8:	44d9      	add	r9, fp
 8022aca:	45d4      	cmp	ip, sl
 8022acc:	d19c      	bne.n	8022a08 <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 8022ace:	e7c1      	b.n	8022a54 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8022ad0:	3a01      	subs	r2, #1
 8022ad2:	9243      	str	r2, [sp, #268]	@ 0x10c
 8022ad4:	f8bd 212c 	ldrh.w	r2, [sp, #300]	@ 0x12c
 8022ad8:	2a01      	cmp	r2, #1
 8022ada:	f8ad 212e 	strh.w	r2, [sp, #302]	@ 0x12e
 8022ade:	d088      	beq.n	80229f2 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 8022ae0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022ae2:	4592      	cmp	sl, r2
 8022ae4:	ddb6      	ble.n	8022a54 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8022ae6:	eba4 0e05 	sub.w	lr, r4, r5
 8022aea:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 8022aee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022af0:	4694      	mov	ip, r2
 8022af2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022af6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8022af8:	4489      	add	r9, r1
 8022afa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8022afe:	42a5      	cmp	r5, r4
 8022b00:	da15      	bge.n	8022b2e <forward_lite_conv2d_rgb_sssa8_ch+0x3a2>
 8022b02:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8022b06:	eb03 000e 	add.w	r0, r3, lr
 8022b0a:	4449      	add	r1, r9
 8022b0c:	3306      	adds	r3, #6
 8022b0e:	f851 2b03 	ldr.w	r2, [r1], #3
 8022b12:	fa2f f682 	sxtb16	r6, r2
 8022b16:	4283      	cmp	r3, r0
 8022b18:	ea4f 2232 	mov.w	r2, r2, ror #8
 8022b1c:	f823 6c06 	strh.w	r6, [r3, #-6]
 8022b20:	fa2f f282 	sxtb16	r2, r2
 8022b24:	eac2 0206 	pkhbt	r2, r2, r6
 8022b28:	f843 2c04 	str.w	r2, [r3, #-4]
 8022b2c:	d1ee      	bne.n	8022b0c <forward_lite_conv2d_rgb_sssa8_ch+0x380>
 8022b2e:	f10c 0c01 	add.w	ip, ip, #1
 8022b32:	445f      	add	r7, fp
 8022b34:	45d4      	cmp	ip, sl
 8022b36:	d1e2      	bne.n	8022afe <forward_lite_conv2d_rgb_sssa8_ch+0x372>
 8022b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022b3a:	429a      	cmp	r2, r3
 8022b3c:	d18d      	bne.n	8022a5a <forward_lite_conv2d_rgb_sssa8_ch+0x2ce>
 8022b3e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022b40:	4610      	mov	r0, r2
 8022b42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022b44:	ee18 2a10 	vmov	r2, s16
 8022b48:	9308      	str	r3, [sp, #32]
 8022b4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022b4c:	3601      	adds	r6, #1
 8022b4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022b50:	9307      	str	r3, [sp, #28]
 8022b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022b54:	960c      	str	r6, [sp, #48]	@ 0x30
 8022b56:	9306      	str	r3, [sp, #24]
 8022b58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022b5a:	9305      	str	r3, [sp, #20]
 8022b5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022b5e:	9304      	str	r3, [sp, #16]
 8022b60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022b62:	9303      	str	r3, [sp, #12]
 8022b64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022b66:	9300      	str	r3, [sp, #0]
 8022b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022b6a:	441c      	add	r4, r3
 8022b6c:	441d      	add	r5, r3
 8022b6e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8022b72:	9302      	str	r3, [sp, #8]
 8022b74:	2300      	movs	r3, #0
 8022b76:	9301      	str	r3, [sp, #4]
 8022b78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022b7a:	f00d fffb 	bl	8030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8022b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022b80:	9016      	str	r0, [sp, #88]	@ 0x58
 8022b82:	42b3      	cmp	r3, r6
 8022b84:	d01b      	beq.n	8022bbe <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 8022b86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022b88:	e771      	b.n	8022a6e <forward_lite_conv2d_rgb_sssa8_ch+0x2e2>
 8022b8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022b8c:	4299      	cmp	r1, r3
 8022b8e:	d016      	beq.n	8022bbe <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 8022b90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022b92:	ee18 2a10 	vmov	r2, s16
 8022b96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022b98:	9307      	str	r3, [sp, #28]
 8022b9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022b9c:	9306      	str	r3, [sp, #24]
 8022b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ba0:	9305      	str	r3, [sp, #20]
 8022ba2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022ba4:	9304      	str	r3, [sp, #16]
 8022ba6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022ba8:	9303      	str	r3, [sp, #12]
 8022baa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022bac:	9302      	str	r3, [sp, #8]
 8022bae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022bb0:	9300      	str	r3, [sp, #0]
 8022bb2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8022bb6:	9301      	str	r3, [sp, #4]
 8022bb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022bba:	f001 f9c1 	bl	8023f40 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8022bbe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022bc0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8022bc2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8022bc4:	1ad2      	subs	r2, r2, r3
 8022bc6:	4419      	add	r1, r3
 8022bc8:	429a      	cmp	r2, r3
 8022bca:	921f      	str	r2, [sp, #124]	@ 0x7c
 8022bcc:	9118      	str	r1, [sp, #96]	@ 0x60
 8022bce:	bfa8      	it	ge
 8022bd0:	461a      	movge	r2, r3
 8022bd2:	2a00      	cmp	r2, #0
 8022bd4:	4614      	mov	r4, r2
 8022bd6:	dd1a      	ble.n	8022c0e <forward_lite_conv2d_rgb_sssa8_ch+0x482>
 8022bd8:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8022bda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022bdc:	fb03 1002 	mla	r0, r3, r2, r1
 8022be0:	ee18 1a10 	vmov	r1, s16
 8022be4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022be8:	9029      	str	r0, [sp, #164]	@ 0xa4
 8022bea:	ee08 1a10 	vmov	s16, r1
 8022bee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022bf0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8022bf4:	911a      	str	r1, [sp, #104]	@ 0x68
 8022bf6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8022bf8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022bfc:	911b      	str	r1, [sp, #108]	@ 0x6c
 8022bfe:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8022c00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022c04:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022c06:	9319      	str	r3, [sp, #100]	@ 0x64
 8022c08:	b2a3      	uxth	r3, r4
 8022c0a:	f000 fbeb 	bl	80233e4 <st_int8_to16_dual>
 8022c0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c10:	3b01      	subs	r3, #1
 8022c12:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c14:	d001      	beq.n	8022c1a <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 8022c16:	9417      	str	r4, [sp, #92]	@ 0x5c
 8022c18:	e6d7      	b.n	80229ca <forward_lite_conv2d_rgb_sssa8_ch+0x23e>
 8022c1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022c1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022c1e:	4413      	add	r3, r2
 8022c20:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8022c22:	9328      	str	r3, [sp, #160]	@ 0xa0
 8022c24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022c26:	4413      	add	r3, r2
 8022c28:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8022c2a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8022c2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c2e:	4413      	add	r3, r2
 8022c30:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8022c32:	9324      	str	r3, [sp, #144]	@ 0x90
 8022c34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022c36:	3301      	adds	r3, #1
 8022c38:	9321      	str	r3, [sp, #132]	@ 0x84
 8022c3a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022c3c:	4413      	add	r3, r2
 8022c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022c40:	9325      	str	r3, [sp, #148]	@ 0x94
 8022c42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022c44:	4293      	cmp	r3, r2
 8022c46:	f6ff ae90 	blt.w	802296a <forward_lite_conv2d_rgb_sssa8_ch+0x1de>
 8022c4a:	b057      	add	sp, #348	@ 0x15c
 8022c4c:	ecbd 8b02 	vpop	{d8}
 8022c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c54:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022c56:	ee18 0a90 	vmov	r0, s17
 8022c5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022c5c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022c5e:	f000 fbc1 	bl	80233e4 <st_int8_to16_dual>
 8022c62:	e691      	b.n	8022988 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8022c64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022c66:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022c68:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022c6a:	9318      	str	r3, [sp, #96]	@ 0x60
 8022c6c:	e688      	b.n	8022980 <forward_lite_conv2d_rgb_sssa8_ch+0x1f4>
 8022c6e:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 8022c72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022c74:	ee18 0a90 	vmov	r0, s17
 8022c78:	f000 fbb4 	bl	80233e4 <st_int8_to16_dual>
 8022c7c:	2301      	movs	r3, #1
 8022c7e:	932b      	str	r3, [sp, #172]	@ 0xac
 8022c80:	e633      	b.n	80228ea <forward_lite_conv2d_rgb_sssa8_ch+0x15e>
 8022c82:	bf00      	nop

08022c84 <forward_lite_upsample_bilinear_is8os8>:
 8022c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c88:	ed2d 8b0a 	vpush	{d8-d12}
 8022c8c:	b08f      	sub	sp, #60	@ 0x3c
 8022c8e:	4682      	mov	sl, r0
 8022c90:	9104      	str	r1, [sp, #16]
 8022c92:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8022c96:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8022c98:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8022c9c:	9206      	str	r2, [sp, #24]
 8022c9e:	2900      	cmp	r1, #0
 8022ca0:	f000 80aa 	beq.w	8022df8 <forward_lite_upsample_bilinear_is8os8+0x174>
 8022ca4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022ca8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8022cac:	ee70 aae7 	vsub.f32	s21, s1, s15
 8022cb0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022cb4:	ee6a aa87 	vmul.f32	s21, s21, s14
 8022cb8:	ee27 9a87 	vmul.f32	s18, s15, s14
 8022cbc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022cc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022cc2:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8022cc6:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8022cca:	2a00      	cmp	r2, #0
 8022ccc:	f000 808f 	beq.w	8022dee <forward_lite_upsample_bilinear_is8os8+0x16a>
 8022cd0:	3b01      	subs	r3, #1
 8022cd2:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8022e04 <forward_lite_upsample_bilinear_is8os8+0x180>
 8022cd6:	ee07 3a90 	vmov	s15, r3
 8022cda:	9b06      	ldr	r3, [sp, #24]
 8022cdc:	1e5a      	subs	r2, r3, #1
 8022cde:	fb0b f303 	mul.w	r3, fp, r3
 8022ce2:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8022ce6:	ee0c 2a90 	vmov	s25, r2
 8022cea:	9305      	str	r3, [sp, #20]
 8022cec:	fb07 f30b 	mul.w	r3, r7, fp
 8022cf0:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8022cf4:	9307      	str	r3, [sp, #28]
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	9303      	str	r3, [sp, #12]
 8022cfa:	eddd 7a03 	vldr	s15, [sp, #12]
 8022cfe:	9b05      	ldr	r3, [sp, #20]
 8022d00:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8022d04:	ee7b baea 	vsub.f32	s23, s23, s21
 8022d08:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8022d0c:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8022d10:	fecb baca 	vminnm.f32	s23, s23, s20
 8022d14:	eef4 ba4a 	vcmp.f32	s23, s20
 8022d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d1c:	bf14      	ite	ne
 8022d1e:	4698      	movne	r8, r3
 8022d20:	f04f 0800 	moveq.w	r8, #0
 8022d24:	2f00      	cmp	r7, #0
 8022d26:	d05c      	beq.n	8022de2 <forward_lite_upsample_bilinear_is8os8+0x15e>
 8022d28:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8022d2c:	9b06      	ldr	r3, [sp, #24]
 8022d2e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8022d32:	9722      	str	r7, [sp, #136]	@ 0x88
 8022d34:	9d04      	ldr	r5, [sp, #16]
 8022d36:	4647      	mov	r7, r8
 8022d38:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8022d3c:	ee17 6a10 	vmov	r6, s14
 8022d40:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8022d44:	2400      	movs	r4, #0
 8022d46:	fb03 f606 	mul.w	r6, r3, r6
 8022d4a:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8022d4e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8022d52:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8022d56:	ee3c ca27 	vadd.f32	s24, s24, s15
 8022d5a:	ee07 4a90 	vmov	s15, r4
 8022d5e:	3401      	adds	r4, #1
 8022d60:	4629      	mov	r1, r5
 8022d62:	465a      	mov	r2, fp
 8022d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022d68:	f8cd 9000 	str.w	r9, [sp]
 8022d6c:	9709      	str	r7, [sp, #36]	@ 0x24
 8022d6e:	445d      	add	r5, fp
 8022d70:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8022d74:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8022d78:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8022d7c:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8022d80:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8022d84:	eef4 7a6c 	vcmp.f32	s15, s25
 8022d88:	ee38 7a67 	vsub.f32	s14, s16, s15
 8022d8c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8022d90:	ee16 0a90 	vmov	r0, s13
 8022d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d98:	4430      	add	r0, r6
 8022d9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022d9e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8022da2:	bf14      	ite	ne
 8022da4:	465b      	movne	r3, fp
 8022da6:	2300      	moveq	r3, #0
 8022da8:	fb0b a000 	mla	r0, fp, r0, sl
 8022dac:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8022db0:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8022db4:	9308      	str	r3, [sp, #32]
 8022db6:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8022dba:	ab08      	add	r3, sp, #32
 8022dbc:	ee67 7aab 	vmul.f32	s15, s15, s23
 8022dc0:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8022dc4:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8022dc8:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8022dcc:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8022dd0:	f010 fba6 	bl	8033520 <lite_bilinear_is8os8_kernel>
 8022dd4:	45a0      	cmp	r8, r4
 8022dd6:	d1c0      	bne.n	8022d5a <forward_lite_upsample_bilinear_is8os8+0xd6>
 8022dd8:	9b04      	ldr	r3, [sp, #16]
 8022dda:	4647      	mov	r7, r8
 8022ddc:	9a07      	ldr	r2, [sp, #28]
 8022dde:	4413      	add	r3, r2
 8022de0:	9304      	str	r3, [sp, #16]
 8022de2:	9b03      	ldr	r3, [sp, #12]
 8022de4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022de6:	3301      	adds	r3, #1
 8022de8:	429a      	cmp	r2, r3
 8022dea:	9303      	str	r3, [sp, #12]
 8022dec:	d185      	bne.n	8022cfa <forward_lite_upsample_bilinear_is8os8+0x76>
 8022dee:	b00f      	add	sp, #60	@ 0x3c
 8022df0:	ecbd 8b0a 	vpop	{d8-d12}
 8022df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022df8:	eddf aa02 	vldr	s21, [pc, #8]	@ 8022e04 <forward_lite_upsample_bilinear_is8os8+0x180>
 8022dfc:	eeb0 9a6a 	vmov.f32	s18, s21
 8022e00:	e75c      	b.n	8022cbc <forward_lite_upsample_bilinear_is8os8+0x38>
 8022e02:	bf00      	nop
 8022e04:	00000000 	.word	0x00000000

08022e08 <forward_lite_nl_softmax_is8os8>:
 8022e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8022e0c:	b410      	push	{r4}
 8022e0e:	9c01      	ldr	r4, [sp, #4]
 8022e10:	fbb2 f2f4 	udiv	r2, r2, r4
 8022e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022e18:	f00f b994 	b.w	8032144 <_lite_kernel_nl_softmax_is8os8>

08022e1c <forward_lite_nl_softmax_iu8ou8>:
 8022e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8022e20:	b410      	push	{r4}
 8022e22:	9c01      	ldr	r4, [sp, #4]
 8022e24:	fbb2 f2f4 	udiv	r2, r2, r4
 8022e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022e2c:	f00f bf3c 	b.w	8032ca8 <_lite_kernel_nl_softmax_iu8ou8>

08022e30 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 8022e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e34:	b083      	sub	sp, #12
 8022e36:	f992 0000 	ldrsb.w	r0, [r2]
 8022e3a:	f04f 0500 	mov.w	r5, #0
 8022e3e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8022e42:	f360 0507 	bfi	r5, r0, #0, #8
 8022e46:	f1b9 0f00 	cmp.w	r9, #0
 8022e4a:	f360 250f 	bfi	r5, r0, #8, #8
 8022e4e:	dd20      	ble.n	8022e92 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 8022e50:	461c      	mov	r4, r3
 8022e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022e54:	460f      	mov	r7, r1
 8022e56:	f04f 0800 	mov.w	r8, #0
 8022e5a:	1c9e      	adds	r6, r3, #2
 8022e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022e5e:	fb06 fb04 	mul.w	fp, r6, r4
 8022e62:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8022e66:	2c00      	cmp	r4, #0
 8022e68:	dd08      	ble.n	8022e7c <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 8022e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022e6c:	18f9      	adds	r1, r7, r3
 8022e6e:	2300      	movs	r3, #0
 8022e70:	3301      	adds	r3, #1
 8022e72:	800d      	strh	r5, [r1, #0]
 8022e74:	4431      	add	r1, r6
 8022e76:	429c      	cmp	r4, r3
 8022e78:	d1fa      	bne.n	8022e70 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 8022e7a:	445f      	add	r7, fp
 8022e7c:	f108 0801 	add.w	r8, r8, #1
 8022e80:	4639      	mov	r1, r7
 8022e82:	4652      	mov	r2, sl
 8022e84:	9001      	str	r0, [sp, #4]
 8022e86:	f001 f817 	bl	8023eb8 <st_int8_fill>
 8022e8a:	45c1      	cmp	r9, r8
 8022e8c:	4457      	add	r7, sl
 8022e8e:	9801      	ldr	r0, [sp, #4]
 8022e90:	d1e9      	bne.n	8022e66 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 8022e92:	b003      	add	sp, #12
 8022e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e98 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 8022e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e9c:	461e      	mov	r6, r3
 8022e9e:	b085      	sub	sp, #20
 8022ea0:	f992 8000 	ldrsb.w	r8, [r2]
 8022ea4:	f04f 0500 	mov.w	r5, #0
 8022ea8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022eaa:	2e06      	cmp	r6, #6
 8022eac:	f368 0507 	bfi	r5, r8, #0, #8
 8022eb0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022eb2:	460c      	mov	r4, r1
 8022eb4:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8022eb8:	f368 250f 	bfi	r5, r8, #8, #8
 8022ebc:	9303      	str	r3, [sp, #12]
 8022ebe:	d07a      	beq.n	8022fb6 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x11e>
 8022ec0:	2e03      	cmp	r6, #3
 8022ec2:	d04e      	beq.n	8022f62 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xca>
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	db05      	blt.n	8022ed4 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 8022ec8:	1c5a      	adds	r2, r3, #1
 8022eca:	4608      	mov	r0, r1
 8022ecc:	4641      	mov	r1, r8
 8022ece:	4414      	add	r4, r2
 8022ed0:	f011 feb7 	bl	8034c42 <memset>
 8022ed4:	1e7b      	subs	r3, r7, #1
 8022ed6:	3e01      	subs	r6, #1
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	9301      	str	r3, [sp, #4]
 8022edc:	dd27      	ble.n	8022f2e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x96>
 8022ede:	9b03      	ldr	r3, [sp, #12]
 8022ee0:	f10a 0702 	add.w	r7, sl, #2
 8022ee4:	f04f 0b00 	mov.w	fp, #0
 8022ee8:	1c5a      	adds	r2, r3, #1
 8022eea:	fb07 f306 	mul.w	r3, r7, r6
 8022eee:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8022ef2:	9302      	str	r3, [sp, #8]
 8022ef4:	4643      	mov	r3, r8
 8022ef6:	46c8      	mov	r8, r9
 8022ef8:	4699      	mov	r9, r3
 8022efa:	2e00      	cmp	r6, #0
 8022efc:	eb04 010a 	add.w	r1, r4, sl
 8022f00:	dd09      	ble.n	8022f16 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x7e>
 8022f02:	468c      	mov	ip, r1
 8022f04:	2300      	movs	r3, #0
 8022f06:	3301      	adds	r3, #1
 8022f08:	f8ac 5000 	strh.w	r5, [ip]
 8022f0c:	44bc      	add	ip, r7
 8022f0e:	42b3      	cmp	r3, r6
 8022f10:	d1f9      	bne.n	8022f06 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x6e>
 8022f12:	9b02      	ldr	r3, [sp, #8]
 8022f14:	4419      	add	r1, r3
 8022f16:	4642      	mov	r2, r8
 8022f18:	4648      	mov	r0, r9
 8022f1a:	f10b 0b01 	add.w	fp, fp, #1
 8022f1e:	eb01 0408 	add.w	r4, r1, r8
 8022f22:	f000 ffc9 	bl	8023eb8 <st_int8_fill>
 8022f26:	9b01      	ldr	r3, [sp, #4]
 8022f28:	459b      	cmp	fp, r3
 8022f2a:	d1e6      	bne.n	8022efa <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x62>
 8022f2c:	46c8      	mov	r8, r9
 8022f2e:	2e00      	cmp	r6, #0
 8022f30:	eb04 000a 	add.w	r0, r4, sl
 8022f34:	dd0a      	ble.n	8022f4c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb4>
 8022f36:	f10a 0702 	add.w	r7, sl, #2
 8022f3a:	4602      	mov	r2, r0
 8022f3c:	2300      	movs	r3, #0
 8022f3e:	3301      	adds	r3, #1
 8022f40:	8015      	strh	r5, [r2, #0]
 8022f42:	443a      	add	r2, r7
 8022f44:	429e      	cmp	r6, r3
 8022f46:	d1fa      	bne.n	8022f3e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa6>
 8022f48:	fb07 0006 	mla	r0, r7, r6, r0
 8022f4c:	9b03      	ldr	r3, [sp, #12]
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	db2e      	blt.n	8022fb0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8022f52:	461a      	mov	r2, r3
 8022f54:	4641      	mov	r1, r8
 8022f56:	3201      	adds	r2, #1
 8022f58:	b005      	add	sp, #20
 8022f5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f5e:	f011 be70 	b.w	8034c42 <memset>
 8022f62:	fa5f f388 	uxtb.w	r3, r8
 8022f66:	2f00      	cmp	r7, #0
 8022f68:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8022f6c:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8022f70:	b292      	uxth	r2, r2
 8022f72:	ea43 0302 	orr.w	r3, r3, r2
 8022f76:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8022f7a:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8022f7e:	ea42 0203 	orr.w	r2, r2, r3
 8022f82:	b29b      	uxth	r3, r3
 8022f84:	dd14      	ble.n	8022fb0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8022f86:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 8022f8a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8022f8e:	4449      	add	r1, r9
 8022f90:	6022      	str	r2, [r4, #0]
 8022f92:	3419      	adds	r4, #25
 8022f94:	f824 3c15 	strh.w	r3, [r4, #-21]
 8022f98:	f824 5c10 	strh.w	r5, [r4, #-16]
 8022f9c:	f824 3c0b 	strh.w	r3, [r4, #-11]
 8022fa0:	f804 8c06 	strb.w	r8, [r4, #-6]
 8022fa4:	f844 2c05 	str.w	r2, [r4, #-5]
 8022fa8:	f804 8c01 	strb.w	r8, [r4, #-1]
 8022fac:	428c      	cmp	r4, r1
 8022fae:	d1ef      	bne.n	8022f90 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 8022fb0:	b005      	add	sp, #20
 8022fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fb6:	fa5f f388 	uxtb.w	r3, r8
 8022fba:	2f00      	cmp	r7, #0
 8022fbc:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8022fc0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8022fc4:	b292      	uxth	r2, r2
 8022fc6:	ea43 0302 	orr.w	r3, r3, r2
 8022fca:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8022fce:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8022fd2:	ea43 0302 	orr.w	r3, r3, r2
 8022fd6:	ddeb      	ble.n	8022fb0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8022fd8:	340f      	adds	r4, #15
 8022fda:	2200      	movs	r2, #0
 8022fdc:	3201      	adds	r2, #1
 8022fde:	f844 3c0f 	str.w	r3, [r4, #-15]
 8022fe2:	f844 3c0b 	str.w	r3, [r4, #-11]
 8022fe6:	3440      	adds	r4, #64	@ 0x40
 8022fe8:	4297      	cmp	r7, r2
 8022fea:	f804 8c47 	strb.w	r8, [r4, #-71]
 8022fee:	f824 5c40 	strh.w	r5, [r4, #-64]
 8022ff2:	f824 5c38 	strh.w	r5, [r4, #-56]
 8022ff6:	f824 5c30 	strh.w	r5, [r4, #-48]
 8022ffa:	f824 5c28 	strh.w	r5, [r4, #-40]
 8022ffe:	f824 5c20 	strh.w	r5, [r4, #-32]
 8023002:	f804 8c18 	strb.w	r8, [r4, #-24]
 8023006:	f844 3c17 	str.w	r3, [r4, #-23]
 802300a:	f844 3c13 	str.w	r3, [r4, #-19]
 802300e:	d1e5      	bne.n	8022fdc <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x144>
 8023010:	b005      	add	sp, #20
 8023012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023016:	bf00      	nop

08023018 <forward_lite_pad_constant>:
 8023018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802301c:	b085      	sub	sp, #20
 802301e:	4616      	mov	r6, r2
 8023020:	4681      	mov	r9, r0
 8023022:	2b08      	cmp	r3, #8
 8023024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023026:	460c      	mov	r4, r1
 8023028:	9201      	str	r2, [sp, #4]
 802302a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 802302e:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 8023032:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 8023036:	9002      	str	r0, [sp, #8]
 8023038:	d051      	beq.n	80230de <forward_lite_pad_constant+0xc6>
 802303a:	2a00      	cmp	r2, #0
 802303c:	dd11      	ble.n	8023062 <forward_lite_pad_constant+0x4a>
 802303e:	f8cd 8000 	str.w	r8, [sp]
 8023042:	f04f 0b00 	mov.w	fp, #0
 8023046:	46b8      	mov	r8, r7
 8023048:	4617      	mov	r7, r2
 802304a:	44ab      	add	fp, r5
 802304c:	4621      	mov	r1, r4
 802304e:	462a      	mov	r2, r5
 8023050:	4630      	mov	r0, r6
 8023052:	f000 fe8f 	bl	8023d74 <st_int8_copy>
 8023056:	455f      	cmp	r7, fp
 8023058:	442c      	add	r4, r5
 802305a:	dcf6      	bgt.n	802304a <forward_lite_pad_constant+0x32>
 802305c:	4647      	mov	r7, r8
 802305e:	f8dd 8000 	ldr.w	r8, [sp]
 8023062:	9b01      	ldr	r3, [sp, #4]
 8023064:	2b00      	cmp	r3, #0
 8023066:	dd29      	ble.n	80230bc <forward_lite_pad_constant+0xa4>
 8023068:	2300      	movs	r3, #0
 802306a:	9300      	str	r3, [sp, #0]
 802306c:	2f00      	cmp	r7, #0
 802306e:	dd0a      	ble.n	8023086 <forward_lite_pad_constant+0x6e>
 8023070:	f04f 0b00 	mov.w	fp, #0
 8023074:	44ab      	add	fp, r5
 8023076:	4621      	mov	r1, r4
 8023078:	462a      	mov	r2, r5
 802307a:	4630      	mov	r0, r6
 802307c:	f000 fe7a 	bl	8023d74 <st_int8_copy>
 8023080:	455f      	cmp	r7, fp
 8023082:	442c      	add	r4, r5
 8023084:	dcf6      	bgt.n	8023074 <forward_lite_pad_constant+0x5c>
 8023086:	4621      	mov	r1, r4
 8023088:	4648      	mov	r0, r9
 802308a:	4652      	mov	r2, sl
 802308c:	4454      	add	r4, sl
 802308e:	f000 fe71 	bl	8023d74 <st_int8_copy>
 8023092:	f1b8 0f00 	cmp.w	r8, #0
 8023096:	44d1      	add	r9, sl
 8023098:	dd0a      	ble.n	80230b0 <forward_lite_pad_constant+0x98>
 802309a:	f04f 0b00 	mov.w	fp, #0
 802309e:	44ab      	add	fp, r5
 80230a0:	4621      	mov	r1, r4
 80230a2:	462a      	mov	r2, r5
 80230a4:	4630      	mov	r0, r6
 80230a6:	f000 fe65 	bl	8023d74 <st_int8_copy>
 80230aa:	45d8      	cmp	r8, fp
 80230ac:	442c      	add	r4, r5
 80230ae:	dcf6      	bgt.n	802309e <forward_lite_pad_constant+0x86>
 80230b0:	9b00      	ldr	r3, [sp, #0]
 80230b2:	9a01      	ldr	r2, [sp, #4]
 80230b4:	3301      	adds	r3, #1
 80230b6:	429a      	cmp	r2, r3
 80230b8:	9300      	str	r3, [sp, #0]
 80230ba:	d1d7      	bne.n	802306c <forward_lite_pad_constant+0x54>
 80230bc:	9b02      	ldr	r3, [sp, #8]
 80230be:	2b00      	cmp	r3, #0
 80230c0:	dd0a      	ble.n	80230d8 <forward_lite_pad_constant+0xc0>
 80230c2:	2700      	movs	r7, #0
 80230c4:	4698      	mov	r8, r3
 80230c6:	442f      	add	r7, r5
 80230c8:	4621      	mov	r1, r4
 80230ca:	462a      	mov	r2, r5
 80230cc:	4630      	mov	r0, r6
 80230ce:	f000 fe51 	bl	8023d74 <st_int8_copy>
 80230d2:	45b8      	cmp	r8, r7
 80230d4:	442c      	add	r4, r5
 80230d6:	dcf6      	bgt.n	80230c6 <forward_lite_pad_constant+0xae>
 80230d8:	b005      	add	sp, #20
 80230da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230de:	f996 5000 	ldrsb.w	r5, [r6]
 80230e2:	4414      	add	r4, r2
 80230e4:	4628      	mov	r0, r5
 80230e6:	9403      	str	r4, [sp, #12]
 80230e8:	f000 fee6 	bl	8023eb8 <st_int8_fill>
 80230ec:	9b01      	ldr	r3, [sp, #4]
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	dd26      	ble.n	8023140 <forward_lite_pad_constant+0x128>
 80230f2:	eb08 030a 	add.w	r3, r8, sl
 80230f6:	2600      	movs	r6, #0
 80230f8:	eb03 0b07 	add.w	fp, r3, r7
 80230fc:	eb07 030a 	add.w	r3, r7, sl
 8023100:	9300      	str	r3, [sp, #0]
 8023102:	4643      	mov	r3, r8
 8023104:	46b0      	mov	r8, r6
 8023106:	461e      	mov	r6, r3
 8023108:	4621      	mov	r1, r4
 802310a:	4628      	mov	r0, r5
 802310c:	463a      	mov	r2, r7
 802310e:	f108 0801 	add.w	r8, r8, #1
 8023112:	f000 fed1 	bl	8023eb8 <st_int8_fill>
 8023116:	19e1      	adds	r1, r4, r7
 8023118:	4648      	mov	r0, r9
 802311a:	4652      	mov	r2, sl
 802311c:	f000 fe2a 	bl	8023d74 <st_int8_copy>
 8023120:	9b00      	ldr	r3, [sp, #0]
 8023122:	4632      	mov	r2, r6
 8023124:	4628      	mov	r0, r5
 8023126:	18e1      	adds	r1, r4, r3
 8023128:	44d1      	add	r9, sl
 802312a:	f000 fec5 	bl	8023eb8 <st_int8_fill>
 802312e:	9b01      	ldr	r3, [sp, #4]
 8023130:	445c      	add	r4, fp
 8023132:	4543      	cmp	r3, r8
 8023134:	d1e8      	bne.n	8023108 <forward_lite_pad_constant+0xf0>
 8023136:	461a      	mov	r2, r3
 8023138:	9b03      	ldr	r3, [sp, #12]
 802313a:	fb0b 3302 	mla	r3, fp, r2, r3
 802313e:	9303      	str	r3, [sp, #12]
 8023140:	4628      	mov	r0, r5
 8023142:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023146:	b005      	add	sp, #20
 8023148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802314c:	f000 beb4 	b.w	8023eb8 <st_int8_fill>

08023150 <forward_lite_pad_edge>:
 8023150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023154:	ed2d 8b02 	vpush	{d8}
 8023158:	b087      	sub	sp, #28
 802315a:	9305      	str	r3, [sp, #20]
 802315c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802315e:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 8023162:	18cd      	adds	r5, r1, r3
 8023164:	1e13      	subs	r3, r2, #0
 8023166:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 802316a:	9103      	str	r1, [sp, #12]
 802316c:	9504      	str	r5, [sp, #16]
 802316e:	9301      	str	r3, [sp, #4]
 8023170:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	@ 0x50
 8023174:	dd36      	ble.n	80231e4 <forward_lite_pad_edge+0x94>
 8023176:	fb04 f308 	mul.w	r3, r4, r8
 802317a:	4607      	mov	r7, r0
 802317c:	ee08 aa10 	vmov	s16, sl
 8023180:	9302      	str	r3, [sp, #8]
 8023182:	2300      	movs	r3, #0
 8023184:	9300      	str	r3, [sp, #0]
 8023186:	f1b9 0f00 	cmp.w	r9, #0
 802318a:	dd09      	ble.n	80231a0 <forward_lite_pad_edge+0x50>
 802318c:	2600      	movs	r6, #0
 802318e:	4426      	add	r6, r4
 8023190:	4629      	mov	r1, r5
 8023192:	4622      	mov	r2, r4
 8023194:	4638      	mov	r0, r7
 8023196:	f000 fded 	bl	8023d74 <st_int8_copy>
 802319a:	45b1      	cmp	r9, r6
 802319c:	4425      	add	r5, r4
 802319e:	dcf6      	bgt.n	802318e <forward_lite_pad_edge+0x3e>
 80231a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80231a2:	4638      	mov	r0, r7
 80231a4:	4629      	mov	r1, r5
 80231a6:	461a      	mov	r2, r3
 80231a8:	441f      	add	r7, r3
 80231aa:	441d      	add	r5, r3
 80231ac:	f000 fde2 	bl	8023d74 <st_int8_copy>
 80231b0:	f1b8 0f00 	cmp.w	r8, #0
 80231b4:	eba7 0a04 	sub.w	sl, r7, r4
 80231b8:	dd0c      	ble.n	80231d4 <forward_lite_pad_edge+0x84>
 80231ba:	46ab      	mov	fp, r5
 80231bc:	2600      	movs	r6, #0
 80231be:	3601      	adds	r6, #1
 80231c0:	4659      	mov	r1, fp
 80231c2:	4622      	mov	r2, r4
 80231c4:	4650      	mov	r0, sl
 80231c6:	f000 fdd5 	bl	8023d74 <st_int8_copy>
 80231ca:	4546      	cmp	r6, r8
 80231cc:	44a3      	add	fp, r4
 80231ce:	d1f6      	bne.n	80231be <forward_lite_pad_edge+0x6e>
 80231d0:	9b02      	ldr	r3, [sp, #8]
 80231d2:	441d      	add	r5, r3
 80231d4:	9b00      	ldr	r3, [sp, #0]
 80231d6:	9a01      	ldr	r2, [sp, #4]
 80231d8:	3301      	adds	r3, #1
 80231da:	429a      	cmp	r2, r3
 80231dc:	9300      	str	r3, [sp, #0]
 80231de:	d1d2      	bne.n	8023186 <forward_lite_pad_edge+0x36>
 80231e0:	ee18 aa10 	vmov	sl, s16
 80231e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80231e8:	4293      	cmp	r3, r2
 80231ea:	d009      	beq.n	8023200 <forward_lite_pad_edge+0xb0>
 80231ec:	461c      	mov	r4, r3
 80231ee:	4615      	mov	r5, r2
 80231f0:	4621      	mov	r1, r4
 80231f2:	4454      	add	r4, sl
 80231f4:	4652      	mov	r2, sl
 80231f6:	4628      	mov	r0, r5
 80231f8:	f000 fdbc 	bl	8023d74 <st_int8_copy>
 80231fc:	42a5      	cmp	r5, r4
 80231fe:	d1f7      	bne.n	80231f0 <forward_lite_pad_edge+0xa0>
 8023200:	9a01      	ldr	r2, [sp, #4]
 8023202:	9b05      	ldr	r3, [sp, #20]
 8023204:	4413      	add	r3, r2
 8023206:	9a03      	ldr	r2, [sp, #12]
 8023208:	3b01      	subs	r3, #1
 802320a:	fb0a 2503 	mla	r5, sl, r3, r2
 802320e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023210:	18ec      	adds	r4, r5, r3
 8023212:	42a5      	cmp	r5, r4
 8023214:	d009      	beq.n	802322a <forward_lite_pad_edge+0xda>
 8023216:	f1ca 0600 	rsb	r6, sl, #0
 802321a:	4621      	mov	r1, r4
 802321c:	4434      	add	r4, r6
 802321e:	4652      	mov	r2, sl
 8023220:	4628      	mov	r0, r5
 8023222:	f000 fda7 	bl	8023d74 <st_int8_copy>
 8023226:	42a5      	cmp	r5, r4
 8023228:	d1f7      	bne.n	802321a <forward_lite_pad_edge+0xca>
 802322a:	b007      	add	sp, #28
 802322c:	ecbd 8b02 	vpop	{d8}
 8023230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023234 <forward_lite_pad_reflect>:
 8023234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023238:	b08f      	sub	sp, #60	@ 0x3c
 802323a:	460e      	mov	r6, r1
 802323c:	2b00      	cmp	r3, #0
 802323e:	4684      	mov	ip, r0
 8023240:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	@ 0x80
 8023244:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8023246:	f9bd e084 	ldrsh.w	lr, [sp, #132]	@ 0x84
 802324a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802324c:	4437      	add	r7, r6
 802324e:	9002      	str	r0, [sp, #8]
 8023250:	950c      	str	r5, [sp, #48]	@ 0x30
 8023252:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8023254:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8023258:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802325a:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 802325e:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	@ 0x7c
 8023262:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 8023264:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8023268:	9307      	str	r3, [sp, #28]
 802326a:	dd58      	ble.n	802331e <forward_lite_pad_reflect+0xea>
 802326c:	4408      	add	r0, r1
 802326e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023270:	f1c9 0a00 	rsb	sl, r9, #0
 8023274:	fb02 f200 	mul.w	r2, r2, r0
 8023278:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802327a:	4403      	add	r3, r0
 802327c:	9206      	str	r2, [sp, #24]
 802327e:	442b      	add	r3, r5
 8023280:	930a      	str	r3, [sp, #40]	@ 0x28
 8023282:	197b      	adds	r3, r7, r5
 8023284:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023286:	9301      	str	r3, [sp, #4]
 8023288:	1e8b      	subs	r3, r1, #2
 802328a:	fb04 f101 	mul.w	r1, r4, r1
 802328e:	fb04 c303 	mla	r3, r4, r3, ip
 8023292:	9109      	str	r1, [sp, #36]	@ 0x24
 8023294:	9304      	str	r3, [sp, #16]
 8023296:	fb08 2305 	mla	r3, r8, r5, r2
 802329a:	fb09 6303 	mla	r3, r9, r3, r6
 802329e:	9303      	str	r3, [sp, #12]
 80232a0:	fb09 f308 	mul.w	r3, r9, r8
 80232a4:	9308      	str	r3, [sp, #32]
 80232a6:	2300      	movs	r3, #0
 80232a8:	9305      	str	r3, [sp, #20]
 80232aa:	9b01      	ldr	r3, [sp, #4]
 80232ac:	42bb      	cmp	r3, r7
 80232ae:	d00a      	beq.n	80232c6 <forward_lite_pad_reflect+0x92>
 80232b0:	461d      	mov	r5, r3
 80232b2:	9e02      	ldr	r6, [sp, #8]
 80232b4:	4455      	add	r5, sl
 80232b6:	4426      	add	r6, r4
 80232b8:	4622      	mov	r2, r4
 80232ba:	4629      	mov	r1, r5
 80232bc:	4630      	mov	r0, r6
 80232be:	f000 fd59 	bl	8023d74 <st_int8_copy>
 80232c2:	42bd      	cmp	r5, r7
 80232c4:	d1f6      	bne.n	80232b4 <forward_lite_pad_reflect+0x80>
 80232c6:	9b02      	ldr	r3, [sp, #8]
 80232c8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80232ca:	4618      	mov	r0, r3
 80232cc:	9901      	ldr	r1, [sp, #4]
 80232ce:	4413      	add	r3, r2
 80232d0:	9302      	str	r3, [sp, #8]
 80232d2:	f000 fd4f 	bl	8023d74 <st_int8_copy>
 80232d6:	9b06      	ldr	r3, [sp, #24]
 80232d8:	4543      	cmp	r3, r8
 80232da:	da0d      	bge.n	80232f8 <forward_lite_pad_reflect+0xc4>
 80232dc:	461d      	mov	r5, r3
 80232de:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 80232e2:	3501      	adds	r5, #1
 80232e4:	4659      	mov	r1, fp
 80232e6:	4630      	mov	r0, r6
 80232e8:	4622      	mov	r2, r4
 80232ea:	f000 fd43 	bl	8023d74 <st_int8_copy>
 80232ee:	45a8      	cmp	r8, r5
 80232f0:	44cb      	add	fp, r9
 80232f2:	eba6 0604 	sub.w	r6, r6, r4
 80232f6:	d1f4      	bne.n	80232e2 <forward_lite_pad_reflect+0xae>
 80232f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80232fa:	9901      	ldr	r1, [sp, #4]
 80232fc:	4417      	add	r7, r2
 80232fe:	9b05      	ldr	r3, [sp, #20]
 8023300:	4411      	add	r1, r2
 8023302:	9a04      	ldr	r2, [sp, #16]
 8023304:	3301      	adds	r3, #1
 8023306:	9101      	str	r1, [sp, #4]
 8023308:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802330a:	9305      	str	r3, [sp, #20]
 802330c:	440a      	add	r2, r1
 802330e:	9908      	ldr	r1, [sp, #32]
 8023310:	9204      	str	r2, [sp, #16]
 8023312:	9a03      	ldr	r2, [sp, #12]
 8023314:	440a      	add	r2, r1
 8023316:	9203      	str	r2, [sp, #12]
 8023318:	9a07      	ldr	r2, [sp, #28]
 802331a:	429a      	cmp	r2, r3
 802331c:	d1c5      	bne.n	80232aa <forward_lite_pad_reflect+0x76>
 802331e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023320:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023322:	fb03 f404 	mul.w	r4, r3, r4
 8023326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023328:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802332c:	42a3      	cmp	r3, r4
 802332e:	d00c      	beq.n	802334a <forward_lite_pad_reflect+0x116>
 8023330:	461d      	mov	r5, r3
 8023332:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023334:	425e      	negs	r6, r3
 8023336:	461f      	mov	r7, r3
 8023338:	4629      	mov	r1, r5
 802333a:	4620      	mov	r0, r4
 802333c:	443d      	add	r5, r7
 802333e:	4434      	add	r4, r6
 8023340:	463a      	mov	r2, r7
 8023342:	f000 fd17 	bl	8023d74 <st_int8_copy>
 8023346:	42a5      	cmp	r5, r4
 8023348:	d1f6      	bne.n	8023338 <forward_lite_pad_reflect+0x104>
 802334a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802334c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802334e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023350:	3b01      	subs	r3, #1
 8023352:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023354:	fb02 f505 	mul.w	r5, r2, r5
 8023358:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802335a:	fb01 2403 	mla	r4, r1, r3, r2
 802335e:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8023362:	42ac      	cmp	r4, r5
 8023364:	d00a      	beq.n	802337c <forward_lite_pad_reflect+0x148>
 8023366:	424e      	negs	r6, r1
 8023368:	460f      	mov	r7, r1
 802336a:	4621      	mov	r1, r4
 802336c:	4628      	mov	r0, r5
 802336e:	4434      	add	r4, r6
 8023370:	443d      	add	r5, r7
 8023372:	463a      	mov	r2, r7
 8023374:	f000 fcfe 	bl	8023d74 <st_int8_copy>
 8023378:	42ac      	cmp	r4, r5
 802337a:	d1f6      	bne.n	802336a <forward_lite_pad_reflect+0x136>
 802337c:	b00f      	add	sp, #60	@ 0x3c
 802337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023382:	bf00      	nop

08023384 <align_factor_ch>:
 8023384:	b361      	cbz	r1, 80233e0 <align_factor_ch+0x5c>
 8023386:	ee80 7a20 	vdiv.f32	s14, s0, s1
 802338a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802338e:	b570      	push	{r4, r5, r6, lr}
 8023390:	1e9d      	subs	r5, r3, #2
 8023392:	1f14      	subs	r4, r2, #4
 8023394:	2600      	movs	r6, #0
 8023396:	ecf0 7a01 	vldmia	r0!, {s15}
 802339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802339e:	ee17 ea90 	vmov	lr, s15
 80233a2:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 80233a6:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 80233aa:	f1be 0f00 	cmp.w	lr, #0
 80233ae:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 80233b2:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 80233b6:	bfb8      	it	lt
 80233b8:	f1cc 0c00 	rsblt	ip, ip, #0
 80233bc:	2a1f      	cmp	r2, #31
 80233be:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 80233c2:	dc06      	bgt.n	80233d2 <align_factor_ch+0x4e>
 80233c4:	4281      	cmp	r1, r0
 80233c6:	f825 2f02 	strh.w	r2, [r5, #2]!
 80233ca:	f844 3f04 	str.w	r3, [r4, #4]!
 80233ce:	d1e2      	bne.n	8023396 <align_factor_ch+0x12>
 80233d0:	bd70      	pop	{r4, r5, r6, pc}
 80233d2:	4281      	cmp	r1, r0
 80233d4:	f825 6f02 	strh.w	r6, [r5, #2]!
 80233d8:	f844 6f04 	str.w	r6, [r4, #4]!
 80233dc:	d1db      	bne.n	8023396 <align_factor_ch+0x12>
 80233de:	bd70      	pop	{r4, r5, r6, pc}
 80233e0:	4770      	bx	lr
 80233e2:	bf00      	nop

080233e4 <st_int8_to16_dual>:
 80233e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233e8:	4698      	mov	r8, r3
 80233ea:	085b      	lsrs	r3, r3, #1
 80233ec:	eb00 0c02 	add.w	ip, r0, r2
 80233f0:	f000 80b9 	beq.w	8023566 <st_int8_to16_dual+0x182>
 80233f4:	f1a2 0710 	sub.w	r7, r2, #16
 80233f8:	1f16      	subs	r6, r2, #4
 80233fa:	2f00      	cmp	r7, #0
 80233fc:	f04f 0500 	mov.w	r5, #0
 8023400:	db73      	blt.n	80234ea <st_int8_to16_dual+0x106>
 8023402:	f8d0 e000 	ldr.w	lr, [r0]
 8023406:	f8dc 4000 	ldr.w	r4, [ip]
 802340a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 802340e:	fa2f fe8e 	sxtb16	lr, lr
 8023412:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8023416:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 802341a:	fa2f f994 	sxtb16	r9, r4, ror #8
 802341e:	f8c1 e000 	str.w	lr, [r1]
 8023422:	f8c1 a008 	str.w	sl, [r1, #8]
 8023426:	fa2f f484 	sxtb16	r4, r4
 802342a:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 802342e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8023432:	f8c1 e00c 	str.w	lr, [r1, #12]
 8023436:	604c      	str	r4, [r1, #4]
 8023438:	f8d0 e004 	ldr.w	lr, [r0, #4]
 802343c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8023440:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8023444:	fa2f fe8e 	sxtb16	lr, lr
 8023448:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 802344c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8023450:	fa2f f994 	sxtb16	r9, r4, ror #8
 8023454:	f8c1 e010 	str.w	lr, [r1, #16]
 8023458:	f8c1 a018 	str.w	sl, [r1, #24]
 802345c:	fa2f f484 	sxtb16	r4, r4
 8023460:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8023464:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8023468:	f8c1 e01c 	str.w	lr, [r1, #28]
 802346c:	614c      	str	r4, [r1, #20]
 802346e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8023472:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8023476:	fa2f f99e 	sxtb16	r9, lr, ror #8
 802347a:	fa2f fe8e 	sxtb16	lr, lr
 802347e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8023482:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8023486:	fa2f f994 	sxtb16	r9, r4, ror #8
 802348a:	3010      	adds	r0, #16
 802348c:	f10c 0c10 	add.w	ip, ip, #16
 8023490:	f8c1 e020 	str.w	lr, [r1, #32]
 8023494:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 8023498:	fa2f f484 	sxtb16	r4, r4
 802349c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80234a0:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80234a4:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 80234a8:	624c      	str	r4, [r1, #36]	@ 0x24
 80234aa:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80234ae:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80234b2:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 80234b6:	fa2f fe8e 	sxtb16	lr, lr
 80234ba:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 80234be:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80234c2:	fa2f fa94 	sxtb16	sl, r4, ror #8
 80234c6:	3510      	adds	r5, #16
 80234c8:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 80234cc:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 80234d0:	3140      	adds	r1, #64	@ 0x40
 80234d2:	42bd      	cmp	r5, r7
 80234d4:	fa2f f484 	sxtb16	r4, r4
 80234d8:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 80234dc:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 80234e0:	f841 ec04 	str.w	lr, [r1, #-4]
 80234e4:	f841 4c0c 	str.w	r4, [r1, #-12]
 80234e8:	dd8b      	ble.n	8023402 <st_int8_to16_dual+0x1e>
 80234ea:	42ae      	cmp	r6, r5
 80234ec:	db1e      	blt.n	802352c <st_int8_to16_dual+0x148>
 80234ee:	f850 4b04 	ldr.w	r4, [r0], #4
 80234f2:	f85c eb04 	ldr.w	lr, [ip], #4
 80234f6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 80234fa:	fa2f f484 	sxtb16	r4, r4
 80234fe:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8023502:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8023506:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 802350a:	3504      	adds	r5, #4
 802350c:	600c      	str	r4, [r1, #0]
 802350e:	f8c1 9008 	str.w	r9, [r1, #8]
 8023512:	3110      	adds	r1, #16
 8023514:	42b5      	cmp	r5, r6
 8023516:	fa2f fe8e 	sxtb16	lr, lr
 802351a:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 802351e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8023522:	f841 4c04 	str.w	r4, [r1, #-4]
 8023526:	f841 ec0c 	str.w	lr, [r1, #-12]
 802352a:	dde0      	ble.n	80234ee <st_int8_to16_dual+0x10a>
 802352c:	42aa      	cmp	r2, r5
 802352e:	dd40      	ble.n	80235b2 <st_int8_to16_dual+0x1ce>
 8023530:	1b55      	subs	r5, r2, r5
 8023532:	1d0c      	adds	r4, r1, #4
 8023534:	46e6      	mov	lr, ip
 8023536:	eb00 0a05 	add.w	sl, r0, r5
 802353a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 802353e:	3404      	adds	r4, #4
 8023540:	f824 9c08 	strh.w	r9, [r4, #-8]
 8023544:	4550      	cmp	r0, sl
 8023546:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 802354a:	f824 9c06 	strh.w	r9, [r4, #-6]
 802354e:	d1f4      	bne.n	802353a <st_int8_to16_dual+0x156>
 8023550:	44ac      	add	ip, r5
 8023552:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8023556:	3b01      	subs	r3, #1
 8023558:	eb0a 0002 	add.w	r0, sl, r2
 802355c:	4494      	add	ip, r2
 802355e:	b29b      	uxth	r3, r3
 8023560:	2b00      	cmp	r3, #0
 8023562:	f47f af4a 	bne.w	80233fa <st_int8_to16_dual+0x16>
 8023566:	f018 0f01 	tst.w	r8, #1
 802356a:	d020      	beq.n	80235ae <st_int8_to16_dual+0x1ca>
 802356c:	1f17      	subs	r7, r2, #4
 802356e:	f04f 0400 	mov.w	r4, #0
 8023572:	d411      	bmi.n	8023598 <st_int8_to16_dual+0x1b4>
 8023574:	f850 3b04 	ldr.w	r3, [r0], #4
 8023578:	fa2f f593 	sxtb16	r5, r3, ror #8
 802357c:	3404      	adds	r4, #4
 802357e:	3108      	adds	r1, #8
 8023580:	fa2f f383 	sxtb16	r3, r3
 8023584:	42a7      	cmp	r7, r4
 8023586:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 802358a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 802358e:	f841 6c04 	str.w	r6, [r1, #-4]
 8023592:	f841 3c08 	str.w	r3, [r1, #-8]
 8023596:	daed      	bge.n	8023574 <st_int8_to16_dual+0x190>
 8023598:	42a2      	cmp	r2, r4
 802359a:	dd08      	ble.n	80235ae <st_int8_to16_dual+0x1ca>
 802359c:	1b13      	subs	r3, r2, r4
 802359e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80235a2:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80235a6:	f821 2b02 	strh.w	r2, [r1], #2
 80235aa:	428b      	cmp	r3, r1
 80235ac:	d1f9      	bne.n	80235a2 <st_int8_to16_dual+0x1be>
 80235ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235b2:	4682      	mov	sl, r0
 80235b4:	e7cf      	b.n	8023556 <st_int8_to16_dual+0x172>
 80235b6:	bf00      	nop

080235b8 <ai_padding_opt_init>:
 80235b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80235bc:	2700      	movs	r7, #0
 80235be:	9c07      	ldr	r4, [sp, #28]
 80235c0:	e9c0 7700 	strd	r7, r7, [r0]
 80235c4:	6087      	str	r7, [r0, #8]
 80235c6:	46b9      	mov	r9, r7
 80235c8:	690e      	ldr	r6, [r1, #16]
 80235ca:	f1c6 0c00 	rsb	ip, r6, #0
 80235ce:	689e      	ldr	r6, [r3, #8]
 80235d0:	42be      	cmp	r6, r7
 80235d2:	dd1c      	ble.n	802360e <ai_padding_opt_init+0x56>
 80235d4:	463e      	mov	r6, r7
 80235d6:	46be      	mov	lr, r7
 80235d8:	e010      	b.n	80235fc <ai_padding_opt_init+0x44>
 80235da:	6895      	ldr	r5, [r2, #8]
 80235dc:	eba5 080c 	sub.w	r8, r5, ip
 80235e0:	68a5      	ldr	r5, [r4, #8]
 80235e2:	45a8      	cmp	r8, r5
 80235e4:	da10      	bge.n	8023608 <ai_padding_opt_init+0x50>
 80235e6:	f109 0901 	add.w	r9, r9, #1
 80235ea:	f8c0 9008 	str.w	r9, [r0, #8]
 80235ee:	688d      	ldr	r5, [r1, #8]
 80235f0:	f10e 0e01 	add.w	lr, lr, #1
 80235f4:	44ac      	add	ip, r5
 80235f6:	689d      	ldr	r5, [r3, #8]
 80235f8:	4575      	cmp	r5, lr
 80235fa:	dd09      	ble.n	8023610 <ai_padding_opt_init+0x58>
 80235fc:	f1bc 0f00 	cmp.w	ip, #0
 8023600:	daeb      	bge.n	80235da <ai_padding_opt_init+0x22>
 8023602:	3601      	adds	r6, #1
 8023604:	6006      	str	r6, [r0, #0]
 8023606:	e7f2      	b.n	80235ee <ai_padding_opt_init+0x36>
 8023608:	3701      	adds	r7, #1
 802360a:	6047      	str	r7, [r0, #4]
 802360c:	e7ef      	b.n	80235ee <ai_padding_opt_init+0x36>
 802360e:	463e      	mov	r6, r7
 8023610:	2500      	movs	r5, #0
 8023612:	f8c0 9014 	str.w	r9, [r0, #20]
 8023616:	e9c0 6703 	strd	r6, r7, [r0, #12]
 802361a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802361e:	6205      	str	r5, [r0, #32]
 8023620:	694e      	ldr	r6, [r1, #20]
 8023622:	f1c6 0c00 	rsb	ip, r6, #0
 8023626:	685e      	ldr	r6, [r3, #4]
 8023628:	42ae      	cmp	r6, r5
 802362a:	dd1c      	ble.n	8023666 <ai_padding_opt_init+0xae>
 802362c:	46ae      	mov	lr, r5
 802362e:	e00f      	b.n	8023650 <ai_padding_opt_init+0x98>
 8023630:	6855      	ldr	r5, [r2, #4]
 8023632:	6866      	ldr	r6, [r4, #4]
 8023634:	eba5 050c 	sub.w	r5, r5, ip
 8023638:	42b5      	cmp	r5, r6
 802363a:	da10      	bge.n	802365e <ai_padding_opt_init+0xa6>
 802363c:	6a05      	ldr	r5, [r0, #32]
 802363e:	3501      	adds	r5, #1
 8023640:	6205      	str	r5, [r0, #32]
 8023642:	68cd      	ldr	r5, [r1, #12]
 8023644:	f10e 0e01 	add.w	lr, lr, #1
 8023648:	44ac      	add	ip, r5
 802364a:	685d      	ldr	r5, [r3, #4]
 802364c:	4575      	cmp	r5, lr
 802364e:	dd0a      	ble.n	8023666 <ai_padding_opt_init+0xae>
 8023650:	f1bc 0f00 	cmp.w	ip, #0
 8023654:	daec      	bge.n	8023630 <ai_padding_opt_init+0x78>
 8023656:	6985      	ldr	r5, [r0, #24]
 8023658:	3501      	adds	r5, #1
 802365a:	6185      	str	r5, [r0, #24]
 802365c:	e7f1      	b.n	8023642 <ai_padding_opt_init+0x8a>
 802365e:	69c5      	ldr	r5, [r0, #28]
 8023660:	3501      	adds	r5, #1
 8023662:	61c5      	str	r5, [r0, #28]
 8023664:	e7ed      	b.n	8023642 <ai_padding_opt_init+0x8a>
 8023666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802366a:	bf00      	nop

0802366c <ai_padding_opt_phase1>:
 802366c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8023670:	b923      	cbnz	r3, 802367c <ai_padding_opt_phase1+0x10>
 8023672:	b17a      	cbz	r2, 8023694 <ai_padding_opt_phase1+0x28>
 8023674:	3a01      	subs	r2, #1
 8023676:	8483      	strh	r3, [r0, #36]	@ 0x24
 8023678:	61c2      	str	r2, [r0, #28]
 802367a:	e004      	b.n	8023686 <ai_padding_opt_phase1+0x1a>
 802367c:	b152      	cbz	r2, 8023694 <ai_padding_opt_phase1+0x28>
 802367e:	2201      	movs	r2, #1
 8023680:	3b01      	subs	r3, #1
 8023682:	8482      	strh	r2, [r0, #36]	@ 0x24
 8023684:	6183      	str	r3, [r0, #24]
 8023686:	68c3      	ldr	r3, [r0, #12]
 8023688:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 802368c:	6003      	str	r3, [r0, #0]
 802368e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8023692:	4770      	bx	lr
 8023694:	6a03      	ldr	r3, [r0, #32]
 8023696:	2201      	movs	r2, #1
 8023698:	3b01      	subs	r3, #1
 802369a:	8482      	strh	r2, [r0, #36]	@ 0x24
 802369c:	6203      	str	r3, [r0, #32]
 802369e:	e7f2      	b.n	8023686 <ai_padding_opt_phase1+0x1a>

080236a0 <st_int8_avepool>:
 80236a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236a4:	b095      	sub	sp, #84	@ 0x54
 80236a6:	eec0 5a20 	vdiv.f32	s11, s0, s1
 80236aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80236ac:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80236b0:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80236b4:	9206      	str	r2, [sp, #24]
 80236b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80236b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80236bc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80236c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80236c2:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80236c6:	910e      	str	r1, [sp, #56]	@ 0x38
 80236c8:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80236cc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80236ce:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80236d2:	9110      	str	r1, [sp, #64]	@ 0x40
 80236d4:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80236d8:	9111      	str	r1, [sp, #68]	@ 0x44
 80236da:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80236de:	9112      	str	r1, [sp, #72]	@ 0x48
 80236e0:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80236e4:	9107      	str	r1, [sp, #28]
 80236e6:	f99d 109c 	ldrsb.w	r1, [sp, #156]	@ 0x9c
 80236ea:	ee03 1a10 	vmov	s6, r1
 80236ee:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	@ 0xa0
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	f000 80aa 	beq.w	802384c <st_int8_avepool+0x1ac>
 80236f8:	eeb4 0a60 	vcmp.f32	s0, s1
 80236fc:	2300      	movs	r3, #0
 80236fe:	fb02 fb0a 	mul.w	fp, r2, sl
 8023702:	ee13 2a10 	vmov	r2, s6
 8023706:	9304      	str	r3, [sp, #16]
 8023708:	ee03 1a90 	vmov	s7, r1
 802370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023710:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8023888 <st_int8_avepool+0x1e8>
 8023714:	eddf 2a5d 	vldr	s5, [pc, #372]	@ 802388c <st_int8_avepool+0x1ec>
 8023718:	bf08      	it	eq
 802371a:	2301      	moveq	r3, #1
 802371c:	428a      	cmp	r2, r1
 802371e:	bf14      	ite	ne
 8023720:	2300      	movne	r3, #0
 8023722:	f003 0301 	andeq.w	r3, r3, #1
 8023726:	9302      	str	r3, [sp, #8]
 8023728:	9a07      	ldr	r2, [sp, #28]
 802372a:	2a00      	cmp	r2, #0
 802372c:	f000 8087 	beq.w	802383e <st_int8_avepool+0x19e>
 8023730:	9904      	ldr	r1, [sp, #16]
 8023732:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8023736:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023738:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 802373c:	fb01 f202 	mul.w	r2, r1, r2
 8023740:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023742:	fb01 f303 	mul.w	r3, r1, r3
 8023746:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023748:	9208      	str	r2, [sp, #32]
 802374a:	2200      	movs	r2, #0
 802374c:	1a1b      	subs	r3, r3, r0
 802374e:	9205      	str	r2, [sp, #20]
 8023750:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8023754:	440b      	add	r3, r1
 8023756:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023758:	9201      	str	r2, [sp, #4]
 802375a:	4299      	cmp	r1, r3
 802375c:	bfa8      	it	ge
 802375e:	4619      	movge	r1, r3
 8023760:	9b06      	ldr	r3, [sp, #24]
 8023762:	4689      	mov	r9, r1
 8023764:	fb02 f303 	mul.w	r3, r2, r3
 8023768:	9309      	str	r3, [sp, #36]	@ 0x24
 802376a:	f1ba 0f00 	cmp.w	sl, #0
 802376e:	d060      	beq.n	8023832 <st_int8_avepool+0x192>
 8023770:	9a05      	ldr	r2, [sp, #20]
 8023772:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8023776:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023778:	f04f 0800 	mov.w	r8, #0
 802377c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802377e:	fb02 f303 	mul.w	r3, r2, r3
 8023782:	9c06      	ldr	r4, [sp, #24]
 8023784:	1a5b      	subs	r3, r3, r1
 8023786:	9908      	ldr	r1, [sp, #32]
 8023788:	440a      	add	r2, r1
 802378a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802378c:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 8023790:	fb0a 1202 	mla	r2, sl, r2, r1
 8023794:	9200      	str	r2, [sp, #0]
 8023796:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023798:	4413      	add	r3, r2
 802379a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802379c:	429c      	cmp	r4, r3
 802379e:	bfa8      	it	ge
 80237a0:	461c      	movge	r4, r3
 80237a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237a4:	4463      	add	r3, ip
 80237a6:	eba4 0e0c 	sub.w	lr, r4, ip
 80237aa:	fb0a 2303 	mla	r3, sl, r3, r2
 80237ae:	9303      	str	r3, [sp, #12]
 80237b0:	9d01      	ldr	r5, [sp, #4]
 80237b2:	45a9      	cmp	r9, r5
 80237b4:	dd62      	ble.n	802387c <st_int8_avepool+0x1dc>
 80237b6:	2700      	movs	r7, #0
 80237b8:	9b03      	ldr	r3, [sp, #12]
 80237ba:	4639      	mov	r1, r7
 80237bc:	eb08 0603 	add.w	r6, r8, r3
 80237c0:	4564      	cmp	r4, ip
 80237c2:	dd09      	ble.n	80237d8 <st_int8_avepool+0x138>
 80237c4:	4632      	mov	r2, r6
 80237c6:	4663      	mov	r3, ip
 80237c8:	3301      	adds	r3, #1
 80237ca:	f992 0000 	ldrsb.w	r0, [r2]
 80237ce:	4452      	add	r2, sl
 80237d0:	429c      	cmp	r4, r3
 80237d2:	4401      	add	r1, r0
 80237d4:	d1f8      	bne.n	80237c8 <st_int8_avepool+0x128>
 80237d6:	4477      	add	r7, lr
 80237d8:	3501      	adds	r5, #1
 80237da:	445e      	add	r6, fp
 80237dc:	45a9      	cmp	r9, r5
 80237de:	d1ef      	bne.n	80237c0 <st_int8_avepool+0x120>
 80237e0:	9b02      	ldr	r3, [sp, #8]
 80237e2:	bbb3      	cbnz	r3, 8023852 <st_int8_avepool+0x1b2>
 80237e4:	ee07 1a90 	vmov	s15, r1
 80237e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80237ec:	ee07 7a90 	vmov	s15, r7
 80237f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80237f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80237f8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80237fc:	eeb0 7a45 	vmov.f32	s14, s10
 8023800:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023804:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802380c:	fe64 7a06 	vselge.f32	s15, s8, s12
 8023810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023818:	ee17 3a90 	vmov	r3, s15
 802381c:	f303 0307 	ssat	r3, #8, r3
 8023820:	9a00      	ldr	r2, [sp, #0]
 8023822:	7013      	strb	r3, [r2, #0]
 8023824:	4613      	mov	r3, r2
 8023826:	f108 0801 	add.w	r8, r8, #1
 802382a:	3301      	adds	r3, #1
 802382c:	45d0      	cmp	r8, sl
 802382e:	9300      	str	r3, [sp, #0]
 8023830:	d1be      	bne.n	80237b0 <st_int8_avepool+0x110>
 8023832:	9b05      	ldr	r3, [sp, #20]
 8023834:	9a07      	ldr	r2, [sp, #28]
 8023836:	3301      	adds	r3, #1
 8023838:	4293      	cmp	r3, r2
 802383a:	9305      	str	r3, [sp, #20]
 802383c:	db95      	blt.n	802376a <st_int8_avepool+0xca>
 802383e:	9b04      	ldr	r3, [sp, #16]
 8023840:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023842:	3301      	adds	r3, #1
 8023844:	429a      	cmp	r2, r3
 8023846:	9304      	str	r3, [sp, #16]
 8023848:	f73f af6e 	bgt.w	8023728 <st_int8_avepool+0x88>
 802384c:	b015      	add	sp, #84	@ 0x54
 802384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023852:	2900      	cmp	r1, #0
 8023854:	db09      	blt.n	802386a <st_int8_avepool+0x1ca>
 8023856:	eb01 0167 	add.w	r1, r1, r7, asr #1
 802385a:	fbb1 f7f7 	udiv	r7, r1, r7
 802385e:	f307 0307 	ssat	r3, #8, r7
 8023862:	9a00      	ldr	r2, [sp, #0]
 8023864:	7013      	strb	r3, [r2, #0]
 8023866:	4613      	mov	r3, r2
 8023868:	e7dd      	b.n	8023826 <st_int8_avepool+0x186>
 802386a:	2f00      	cmp	r7, #0
 802386c:	463b      	mov	r3, r7
 802386e:	bfb8      	it	lt
 8023870:	1c7b      	addlt	r3, r7, #1
 8023872:	eba1 0363 	sub.w	r3, r1, r3, asr #1
 8023876:	fb93 f7f7 	sdiv	r7, r3, r7
 802387a:	e7f0      	b.n	802385e <st_int8_avepool+0x1be>
 802387c:	9b02      	ldr	r3, [sp, #8]
 802387e:	b913      	cbnz	r3, 8023886 <st_int8_avepool+0x1e6>
 8023880:	eef0 7a62 	vmov.f32	s15, s5
 8023884:	e7b8      	b.n	80237f8 <st_int8_avepool+0x158>
 8023886:	deff      	udf	#255	@ 0xff
 8023888:	befffffc 	.word	0xbefffffc
 802388c:	7fc00000 	.word	0x7fc00000

08023890 <st_f32_to_int16>:
 8023890:	b530      	push	{r4, r5, lr}
 8023892:	0895      	lsrs	r5, r2, #2
 8023894:	d069      	beq.n	802396a <st_f32_to_int16+0xda>
 8023896:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802389a:	f100 0c10 	add.w	ip, r0, #16
 802389e:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 80238a2:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 80239f8 <st_f32_to_int16+0x168>
 80238a6:	f101 0e08 	add.w	lr, r1, #8
 80238aa:	462c      	mov	r4, r5
 80238ac:	ed5c 6a04 	vldr	s13, [ip, #-16]
 80238b0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80238b4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80238b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238bc:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80238c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80238c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80238c8:	ee17 3a90 	vmov	r3, s15
 80238cc:	f303 030f 	ssat	r3, #16, r3
 80238d0:	f82e 3c08 	strh.w	r3, [lr, #-8]
 80238d4:	ed5c 6a03 	vldr	s13, [ip, #-12]
 80238d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80238dc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80238e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238e4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80238e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80238ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80238f0:	ee17 3a90 	vmov	r3, s15
 80238f4:	f303 030f 	ssat	r3, #16, r3
 80238f8:	f82e 3c06 	strh.w	r3, [lr, #-6]
 80238fc:	ed5c 6a02 	vldr	s13, [ip, #-8]
 8023900:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023904:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802390c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8023910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023918:	ee17 3a90 	vmov	r3, s15
 802391c:	f303 030f 	ssat	r3, #16, r3
 8023920:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8023924:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8023928:	ee67 7a86 	vmul.f32	s15, s15, s12
 802392c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8023930:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802393c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8023940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023944:	bfcc      	ite	gt
 8023946:	ee16 3a90 	vmovgt	r3, s13
 802394a:	ee17 3a90 	vmovle	r3, s15
 802394e:	f303 030f 	ssat	r3, #16, r3
 8023952:	3c01      	subs	r4, #1
 8023954:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8023958:	f10c 0c10 	add.w	ip, ip, #16
 802395c:	f10e 0e08 	add.w	lr, lr, #8
 8023960:	d1a4      	bne.n	80238ac <st_f32_to_int16+0x1c>
 8023962:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8023966:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 802396a:	f012 0203 	ands.w	r2, r2, #3
 802396e:	d042      	beq.n	80239f6 <st_f32_to_int16+0x166>
 8023970:	edd0 6a00 	vldr	s13, [r0]
 8023974:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8023978:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 80239f8 <st_f32_to_int16+0x168>
 802397c:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8023980:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023984:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802398c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8023990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023998:	ee17 3a90 	vmov	r3, s15
 802399c:	f303 030f 	ssat	r3, #16, r3
 80239a0:	3a01      	subs	r2, #1
 80239a2:	800b      	strh	r3, [r1, #0]
 80239a4:	d027      	beq.n	80239f6 <st_f32_to_int16+0x166>
 80239a6:	edd0 7a01 	vldr	s15, [r0, #4]
 80239aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80239ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80239b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239b6:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80239ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80239be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80239c2:	ee17 3a90 	vmov	r3, s15
 80239c6:	f303 030f 	ssat	r3, #16, r3
 80239ca:	2a01      	cmp	r2, #1
 80239cc:	804b      	strh	r3, [r1, #2]
 80239ce:	d012      	beq.n	80239f6 <st_f32_to_int16+0x166>
 80239d0:	edd0 7a02 	vldr	s15, [r0, #8]
 80239d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80239d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80239dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239e0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80239e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80239e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80239ec:	ee17 3a10 	vmov	r3, s14
 80239f0:	f303 030f 	ssat	r3, #16, r3
 80239f4:	808b      	strh	r3, [r1, #4]
 80239f6:	bd30      	pop	{r4, r5, pc}
 80239f8:	47000000 	.word	0x47000000

080239fc <st_f32_to_int8>:
 80239fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239fe:	0895      	lsrs	r5, r2, #2
 8023a00:	d06f      	beq.n	8023ae2 <st_f32_to_int8+0xe6>
 8023a02:	f101 0c04 	add.w	ip, r1, #4
 8023a06:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8023a0a:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 8023a0e:	f100 0e10 	add.w	lr, r0, #16
 8023a12:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8023b90 <st_f32_to_int8+0x194>
 8023a16:	00ae      	lsls	r6, r5, #2
 8023a18:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8023a1c:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8023a20:	ee27 7a25 	vmul.f32	s14, s14, s11
 8023a24:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a2c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8023a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023a38:	ee17 3a90 	vmov	r3, s15
 8023a3c:	b21b      	sxth	r3, r3
 8023a3e:	f303 0307 	ssat	r3, #8, r3
 8023a42:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8023a46:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8023a4a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8023a4e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a56:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8023a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023a62:	ee17 3a90 	vmov	r3, s15
 8023a66:	b21b      	sxth	r3, r3
 8023a68:	f303 0307 	ssat	r3, #8, r3
 8023a6c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8023a70:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8023a74:	ee27 7a25 	vmul.f32	s14, s14, s11
 8023a78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a80:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8023a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023a8c:	ee17 3a90 	vmov	r3, s15
 8023a90:	b21b      	sxth	r3, r3
 8023a92:	f303 0307 	ssat	r3, #8, r3
 8023a96:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8023a9a:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8023a9e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023aa2:	ee76 7a86 	vadd.f32	s15, s13, s12
 8023aa6:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8023aaa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023ab2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8023ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aba:	ee17 3a90 	vmov	r3, s15
 8023abe:	ee17 7a10 	vmov	r7, s14
 8023ac2:	b21b      	sxth	r3, r3
 8023ac4:	b23f      	sxth	r7, r7
 8023ac6:	dd56      	ble.n	8023b76 <st_f32_to_int8+0x17a>
 8023ac8:	f303 0307 	ssat	r3, #8, r3
 8023acc:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8023ad0:	f10c 0c04 	add.w	ip, ip, #4
 8023ad4:	f10e 0e10 	add.w	lr, lr, #16
 8023ad8:	4564      	cmp	r4, ip
 8023ada:	d19f      	bne.n	8023a1c <st_f32_to_int8+0x20>
 8023adc:	4431      	add	r1, r6
 8023ade:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8023ae2:	f012 0203 	ands.w	r2, r2, #3
 8023ae6:	d045      	beq.n	8023b74 <st_f32_to_int8+0x178>
 8023ae8:	edd0 6a00 	vldr	s13, [r0]
 8023aec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8023af0:	eddf 5a27 	vldr	s11, [pc, #156]	@ 8023b90 <st_f32_to_int8+0x194>
 8023af4:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8023af8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023afc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b04:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8023b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023b10:	ee17 3a90 	vmov	r3, s15
 8023b14:	b21b      	sxth	r3, r3
 8023b16:	f303 0307 	ssat	r3, #8, r3
 8023b1a:	3a01      	subs	r2, #1
 8023b1c:	700b      	strb	r3, [r1, #0]
 8023b1e:	d029      	beq.n	8023b74 <st_f32_to_int8+0x178>
 8023b20:	edd0 6a01 	vldr	s13, [r0, #4]
 8023b24:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023b28:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b30:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8023b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023b3c:	ee17 3a90 	vmov	r3, s15
 8023b40:	b21b      	sxth	r3, r3
 8023b42:	f303 0307 	ssat	r3, #8, r3
 8023b46:	2a01      	cmp	r2, #1
 8023b48:	704b      	strb	r3, [r1, #1]
 8023b4a:	d013      	beq.n	8023b74 <st_f32_to_int8+0x178>
 8023b4c:	edd0 6a02 	vldr	s13, [r0, #8]
 8023b50:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023b54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8023b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b5c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8023b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023b68:	ee17 3a90 	vmov	r3, s15
 8023b6c:	b21b      	sxth	r3, r3
 8023b6e:	f303 0307 	ssat	r3, #8, r3
 8023b72:	708b      	strb	r3, [r1, #2]
 8023b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b76:	f307 0707 	ssat	r7, #8, r7
 8023b7a:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8023b7e:	f10c 0c04 	add.w	ip, ip, #4
 8023b82:	f10e 0e10 	add.w	lr, lr, #16
 8023b86:	45a4      	cmp	ip, r4
 8023b88:	f47f af48 	bne.w	8023a1c <st_f32_to_int8+0x20>
 8023b8c:	e7a6      	b.n	8023adc <st_f32_to_int8+0xe0>
 8023b8e:	bf00      	nop
 8023b90:	43000000 	.word	0x43000000

08023b94 <st_int16_to_f32>:
 8023b94:	b530      	push	{r4, r5, lr}
 8023b96:	0894      	lsrs	r4, r2, #2
 8023b98:	d038      	beq.n	8023c0c <st_int16_to_f32+0x78>
 8023b9a:	f100 0c08 	add.w	ip, r0, #8
 8023b9e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8023c5c <st_int16_to_f32+0xc8>
 8023ba2:	f101 0310 	add.w	r3, r1, #16
 8023ba6:	46a6      	mov	lr, r4
 8023ba8:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8023bac:	3310      	adds	r3, #16
 8023bae:	f10c 0c08 	add.w	ip, ip, #8
 8023bb2:	f1be 0e01 	subs.w	lr, lr, #1
 8023bb6:	ee07 5a90 	vmov	s15, r5
 8023bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023bc2:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8023bc6:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8023bca:	ee07 5a90 	vmov	s15, r5
 8023bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023bd6:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8023bda:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8023bde:	ee07 5a90 	vmov	s15, r5
 8023be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023bea:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8023bee:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8023bf2:	ee07 5a90 	vmov	s15, r5
 8023bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023bfe:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8023c02:	d1d1      	bne.n	8023ba8 <st_int16_to_f32+0x14>
 8023c04:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8023c08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8023c0c:	f012 0203 	ands.w	r2, r2, #3
 8023c10:	d023      	beq.n	8023c5a <st_int16_to_f32+0xc6>
 8023c12:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023c16:	3a01      	subs	r2, #1
 8023c18:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8023c5c <st_int16_to_f32+0xc8>
 8023c1c:	ee07 3a90 	vmov	s15, r3
 8023c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c28:	edc1 7a00 	vstr	s15, [r1]
 8023c2c:	d015      	beq.n	8023c5a <st_int16_to_f32+0xc6>
 8023c2e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023c32:	2a01      	cmp	r2, #1
 8023c34:	ee07 3a90 	vmov	s15, r3
 8023c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c40:	edc1 7a01 	vstr	s15, [r1, #4]
 8023c44:	d009      	beq.n	8023c5a <st_int16_to_f32+0xc6>
 8023c46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023c4a:	ee07 3a90 	vmov	s15, r3
 8023c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c56:	edc1 7a02 	vstr	s15, [r1, #8]
 8023c5a:	bd30      	pop	{r4, r5, pc}
 8023c5c:	38000000 	.word	0x38000000

08023c60 <st_sssa8_ch_convolve_rank1upd>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	b085      	sub	sp, #20
 8023c66:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8023c6a:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8023c6e:	fb13 f304 	smulbb	r3, r3, r4
 8023c72:	460c      	mov	r4, r1
 8023c74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023c76:	fb13 f500 	smulbb	r5, r3, r0
 8023c7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023c7c:	2a00      	cmp	r2, #0
 8023c7e:	d070      	beq.n	8023d62 <st_sssa8_ch_convolve_rank1upd+0x102>
 8023c80:	b2ad      	uxth	r5, r5
 8023c82:	f1a1 0904 	sub.w	r9, r1, #4
 8023c86:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8023c8a:	08af      	lsrs	r7, r5, #2
 8023c8c:	f005 0503 	and.w	r5, r5, #3
 8023c90:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8023c94:	1e69      	subs	r1, r5, #1
 8023c96:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8023c9a:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8023c9e:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8023ca2:	b289      	uxth	r1, r1
 8023ca4:	9100      	str	r1, [sp, #0]
 8023ca6:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8023caa:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8023cae:	b292      	uxth	r2, r2
 8023cb0:	9202      	str	r2, [sp, #8]
 8023cb2:	025a      	lsls	r2, r3, #9
 8023cb4:	3301      	adds	r3, #1
 8023cb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8023cba:	025b      	lsls	r3, r3, #9
 8023cbc:	9203      	str	r2, [sp, #12]
 8023cbe:	9301      	str	r3, [sp, #4]
 8023cc0:	2f80      	cmp	r7, #128	@ 0x80
 8023cc2:	d953      	bls.n	8023d6c <st_sssa8_ch_convolve_rank1upd+0x10c>
 8023cc4:	9b03      	ldr	r3, [sp, #12]
 8023cc6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8023cca:	2600      	movs	r6, #0
 8023ccc:	eb04 0c03 	add.w	ip, r4, r3
 8023cd0:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8023cd4:	2200      	movs	r2, #0
 8023cd6:	f851 3b04 	ldr.w	r3, [r1], #4
 8023cda:	fa2f fe83 	sxtb16	lr, r3
 8023cde:	4281      	cmp	r1, r0
 8023ce0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023ce4:	fa92 f21e 	qadd16	r2, r2, lr
 8023ce8:	fa2f f383 	sxtb16	r3, r3
 8023cec:	fa92 f213 	qadd16	r2, r2, r3
 8023cf0:	d1f1      	bne.n	8023cd6 <st_sssa8_ch_convolve_rank1upd+0x76>
 8023cf2:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8023cf6:	b213      	sxth	r3, r2
 8023cf8:	4560      	cmp	r0, ip
 8023cfa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8023cfe:	441e      	add	r6, r3
 8023d00:	d1e6      	bne.n	8023cd0 <st_sssa8_ch_convolve_rank1upd+0x70>
 8023d02:	9b01      	ldr	r3, [sp, #4]
 8023d04:	18e1      	adds	r1, r4, r3
 8023d06:	9c02      	ldr	r4, [sp, #8]
 8023d08:	b374      	cbz	r4, 8023d68 <st_sssa8_ch_convolve_rank1upd+0x108>
 8023d0a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023d0e:	2200      	movs	r2, #0
 8023d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8023d14:	fa2f f083 	sxtb16	r0, r3
 8023d18:	428c      	cmp	r4, r1
 8023d1a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023d1e:	fa92 f210 	qadd16	r2, r2, r0
 8023d22:	fa2f f383 	sxtb16	r3, r3
 8023d26:	fa92 f213 	qadd16	r2, r2, r3
 8023d2a:	d1f1      	bne.n	8023d10 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8023d2c:	b213      	sxth	r3, r2
 8023d2e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8023d32:	441e      	add	r6, r3
 8023d34:	b16d      	cbz	r5, 8023d52 <st_sssa8_ch_convolve_rank1upd+0xf2>
 8023d36:	f994 3000 	ldrsb.w	r3, [r4]
 8023d3a:	441e      	add	r6, r3
 8023d3c:	9b00      	ldr	r3, [sp, #0]
 8023d3e:	b13b      	cbz	r3, 8023d50 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8023d40:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8023d44:	2d02      	cmp	r5, #2
 8023d46:	441e      	add	r6, r3
 8023d48:	d002      	beq.n	8023d50 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8023d4a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8023d4e:	441e      	add	r6, r3
 8023d50:	442c      	add	r4, r5
 8023d52:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8023d56:	fb06 331b 	mls	r3, r6, fp, r3
 8023d5a:	f84a 3b04 	str.w	r3, [sl], #4
 8023d5e:	45c2      	cmp	sl, r8
 8023d60:	d1ae      	bne.n	8023cc0 <st_sssa8_ch_convolve_rank1upd+0x60>
 8023d62:	b005      	add	sp, #20
 8023d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d68:	460c      	mov	r4, r1
 8023d6a:	e7e3      	b.n	8023d34 <st_sssa8_ch_convolve_rank1upd+0xd4>
 8023d6c:	4621      	mov	r1, r4
 8023d6e:	2600      	movs	r6, #0
 8023d70:	463c      	mov	r4, r7
 8023d72:	e7c9      	b.n	8023d08 <st_sssa8_ch_convolve_rank1upd+0xa8>

08023d74 <st_int8_copy>:
 8023d74:	4288      	cmp	r0, r1
 8023d76:	d023      	beq.n	8023dc0 <st_int8_copy+0x4c>
 8023d78:	b312      	cbz	r2, 8023dc0 <st_int8_copy+0x4c>
 8023d7a:	4288      	cmp	r0, r1
 8023d7c:	eb00 0302 	add.w	r3, r0, r2
 8023d80:	d20b      	bcs.n	8023d9a <st_int8_copy+0x26>
 8023d82:	4299      	cmp	r1, r3
 8023d84:	d209      	bcs.n	8023d9a <st_int8_copy+0x26>
 8023d86:	4298      	cmp	r0, r3
 8023d88:	440a      	add	r2, r1
 8023d8a:	d219      	bcs.n	8023dc0 <st_int8_copy+0x4c>
 8023d8c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8023d90:	4298      	cmp	r0, r3
 8023d92:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8023d96:	d1f9      	bne.n	8023d8c <st_int8_copy+0x18>
 8023d98:	4770      	bx	lr
 8023d9a:	2a03      	cmp	r2, #3
 8023d9c:	d811      	bhi.n	8023dc2 <st_int8_copy+0x4e>
 8023d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023da2:	f801 3b01 	strb.w	r3, [r1], #1
 8023da6:	2a01      	cmp	r2, #1
 8023da8:	d00a      	beq.n	8023dc0 <st_int8_copy+0x4c>
 8023daa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023dae:	f801 3b01 	strb.w	r3, [r1], #1
 8023db2:	2a02      	cmp	r2, #2
 8023db4:	d004      	beq.n	8023dc0 <st_int8_copy+0x4c>
 8023db6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023dba:	f801 3b01 	strb.w	r3, [r1], #1
 8023dbe:	4770      	bx	lr
 8023dc0:	4770      	bx	lr
 8023dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023dc6:	f001 0403 	and.w	r4, r1, #3
 8023dca:	f000 0e03 	and.w	lr, r0, #3
 8023dce:	f1c4 0304 	rsb	r3, r4, #4
 8023dd2:	eba2 0c03 	sub.w	ip, r2, r3
 8023dd6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023dda:	f801 3b01 	strb.w	r3, [r1], #1
 8023dde:	2c03      	cmp	r4, #3
 8023de0:	f1c4 0202 	rsb	r2, r4, #2
 8023de4:	d00e      	beq.n	8023e04 <st_int8_copy+0x90>
 8023de6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023dea:	f801 3b01 	strb.w	r3, [r1], #1
 8023dee:	2a00      	cmp	r2, #0
 8023df0:	dd08      	ble.n	8023e04 <st_int8_copy+0x90>
 8023df2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023df6:	f801 3b01 	strb.w	r3, [r1], #1
 8023dfa:	b91c      	cbnz	r4, 8023e04 <st_int8_copy+0x90>
 8023dfc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023e00:	f801 3b01 	strb.w	r3, [r1], #1
 8023e04:	4574      	cmp	r4, lr
 8023e06:	d02b      	beq.n	8023e60 <st_int8_copy+0xec>
 8023e08:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8023e0c:	1e5a      	subs	r2, r3, #1
 8023e0e:	b153      	cbz	r3, 8023e26 <st_int8_copy+0xb2>
 8023e10:	f850 3b04 	ldr.w	r3, [r0], #4
 8023e14:	f850 4b04 	ldr.w	r4, [r0], #4
 8023e18:	f850 5b04 	ldr.w	r5, [r0], #4
 8023e1c:	f850 6b04 	ldr.w	r6, [r0], #4
 8023e20:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8023e22:	3a01      	subs	r2, #1
 8023e24:	d2f4      	bcs.n	8023e10 <st_int8_copy+0x9c>
 8023e26:	f01c 0f08 	tst.w	ip, #8
 8023e2a:	d004      	beq.n	8023e36 <st_int8_copy+0xc2>
 8023e2c:	f850 3b04 	ldr.w	r3, [r0], #4
 8023e30:	f850 4b04 	ldr.w	r4, [r0], #4
 8023e34:	c118      	stmia	r1!, {r3, r4}
 8023e36:	f01c 0f04 	tst.w	ip, #4
 8023e3a:	d003      	beq.n	8023e44 <st_int8_copy+0xd0>
 8023e3c:	f850 3b04 	ldr.w	r3, [r0], #4
 8023e40:	f841 3b04 	str.w	r3, [r1], #4
 8023e44:	f01c 0f02 	tst.w	ip, #2
 8023e48:	d003      	beq.n	8023e52 <st_int8_copy+0xde>
 8023e4a:	f830 3b02 	ldrh.w	r3, [r0], #2
 8023e4e:	f821 3b02 	strh.w	r3, [r1], #2
 8023e52:	f01c 0f01 	tst.w	ip, #1
 8023e56:	d001      	beq.n	8023e5c <st_int8_copy+0xe8>
 8023e58:	7803      	ldrb	r3, [r0, #0]
 8023e5a:	700b      	strb	r3, [r1, #0]
 8023e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023e60:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8023e64:	f103 39ff 	add.w	r9, r3, #4294967295
 8023e68:	b183      	cbz	r3, 8023e8c <st_int8_copy+0x118>
 8023e6a:	4688      	mov	r8, r1
 8023e6c:	4686      	mov	lr, r0
 8023e6e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e72:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e76:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e7a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8023e82:	4641      	mov	r1, r8
 8023e84:	4670      	mov	r0, lr
 8023e86:	f1b9 3fff 	cmp.w	r9, #4294967295
 8023e8a:	d1ee      	bne.n	8023e6a <st_int8_copy+0xf6>
 8023e8c:	f01c 0f20 	tst.w	ip, #32
 8023e90:	d007      	beq.n	8023ea2 <st_int8_copy+0x12e>
 8023e92:	4688      	mov	r8, r1
 8023e94:	4686      	mov	lr, r0
 8023e96:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e9a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8023e9e:	4641      	mov	r1, r8
 8023ea0:	4670      	mov	r0, lr
 8023ea2:	f01c 0f10 	tst.w	ip, #16
 8023ea6:	d001      	beq.n	8023eac <st_int8_copy+0x138>
 8023ea8:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8023eaa:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8023eac:	f01c 0f08 	tst.w	ip, #8
 8023eb0:	d0c1      	beq.n	8023e36 <st_int8_copy+0xc2>
 8023eb2:	c818      	ldmia	r0!, {r3, r4}
 8023eb4:	c118      	stmia	r1!, {r3, r4}
 8023eb6:	e7be      	b.n	8023e36 <st_int8_copy+0xc2>

08023eb8 <st_int8_fill>:
 8023eb8:	fa5f fc80 	uxtb.w	ip, r0
 8023ebc:	0203      	lsls	r3, r0, #8
 8023ebe:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8023ec2:	b29b      	uxth	r3, r3
 8023ec4:	ea4c 0c03 	orr.w	ip, ip, r3
 8023ec8:	0403      	lsls	r3, r0, #16
 8023eca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8023ed2:	078b      	lsls	r3, r1, #30
 8023ed4:	d008      	beq.n	8023ee8 <st_int8_fill+0x30>
 8023ed6:	b90a      	cbnz	r2, 8023edc <st_int8_fill+0x24>
 8023ed8:	e02c      	b.n	8023f34 <st_int8_fill+0x7c>
 8023eda:	b362      	cbz	r2, 8023f36 <st_int8_fill+0x7e>
 8023edc:	f801 0b01 	strb.w	r0, [r1], #1
 8023ee0:	078b      	lsls	r3, r1, #30
 8023ee2:	f102 32ff 	add.w	r2, r2, #4294967295
 8023ee6:	d1f8      	bne.n	8023eda <st_int8_fill+0x22>
 8023ee8:	0913      	lsrs	r3, r2, #4
 8023eea:	d025      	beq.n	8023f38 <st_int8_fill+0x80>
 8023eec:	f841 cb04 	str.w	ip, [r1], #4
 8023ef0:	f841 cb04 	str.w	ip, [r1], #4
 8023ef4:	f841 cb04 	str.w	ip, [r1], #4
 8023ef8:	f841 cb04 	str.w	ip, [r1], #4
 8023efc:	3b01      	subs	r3, #1
 8023efe:	d1f5      	bne.n	8023eec <st_int8_fill+0x34>
 8023f00:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8023f04:	f002 0203 	and.w	r2, r2, #3
 8023f08:	b14b      	cbz	r3, 8023f1e <st_int8_fill+0x66>
 8023f0a:	f841 cb04 	str.w	ip, [r1], #4
 8023f0e:	3b01      	subs	r3, #1
 8023f10:	d005      	beq.n	8023f1e <st_int8_fill+0x66>
 8023f12:	f841 cb04 	str.w	ip, [r1], #4
 8023f16:	2b01      	cmp	r3, #1
 8023f18:	d001      	beq.n	8023f1e <st_int8_fill+0x66>
 8023f1a:	f841 cb04 	str.w	ip, [r1], #4
 8023f1e:	b14a      	cbz	r2, 8023f34 <st_int8_fill+0x7c>
 8023f20:	f801 0b01 	strb.w	r0, [r1], #1
 8023f24:	3a01      	subs	r2, #1
 8023f26:	d005      	beq.n	8023f34 <st_int8_fill+0x7c>
 8023f28:	f801 0b01 	strb.w	r0, [r1], #1
 8023f2c:	2a01      	cmp	r2, #1
 8023f2e:	d001      	beq.n	8023f34 <st_int8_fill+0x7c>
 8023f30:	f801 0b01 	strb.w	r0, [r1], #1
 8023f34:	4770      	bx	lr
 8023f36:	4770      	bx	lr
 8023f38:	0893      	lsrs	r3, r2, #2
 8023f3a:	f002 0203 	and.w	r2, r2, #3
 8023f3e:	e7e3      	b.n	8023f08 <st_int8_fill+0x50>

08023f40 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8023f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f44:	b093      	sub	sp, #76	@ 0x4c
 8023f46:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 8023f4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8023f4c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 8023f50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023f52:	920d      	str	r2, [sp, #52]	@ 0x34
 8023f54:	0862      	lsrs	r2, r4, #1
 8023f56:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8023f5a:	940c      	str	r4, [sp, #48]	@ 0x30
 8023f5c:	9104      	str	r1, [sp, #16]
 8023f5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023f60:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	f000 8184 	beq.w	8024270 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 8023f68:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023f6a:	b299      	uxth	r1, r3
 8023f6c:	4613      	mov	r3, r2
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	f000 80d7 	beq.w	8024122 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 8023f74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023f76:	3b01      	subs	r3, #1
 8023f78:	0897      	lsrs	r7, r2, #2
 8023f7a:	f002 0203 	and.w	r2, r2, #3
 8023f7e:	b29b      	uxth	r3, r3
 8023f80:	9201      	str	r2, [sp, #4]
 8023f82:	1c4a      	adds	r2, r1, #1
 8023f84:	0049      	lsls	r1, r1, #1
 8023f86:	9703      	str	r7, [sp, #12]
 8023f88:	9105      	str	r1, [sp, #20]
 8023f8a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8023f8c:	4411      	add	r1, r2
 8023f8e:	9102      	str	r1, [sp, #8]
 8023f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023f92:	f101 0210 	add.w	r2, r1, #16
 8023f96:	f101 0c08 	add.w	ip, r1, #8
 8023f9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023f9e:	9a01      	ldr	r2, [sp, #4]
 8023fa0:	9306      	str	r3, [sp, #24]
 8023fa2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023fa4:	f103 0e04 	add.w	lr, r3, #4
 8023fa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023faa:	f103 0508 	add.w	r5, r3, #8
 8023fae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023fb0:	f103 0408 	add.w	r4, r3, #8
 8023fb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023fb6:	1c5e      	adds	r6, r3, #1
 8023fb8:	013b      	lsls	r3, r7, #4
 8023fba:	9307      	str	r3, [sp, #28]
 8023fbc:	9b04      	ldr	r3, [sp, #16]
 8023fbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8023fc2:	9308      	str	r3, [sp, #32]
 8023fc4:	0093      	lsls	r3, r2, #2
 8023fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fc8:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8023fcc:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8023fd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8023fd2:	9903      	ldr	r1, [sp, #12]
 8023fd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023fd6:	9211      	str	r2, [sp, #68]	@ 0x44
 8023fd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023fda:	2900      	cmp	r1, #0
 8023fdc:	f000 8146 	beq.w	802426c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 8023fe0:	4688      	mov	r8, r1
 8023fe2:	9f04      	ldr	r7, [sp, #16]
 8023fe4:	4601      	mov	r1, r0
 8023fe6:	f8d7 9000 	ldr.w	r9, [r7]
 8023fea:	f8d1 a000 	ldr.w	sl, [r1]
 8023fee:	fb2a 3a09 	smlad	sl, sl, r9, r3
 8023ff2:	684b      	ldr	r3, [r1, #4]
 8023ff4:	fb23 2909 	smlad	r9, r3, r9, r2
 8023ff8:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8023ffc:	3110      	adds	r1, #16
 8023ffe:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8024002:	3708      	adds	r7, #8
 8024004:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8024008:	fb23 a30b 	smlad	r3, r3, fp, sl
 802400c:	fb22 920b 	smlad	r2, r2, fp, r9
 8024010:	f1b8 0801 	subs.w	r8, r8, #1
 8024014:	d1e7      	bne.n	8023fe6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8024016:	9907      	ldr	r1, [sp, #28]
 8024018:	4408      	add	r0, r1
 802401a:	9908      	ldr	r1, [sp, #32]
 802401c:	9f01      	ldr	r7, [sp, #4]
 802401e:	b31f      	cbz	r7, 8024068 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 8024020:	f9b1 7000 	ldrsh.w	r7, [r1]
 8024024:	f8b0 8000 	ldrh.w	r8, [r0]
 8024028:	fb17 3308 	smlabb	r3, r7, r8, r3
 802402c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8024030:	fb18 2207 	smlabb	r2, r8, r7, r2
 8024034:	9f01      	ldr	r7, [sp, #4]
 8024036:	2f01      	cmp	r7, #1
 8024038:	d014      	beq.n	8024064 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 802403a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 802403e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8024042:	fb17 3308 	smlabb	r3, r7, r8, r3
 8024046:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 802404a:	fb18 2207 	smlabb	r2, r8, r7, r2
 802404e:	9f01      	ldr	r7, [sp, #4]
 8024050:	2f02      	cmp	r7, #2
 8024052:	d007      	beq.n	8024064 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8024054:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8024058:	8907      	ldrh	r7, [r0, #8]
 802405a:	fb17 3301 	smlabb	r3, r7, r1, r3
 802405e:	8947      	ldrh	r7, [r0, #10]
 8024060:	fb11 2207 	smlabb	r2, r1, r7, r2
 8024064:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024066:	4408      	add	r0, r1
 8024068:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 802406c:	f1b9 0f15 	cmp.w	r9, #21
 8024070:	f340 80af 	ble.w	80241d2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 8024074:	f109 38ff 	add.w	r8, r9, #4294967295
 8024078:	f1a9 0702 	sub.w	r7, r9, #2
 802407c:	2101      	movs	r1, #1
 802407e:	fa01 f707 	lsl.w	r7, r1, r7
 8024082:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8024086:	fb53 7101 	smmla	r1, r3, r1, r7
 802408a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802408e:	fa41 f108 	asr.w	r1, r1, r8
 8024092:	1f27      	subs	r7, r4, #4
 8024094:	f1a5 0804 	sub.w	r8, r5, #4
 8024098:	440b      	add	r3, r1
 802409a:	f1ae 0102 	sub.w	r1, lr, #2
 802409e:	f303 0307 	ssat	r3, #8, r3
 80240a2:	b25b      	sxtb	r3, r3
 80240a4:	f806 3c01 	strb.w	r3, [r6, #-1]
 80240a8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80240ac:	2915      	cmp	r1, #21
 80240ae:	f340 80ab 	ble.w	8024208 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 80240b2:	f8d8 3000 	ldr.w	r3, [r8]
 80240b6:	f04f 0901 	mov.w	r9, #1
 80240ba:	f8d7 8000 	ldr.w	r8, [r7]
 80240be:	1e8f      	subs	r7, r1, #2
 80240c0:	3901      	subs	r1, #1
 80240c2:	fa09 f707 	lsl.w	r7, r9, r7
 80240c6:	fb52 7303 	smmla	r3, r2, r3, r7
 80240ca:	410b      	asrs	r3, r1
 80240cc:	4443      	add	r3, r8
 80240ce:	f303 0307 	ssat	r3, #8, r3
 80240d2:	b25b      	sxtb	r3, r3
 80240d4:	9a02      	ldr	r2, [sp, #8]
 80240d6:	f10c 0c08 	add.w	ip, ip, #8
 80240da:	f10e 0e04 	add.w	lr, lr, #4
 80240de:	3508      	adds	r5, #8
 80240e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80240e4:	3408      	adds	r4, #8
 80240e6:	9b05      	ldr	r3, [sp, #20]
 80240e8:	441a      	add	r2, r3
 80240ea:	441e      	add	r6, r3
 80240ec:	9b06      	ldr	r3, [sp, #24]
 80240ee:	9202      	str	r2, [sp, #8]
 80240f0:	459c      	cmp	ip, r3
 80240f2:	f47f af69 	bne.w	8023fc8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 80240f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80240f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80240fa:	9905      	ldr	r1, [sp, #20]
 80240fc:	fb03 2201 	mla	r2, r3, r1, r2
 8024100:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024104:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8024108:	920a      	str	r2, [sp, #40]	@ 0x28
 802410a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802410c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8024110:	921f      	str	r2, [sp, #124]	@ 0x7c
 8024112:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024114:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8024118:	9220      	str	r2, [sp, #128]	@ 0x80
 802411a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802411c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8024120:	9321      	str	r3, [sp, #132]	@ 0x84
 8024122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024124:	07db      	lsls	r3, r3, #31
 8024126:	d546      	bpl.n	80241b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8024128:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802412a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802412c:	0896      	lsrs	r6, r2, #2
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	f000 80cd 	beq.w	80242ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 8024134:	00f7      	lsls	r7, r6, #3
 8024136:	9904      	ldr	r1, [sp, #16]
 8024138:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802413c:	6804      	ldr	r4, [r0, #0]
 802413e:	3008      	adds	r0, #8
 8024140:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8024144:	680d      	ldr	r5, [r1, #0]
 8024146:	fb24 3305 	smlad	r3, r4, r5, r3
 802414a:	684c      	ldr	r4, [r1, #4]
 802414c:	3108      	adds	r1, #8
 802414e:	fb22 3304 	smlad	r3, r2, r4, r3
 8024152:	42b0      	cmp	r0, r6
 8024154:	d1f2      	bne.n	802413c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 8024156:	9a04      	ldr	r2, [sp, #16]
 8024158:	443a      	add	r2, r7
 802415a:	9204      	str	r2, [sp, #16]
 802415c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802415e:	f012 0203 	ands.w	r2, r2, #3
 8024162:	d011      	beq.n	8024188 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8024164:	3a01      	subs	r2, #1
 8024166:	9c04      	ldr	r4, [sp, #16]
 8024168:	8831      	ldrh	r1, [r6, #0]
 802416a:	8820      	ldrh	r0, [r4, #0]
 802416c:	b292      	uxth	r2, r2
 802416e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8024172:	b14a      	cbz	r2, 8024188 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8024174:	8860      	ldrh	r0, [r4, #2]
 8024176:	2a01      	cmp	r2, #1
 8024178:	8871      	ldrh	r1, [r6, #2]
 802417a:	fb10 3301 	smlabb	r3, r0, r1, r3
 802417e:	d003      	beq.n	8024188 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 8024180:	88b1      	ldrh	r1, [r6, #4]
 8024182:	88a2      	ldrh	r2, [r4, #4]
 8024184:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024188:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802418a:	f9b2 2000 	ldrsh.w	r2, [r2]
 802418e:	2a15      	cmp	r2, #21
 8024190:	dd79      	ble.n	8024286 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8024192:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024194:	1e95      	subs	r5, r2, #2
 8024196:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024198:	3a01      	subs	r2, #1
 802419a:	6804      	ldr	r4, [r0, #0]
 802419c:	2001      	movs	r0, #1
 802419e:	6809      	ldr	r1, [r1, #0]
 80241a0:	40a8      	lsls	r0, r5
 80241a2:	fb53 0301 	smmla	r3, r3, r1, r0
 80241a6:	4113      	asrs	r3, r2
 80241a8:	4423      	add	r3, r4
 80241aa:	f303 0307 	ssat	r3, #8, r3
 80241ae:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80241b0:	f802 3b01 	strb.w	r3, [r2], #1
 80241b4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80241b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d05c      	beq.n	8024276 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 80241bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80241be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241c0:	fb02 f303 	mul.w	r3, r2, r3
 80241c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80241c6:	f1c3 0301 	rsb	r3, r3, #1
 80241ca:	18d0      	adds	r0, r2, r3
 80241cc:	b013      	add	sp, #76	@ 0x4c
 80241ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241d2:	f1b9 0f00 	cmp.w	r9, #0
 80241d6:	dd24      	ble.n	8024222 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 80241d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80241dc:	005b      	lsls	r3, r3, #1
 80241de:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80241e2:	f1a5 0804 	sub.w	r8, r5, #4
 80241e6:	fb53 7301 	smmla	r3, r3, r1, r7
 80241ea:	1f27      	subs	r7, r4, #4
 80241ec:	fa43 f309 	asr.w	r3, r3, r9
 80241f0:	f1ae 0102 	sub.w	r1, lr, #2
 80241f4:	f303 0307 	ssat	r3, #8, r3
 80241f8:	b25b      	sxtb	r3, r3
 80241fa:	f806 3c01 	strb.w	r3, [r6, #-1]
 80241fe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8024202:	2915      	cmp	r1, #21
 8024204:	f73f af55 	bgt.w	80240b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8024208:	2900      	cmp	r1, #0
 802420a:	dd20      	ble.n	802424e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 802420c:	0053      	lsls	r3, r2, #1
 802420e:	683f      	ldr	r7, [r7, #0]
 8024210:	f8d8 2000 	ldr.w	r2, [r8]
 8024214:	fb53 7302 	smmla	r3, r3, r2, r7
 8024218:	410b      	asrs	r3, r1
 802421a:	f303 0307 	ssat	r3, #8, r3
 802421e:	b25b      	sxtb	r3, r3
 8024220:	e758      	b.n	80240d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 8024222:	f1c9 0701 	rsb	r7, r9, #1
 8024226:	f1ae 0102 	sub.w	r1, lr, #2
 802422a:	fa03 f707 	lsl.w	r7, r3, r7
 802422e:	f307 071f 	ssat	r7, #32, r7
 8024232:	f1a5 0804 	sub.w	r8, r5, #4
 8024236:	f855 3c08 	ldr.w	r3, [r5, #-8]
 802423a:	fb57 f713 	smmulr	r7, r7, r3
 802423e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8024242:	443b      	add	r3, r7
 8024244:	1f27      	subs	r7, r4, #4
 8024246:	f303 0307 	ssat	r3, #8, r3
 802424a:	b25b      	sxtb	r3, r3
 802424c:	e72a      	b.n	80240a4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 802424e:	f1c1 0101 	rsb	r1, r1, #1
 8024252:	408a      	lsls	r2, r1
 8024254:	f302 021f 	ssat	r2, #32, r2
 8024258:	f8d8 3000 	ldr.w	r3, [r8]
 802425c:	fb52 f313 	smmulr	r3, r2, r3
 8024260:	683a      	ldr	r2, [r7, #0]
 8024262:	4413      	add	r3, r2
 8024264:	f303 0307 	ssat	r3, #8, r3
 8024268:	b25b      	sxtb	r3, r3
 802426a:	e733      	b.n	80240d4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 802426c:	9904      	ldr	r1, [sp, #16]
 802426e:	e6d5      	b.n	802401c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 8024270:	2101      	movs	r1, #1
 8024272:	4613      	mov	r3, r2
 8024274:	e67b      	b.n	8023f6e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 8024276:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802427a:	1a9b      	subs	r3, r3, r2
 802427c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802427e:	18d0      	adds	r0, r2, r3
 8024280:	b013      	add	sp, #76	@ 0x4c
 8024282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024286:	2a00      	cmp	r2, #0
 8024288:	dd0e      	ble.n	80242a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 802428a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802428c:	005b      	lsls	r3, r3, #1
 802428e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024290:	6809      	ldr	r1, [r1, #0]
 8024292:	6800      	ldr	r0, [r0, #0]
 8024294:	fb53 0301 	smmla	r3, r3, r1, r0
 8024298:	4113      	asrs	r3, r2
 802429a:	f303 0307 	ssat	r3, #8, r3
 802429e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80242a0:	f802 3b01 	strb.w	r3, [r2], #1
 80242a4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80242a6:	e786      	b.n	80241b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 80242a8:	f1c2 0201 	rsb	r2, r2, #1
 80242ac:	4093      	lsls	r3, r2
 80242ae:	f303 031f 	ssat	r3, #32, r3
 80242b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80242b4:	6812      	ldr	r2, [r2, #0]
 80242b6:	fb53 f312 	smmulr	r3, r3, r2
 80242ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80242bc:	6812      	ldr	r2, [r2, #0]
 80242be:	4413      	add	r3, r2
 80242c0:	f303 0307 	ssat	r3, #8, r3
 80242c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80242c6:	f802 3b01 	strb.w	r3, [r2], #1
 80242ca:	9223      	str	r2, [sp, #140]	@ 0x8c
 80242cc:	e773      	b.n	80241b6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 80242ce:	4606      	mov	r6, r0
 80242d0:	e744      	b.n	802415c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 80242d2:	bf00      	nop

080242d4 <weights_2channels_prefetch>:
 80242d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242d8:	2b00      	cmp	r3, #0
 80242da:	b087      	sub	sp, #28
 80242dc:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80242e0:	9302      	str	r3, [sp, #8]
 80242e2:	f340 80e6 	ble.w	80244b2 <weights_2channels_prefetch+0x1de>
 80242e6:	f1a8 0310 	sub.w	r3, r8, #16
 80242ea:	f1a8 0403 	sub.w	r4, r8, #3
 80242ee:	f04f 0b00 	mov.w	fp, #0
 80242f2:	091b      	lsrs	r3, r3, #4
 80242f4:	9403      	str	r4, [sp, #12]
 80242f6:	f1a8 0404 	sub.w	r4, r8, #4
 80242fa:	3301      	adds	r3, #1
 80242fc:	9405      	str	r4, [sp, #20]
 80242fe:	011c      	lsls	r4, r3, #4
 8024300:	019b      	lsls	r3, r3, #6
 8024302:	9400      	str	r4, [sp, #0]
 8024304:	9304      	str	r3, [sp, #16]
 8024306:	f1b8 0f0f 	cmp.w	r8, #15
 802430a:	f340 80d7 	ble.w	80244bc <weights_2channels_prefetch+0x1e8>
 802430e:	9b00      	ldr	r3, [sp, #0]
 8024310:	460d      	mov	r5, r1
 8024312:	18c6      	adds	r6, r0, r3
 8024314:	4613      	mov	r3, r2
 8024316:	6804      	ldr	r4, [r0, #0]
 8024318:	3010      	adds	r0, #16
 802431a:	682f      	ldr	r7, [r5, #0]
 802431c:	3340      	adds	r3, #64	@ 0x40
 802431e:	fa2f fc84 	sxtb16	ip, r4
 8024322:	3510      	adds	r5, #16
 8024324:	f843 cc40 	str.w	ip, [r3, #-64]
 8024328:	ea4f 2434 	mov.w	r4, r4, ror #8
 802432c:	42b0      	cmp	r0, r6
 802432e:	fa2f f484 	sxtb16	r4, r4
 8024332:	f843 4c3c 	str.w	r4, [r3, #-60]
 8024336:	ea4f 2437 	mov.w	r4, r7, ror #8
 802433a:	fa2f f787 	sxtb16	r7, r7
 802433e:	fa2f f484 	sxtb16	r4, r4
 8024342:	f843 7c38 	str.w	r7, [r3, #-56]
 8024346:	f843 4c34 	str.w	r4, [r3, #-52]
 802434a:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 802434e:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8024352:	ea4f 2c34 	mov.w	ip, r4, ror #8
 8024356:	fa2f f484 	sxtb16	r4, r4
 802435a:	fa2f fc8c 	sxtb16	ip, ip
 802435e:	f843 4c28 	str.w	r4, [r3, #-40]
 8024362:	f843 cc24 	str.w	ip, [r3, #-36]
 8024366:	ea4f 2c37 	mov.w	ip, r7, ror #8
 802436a:	fa2f f787 	sxtb16	r7, r7
 802436e:	f843 7c30 	str.w	r7, [r3, #-48]
 8024372:	fa2f f78c 	sxtb16	r7, ip
 8024376:	f843 7c2c 	str.w	r7, [r3, #-44]
 802437a:	f850 7c08 	ldr.w	r7, [r0, #-8]
 802437e:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8024382:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8024386:	fa2f f787 	sxtb16	r7, r7
 802438a:	fa2f fc8c 	sxtb16	ip, ip
 802438e:	f843 7c20 	str.w	r7, [r3, #-32]
 8024392:	ea4f 2734 	mov.w	r7, r4, ror #8
 8024396:	f843 cc1c 	str.w	ip, [r3, #-28]
 802439a:	fa2f f787 	sxtb16	r7, r7
 802439e:	fa2f f484 	sxtb16	r4, r4
 80243a2:	f843 7c14 	str.w	r7, [r3, #-20]
 80243a6:	f843 4c18 	str.w	r4, [r3, #-24]
 80243aa:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80243ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80243b2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80243b6:	fa2f f787 	sxtb16	r7, r7
 80243ba:	fa2f fc8c 	sxtb16	ip, ip
 80243be:	f843 7c10 	str.w	r7, [r3, #-16]
 80243c2:	ea4f 2734 	mov.w	r7, r4, ror #8
 80243c6:	f843 cc0c 	str.w	ip, [r3, #-12]
 80243ca:	fa2f f787 	sxtb16	r7, r7
 80243ce:	fa2f f484 	sxtb16	r4, r4
 80243d2:	f843 7c04 	str.w	r7, [r3, #-4]
 80243d6:	f843 4c08 	str.w	r4, [r3, #-8]
 80243da:	d19c      	bne.n	8024316 <weights_2channels_prefetch+0x42>
 80243dc:	9b04      	ldr	r3, [sp, #16]
 80243de:	441a      	add	r2, r3
 80243e0:	9b00      	ldr	r3, [sp, #0]
 80243e2:	4419      	add	r1, r3
 80243e4:	469e      	mov	lr, r3
 80243e6:	9b03      	ldr	r3, [sp, #12]
 80243e8:	4573      	cmp	r3, lr
 80243ea:	dd65      	ble.n	80244b8 <weights_2channels_prefetch+0x1e4>
 80243ec:	9b05      	ldr	r3, [sp, #20]
 80243ee:	4614      	mov	r4, r2
 80243f0:	460f      	mov	r7, r1
 80243f2:	eba3 090e 	sub.w	r9, r3, lr
 80243f6:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80243fa:	f109 0a01 	add.w	sl, r9, #1
 80243fe:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8024402:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 8024406:	9301      	str	r3, [sp, #4]
 8024408:	f856 3b04 	ldr.w	r3, [r6], #4
 802440c:	3410      	adds	r4, #16
 802440e:	f857 5b04 	ldr.w	r5, [r7], #4
 8024412:	fa2f fc83 	sxtb16	ip, r3
 8024416:	4286      	cmp	r6, r0
 8024418:	ea4f 2333 	mov.w	r3, r3, ror #8
 802441c:	fa2f f383 	sxtb16	r3, r3
 8024420:	f844 3c0c 	str.w	r3, [r4, #-12]
 8024424:	ea4f 2335 	mov.w	r3, r5, ror #8
 8024428:	fa2f f585 	sxtb16	r5, r5
 802442c:	f844 cc10 	str.w	ip, [r4, #-16]
 8024430:	f844 5c08 	str.w	r5, [r4, #-8]
 8024434:	fa2f f383 	sxtb16	r3, r3
 8024438:	f844 3c04 	str.w	r3, [r4, #-4]
 802443c:	d1e4      	bne.n	8024408 <weights_2channels_prefetch+0x134>
 802443e:	9b01      	ldr	r3, [sp, #4]
 8024440:	f10e 0e04 	add.w	lr, lr, #4
 8024444:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8024448:	4419      	add	r1, r3
 802444a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 802444e:	45f0      	cmp	r8, lr
 8024450:	dd29      	ble.n	80244a6 <weights_2channels_prefetch+0x1d2>
 8024452:	f990 3000 	ldrsb.w	r3, [r0]
 8024456:	8013      	strh	r3, [r2, #0]
 8024458:	f991 3000 	ldrsb.w	r3, [r1]
 802445c:	8053      	strh	r3, [r2, #2]
 802445e:	f10e 0301 	add.w	r3, lr, #1
 8024462:	4598      	cmp	r8, r3
 8024464:	dd19      	ble.n	802449a <weights_2channels_prefetch+0x1c6>
 8024466:	f990 3001 	ldrsb.w	r3, [r0, #1]
 802446a:	8093      	strh	r3, [r2, #4]
 802446c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8024470:	80d3      	strh	r3, [r2, #6]
 8024472:	f10e 0302 	add.w	r3, lr, #2
 8024476:	4598      	cmp	r8, r3
 8024478:	dd0f      	ble.n	802449a <weights_2channels_prefetch+0x1c6>
 802447a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 802447e:	8113      	strh	r3, [r2, #8]
 8024480:	f10e 0303 	add.w	r3, lr, #3
 8024484:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8024488:	4598      	cmp	r8, r3
 802448a:	8154      	strh	r4, [r2, #10]
 802448c:	dd05      	ble.n	802449a <weights_2channels_prefetch+0x1c6>
 802448e:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8024492:	8193      	strh	r3, [r2, #12]
 8024494:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8024498:	81d3      	strh	r3, [r2, #14]
 802449a:	eba8 0e0e 	sub.w	lr, r8, lr
 802449e:	4470      	add	r0, lr
 80244a0:	4471      	add	r1, lr
 80244a2:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 80244a6:	f10b 0b01 	add.w	fp, fp, #1
 80244aa:	9b02      	ldr	r3, [sp, #8]
 80244ac:	455b      	cmp	r3, fp
 80244ae:	f47f af2a 	bne.w	8024306 <weights_2channels_prefetch+0x32>
 80244b2:	b007      	add	sp, #28
 80244b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244b8:	4630      	mov	r0, r6
 80244ba:	e7c8      	b.n	802444e <weights_2channels_prefetch+0x17a>
 80244bc:	4606      	mov	r6, r0
 80244be:	f04f 0e00 	mov.w	lr, #0
 80244c2:	e790      	b.n	80243e6 <weights_2channels_prefetch+0x112>

080244c4 <st_sssa8_ch_fullW_prefetch>:
 80244c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244c8:	b087      	sub	sp, #28
 80244ca:	461c      	mov	r4, r3
 80244cc:	4680      	mov	r8, r0
 80244ce:	4613      	mov	r3, r2
 80244d0:	104f      	asrs	r7, r1, #1
 80244d2:	4620      	mov	r0, r4
 80244d4:	9103      	str	r1, [sp, #12]
 80244d6:	9704      	str	r7, [sp, #16]
 80244d8:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	@ 0x40
 80244dc:	eb08 0402 	add.w	r4, r8, r2
 80244e0:	d020      	beq.n	8024524 <st_sssa8_ch_fullW_prefetch+0x60>
 80244e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80244e4:	4646      	mov	r6, r8
 80244e6:	4655      	mov	r5, sl
 80244e8:	f8cd 8014 	str.w	r8, [sp, #20]
 80244ec:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80244f0:	4680      	mov	r8, r0
 80244f2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80244f6:	469a      	mov	sl, r3
 80244f8:	462a      	mov	r2, r5
 80244fa:	4621      	mov	r1, r4
 80244fc:	4630      	mov	r0, r6
 80244fe:	4653      	mov	r3, sl
 8024500:	f8cd 8000 	str.w	r8, [sp]
 8024504:	445d      	add	r5, fp
 8024506:	f7ff fee5 	bl	80242d4 <weights_2channels_prefetch>
 802450a:	3f01      	subs	r7, #1
 802450c:	444c      	add	r4, r9
 802450e:	444e      	add	r6, r9
 8024510:	d1f2      	bne.n	80244f8 <st_sssa8_ch_fullW_prefetch+0x34>
 8024512:	9b04      	ldr	r3, [sp, #16]
 8024514:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8024518:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 802451c:	fb03 8809 	mla	r8, r3, r9, r8
 8024520:	fb03 aa0b 	mla	sl, r3, fp, sl
 8024524:	9b03      	ldr	r3, [sp, #12]
 8024526:	07db      	lsls	r3, r3, #31
 8024528:	d509      	bpl.n	802453e <st_sssa8_ch_fullW_prefetch+0x7a>
 802452a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802452c:	2b00      	cmp	r3, #0
 802452e:	dd06      	ble.n	802453e <st_sssa8_ch_fullW_prefetch+0x7a>
 8024530:	4443      	add	r3, r8
 8024532:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8024536:	4543      	cmp	r3, r8
 8024538:	f82a 2b02 	strh.w	r2, [sl], #2
 802453c:	d1f9      	bne.n	8024532 <st_sssa8_ch_fullW_prefetch+0x6e>
 802453e:	b007      	add	sp, #28
 8024540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024544 <st_int8_to_f32>:
 8024544:	b530      	push	{r4, r5, lr}
 8024546:	0894      	lsrs	r4, r2, #2
 8024548:	d036      	beq.n	80245b8 <st_int8_to_f32+0x74>
 802454a:	1d03      	adds	r3, r0, #4
 802454c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8024608 <st_int8_to_f32+0xc4>
 8024550:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8024554:	f101 0c10 	add.w	ip, r1, #16
 8024558:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 802455c:	f10c 0c10 	add.w	ip, ip, #16
 8024560:	ee07 ea90 	vmov	s15, lr
 8024564:	469e      	mov	lr, r3
 8024566:	3304      	adds	r3, #4
 8024568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802456c:	4586      	cmp	lr, r0
 802456e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024572:	ed4c 7a08 	vstr	s15, [ip, #-32]	@ 0xffffffe0
 8024576:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 802457a:	ee07 5a90 	vmov	s15, r5
 802457e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024586:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 802458a:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 802458e:	ee07 5a90 	vmov	s15, r5
 8024592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024596:	ee67 7a87 	vmul.f32	s15, s15, s14
 802459a:	ed4c 7a06 	vstr	s15, [ip, #-24]	@ 0xffffffe8
 802459e:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 80245a2:	ee07 5a90 	vmov	s15, r5
 80245a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80245aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80245ae:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 80245b2:	d1d1      	bne.n	8024558 <st_int8_to_f32+0x14>
 80245b4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80245b8:	f012 0203 	ands.w	r2, r2, #3
 80245bc:	d023      	beq.n	8024606 <st_int8_to_f32+0xc2>
 80245be:	f990 3000 	ldrsb.w	r3, [r0]
 80245c2:	3a01      	subs	r2, #1
 80245c4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8024608 <st_int8_to_f32+0xc4>
 80245c8:	ee07 3a90 	vmov	s15, r3
 80245cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80245d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80245d4:	edc1 7a00 	vstr	s15, [r1]
 80245d8:	d015      	beq.n	8024606 <st_int8_to_f32+0xc2>
 80245da:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80245de:	2a01      	cmp	r2, #1
 80245e0:	ee07 3a90 	vmov	s15, r3
 80245e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80245e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80245ec:	edc1 7a01 	vstr	s15, [r1, #4]
 80245f0:	d009      	beq.n	8024606 <st_int8_to_f32+0xc2>
 80245f2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80245f6:	ee07 3a90 	vmov	s15, r3
 80245fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80245fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024602:	edc1 7a02 	vstr	s15, [r1, #8]
 8024606:	bd30      	pop	{r4, r5, pc}
 8024608:	3c000000 	.word	0x3c000000
	...

08030000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>:
 8030000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030004:	b0a4      	sub	sp, #144	@ 0x90
 8030006:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030008:	9313      	str	r3, [sp, #76]	@ 0x4c
 803000a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 803000c:	9011      	str	r0, [sp, #68]	@ 0x44
 803000e:	9112      	str	r1, [sp, #72]	@ 0x48
 8030010:	9210      	str	r2, [sp, #64]	@ 0x40
 8030012:	f013 0801 	ands.w	r8, r3, #1
 8030016:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
 803001a:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 803001c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 803001e:	bf1c      	itt	ne
 8030020:	3402      	addne	r4, #2
 8030022:	3502      	addne	r5, #2
 8030024:	fb04 f405 	mul.w	r4, r4, r5
 8030028:	f013 0502 	ands.w	r5, r3, #2
 803002c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 803002e:	951e      	str	r5, [sp, #120]	@ 0x78
 8030030:	f04f 0c01 	mov.w	ip, #1
 8030034:	bf19      	ittee	ne
 8030036:	940b      	strne	r4, [sp, #44]	@ 0x2c
 8030038:	f8cd c028 	strne.w	ip, [sp, #40]	@ 0x28
 803003c:	f8cd c02c 	streq.w	ip, [sp, #44]	@ 0x2c
 8030040:	970a      	streq	r7, [sp, #40]	@ 0x28
 8030042:	f003 0803 	and.w	r8, r3, #3
 8030046:	f1b8 0f03 	cmp.w	r8, #3
 803004a:	bf0c      	ite	eq
 803004c:	2302      	moveq	r3, #2
 803004e:	2300      	movne	r3, #0
 8030050:	930c      	str	r3, [sp, #48]	@ 0x30
 8030052:	2f01      	cmp	r7, #1
 8030054:	f340 8231 	ble.w	80304ba <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4ba>
 8030058:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 803005a:	eba6 0486 	sub.w	r4, r6, r6, lsl #2
 803005e:	eb05 0304 	add.w	r3, r5, r4
 8030062:	4433      	add	r3, r6
 8030064:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030066:	f1c5 0302 	rsb	r3, r5, #2
 803006a:	eba3 0006 	sub.w	r0, r3, r6
 803006e:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8030072:	44b4      	add	ip, r6
 8030074:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 8030078:	f1ac 0c03 	sub.w	ip, ip, #3
 803007c:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8030080:	f006 0c03 	and.w	ip, r6, #3
 8030084:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
 8030088:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 803008c:	9321      	str	r3, [sp, #132]	@ 0x84
 803008e:	ea4f 03a6 	mov.w	r3, r6, asr #2
 8030092:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8030096:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 803009a:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 803009e:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 80300a2:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 80300a6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80300a8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80300ac:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
 80300b0:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80300b4:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80300b6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80300b8:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 80300ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80300bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80300be:	920f      	str	r2, [sp, #60]	@ 0x3c
 80300c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80300c2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80300c6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80300ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80300ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80300d0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300d4:	e9cd 1200 	strd	r1, r2, [sp]
 80300d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80300da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80300de:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80300e2:	2b00      	cmp	r3, #0
 80300e4:	bfcc      	ite	gt
 80300e6:	2000      	movgt	r0, #0
 80300e8:	f04f 30ff 	movle.w	r0, #4294967295
 80300ec:	2b15      	cmp	r3, #21
 80300ee:	bfc8      	it	gt
 80300f0:	2001      	movgt	r0, #1
 80300f2:	2c00      	cmp	r4, #0
 80300f4:	bfcc      	ite	gt
 80300f6:	2100      	movgt	r1, #0
 80300f8:	f04f 31ff 	movle.w	r1, #4294967295
 80300fc:	2c15      	cmp	r4, #21
 80300fe:	bfc8      	it	gt
 8030100:	2101      	movgt	r1, #1
 8030102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030106:	f000 bc59 	b.w	80309bc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9bc>
 803010a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 803010c:	2b00      	cmp	r3, #0
 803010e:	f040 8426 	bne.w	803095e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x95e>
 8030112:	4618      	mov	r0, r3
 8030114:	461a      	mov	r2, r3
 8030116:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
 8030118:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803011a:	e9d4 1300 	ldrd	r1, r3, [r4]
 803011e:	4403      	add	r3, r0
 8030120:	440a      	add	r2, r1
 8030122:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8030126:	2d03      	cmp	r5, #3
 8030128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803012a:	d103      	bne.n	8030134 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x134>
 803012c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803012e:	f103 0303 	add.w	r3, r3, #3
 8030132:	441a      	add	r2, r3
 8030134:	9215      	str	r2, [sp, #84]	@ 0x54
 8030136:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 803013a:	f1b8 0f00 	cmp.w	r8, #0
 803013e:	f000 819d 	beq.w	803047c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x47c>
 8030142:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8030144:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8030148:	9417      	str	r4, [sp, #92]	@ 0x5c
 803014a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803014c:	105b      	asrs	r3, r3, #1
 803014e:	f000 8184 	beq.w	803045a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x45a>
 8030152:	9418      	str	r4, [sp, #96]	@ 0x60
 8030154:	9319      	str	r3, [sp, #100]	@ 0x64
 8030156:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8030158:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 803015a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 803015e:	4610      	mov	r0, r2
 8030160:	4619      	mov	r1, r3
 8030162:	2e04      	cmp	r6, #4
 8030164:	f340 8123 	ble.w	80303ae <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3ae>
 8030168:	ea4f 0ea6 	mov.w	lr, r6, asr #2
 803016c:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8030170:	f8d4 8000 	ldr.w	r8, [r4]
 8030174:	fa2f f788 	sxtb16	r7, r8
 8030178:	fa2f f898 	sxtb16	r8, r8, ror #8
 803017c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030180:	fb27 2209 	smlad	r2, r7, r9, r2
 8030184:	fb28 220a 	smlad	r2, r8, sl, r2
 8030188:	fb28 330c 	smlad	r3, r8, ip, r3
 803018c:	f854 8006 	ldr.w	r8, [r4, r6]
 8030190:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030194:	fa2f f788 	sxtb16	r7, r8
 8030198:	fa2f f898 	sxtb16	r8, r8, ror #8
 803019c:	fb27 0009 	smlad	r0, r7, r9, r0
 80301a0:	f855 9b04 	ldr.w	r9, [r5], #4
 80301a4:	fb28 000a 	smlad	r0, r8, sl, r0
 80301a8:	f855 ab04 	ldr.w	sl, [r5], #4
 80301ac:	fb27 110b 	smlad	r1, r7, fp, r1
 80301b0:	f855 bb04 	ldr.w	fp, [r5], #4
 80301b4:	fb28 110c 	smlad	r1, r8, ip, r1
 80301b8:	f855 cb04 	ldr.w	ip, [r5], #4
 80301bc:	fb27 2209 	smlad	r2, r7, r9, r2
 80301c0:	fb27 330b 	smlad	r3, r7, fp, r3
 80301c4:	fb28 220a 	smlad	r2, r8, sl, r2
 80301c8:	fb28 330c 	smlad	r3, r8, ip, r3
 80301cc:	f8d4 8000 	ldr.w	r8, [r4]
 80301d0:	fa2f f788 	sxtb16	r7, r8
 80301d4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80301d8:	fb27 0009 	smlad	r0, r7, r9, r0
 80301dc:	f855 9b04 	ldr.w	r9, [r5], #4
 80301e0:	fb28 000a 	smlad	r0, r8, sl, r0
 80301e4:	f855 ab04 	ldr.w	sl, [r5], #4
 80301e8:	fb27 110b 	smlad	r1, r7, fp, r1
 80301ec:	f855 bb04 	ldr.w	fp, [r5], #4
 80301f0:	fb28 110c 	smlad	r1, r8, ip, r1
 80301f4:	f855 cb04 	ldr.w	ip, [r5], #4
 80301f8:	fb27 2209 	smlad	r2, r7, r9, r2
 80301fc:	fb27 330b 	smlad	r3, r7, fp, r3
 8030200:	fb28 220a 	smlad	r2, r8, sl, r2
 8030204:	fb28 330c 	smlad	r3, r8, ip, r3
 8030208:	f854 8006 	ldr.w	r8, [r4, r6]
 803020c:	fa2f f788 	sxtb16	r7, r8
 8030210:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030214:	fb27 0009 	smlad	r0, r7, r9, r0
 8030218:	fb27 110b 	smlad	r1, r7, fp, r1
 803021c:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8030220:	fb28 000a 	smlad	r0, r8, sl, r0
 8030224:	fb28 110c 	smlad	r1, r8, ip, r1
 8030228:	444c      	add	r4, r9
 803022a:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 803022e:	f8d4 8000 	ldr.w	r8, [r4]
 8030232:	fa2f f788 	sxtb16	r7, r8
 8030236:	fa2f f898 	sxtb16	r8, r8, ror #8
 803023a:	fb27 330b 	smlad	r3, r7, fp, r3
 803023e:	fb27 2209 	smlad	r2, r7, r9, r2
 8030242:	fb28 220a 	smlad	r2, r8, sl, r2
 8030246:	fb28 330c 	smlad	r3, r8, ip, r3
 803024a:	f854 8006 	ldr.w	r8, [r4, r6]
 803024e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030252:	fa2f f788 	sxtb16	r7, r8
 8030256:	fa2f f898 	sxtb16	r8, r8, ror #8
 803025a:	fb27 0009 	smlad	r0, r7, r9, r0
 803025e:	f855 9b04 	ldr.w	r9, [r5], #4
 8030262:	fb28 000a 	smlad	r0, r8, sl, r0
 8030266:	f855 ab04 	ldr.w	sl, [r5], #4
 803026a:	fb27 110b 	smlad	r1, r7, fp, r1
 803026e:	f855 bb04 	ldr.w	fp, [r5], #4
 8030272:	fb28 110c 	smlad	r1, r8, ip, r1
 8030276:	f855 cb04 	ldr.w	ip, [r5], #4
 803027a:	fb27 2209 	smlad	r2, r7, r9, r2
 803027e:	fb27 330b 	smlad	r3, r7, fp, r3
 8030282:	fb28 220a 	smlad	r2, r8, sl, r2
 8030286:	fb28 330c 	smlad	r3, r8, ip, r3
 803028a:	f8d4 8000 	ldr.w	r8, [r4]
 803028e:	fa2f f788 	sxtb16	r7, r8
 8030292:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030296:	fb27 0009 	smlad	r0, r7, r9, r0
 803029a:	f855 9b04 	ldr.w	r9, [r5], #4
 803029e:	fb28 000a 	smlad	r0, r8, sl, r0
 80302a2:	f855 ab04 	ldr.w	sl, [r5], #4
 80302a6:	fb27 110b 	smlad	r1, r7, fp, r1
 80302aa:	f855 bb04 	ldr.w	fp, [r5], #4
 80302ae:	fb28 110c 	smlad	r1, r8, ip, r1
 80302b2:	f855 cb04 	ldr.w	ip, [r5], #4
 80302b6:	fb27 2209 	smlad	r2, r7, r9, r2
 80302ba:	fb27 330b 	smlad	r3, r7, fp, r3
 80302be:	fb28 220a 	smlad	r2, r8, sl, r2
 80302c2:	fb28 330c 	smlad	r3, r8, ip, r3
 80302c6:	f854 8006 	ldr.w	r8, [r4, r6]
 80302ca:	fa2f f788 	sxtb16	r7, r8
 80302ce:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302d2:	fb27 0009 	smlad	r0, r7, r9, r0
 80302d6:	fb27 110b 	smlad	r1, r7, fp, r1
 80302da:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 80302de:	fb28 000a 	smlad	r0, r8, sl, r0
 80302e2:	fb28 110c 	smlad	r1, r8, ip, r1
 80302e6:	444c      	add	r4, r9
 80302e8:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80302ec:	f8d4 8000 	ldr.w	r8, [r4]
 80302f0:	fa2f f788 	sxtb16	r7, r8
 80302f4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80302f8:	fb27 330b 	smlad	r3, r7, fp, r3
 80302fc:	fb27 2209 	smlad	r2, r7, r9, r2
 8030300:	fb28 220a 	smlad	r2, r8, sl, r2
 8030304:	fb28 330c 	smlad	r3, r8, ip, r3
 8030308:	f854 8006 	ldr.w	r8, [r4, r6]
 803030c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030310:	fa2f f788 	sxtb16	r7, r8
 8030314:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030318:	fb27 0009 	smlad	r0, r7, r9, r0
 803031c:	f855 9b04 	ldr.w	r9, [r5], #4
 8030320:	fb28 000a 	smlad	r0, r8, sl, r0
 8030324:	f855 ab04 	ldr.w	sl, [r5], #4
 8030328:	fb27 110b 	smlad	r1, r7, fp, r1
 803032c:	f855 bb04 	ldr.w	fp, [r5], #4
 8030330:	fb28 110c 	smlad	r1, r8, ip, r1
 8030334:	f855 cb04 	ldr.w	ip, [r5], #4
 8030338:	fb27 2209 	smlad	r2, r7, r9, r2
 803033c:	fb27 330b 	smlad	r3, r7, fp, r3
 8030340:	fb28 220a 	smlad	r2, r8, sl, r2
 8030344:	fb28 330c 	smlad	r3, r8, ip, r3
 8030348:	f8d4 8000 	ldr.w	r8, [r4]
 803034c:	fa2f f788 	sxtb16	r7, r8
 8030350:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030354:	fb27 0009 	smlad	r0, r7, r9, r0
 8030358:	f855 9b04 	ldr.w	r9, [r5], #4
 803035c:	fb28 000a 	smlad	r0, r8, sl, r0
 8030360:	f855 ab04 	ldr.w	sl, [r5], #4
 8030364:	fb27 110b 	smlad	r1, r7, fp, r1
 8030368:	f855 bb04 	ldr.w	fp, [r5], #4
 803036c:	fb28 110c 	smlad	r1, r8, ip, r1
 8030370:	f855 cb04 	ldr.w	ip, [r5], #4
 8030374:	fb27 2209 	smlad	r2, r7, r9, r2
 8030378:	fb27 330b 	smlad	r3, r7, fp, r3
 803037c:	fb28 220a 	smlad	r2, r8, sl, r2
 8030380:	fb28 330c 	smlad	r3, r8, ip, r3
 8030384:	f854 8006 	ldr.w	r8, [r4, r6]
 8030388:	fa2f f788 	sxtb16	r7, r8
 803038c:	fa2f f898 	sxtb16	r8, r8, ror #8
 8030390:	fb27 0009 	smlad	r0, r7, r9, r0
 8030394:	fb27 110b 	smlad	r1, r7, fp, r1
 8030398:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 803039c:	fb28 000a 	smlad	r0, r8, sl, r0
 80303a0:	fb28 110c 	smlad	r1, r8, ip, r1
 80303a4:	f1be 0e01 	subs.w	lr, lr, #1
 80303a8:	444c      	add	r4, r9
 80303aa:	f47f aedf 	bne.w	803016c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x16c>
 80303ae:	f016 0703 	ands.w	r7, r6, #3
 80303b2:	f300 80ff 	bgt.w	80305b4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5b4>
 80303b6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80303ba:	f8dd a000 	ldr.w	sl, [sp]
 80303be:	f8dd b008 	ldr.w	fp, [sp, #8]
 80303c2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80303c6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80303c8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80303ca:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80303ce:	44a8      	add	r8, r5
 80303d0:	f1bc 0f00 	cmp.w	ip, #0
 80303d4:	f040 832d 	bne.w	8030a32 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa32>
 80303d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80303dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80303e0:	fb52 e20a 	smmla	r2, r2, sl, lr
 80303e4:	fb50 e00a 	smmla	r0, r0, sl, lr
 80303e8:	fa42 f20b 	asr.w	r2, r2, fp
 80303ec:	fa40 f00b 	asr.w	r0, r0, fp
 80303f0:	f302 0207 	ssat	r2, #8, r2
 80303f4:	f300 0007 	ssat	r0, #8, r0
 80303f8:	702a      	strb	r2, [r5, #0]
 80303fa:	55e8      	strb	r0, [r5, r7]
 80303fc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8030400:	f8dd a004 	ldr.w	sl, [sp, #4]
 8030404:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8030408:	f8dd c01c 	ldr.w	ip, [sp, #28]
 803040c:	f1bc 0f00 	cmp.w	ip, #0
 8030410:	f040 8338 	bne.w	8030a84 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa84>
 8030414:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 803041c:	fb53 e30a 	smmla	r3, r3, sl, lr
 8030420:	fb51 e10a 	smmla	r1, r1, sl, lr
 8030424:	fa43 f30b 	asr.w	r3, r3, fp
 8030428:	fa41 f10b 	asr.w	r1, r1, fp
 803042c:	f303 0307 	ssat	r3, #8, r3
 8030430:	f301 0107 	ssat	r1, #8, r1
 8030434:	f888 3000 	strb.w	r3, [r8]
 8030438:	f808 1007 	strb.w	r1, [r8, r7]
 803043c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 803043e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8030440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8030442:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8030444:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8030446:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 803044a:	9215      	str	r2, [sp, #84]	@ 0x54
 803044c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8030450:	9518      	str	r5, [sp, #96]	@ 0x60
 8030452:	3b01      	subs	r3, #1
 8030454:	9319      	str	r3, [sp, #100]	@ 0x64
 8030456:	f73f ae7e 	bgt.w	8030156 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x156>
 803045a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 803045c:	f013 0301 	ands.w	r3, r3, #1
 8030460:	f040 8141 	bne.w	80306e6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x6e6>
 8030464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030466:	441a      	add	r2, r3
 8030468:	9215      	str	r2, [sp, #84]	@ 0x54
 803046a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 803046c:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 803046e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8030470:	440c      	add	r4, r1
 8030472:	9417      	str	r4, [sp, #92]	@ 0x5c
 8030474:	3b01      	subs	r3, #1
 8030476:	931a      	str	r3, [sp, #104]	@ 0x68
 8030478:	f47f ae67 	bne.w	803014a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x14a>
 803047c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 803047e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8030484:	9212      	str	r2, [sp, #72]	@ 0x48
 8030486:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8030488:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803048a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 803048e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8030490:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8030492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030494:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030496:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8030498:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 803049a:	f100 0008 	add.w	r0, r0, #8
 803049e:	900d      	str	r0, [sp, #52]	@ 0x34
 80304a0:	f102 0208 	add.w	r2, r2, #8
 80304a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80304a6:	f103 0308 	add.w	r3, r3, #8
 80304aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80304ac:	f104 0404 	add.w	r4, r4, #4
 80304b0:	42a5      	cmp	r5, r4
 80304b2:	940e      	str	r4, [sp, #56]	@ 0x38
 80304b4:	f47f ae04 	bne.w	80300c0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xc0>
 80304b8:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80304ba:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80304bc:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80304be:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 80304c0:	f013 0301 	ands.w	r3, r3, #1
 80304c4:	d071      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304c6:	2900      	cmp	r1, #0
 80304c8:	d06f      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304ca:	911a      	str	r1, [sp, #104]	@ 0x68
 80304cc:	2d00      	cmp	r5, #0
 80304ce:	d06c      	beq.n	80305aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80304d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80304d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80304d4:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80304d8:	6818      	ldr	r0, [r3, #0]
 80304da:	6821      	ldr	r1, [r4, #0]
 80304dc:	f9b8 b000 	ldrsh.w	fp, [r8]
 80304e0:	9100      	str	r1, [sp, #0]
 80304e2:	f1bb 0f00 	cmp.w	fp, #0
 80304e6:	bfcc      	ite	gt
 80304e8:	2200      	movgt	r2, #0
 80304ea:	f04f 32ff 	movle.w	r2, #4294967295
 80304ee:	f1bb 0f15 	cmp.w	fp, #21
 80304f2:	bfc8      	it	gt
 80304f4:	2201      	movgt	r2, #1
 80304f6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80304f8:	f003 0303 	and.w	r3, r3, #3
 80304fc:	2b03      	cmp	r3, #3
 80304fe:	bf03      	ittte	eq
 8030500:	3703      	addeq	r7, #3
 8030502:	197f      	addeq	r7, r7, r5
 8030504:	2602      	moveq	r6, #2
 8030506:	2600      	movne	r6, #0
 8030508:	960b      	str	r6, [sp, #44]	@ 0x2c
 803050a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803050c:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
 8030510:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 8030512:	681c      	ldr	r4, [r3, #0]
 8030514:	f8dd 90c0 	ldr.w	r9, [sp, #192]	@ 0xc0
 8030518:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803051a:	9317      	str	r3, [sp, #92]	@ 0x5c
 803051c:	9410      	str	r4, [sp, #64]	@ 0x40
 803051e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8030522:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8030526:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8030528:	9119      	str	r1, [sp, #100]	@ 0x64
 803052a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 803052c:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8030530:	f1b9 0f00 	cmp.w	r9, #0
 8030534:	dd1a      	ble.n	803056c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x56c>
 8030536:	464d      	mov	r5, r9
 8030538:	f91c 301a 	ldrsb.w	r3, [ip, sl, lsl #1]
 803053c:	f918 4019 	ldrsb.w	r4, [r8, r9, lsl #1]
 8030540:	eba3 0306 	sub.w	r3, r3, r6
 8030544:	3d01      	subs	r5, #1
 8030546:	fb04 1103 	mla	r1, r4, r3, r1
 803054a:	f91c 300a 	ldrsb.w	r3, [ip, sl]
 803054e:	f918 4009 	ldrsb.w	r4, [r8, r9]
 8030552:	eba3 0306 	sub.w	r3, r3, r6
 8030556:	fb04 1103 	mla	r1, r4, r3, r1
 803055a:	f91c 3b01 	ldrsb.w	r3, [ip], #1
 803055e:	f918 4b01 	ldrsb.w	r4, [r8], #1
 8030562:	eba3 0306 	sub.w	r3, r3, r6
 8030566:	fb04 1103 	mla	r1, r4, r3, r1
 803056a:	d1e5      	bne.n	8030538 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x538>
 803056c:	9c00      	ldr	r4, [sp, #0]
 803056e:	2a00      	cmp	r2, #0
 8030570:	f040 82b1 	bne.w	8030ad6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xad6>
 8030574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030578:	fb51 0104 	smmla	r1, r1, r4, r0
 803057c:	fa41 f10b 	asr.w	r1, r1, fp
 8030580:	f301 0107 	ssat	r1, #8, r1
 8030584:	7039      	strb	r1, [r7, #0]
 8030586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8030588:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 803058a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803058c:	4427      	add	r7, r4
 803058e:	ebac 0c41 	sub.w	ip, ip, r1, lsl #1
 8030592:	3b01      	subs	r3, #1
 8030594:	9319      	str	r3, [sp, #100]	@ 0x64
 8030596:	d1c8      	bne.n	803052a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x52a>
 8030598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803059a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 803059c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 803059e:	440f      	add	r7, r1
 80305a0:	4454      	add	r4, sl
 80305a2:	9417      	str	r4, [sp, #92]	@ 0x5c
 80305a4:	3b01      	subs	r3, #1
 80305a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80305a8:	d1bb      	bne.n	8030522 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x522>
 80305aa:	f04f 0000 	mov.w	r0, #0
 80305ae:	b024      	add	sp, #144	@ 0x90
 80305b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80305b4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80305b6:	2f00      	cmp	r7, #0
 80305b8:	f43f aefd 	beq.w	80303b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80305bc:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80305c0:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80305c4:	f994 c000 	ldrsb.w	ip, [r4]
 80305c8:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80305cc:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305d0:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305d4:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80305d8:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80305dc:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80305e0:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80305e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80305e8:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80305ec:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80305f0:	f994 c000 	ldrsb.w	ip, [r4]
 80305f4:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80305f8:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80305fc:	fb1a 3308 	smlabb	r3, sl, r8, r3
 8030600:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8030604:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030608:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803060c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030610:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030614:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030618:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803061c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8030620:	4474      	add	r4, lr
 8030622:	f994 c000 	ldrsb.w	ip, [r4]
 8030626:	f914 8006 	ldrsb.w	r8, [r4, r6]
 803062a:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803062e:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030632:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030636:	fb1b 0008 	smlabb	r0, fp, r8, r0
 803063a:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803063e:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8030642:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8030646:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803064a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803064e:	f994 c000 	ldrsb.w	ip, [r4]
 8030652:	fb1b 2208 	smlabb	r2, fp, r8, r2
 8030656:	fb1b 000c 	smlabb	r0, fp, ip, r0
 803065a:	fb1a 3308 	smlabb	r3, sl, r8, r3
 803065e:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8030662:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030666:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803066a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 803066e:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030672:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030676:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803067a:	fb1a 1108 	smlabb	r1, sl, r8, r1
 803067e:	4474      	add	r4, lr
 8030680:	f994 c000 	ldrsb.w	ip, [r4]
 8030684:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8030688:	f935 bb02 	ldrsh.w	fp, [r5], #2
 803068c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8030690:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8030694:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8030698:	fb1a 330c 	smlabb	r3, sl, ip, r3
 803069c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80306a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80306a4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80306a8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80306ac:	f994 c000 	ldrsb.w	ip, [r4]
 80306b0:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80306b4:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80306b8:	fb1a 3308 	smlabb	r3, sl, r8, r3
 80306bc:	fb1a 110c 	smlabb	r1, sl, ip, r1
 80306c0:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80306c4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80306c8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80306cc:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80306d0:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80306d4:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80306d8:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80306dc:	444c      	add	r4, r9
 80306de:	3f01      	subs	r7, #1
 80306e0:	f73f af70 	bgt.w	80305c4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5c4>
 80306e4:	e667      	b.n	80303b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80306e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80306e8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80306ea:	2b01      	cmp	r3, #1
 80306ec:	bf1e      	ittt	ne
 80306ee:	9b1b      	ldrne	r3, [sp, #108]	@ 0x6c
 80306f0:	18c0      	addne	r0, r0, r3
 80306f2:	1b80      	subne	r0, r0, r6
 80306f4:	e9dd e508 	ldrd	lr, r5, [sp, #32]
 80306f8:	f8dd c0cc 	ldr.w	ip, [sp, #204]	@ 0xcc
 80306fc:	ea4f 0a4c 	mov.w	sl, ip, lsl #1
 8030700:	f1ca 0a04 	rsb	sl, sl, #4
 8030704:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8030706:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 803070a:	f000 8091 	beq.w	8030830 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x830>
 803070e:	6802      	ldr	r2, [r0, #0]
 8030710:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030714:	fa2f f182 	sxtb16	r1, r2
 8030718:	fa2f f292 	sxtb16	r2, r2, ror #8
 803071c:	fb21 ee04 	smlad	lr, r1, r4, lr
 8030720:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030724:	fb22 5509 	smlad	r5, r2, r9, r5
 8030728:	fb21 5508 	smlad	r5, r1, r8, r5
 803072c:	5982      	ldr	r2, [r0, r6]
 803072e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030732:	fa2f f182 	sxtb16	r1, r2
 8030736:	fa2f f292 	sxtb16	r2, r2, ror #8
 803073a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803073e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030742:	fb22 5509 	smlad	r5, r2, r9, r5
 8030746:	fb21 5508 	smlad	r5, r1, r8, r5
 803074a:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 803074e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030752:	fa2f f182 	sxtb16	r1, r2
 8030756:	fa2f f292 	sxtb16	r2, r2, ror #8
 803075a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803075e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030762:	fb22 5509 	smlad	r5, r2, r9, r5
 8030766:	fb21 5508 	smlad	r5, r1, r8, r5
 803076a:	4460      	add	r0, ip
 803076c:	6802      	ldr	r2, [r0, #0]
 803076e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030772:	fa2f f182 	sxtb16	r1, r2
 8030776:	fa2f f292 	sxtb16	r2, r2, ror #8
 803077a:	fb21 ee04 	smlad	lr, r1, r4, lr
 803077e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8030782:	fb22 5509 	smlad	r5, r2, r9, r5
 8030786:	fb21 5508 	smlad	r5, r1, r8, r5
 803078a:	5982      	ldr	r2, [r0, r6]
 803078c:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8030790:	fa2f f182 	sxtb16	r1, r2
 8030794:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030798:	fb21 ee04 	smlad	lr, r1, r4, lr
 803079c:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307a0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307a4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307a8:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 80307ac:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307b0:	fa2f f182 	sxtb16	r1, r2
 80307b4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307b8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307bc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307c0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307c4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307c8:	4460      	add	r0, ip
 80307ca:	6802      	ldr	r2, [r0, #0]
 80307cc:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307d0:	fa2f f182 	sxtb16	r1, r2
 80307d4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307d8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307dc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307e0:	fb22 5509 	smlad	r5, r2, r9, r5
 80307e4:	fb21 5508 	smlad	r5, r1, r8, r5
 80307e8:	5982      	ldr	r2, [r0, r6]
 80307ea:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80307ee:	fa2f f182 	sxtb16	r1, r2
 80307f2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80307f6:	fb21 ee04 	smlad	lr, r1, r4, lr
 80307fa:	fb22 ee07 	smlad	lr, r2, r7, lr
 80307fe:	fb22 5509 	smlad	r5, r2, r9, r5
 8030802:	fb21 5508 	smlad	r5, r1, r8, r5
 8030806:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 803080a:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 803080e:	fa2f f182 	sxtb16	r1, r2
 8030812:	fa2f f292 	sxtb16	r2, r2, ror #8
 8030816:	fb21 ee04 	smlad	lr, r1, r4, lr
 803081a:	fb22 ee07 	smlad	lr, r2, r7, lr
 803081e:	fb22 5509 	smlad	r5, r2, r9, r5
 8030822:	fb21 5508 	smlad	r5, r1, r8, r5
 8030826:	4450      	add	r0, sl
 8030828:	f1bb 0b01 	subs.w	fp, fp, #1
 803082c:	f73f af6f 	bgt.w	803070e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x70e>
 8030830:	f016 0b03 	ands.w	fp, r6, #3
 8030834:	d05f      	beq.n	80308f6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8f6>
 8030836:	f990 1000 	ldrsb.w	r1, [r0]
 803083a:	5782      	ldrsb	r2, [r0, r6]
 803083c:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 8030840:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030844:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030848:	f933 8b02 	ldrsh.w	r8, [r3], #2
 803084c:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8030850:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030854:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030858:	fb12 ee08 	smlabb	lr, r2, r8, lr
 803085c:	fb12 5509 	smlabb	r5, r2, r9, r5
 8030860:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030864:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030868:	fb1a ee04 	smlabb	lr, sl, r4, lr
 803086c:	fb1a 5507 	smlabb	r5, sl, r7, r5
 8030870:	4460      	add	r0, ip
 8030872:	f990 1000 	ldrsb.w	r1, [r0]
 8030876:	5782      	ldrsb	r2, [r0, r6]
 8030878:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 803087c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8030880:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8030884:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8030888:	f933 9b02 	ldrsh.w	r9, [r3], #2
 803088c:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8030890:	fb11 5507 	smlabb	r5, r1, r7, r5
 8030894:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8030898:	fb12 5509 	smlabb	r5, r2, r9, r5
 803089c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308a0:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308a4:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80308a8:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80308ac:	4460      	add	r0, ip
 80308ae:	f990 1000 	ldrsb.w	r1, [r0]
 80308b2:	5782      	ldrsb	r2, [r0, r6]
 80308b4:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 80308b8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308bc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308c0:	f933 8b02 	ldrsh.w	r8, [r3], #2
 80308c4:	f933 9b02 	ldrsh.w	r9, [r3], #2
 80308c8:	fb11 ee04 	smlabb	lr, r1, r4, lr
 80308cc:	fb11 5507 	smlabb	r5, r1, r7, r5
 80308d0:	fb12 ee08 	smlabb	lr, r2, r8, lr
 80308d4:	fb12 5509 	smlabb	r5, r2, r9, r5
 80308d8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80308dc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80308e0:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80308e4:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80308e8:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 80308ec:	f100 0001 	add.w	r0, r0, #1
 80308f0:	f1bb 0b01 	subs.w	fp, fp, #1
 80308f4:	dc9f      	bgt.n	8030836 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x836>
 80308f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80308f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80308fa:	eb01 0203 	add.w	r2, r1, r3
 80308fe:	f8dd a000 	ldr.w	sl, [sp]
 8030902:	9c04      	ldr	r4, [sp, #16]
 8030904:	9b02      	ldr	r3, [sp, #8]
 8030906:	9806      	ldr	r0, [sp, #24]
 8030908:	2800      	cmp	r0, #0
 803090a:	f040 8118 	bne.w	8030b3e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb3e>
 803090e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8030912:	fb5e 4e0a 	smmla	lr, lr, sl, r4
 8030916:	fa4e fe03 	asr.w	lr, lr, r3
 803091a:	f30e 0e07 	ssat	lr, #8, lr
 803091e:	f881 e000 	strb.w	lr, [r1]
 8030922:	f8dd a004 	ldr.w	sl, [sp, #4]
 8030926:	9c05      	ldr	r4, [sp, #20]
 8030928:	9b03      	ldr	r3, [sp, #12]
 803092a:	9807      	ldr	r0, [sp, #28]
 803092c:	2800      	cmp	r0, #0
 803092e:	f040 80ec 	bne.w	8030b0a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb0a>
 8030932:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8030936:	fb55 450a 	smmla	r5, r5, sl, r4
 803093a:	fa45 f503 	asr.w	r5, r5, r3
 803093e:	f305 0507 	ssat	r5, #8, r5
 8030942:	7015      	strb	r5, [r2, #0]
 8030944:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8030946:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8030948:	2b00      	cmp	r3, #0
 803094a:	bf14      	ite	ne
 803094c:	2303      	movne	r3, #3
 803094e:	2301      	moveq	r3, #1
 8030950:	2d00      	cmp	r5, #0
 8030952:	bf08      	it	eq
 8030954:	9b2f      	ldreq	r3, [sp, #188]	@ 0xbc
 8030956:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8030958:	441a      	add	r2, r3
 803095a:	9215      	str	r2, [sp, #84]	@ 0x54
 803095c:	e585      	b.n	803046a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x46a>
 803095e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8030960:	f04f 0300 	mov.w	r3, #0
 8030964:	461a      	mov	r2, r3
 8030966:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8030968:	b198      	cbz	r0, 8030992 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x992>
 803096a:	e8b1 1e00 	ldmia.w	r1!, {r9, sl, fp, ip}
 803096e:	fa02 f289 	sxtah	r2, r2, r9
 8030972:	fa02 f2a9 	sxtah	r2, r2, r9, ror #16
 8030976:	fa02 f28a 	sxtah	r2, r2, sl
 803097a:	fa02 f2aa 	sxtah	r2, r2, sl, ror #16
 803097e:	fa03 f38b 	sxtah	r3, r3, fp
 8030982:	fa03 f3ab 	sxtah	r3, r3, fp, ror #16
 8030986:	fa03 f38c 	sxtah	r3, r3, ip
 803098a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 803098e:	3801      	subs	r0, #1
 8030990:	d1eb      	bne.n	803096a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x96a>
 8030992:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8030994:	b138      	cbz	r0, 80309a6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9a6>
 8030996:	f851 4b04 	ldr.w	r4, [r1], #4
 803099a:	fa02 f284 	sxtah	r2, r2, r4
 803099e:	fa03 f3a4 	sxtah	r3, r3, r4, ror #16
 80309a2:	3801      	subs	r0, #1
 80309a4:	d1f7      	bne.n	8030996 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x996>
 80309a6:	f1c2 0200 	rsb	r2, r2, #0
 80309aa:	f1c3 0300 	rsb	r3, r3, #0
 80309ae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80309b0:	fb01 f202 	mul.w	r2, r1, r2
 80309b4:	fb01 f003 	mul.w	r0, r1, r3
 80309b8:	f7ff bbad 	b.w	8030116 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x116>
 80309bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80309be:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80309c0:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80309c2:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 80309c6:	d019      	beq.n	80309fc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9fc>
 80309c8:	f04f 0a09 	mov.w	sl, #9
 80309cc:	6805      	ldr	r5, [r0, #0]
 80309ce:	f850 8004 	ldr.w	r8, [r0, r4]
 80309d2:	fa2f f795 	sxtb16	r7, r5, ror #8
 80309d6:	fa2f f585 	sxtb16	r5, r5
 80309da:	fa2f f998 	sxtb16	r9, r8, ror #8
 80309de:	fa2f f888 	sxtb16	r8, r8
 80309e2:	e8a2 03a0 	stmia.w	r2!, {r5, r7, r8, r9}
 80309e6:	4430      	add	r0, r6
 80309e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80309ec:	dcee      	bgt.n	80309cc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9cc>
 80309ee:	eba0 0004 	sub.w	r0, r0, r4
 80309f2:	f100 0004 	add.w	r0, r0, #4
 80309f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80309fa:	dce5      	bgt.n	80309c8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9c8>
 80309fc:	f016 0b03 	ands.w	fp, r6, #3
 8030a00:	f43f ab83 	beq.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8030a04:	f04f 0a09 	mov.w	sl, #9
 8030a08:	f990 5000 	ldrsb.w	r5, [r0]
 8030a0c:	f910 8004 	ldrsb.w	r8, [r0, r4]
 8030a10:	f822 5b02 	strh.w	r5, [r2], #2
 8030a14:	f822 8b02 	strh.w	r8, [r2], #2
 8030a18:	4430      	add	r0, r6
 8030a1a:	f1ba 0a01 	subs.w	sl, sl, #1
 8030a1e:	dcf3      	bgt.n	8030a08 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa08>
 8030a20:	eba0 0004 	sub.w	r0, r0, r4
 8030a24:	f100 0001 	add.w	r0, r0, #1
 8030a28:	f1bb 0b01 	subs.w	fp, fp, #1
 8030a2c:	dcea      	bgt.n	8030a04 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa04>
 8030a2e:	f7ff bb6c 	b.w	803010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8030a32:	f11c 0c01 	adds.w	ip, ip, #1
 8030a36:	d014      	beq.n	8030a62 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa62>
 8030a38:	f04f 0c01 	mov.w	ip, #1
 8030a3c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8030a40:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a44:	fb52 c20a 	smmla	r2, r2, sl, ip
 8030a48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030a4c:	fa42 f20b 	asr.w	r2, r2, fp
 8030a50:	4472      	add	r2, lr
 8030a52:	fb50 c00a 	smmla	r0, r0, sl, ip
 8030a56:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8030a5a:	fa40 f00b 	asr.w	r0, r0, fp
 8030a5e:	4470      	add	r0, lr
 8030a60:	e4c6      	b.n	80303f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8030a62:	f1cb 0c01 	rsb	ip, fp, #1
 8030a66:	fa02 f20c 	lsl.w	r2, r2, ip
 8030a6a:	f302 021f 	ssat	r2, #32, r2
 8030a6e:	fb52 f21a 	smmulr	r2, r2, sl
 8030a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8030a76:	f300 001f 	ssat	r0, #32, r0
 8030a7a:	fb50 f01a 	smmulr	r0, r0, sl
 8030a7e:	4472      	add	r2, lr
 8030a80:	4470      	add	r0, lr
 8030a82:	e4b5      	b.n	80303f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8030a84:	f11c 0c01 	adds.w	ip, ip, #1
 8030a88:	d014      	beq.n	8030ab4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xab4>
 8030a8a:	f04f 0c01 	mov.w	ip, #1
 8030a8e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8030a92:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8030a96:	fb53 c30a 	smmla	r3, r3, sl, ip
 8030a9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030a9e:	fa43 f30b 	asr.w	r3, r3, fp
 8030aa2:	4473      	add	r3, lr
 8030aa4:	fb51 c10a 	smmla	r1, r1, sl, ip
 8030aa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030aac:	fa41 f10b 	asr.w	r1, r1, fp
 8030ab0:	4471      	add	r1, lr
 8030ab2:	e4bb      	b.n	803042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8030ab4:	f1cb 0c01 	rsb	ip, fp, #1
 8030ab8:	fa03 f30c 	lsl.w	r3, r3, ip
 8030abc:	f303 031f 	ssat	r3, #32, r3
 8030ac0:	fb53 f31a 	smmulr	r3, r3, sl
 8030ac4:	fa01 f10c 	lsl.w	r1, r1, ip
 8030ac8:	f301 011f 	ssat	r1, #32, r1
 8030acc:	fb51 f11a 	smmulr	r1, r1, sl
 8030ad0:	4473      	add	r3, lr
 8030ad2:	4471      	add	r1, lr
 8030ad4:	e4aa      	b.n	803042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8030ad6:	1c53      	adds	r3, r2, #1
 8030ad8:	d00d      	beq.n	8030af6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xaf6>
 8030ada:	f04f 0301 	mov.w	r3, #1
 8030ade:	fa03 f30b 	lsl.w	r3, r3, fp
 8030ae2:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8030ae6:	fb51 3104 	smmla	r1, r1, r4, r3
 8030aea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030aee:	fa41 f10b 	asr.w	r1, r1, fp
 8030af2:	4401      	add	r1, r0
 8030af4:	e544      	b.n	8030580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8030af6:	f1cb 0301 	rsb	r3, fp, #1
 8030afa:	fa01 f103 	lsl.w	r1, r1, r3
 8030afe:	f301 011f 	ssat	r1, #32, r1
 8030b02:	fb51 f114 	smmulr	r1, r1, r4
 8030b06:	4401      	add	r1, r0
 8030b08:	e53a      	b.n	8030580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8030b0a:	3001      	adds	r0, #1
 8030b0c:	d00d      	beq.n	8030b2a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb2a>
 8030b0e:	f04f 0001 	mov.w	r0, #1
 8030b12:	fa00 f003 	lsl.w	r0, r0, r3
 8030b16:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030b1a:	fb55 050a 	smmla	r5, r5, sl, r0
 8030b1e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8030b22:	fa45 f503 	asr.w	r5, r5, r3
 8030b26:	4425      	add	r5, r4
 8030b28:	e709      	b.n	803093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8030b2a:	f1c3 0001 	rsb	r0, r3, #1
 8030b2e:	fa05 f500 	lsl.w	r5, r5, r0
 8030b32:	f305 051f 	ssat	r5, #32, r5
 8030b36:	fb55 f51a 	smmulr	r5, r5, sl
 8030b3a:	4425      	add	r5, r4
 8030b3c:	e6ff      	b.n	803093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8030b3e:	3001      	adds	r0, #1
 8030b40:	d00d      	beq.n	8030b5e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb5e>
 8030b42:	f04f 0001 	mov.w	r0, #1
 8030b46:	fa00 f003 	lsl.w	r0, r0, r3
 8030b4a:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8030b4e:	fb5e 0e0a 	smmla	lr, lr, sl, r0
 8030b52:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8030b56:	fa4e fe03 	asr.w	lr, lr, r3
 8030b5a:	44a6      	add	lr, r4
 8030b5c:	e6dd      	b.n	803091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8030b5e:	f1c3 0001 	rsb	r0, r3, #1
 8030b62:	fa0e fe00 	lsl.w	lr, lr, r0
 8030b66:	f30e 0e1f 	ssat	lr, #32, lr
 8030b6a:	fb5e fe1a 	smmulr	lr, lr, sl
 8030b6e:	44a6      	add	lr, r4
 8030b70:	e6d3      	b.n	803091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8030b72:	bf00      	nop

08030b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8030b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030b78:	b086      	sub	sp, #24
 8030b7a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8030b7e:	9100      	str	r1, [sp, #0]
 8030b80:	9203      	str	r2, [sp, #12]
 8030b82:	2f00      	cmp	r7, #0
 8030b84:	9305      	str	r3, [sp, #20]
 8030b86:	bf18      	it	ne
 8030b88:	2301      	movne	r3, #1
 8030b8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030b8c:	fb04 3303 	mla	r3, r4, r3, r3
 8030b90:	9304      	str	r3, [sp, #16]
 8030b92:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8030b94:	bf14      	ite	ne
 8030b96:	462f      	movne	r7, r5
 8030b98:	2701      	moveq	r7, #1
 8030b9a:	9701      	str	r7, [sp, #4]
 8030b9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8030ba0:	085b      	lsrs	r3, r3, #1
 8030ba2:	f000 809f 	beq.w	8030ce4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 8030ba6:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8030baa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8030bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030bb0:	9302      	str	r3, [sp, #8]
 8030bb2:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8030bb6:	9f03      	ldr	r7, [sp, #12]
 8030bb8:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8030bbc:	f8dd c000 	ldr.w	ip, [sp]
 8030bc0:	f857 6b04 	ldr.w	r6, [r7], #4
 8030bc4:	f857 3b04 	ldr.w	r3, [r7], #4
 8030bc8:	9703      	str	r7, [sp, #12]
 8030bca:	461a      	mov	r2, r3
 8030bcc:	4631      	mov	r1, r6
 8030bce:	d022      	beq.n	8030c16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 8030bd0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030bd4:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030bd8:	f850 ab04 	ldr.w	sl, [r0], #4
 8030bdc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030be0:	f850 5b04 	ldr.w	r5, [r0], #4
 8030be4:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030be8:	f850 ab04 	ldr.w	sl, [r0], #4
 8030bec:	fb25 2207 	smlad	r2, r5, r7, r2
 8030bf0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8030bf4:	fb25 3309 	smlad	r3, r5, r9, r3
 8030bf8:	f85c 9b04 	ldr.w	r9, [ip], #4
 8030bfc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8030c00:	fb2a 1107 	smlad	r1, sl, r7, r1
 8030c04:	f850 5b04 	ldr.w	r5, [r0], #4
 8030c08:	fb25 3309 	smlad	r3, r5, r9, r3
 8030c0c:	f1b8 0801 	subs.w	r8, r8, #1
 8030c10:	fb25 2207 	smlad	r2, r5, r7, r2
 8030c14:	d1dc      	bne.n	8030bd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 8030c16:	f00e 0703 	and.w	r7, lr, #3
 8030c1a:	b18f      	cbz	r7, 8030c40 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 8030c1c:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 8030c20:	f93c ab02 	ldrsh.w	sl, [ip], #2
 8030c24:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8030c28:	fb0a 6605 	mla	r6, sl, r5, r6
 8030c2c:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8030c30:	fb09 330a 	mla	r3, r9, sl, r3
 8030c34:	fb08 1105 	mla	r1, r8, r5, r1
 8030c38:	3f01      	subs	r7, #1
 8030c3a:	fb09 2208 	mla	r2, r9, r8, r2
 8030c3e:	dced      	bgt.n	8030c1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8030c40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030c44:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030c46:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c4a:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c4e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c52:	f1c4 0915 	rsb	r9, r4, #21
 8030c56:	ea99 0904 	eors.w	r9, r9, r4
 8030c5a:	f340 80c8 	ble.w	8030dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 8030c5e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030c62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030c66:	fb56 c605 	smmla	r6, r6, r5, ip
 8030c6a:	fb51 c105 	smmla	r1, r1, r5, ip
 8030c6e:	fa46 f604 	asr.w	r6, r6, r4
 8030c72:	fa41 f104 	asr.w	r1, r1, r4
 8030c76:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8030c7a:	f857 cb04 	ldr.w	ip, [r7], #4
 8030c7e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8030c82:	f1c4 0915 	rsb	r9, r4, #21
 8030c86:	ea99 0904 	eors.w	r9, r9, r4
 8030c8a:	f340 8099 	ble.w	8030dc0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 8030c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030c92:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030c96:	fb53 c305 	smmla	r3, r3, r5, ip
 8030c9a:	fb52 c205 	smmla	r2, r2, r5, ip
 8030c9e:	fa43 f304 	asr.w	r3, r3, r4
 8030ca2:	fa42 f204 	asr.w	r2, r2, r4
 8030ca6:	f306 0607 	ssat	r6, #8, r6
 8030caa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8030cae:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8030cb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8030cb4:	7026      	strb	r6, [r4, #0]
 8030cb6:	44a0      	add	r8, r4
 8030cb8:	f301 0107 	ssat	r1, #8, r1
 8030cbc:	f888 1000 	strb.w	r1, [r8]
 8030cc0:	f303 0307 	ssat	r3, #8, r3
 8030cc4:	f804 3009 	strb.w	r3, [r4, r9]
 8030cc8:	f302 0207 	ssat	r2, #8, r2
 8030ccc:	f808 2009 	strb.w	r2, [r8, r9]
 8030cd0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 8030cd4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8030cd6:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8030cda:	9c02      	ldr	r4, [sp, #8]
 8030cdc:	9715      	str	r7, [sp, #84]	@ 0x54
 8030cde:	45a2      	cmp	sl, r4
 8030ce0:	f47f af67 	bne.w	8030bb2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 8030ce4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8030ce6:	f013 0301 	ands.w	r3, r3, #1
 8030cea:	d054      	beq.n	8030d96 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 8030cec:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8030cf0:	9b03      	ldr	r3, [sp, #12]
 8030cf2:	f8dd c000 	ldr.w	ip, [sp]
 8030cf6:	6819      	ldr	r1, [r3, #0]
 8030cf8:	ea5f 079e 	movs.w	r7, lr, lsr #2
 8030cfc:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 8030d00:	460e      	mov	r6, r1
 8030d02:	d015      	beq.n	8030d30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8030d04:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 8030d08:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030d0c:	f850 ab04 	ldr.w	sl, [r0], #4
 8030d10:	f850 3b04 	ldr.w	r3, [r0], #4
 8030d14:	fb2a 6608 	smlad	r6, sl, r8, r6
 8030d18:	fb2a 1105 	smlad	r1, sl, r5, r1
 8030d1c:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 8030d20:	f85c 8b04 	ldr.w	r8, [ip], #4
 8030d24:	fb23 6608 	smlad	r6, r3, r8, r6
 8030d28:	fb23 110a 	smlad	r1, r3, sl, r1
 8030d2c:	3f01      	subs	r7, #1
 8030d2e:	d1e9      	bne.n	8030d04 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8030d30:	f01e 0703 	ands.w	r7, lr, #3
 8030d34:	d00b      	beq.n	8030d4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8030d36:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 8030d3a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8030d3e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 8030d42:	fb19 660a 	smlabb	r6, r9, sl, r6
 8030d46:	3f01      	subs	r7, #1
 8030d48:	fb13 110a 	smlabb	r1, r3, sl, r1
 8030d4c:	dcf3      	bgt.n	8030d36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 8030d4e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8030d52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8030d54:	f9ba 4000 	ldrsh.w	r4, [sl]
 8030d58:	f8d7 c000 	ldr.w	ip, [r7]
 8030d5c:	f8db 5000 	ldr.w	r5, [fp]
 8030d60:	f1c4 0915 	rsb	r9, r4, #21
 8030d64:	ea99 0904 	eors.w	r9, r9, r4
 8030d68:	dd58      	ble.n	8030e1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 8030d6a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030d6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030d72:	fb56 c605 	smmla	r6, r6, r5, ip
 8030d76:	fb51 c105 	smmla	r1, r1, r5, ip
 8030d7a:	fa46 f604 	asr.w	r6, r6, r4
 8030d7e:	fa41 f104 	asr.w	r1, r1, r4
 8030d82:	f306 0607 	ssat	r6, #8, r6
 8030d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8030d88:	9c04      	ldr	r4, [sp, #16]
 8030d8a:	7016      	strb	r6, [r2, #0]
 8030d8c:	f301 0107 	ssat	r1, #8, r1
 8030d90:	5511      	strb	r1, [r2, r4]
 8030d92:	9b01      	ldr	r3, [sp, #4]
 8030d94:	441a      	add	r2, r3
 8030d96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8030d9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8030d9c:	b133      	cbz	r3, 8030dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8030d9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030da0:	f104 0002 	add.w	r0, r4, #2
 8030da4:	fb03 0011 	mls	r0, r3, r1, r0
 8030da8:	4410      	add	r0, r2
 8030daa:	e006      	b.n	8030dba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 8030dac:	eba2 0001 	sub.w	r0, r2, r1
 8030db0:	9a05      	ldr	r2, [sp, #20]
 8030db2:	f104 0402 	add.w	r4, r4, #2
 8030db6:	fb02 0004 	mla	r0, r2, r4, r0
 8030dba:	b006      	add	sp, #24
 8030dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030dc0:	2c00      	cmp	r4, #0
 8030dc2:	dd42      	ble.n	8030e4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8030dc4:	f04f 0901 	mov.w	r9, #1
 8030dc8:	fa09 f904 	lsl.w	r9, r9, r4
 8030dcc:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030dd0:	fb53 9305 	smmla	r3, r3, r5, r9
 8030dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030dd8:	fa43 f304 	asr.w	r3, r3, r4
 8030ddc:	4463      	add	r3, ip
 8030dde:	fb52 9205 	smmla	r2, r2, r5, r9
 8030de2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8030de6:	fa42 f204 	asr.w	r2, r2, r4
 8030dea:	4462      	add	r2, ip
 8030dec:	e75b      	b.n	8030ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030dee:	2c00      	cmp	r4, #0
 8030df0:	dd3c      	ble.n	8030e6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 8030df2:	f04f 0901 	mov.w	r9, #1
 8030df6:	fa09 f904 	lsl.w	r9, r9, r4
 8030dfa:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030dfe:	fb56 9605 	smmla	r6, r6, r5, r9
 8030e02:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030e06:	fa46 f604 	asr.w	r6, r6, r4
 8030e0a:	4466      	add	r6, ip
 8030e0c:	fb51 9105 	smmla	r1, r1, r5, r9
 8030e10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030e14:	fa41 f104 	asr.w	r1, r1, r4
 8030e18:	4461      	add	r1, ip
 8030e1a:	e72c      	b.n	8030c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030e1c:	2c00      	cmp	r4, #0
 8030e1e:	dd36      	ble.n	8030e8e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8030e20:	f04f 0901 	mov.w	r9, #1
 8030e24:	fa09 f904 	lsl.w	r9, r9, r4
 8030e28:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8030e2c:	fb56 9605 	smmla	r6, r6, r5, r9
 8030e30:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8030e34:	fa46 f604 	asr.w	r6, r6, r4
 8030e38:	4466      	add	r6, ip
 8030e3a:	fb51 9105 	smmla	r1, r1, r5, r9
 8030e3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8030e42:	fa41 f104 	asr.w	r1, r1, r4
 8030e46:	4461      	add	r1, ip
 8030e48:	e79b      	b.n	8030d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8030e4a:	f1c4 0901 	rsb	r9, r4, #1
 8030e4e:	fa03 f309 	lsl.w	r3, r3, r9
 8030e52:	f303 031f 	ssat	r3, #32, r3
 8030e56:	fb53 f315 	smmulr	r3, r3, r5
 8030e5a:	fa02 f209 	lsl.w	r2, r2, r9
 8030e5e:	f302 021f 	ssat	r2, #32, r2
 8030e62:	fb52 f215 	smmulr	r2, r2, r5
 8030e66:	4463      	add	r3, ip
 8030e68:	4462      	add	r2, ip
 8030e6a:	e71c      	b.n	8030ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8030e6c:	f1c4 0901 	rsb	r9, r4, #1
 8030e70:	fa06 f609 	lsl.w	r6, r6, r9
 8030e74:	f306 061f 	ssat	r6, #32, r6
 8030e78:	fb56 f615 	smmulr	r6, r6, r5
 8030e7c:	fa01 f109 	lsl.w	r1, r1, r9
 8030e80:	f301 011f 	ssat	r1, #32, r1
 8030e84:	fb51 f115 	smmulr	r1, r1, r5
 8030e88:	4466      	add	r6, ip
 8030e8a:	4461      	add	r1, ip
 8030e8c:	e6f3      	b.n	8030c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8030e8e:	f1c4 0901 	rsb	r9, r4, #1
 8030e92:	fa06 f609 	lsl.w	r6, r6, r9
 8030e96:	f306 061f 	ssat	r6, #32, r6
 8030e9a:	fb56 f615 	smmulr	r6, r6, r5
 8030e9e:	fa01 f109 	lsl.w	r1, r1, r9
 8030ea2:	f301 011f 	ssat	r1, #32, r1
 8030ea6:	fb51 f115 	smmulr	r1, r1, r5
 8030eaa:	4466      	add	r6, ip
 8030eac:	4461      	add	r1, ip
 8030eae:	e768      	b.n	8030d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

08030eb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 8030eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030eb4:	b099      	sub	sp, #100	@ 0x64
 8030eb6:	9014      	str	r0, [sp, #80]	@ 0x50
 8030eb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8030eba:	9216      	str	r2, [sp, #88]	@ 0x58
 8030ebc:	9312      	str	r3, [sp, #72]	@ 0x48
 8030ebe:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8030ec0:	f000 0303 	and.w	r3, r0, #3
 8030ec4:	2b03      	cmp	r3, #3
 8030ec6:	bf0c      	ite	eq
 8030ec8:	2601      	moveq	r6, #1
 8030eca:	2600      	movne	r6, #0
 8030ecc:	9617      	str	r6, [sp, #92]	@ 0x5c
 8030ece:	2803      	cmp	r0, #3
 8030ed0:	bf0c      	ite	eq
 8030ed2:	2601      	moveq	r6, #1
 8030ed4:	2600      	movne	r6, #0
 8030ed6:	9618      	str	r6, [sp, #96]	@ 0x60
 8030ed8:	f010 0002 	ands.w	r0, r0, #2
 8030edc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8030ede:	2800      	cmp	r0, #0
 8030ee0:	bf14      	ite	ne
 8030ee2:	4618      	movne	r0, r3
 8030ee4:	2001      	moveq	r0, #1
 8030ee6:	9010      	str	r0, [sp, #64]	@ 0x40
 8030ee8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8030eea:	bf0c      	ite	eq
 8030eec:	4606      	moveq	r6, r0
 8030eee:	2601      	movne	r6, #1
 8030ef0:	9611      	str	r6, [sp, #68]	@ 0x44
 8030ef2:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	@ 0xb0
 8030ef6:	2c00      	cmp	r4, #0
 8030ef8:	bf18      	it	ne
 8030efa:	4620      	movne	r0, r4
 8030efc:	902c      	str	r0, [sp, #176]	@ 0xb0
 8030efe:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8030f00:	2801      	cmp	r0, #1
 8030f02:	f340 81be 	ble.w	8031282 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 8030f06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030f0a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8030f0c:	f014 0f02 	tst.w	r4, #2
 8030f10:	d101      	bne.n	8030f16 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 8030f12:	f04f 0302 	mov.w	r3, #2
 8030f16:	9315      	str	r3, [sp, #84]	@ 0x54
 8030f18:	f04f 0800 	mov.w	r8, #0
 8030f1c:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8030f20:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8030f24:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8030f26:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8030f2a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8030f2e:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8030f32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8030f36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8030f38:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8030f3c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8030f40:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8030f44:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8030f46:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8030f4a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8030f4e:	e9cd 1200 	strd	r1, r2, [sp]
 8030f52:	2b00      	cmp	r3, #0
 8030f54:	bfcc      	ite	gt
 8030f56:	2000      	movgt	r0, #0
 8030f58:	f04f 30ff 	movle.w	r0, #4294967295
 8030f5c:	2b15      	cmp	r3, #21
 8030f5e:	bfc8      	it	gt
 8030f60:	2001      	movgt	r0, #1
 8030f62:	2c00      	cmp	r4, #0
 8030f64:	bfcc      	ite	gt
 8030f66:	2100      	movgt	r1, #0
 8030f68:	f04f 31ff 	movle.w	r1, #4294967295
 8030f6c:	2c15      	cmp	r4, #21
 8030f6e:	bfc8      	it	gt
 8030f70:	2101      	movgt	r1, #1
 8030f72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030f76:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8030f78:	2b00      	cmp	r3, #0
 8030f7a:	f000 8297 	beq.w	80314ac <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 8030f7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030f80:	2b00      	cmp	r3, #0
 8030f82:	f040 82bb 	bne.w	80314fc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 8030f86:	461a      	mov	r2, r3
 8030f88:	4618      	mov	r0, r3
 8030f8a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8030f8c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8030f90:	e9d1 3400 	ldrd	r3, r4, [r1]
 8030f94:	4403      	add	r3, r0
 8030f96:	4414      	add	r4, r2
 8030f98:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 8030f9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030f9e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8030fa0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8030fa2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8030fa4:	2900      	cmp	r1, #0
 8030fa6:	bf1c      	itt	ne
 8030fa8:	3203      	addne	r2, #3
 8030faa:	18d2      	addne	r2, r2, r3
 8030fac:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 8030fb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8030fb2:	1040      	asrs	r0, r0, #1
 8030fb4:	f000 8144 	beq.w	8031240 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 8030fb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030fba:	900e      	str	r0, [sp, #56]	@ 0x38
 8030fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030fbe:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8030fc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030fc2:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8030fc4:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8030fc8:	46e2      	mov	sl, ip
 8030fca:	46f3      	mov	fp, lr
 8030fcc:	4413      	add	r3, r2
 8030fce:	930c      	str	r3, [sp, #48]	@ 0x30
 8030fd0:	ea5f 1827 	movs.w	r8, r7, asr #4
 8030fd4:	f000 8094 	beq.w	8031100 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 8030fd8:	f859 5007 	ldr.w	r5, [r9, r7]
 8030fdc:	fa2f f485 	sxtb16	r4, r5
 8030fe0:	f856 0b04 	ldr.w	r0, [r6], #4
 8030fe4:	fa2f f595 	sxtb16	r5, r5, ror #8
 8030fe8:	f856 1b04 	ldr.w	r1, [r6], #4
 8030fec:	fb24 aa00 	smlad	sl, r4, r0, sl
 8030ff0:	fb25 aa01 	smlad	sl, r5, r1, sl
 8030ff4:	f856 2b04 	ldr.w	r2, [r6], #4
 8030ff8:	f856 3b04 	ldr.w	r3, [r6], #4
 8030ffc:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031000:	f859 4b04 	ldr.w	r4, [r9], #4
 8031004:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031008:	fa2f f584 	sxtb16	r5, r4
 803100c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031010:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031014:	f856 0b04 	ldr.w	r0, [r6], #4
 8031018:	fb25 ee02 	smlad	lr, r5, r2, lr
 803101c:	f859 5007 	ldr.w	r5, [r9, r7]
 8031020:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031024:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031028:	fa2f f485 	sxtb16	r4, r5
 803102c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031030:	f856 1b04 	ldr.w	r1, [r6], #4
 8031034:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031038:	f856 2b04 	ldr.w	r2, [r6], #4
 803103c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031040:	f856 3b04 	ldr.w	r3, [r6], #4
 8031044:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031048:	f859 4b04 	ldr.w	r4, [r9], #4
 803104c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031050:	fa2f f584 	sxtb16	r5, r4
 8031054:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031058:	fb25 cc00 	smlad	ip, r5, r0, ip
 803105c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031060:	f859 5007 	ldr.w	r5, [r9, r7]
 8031064:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031068:	f856 0b04 	ldr.w	r0, [r6], #4
 803106c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031070:	fa2f f485 	sxtb16	r4, r5
 8031074:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031078:	f856 1b04 	ldr.w	r1, [r6], #4
 803107c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031080:	f856 2b04 	ldr.w	r2, [r6], #4
 8031084:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031088:	f856 3b04 	ldr.w	r3, [r6], #4
 803108c:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031090:	f859 4b04 	ldr.w	r4, [r9], #4
 8031094:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031098:	fa2f f584 	sxtb16	r5, r4
 803109c:	fa2f f494 	sxtb16	r4, r4, ror #8
 80310a0:	fb25 cc00 	smlad	ip, r5, r0, ip
 80310a4:	fb25 ee02 	smlad	lr, r5, r2, lr
 80310a8:	f856 0b04 	ldr.w	r0, [r6], #4
 80310ac:	fb24 cc01 	smlad	ip, r4, r1, ip
 80310b0:	f859 5007 	ldr.w	r5, [r9, r7]
 80310b4:	fb24 ee03 	smlad	lr, r4, r3, lr
 80310b8:	fa2f f485 	sxtb16	r4, r5
 80310bc:	fa2f f595 	sxtb16	r5, r5, ror #8
 80310c0:	f856 1b04 	ldr.w	r1, [r6], #4
 80310c4:	fb24 aa00 	smlad	sl, r4, r0, sl
 80310c8:	f856 2b04 	ldr.w	r2, [r6], #4
 80310cc:	fb25 aa01 	smlad	sl, r5, r1, sl
 80310d0:	f856 3b04 	ldr.w	r3, [r6], #4
 80310d4:	fb24 bb02 	smlad	fp, r4, r2, fp
 80310d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80310dc:	fb25 bb03 	smlad	fp, r5, r3, fp
 80310e0:	fa2f f584 	sxtb16	r5, r4
 80310e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 80310e8:	fb25 cc00 	smlad	ip, r5, r0, ip
 80310ec:	fb25 ee02 	smlad	lr, r5, r2, lr
 80310f0:	f1b8 0801 	subs.w	r8, r8, #1
 80310f4:	fb24 cc01 	smlad	ip, r4, r1, ip
 80310f8:	fb24 ee03 	smlad	lr, r4, r3, lr
 80310fc:	f73f af6c 	bgt.w	8030fd8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 8031100:	f017 000f 	ands.w	r0, r7, #15
 8031104:	d046      	beq.n	8031194 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 8031106:	f3c7 0881 	ubfx	r8, r7, #2, #2
 803110a:	f1b8 0f00 	cmp.w	r8, #0
 803110e:	d026      	beq.n	803115e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 8031110:	f859 5007 	ldr.w	r5, [r9, r7]
 8031114:	fa2f f485 	sxtb16	r4, r5
 8031118:	fa2f f595 	sxtb16	r5, r5, ror #8
 803111c:	f856 0b04 	ldr.w	r0, [r6], #4
 8031120:	f856 1b04 	ldr.w	r1, [r6], #4
 8031124:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031128:	f856 2b04 	ldr.w	r2, [r6], #4
 803112c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031130:	f856 3b04 	ldr.w	r3, [r6], #4
 8031134:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031138:	f859 4b04 	ldr.w	r4, [r9], #4
 803113c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031140:	fa2f f584 	sxtb16	r5, r4
 8031144:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031148:	fb25 cc00 	smlad	ip, r5, r0, ip
 803114c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031150:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031154:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031158:	f1b8 0801 	subs.w	r8, r8, #1
 803115c:	dcd8      	bgt.n	8031110 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 803115e:	f017 0803 	ands.w	r8, r7, #3
 8031162:	f1b8 0f00 	cmp.w	r8, #0
 8031166:	d015      	beq.n	8031194 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 8031168:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 803116a:	f936 3b02 	ldrsh.w	r3, [r6], #2
 803116e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8031172:	f999 1000 	ldrsb.w	r1, [r9]
 8031176:	fb13 cc01 	smlabb	ip, r3, r1, ip
 803117a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 803117e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 8031182:	fb13 aa01 	smlabb	sl, r3, r1, sl
 8031186:	fb15 bb01 	smlabb	fp, r5, r1, fp
 803118a:	f109 0901 	add.w	r9, r9, #1
 803118e:	f1b8 0801 	subs.w	r8, r8, #1
 8031192:	dcea      	bgt.n	803116a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 8031194:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8031196:	462e      	mov	r6, r5
 8031198:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 803119a:	b168      	cbz	r0, 80311b8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 803119c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803119e:	1e90      	subs	r0, r2, #2
 80311a0:	dc09      	bgt.n	80311b6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 80311a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80311a4:	f1c2 0202 	rsb	r2, r2, #2
 80311a8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80311ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80311ae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80311b0:	4410      	add	r0, r2
 80311b2:	f105 0502 	add.w	r5, r5, #2
 80311b6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80311b8:	9800      	ldr	r0, [sp, #0]
 80311ba:	9902      	ldr	r1, [sp, #8]
 80311bc:	9a04      	ldr	r2, [sp, #16]
 80311be:	9b06      	ldr	r3, [sp, #24]
 80311c0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80311c2:	2b00      	cmp	r3, #0
 80311c4:	f040 80c9 	bne.w	803135a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 80311c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80311cc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80311d0:	fb5c 0c01 	smmla	ip, ip, r1, r0
 80311d4:	fb5a 0a01 	smmla	sl, sl, r1, r0
 80311d8:	fa4c fc02 	asr.w	ip, ip, r2
 80311dc:	fa4a fa02 	asr.w	sl, sl, r2
 80311e0:	f30c 0c07 	ssat	ip, #8, ip
 80311e4:	f30a 0a07 	ssat	sl, #8, sl
 80311e8:	f886 c000 	strb.w	ip, [r6]
 80311ec:	f887 a000 	strb.w	sl, [r7]
 80311f0:	9801      	ldr	r0, [sp, #4]
 80311f2:	9903      	ldr	r1, [sp, #12]
 80311f4:	9a05      	ldr	r2, [sp, #20]
 80311f6:	9b07      	ldr	r3, [sp, #28]
 80311f8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80311fc:	2b00      	cmp	r3, #0
 80311fe:	f040 80d4 	bne.w	80313aa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 8031202:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8031206:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 803120a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 803120e:	fb5b 0b01 	smmla	fp, fp, r1, r0
 8031212:	fa4e fe02 	asr.w	lr, lr, r2
 8031216:	fa4b fb02 	asr.w	fp, fp, r2
 803121a:	f30e 0e07 	ssat	lr, #8, lr
 803121e:	f30b 0b07 	ssat	fp, #8, fp
 8031222:	f806 e008 	strb.w	lr, [r6, r8]
 8031226:	f807 b008 	strb.w	fp, [r7, r8]
 803122a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803122c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803122e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8031232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8031234:	4491      	add	r9, r2
 8031236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031238:	3b01      	subs	r3, #1
 803123a:	930e      	str	r3, [sp, #56]	@ 0x38
 803123c:	f47f aebe 	bne.w	8030fbc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 8031240:	f8cd 9020 	str.w	r9, [sp, #32]
 8031244:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031246:	f013 0f01 	tst.w	r3, #1
 803124a:	f040 80d6 	bne.w	80313fa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 803124e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031250:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031252:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8031256:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031258:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803125a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 803125c:	4413      	add	r3, r2
 803125e:	9312      	str	r3, [sp, #72]	@ 0x48
 8031260:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8031262:	b123      	cbz	r3, 803126e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 8031264:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8031266:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031268:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 803126c:	932c      	str	r3, [sp, #176]	@ 0xb0
 803126e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031270:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8031272:	ea4f 0363 	mov.w	r3, r3, asr #1
 8031276:	f102 0201 	add.w	r2, r2, #1
 803127a:	920d      	str	r2, [sp, #52]	@ 0x34
 803127c:	4293      	cmp	r3, r2
 803127e:	f73f ae4f 	bgt.w	8030f20 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 8031282:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8031284:	f015 0501 	ands.w	r5, r5, #1
 8031288:	d060      	beq.n	803134c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 803128a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 803128e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8031290:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8031292:	2d00      	cmp	r5, #0
 8031294:	bf1c      	itt	ne
 8031296:	3603      	addne	r6, #3
 8031298:	4446      	addne	r6, r8
 803129a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 803129c:	2900      	cmp	r1, #0
 803129e:	dd55      	ble.n	803134c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 80312a0:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 80312a4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80312a6:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 80312a8:	f1a7 0701 	sub.w	r7, r7, #1
 80312ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80312b0:	f8dc c000 	ldr.w	ip, [ip]
 80312b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80312b6:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 80312ba:	6824      	ldr	r4, [r4, #0]
 80312bc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80312be:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 80312c2:	6800      	ldr	r0, [r0, #0]
 80312c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80312c6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80312ca:	f9b7 7000 	ldrsh.w	r7, [r7]
 80312ce:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80312d0:	2f00      	cmp	r7, #0
 80312d2:	bfcc      	ite	gt
 80312d4:	f04f 0900 	movgt.w	r9, #0
 80312d8:	f04f 39ff 	movle.w	r9, #4294967295
 80312dc:	2f15      	cmp	r7, #21
 80312de:	bfc8      	it	gt
 80312e0:	f04f 0901 	movgt.w	r9, #1
 80312e4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80312e6:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 80312ea:	f1bb 0f00 	cmp.w	fp, #0
 80312ee:	46e6      	mov	lr, ip
 80312f0:	dd0c      	ble.n	803130c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 80312f2:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 80312f6:	f915 3b01 	ldrsb.w	r3, [r5], #1
 80312fa:	f918 ab01 	ldrsb.w	sl, [r8], #1
 80312fe:	eba3 0302 	sub.w	r3, r3, r2
 8031302:	fb0a ee03 	mla	lr, sl, r3, lr
 8031306:	f1bb 0b01 	subs.w	fp, fp, #1
 803130a:	dcf4      	bgt.n	80312f6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 803130c:	f1b9 0f00 	cmp.w	r9, #0
 8031310:	f040 8164 	bne.w	80315dc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 8031314:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8031318:	fb5e 0e04 	smmla	lr, lr, r4, r0
 803131c:	fa4e fe07 	asr.w	lr, lr, r7
 8031320:	f30e 0e07 	ssat	lr, #8, lr
 8031324:	f886 e000 	strb.w	lr, [r6]
 8031328:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 803132a:	f013 0f02 	tst.w	r3, #2
 803132e:	d011      	beq.n	8031354 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 8031330:	f013 0f01 	tst.w	r3, #1
 8031334:	d005      	beq.n	8031342 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 8031336:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031338:	3b01      	subs	r3, #1
 803133a:	d102      	bne.n	8031342 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 803133c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803133e:	f106 0602 	add.w	r6, r6, #2
 8031342:	f106 0601 	add.w	r6, r6, #1
 8031346:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031348:	3901      	subs	r1, #1
 803134a:	dccc      	bgt.n	80312e6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 803134c:	2000      	movs	r0, #0
 803134e:	b019      	add	sp, #100	@ 0x64
 8031350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031354:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8031356:	441e      	add	r6, r3
 8031358:	e7f6      	b.n	8031348 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 803135a:	3301      	adds	r3, #1
 803135c:	d014      	beq.n	8031388 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 803135e:	f04f 0301 	mov.w	r3, #1
 8031362:	fa03 f302 	lsl.w	r3, r3, r2
 8031366:	ea4f 03a3 	mov.w	r3, r3, asr #2
 803136a:	fb5c 3c01 	smmla	ip, ip, r1, r3
 803136e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8031372:	fa4c fc02 	asr.w	ip, ip, r2
 8031376:	4484      	add	ip, r0
 8031378:	fb5a 3a01 	smmla	sl, sl, r1, r3
 803137c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8031380:	fa4a fa02 	asr.w	sl, sl, r2
 8031384:	4482      	add	sl, r0
 8031386:	e72b      	b.n	80311e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 8031388:	f1c2 0301 	rsb	r3, r2, #1
 803138c:	fa0c fc03 	lsl.w	ip, ip, r3
 8031390:	f30c 0c1f 	ssat	ip, #32, ip
 8031394:	fb5c fc11 	smmulr	ip, ip, r1
 8031398:	fa0a fa03 	lsl.w	sl, sl, r3
 803139c:	f30a 0a1f 	ssat	sl, #32, sl
 80313a0:	fb5a fa11 	smmulr	sl, sl, r1
 80313a4:	4484      	add	ip, r0
 80313a6:	4482      	add	sl, r0
 80313a8:	e71a      	b.n	80311e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 80313aa:	3301      	adds	r3, #1
 80313ac:	d014      	beq.n	80313d8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 80313ae:	f04f 0301 	mov.w	r3, #1
 80313b2:	fa03 f302 	lsl.w	r3, r3, r2
 80313b6:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80313ba:	fb5e 3e01 	smmla	lr, lr, r1, r3
 80313be:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80313c2:	fa4e fe02 	asr.w	lr, lr, r2
 80313c6:	4486      	add	lr, r0
 80313c8:	fb5b 3b01 	smmla	fp, fp, r1, r3
 80313cc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80313d0:	fa4b fb02 	asr.w	fp, fp, r2
 80313d4:	4483      	add	fp, r0
 80313d6:	e720      	b.n	803121a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 80313d8:	f1c2 0301 	rsb	r3, r2, #1
 80313dc:	fa0e fe03 	lsl.w	lr, lr, r3
 80313e0:	f30e 0e1f 	ssat	lr, #32, lr
 80313e4:	fb5e fe11 	smmulr	lr, lr, r1
 80313e8:	fa0b fb03 	lsl.w	fp, fp, r3
 80313ec:	f30b 0b1f 	ssat	fp, #32, fp
 80313f0:	fb5b fb11 	smmulr	fp, fp, r1
 80313f4:	4486      	add	lr, r0
 80313f6:	4483      	add	fp, r0
 80313f8:	e70f      	b.n	803121a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 80313fa:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80313fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8031400:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8031402:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 8031406:	ea5f 08a7 	movs.w	r8, r7, asr #2
 803140a:	d018      	beq.n	803143e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 803140c:	f859 4b04 	ldr.w	r4, [r9], #4
 8031410:	f856 0b04 	ldr.w	r0, [r6], #4
 8031414:	f856 1b04 	ldr.w	r1, [r6], #4
 8031418:	f856 2b04 	ldr.w	r2, [r6], #4
 803141c:	f856 3b04 	ldr.w	r3, [r6], #4
 8031420:	fa2f f584 	sxtb16	r5, r4
 8031424:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031428:	fb25 cc00 	smlad	ip, r5, r0, ip
 803142c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031430:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031434:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031438:	f1b8 0801 	subs.w	r8, r8, #1
 803143c:	dce6      	bgt.n	803140c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 803143e:	f017 0803 	ands.w	r8, r7, #3
 8031442:	f1b8 0f00 	cmp.w	r8, #0
 8031446:	d00c      	beq.n	8031462 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 8031448:	f936 3b02 	ldrsh.w	r3, [r6], #2
 803144c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 8031450:	f919 1b01 	ldrsb.w	r1, [r9], #1
 8031454:	fb13 cc01 	smlabb	ip, r3, r1, ip
 8031458:	fb15 ee01 	smlabb	lr, r5, r1, lr
 803145c:	f1b8 0801 	subs.w	r8, r8, #1
 8031460:	dcf2      	bgt.n	8031448 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 8031462:	9800      	ldr	r0, [sp, #0]
 8031464:	9902      	ldr	r1, [sp, #8]
 8031466:	9a04      	ldr	r2, [sp, #16]
 8031468:	9b06      	ldr	r3, [sp, #24]
 803146a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 803146c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 803146e:	4437      	add	r7, r6
 8031470:	2b00      	cmp	r3, #0
 8031472:	f040 8099 	bne.w	80315a8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 8031476:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803147a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 803147e:	fa4c fc02 	asr.w	ip, ip, r2
 8031482:	f30c 0c07 	ssat	ip, #8, ip
 8031486:	f886 c000 	strb.w	ip, [r6]
 803148a:	9801      	ldr	r0, [sp, #4]
 803148c:	9903      	ldr	r1, [sp, #12]
 803148e:	9a05      	ldr	r2, [sp, #20]
 8031490:	9b07      	ldr	r3, [sp, #28]
 8031492:	2b00      	cmp	r3, #0
 8031494:	d166      	bne.n	8031564 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 8031496:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803149a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 803149e:	fa4e fe02 	asr.w	lr, lr, r2
 80314a2:	f30e 0e07 	ssat	lr, #8, lr
 80314a6:	f887 e000 	strb.w	lr, [r7]
 80314aa:	e6d0      	b.n	803124e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 80314ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80314ae:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80314b0:	eb00 0907 	add.w	r9, r0, r7
 80314b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80314b6:	2f03      	cmp	r7, #3
 80314b8:	dd11      	ble.n	80314de <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 80314ba:	ea4f 06a7 	mov.w	r6, r7, asr #2
 80314be:	f850 1b04 	ldr.w	r1, [r0], #4
 80314c2:	f859 4b04 	ldr.w	r4, [r9], #4
 80314c6:	fa2f f291 	sxtb16	r2, r1, ror #8
 80314ca:	fa2f f181 	sxtb16	r1, r1
 80314ce:	fa2f f894 	sxtb16	r8, r4, ror #8
 80314d2:	fa2f f484 	sxtb16	r4, r4
 80314d6:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 80314da:	3e01      	subs	r6, #1
 80314dc:	dcef      	bgt.n	80314be <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 80314de:	f017 0603 	ands.w	r6, r7, #3
 80314e2:	f77f ad4c 	ble.w	8030f7e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 80314e6:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80314ea:	f823 1b02 	strh.w	r1, [r3], #2
 80314ee:	f919 1b01 	ldrsb.w	r1, [r9], #1
 80314f2:	f823 1b02 	strh.w	r1, [r3], #2
 80314f6:	3e01      	subs	r6, #1
 80314f8:	dcf5      	bgt.n	80314e6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 80314fa:	e540      	b.n	8030f7e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 80314fc:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80314fe:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8031500:	f04f 0300 	mov.w	r3, #0
 8031504:	4618      	mov	r0, r3
 8031506:	10b1      	asrs	r1, r6, #2
 8031508:	d017      	beq.n	803153a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 803150a:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 803150e:	fa00 f087 	sxtah	r0, r0, r7
 8031512:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 8031516:	fa00 f089 	sxtah	r0, r0, r9
 803151a:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 803151e:	fa03 f38a 	sxtah	r3, r3, sl
 8031522:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 8031526:	fa03 f38c 	sxtah	r3, r3, ip
 803152a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 803152e:	3901      	subs	r1, #1
 8031530:	dceb      	bgt.n	803150a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 8031532:	f1c0 0000 	rsb	r0, r0, #0
 8031536:	f1c3 0300 	rsb	r3, r3, #0
 803153a:	f016 0103 	ands.w	r1, r6, #3
 803153e:	d00b      	beq.n	8031558 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 8031540:	f9b2 4000 	ldrsh.w	r4, [r2]
 8031544:	eba0 0004 	sub.w	r0, r0, r4
 8031548:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 803154c:	eba3 0304 	sub.w	r3, r3, r4
 8031550:	3901      	subs	r1, #1
 8031552:	f102 0204 	add.w	r2, r2, #4
 8031556:	dcf3      	bgt.n	8031540 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 8031558:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803155a:	fb02 f000 	mul.w	r0, r2, r0
 803155e:	fb03 f202 	mul.w	r2, r3, r2
 8031562:	e512      	b.n	8030f8a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 8031564:	3301      	adds	r3, #1
 8031566:	d011      	beq.n	803158c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 8031568:	f04f 0301 	mov.w	r3, #1
 803156c:	fa03 f302 	lsl.w	r3, r3, r2
 8031570:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8031574:	fb5e 3e01 	smmla	lr, lr, r1, r3
 8031578:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803157c:	fa4e fe02 	asr.w	lr, lr, r2
 8031580:	4486      	add	lr, r0
 8031582:	f30e 0e07 	ssat	lr, #8, lr
 8031586:	f887 e000 	strb.w	lr, [r7]
 803158a:	e660      	b.n	803124e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 803158c:	f1c2 0301 	rsb	r3, r2, #1
 8031590:	fa0e fe03 	lsl.w	lr, lr, r3
 8031594:	f30e 0e1f 	ssat	lr, #32, lr
 8031598:	fb5e fe11 	smmulr	lr, lr, r1
 803159c:	4486      	add	lr, r0
 803159e:	f30e 0e07 	ssat	lr, #8, lr
 80315a2:	f887 e000 	strb.w	lr, [r7]
 80315a6:	e652      	b.n	803124e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 80315a8:	3301      	adds	r3, #1
 80315aa:	d00d      	beq.n	80315c8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 80315ac:	f04f 0301 	mov.w	r3, #1
 80315b0:	fa03 f302 	lsl.w	r3, r3, r2
 80315b4:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80315b8:	fb5c 3c01 	smmla	ip, ip, r1, r3
 80315bc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80315c0:	fa4c fc02 	asr.w	ip, ip, r2
 80315c4:	4484      	add	ip, r0
 80315c6:	e75c      	b.n	8031482 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 80315c8:	f1c2 0301 	rsb	r3, r2, #1
 80315cc:	fa0c fc03 	lsl.w	ip, ip, r3
 80315d0:	f30c 0c1f 	ssat	ip, #32, ip
 80315d4:	fb5c fc11 	smmulr	ip, ip, r1
 80315d8:	4484      	add	ip, r0
 80315da:	e752      	b.n	8031482 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 80315dc:	1c7b      	adds	r3, r7, #1
 80315de:	d00d      	beq.n	80315fc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 80315e0:	f04f 0301 	mov.w	r3, #1
 80315e4:	fa03 f307 	lsl.w	r3, r3, r7
 80315e8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80315ec:	fb5e 3e04 	smmla	lr, lr, r4, r3
 80315f0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80315f4:	fa4e fe07 	asr.w	lr, lr, r7
 80315f8:	4486      	add	lr, r0
 80315fa:	e691      	b.n	8031320 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 80315fc:	f1c7 0301 	rsb	r3, r7, #1
 8031600:	fa0e fe03 	lsl.w	lr, lr, r3
 8031604:	f30e 0e1f 	ssat	lr, #32, lr
 8031608:	fb5e fe14 	smmulr	lr, lr, r4
 803160c:	4486      	add	lr, r0
 803160e:	e687      	b.n	8031320 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

08031610 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 8031610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031614:	b099      	sub	sp, #100	@ 0x64
 8031616:	bf00      	nop
 8031618:	9014      	str	r0, [sp, #80]	@ 0x50
 803161a:	9113      	str	r1, [sp, #76]	@ 0x4c
 803161c:	9216      	str	r2, [sp, #88]	@ 0x58
 803161e:	9312      	str	r3, [sp, #72]	@ 0x48
 8031620:	f04f 0800 	mov.w	r8, #0
 8031624:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8031628:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 803162c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 803162e:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8031632:	f9b2 3000 	ldrsh.w	r3, [r2]
 8031636:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 803163a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 803163e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8031640:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8031644:	e9d2 1200 	ldrd	r1, r2, [r2]
 8031648:	e9cd 1202 	strd	r1, r2, [sp, #8]
 803164c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 803164e:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8031652:	e9d2 1200 	ldrd	r1, r2, [r2]
 8031656:	e9cd 1200 	strd	r1, r2, [sp]
 803165a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803165c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803165e:	f04f 0610 	mov.w	r6, #16
 8031662:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8031664:	f850 1b04 	ldr.w	r1, [r0], #4
 8031668:	fa2f f291 	sxtb16	r2, r1, ror #8
 803166c:	fa2f f181 	sxtb16	r1, r1
 8031670:	fa2f f894 	sxtb16	r8, r4, ror #8
 8031674:	fa2f f484 	sxtb16	r4, r4
 8031678:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 803167c:	3e01      	subs	r6, #1
 803167e:	dcf0      	bgt.n	8031662 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 8031680:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031682:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8031684:	f04f 0300 	mov.w	r3, #0
 8031688:	4618      	mov	r0, r3
 803168a:	f04f 0110 	mov.w	r1, #16
 803168e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 8031692:	fa00 f088 	sxtah	r0, r0, r8
 8031696:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 803169a:	fa00 f089 	sxtah	r0, r0, r9
 803169e:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 80316a2:	fa03 f38a 	sxtah	r3, r3, sl
 80316a6:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 80316aa:	fa03 f38c 	sxtah	r3, r3, ip
 80316ae:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 80316b2:	3901      	subs	r1, #1
 80316b4:	dceb      	bgt.n	803168e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 80316b6:	f1c0 0000 	rsb	r0, r0, #0
 80316ba:	f1c3 0300 	rsb	r3, r3, #0
 80316be:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80316c0:	fb02 f000 	mul.w	r0, r2, r0
 80316c4:	fb03 f202 	mul.w	r2, r3, r2
 80316c8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80316ca:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80316ce:	e9d1 3400 	ldrd	r3, r4, [r1]
 80316d2:	4403      	add	r3, r0
 80316d4:	4414      	add	r4, r2
 80316d6:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 80316da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80316dc:	f04f 0305 	mov.w	r3, #5
 80316e0:	f102 0203 	add.w	r2, r2, #3
 80316e4:	441a      	add	r2, r3
 80316e6:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 80316ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80316ec:	f04f 073e 	mov.w	r7, #62	@ 0x3e
 80316f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80316f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80316f4:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80316f6:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80316fa:	46e2      	mov	sl, ip
 80316fc:	46f3      	mov	fp, lr
 80316fe:	f103 0301 	add.w	r3, r3, #1
 8031702:	930c      	str	r3, [sp, #48]	@ 0x30
 8031704:	f04f 0804 	mov.w	r8, #4
 8031708:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 803170c:	fa2f f485 	sxtb16	r4, r5
 8031710:	f856 0b04 	ldr.w	r0, [r6], #4
 8031714:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031718:	f856 1b04 	ldr.w	r1, [r6], #4
 803171c:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031720:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031724:	f856 2b04 	ldr.w	r2, [r6], #4
 8031728:	f856 3b04 	ldr.w	r3, [r6], #4
 803172c:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031730:	f859 4b04 	ldr.w	r4, [r9], #4
 8031734:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031738:	fa2f f584 	sxtb16	r5, r4
 803173c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031740:	fb25 cc00 	smlad	ip, r5, r0, ip
 8031744:	f856 0b04 	ldr.w	r0, [r6], #4
 8031748:	fb25 ee02 	smlad	lr, r5, r2, lr
 803174c:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8031750:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031754:	fb24 ee03 	smlad	lr, r4, r3, lr
 8031758:	fa2f f485 	sxtb16	r4, r5
 803175c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8031760:	f856 1b04 	ldr.w	r1, [r6], #4
 8031764:	fb24 aa00 	smlad	sl, r4, r0, sl
 8031768:	f856 2b04 	ldr.w	r2, [r6], #4
 803176c:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031770:	f856 3b04 	ldr.w	r3, [r6], #4
 8031774:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031778:	f859 4b04 	ldr.w	r4, [r9], #4
 803177c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031780:	fa2f f584 	sxtb16	r5, r4
 8031784:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031788:	fb25 cc00 	smlad	ip, r5, r0, ip
 803178c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031790:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 8031794:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031798:	f856 0b04 	ldr.w	r0, [r6], #4
 803179c:	fb24 ee03 	smlad	lr, r4, r3, lr
 80317a0:	fa2f f485 	sxtb16	r4, r5
 80317a4:	fa2f f595 	sxtb16	r5, r5, ror #8
 80317a8:	f856 1b04 	ldr.w	r1, [r6], #4
 80317ac:	fb24 aa00 	smlad	sl, r4, r0, sl
 80317b0:	f856 2b04 	ldr.w	r2, [r6], #4
 80317b4:	fb25 aa01 	smlad	sl, r5, r1, sl
 80317b8:	f856 3b04 	ldr.w	r3, [r6], #4
 80317bc:	fb24 bb02 	smlad	fp, r4, r2, fp
 80317c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80317c4:	fb25 bb03 	smlad	fp, r5, r3, fp
 80317c8:	fa2f f584 	sxtb16	r5, r4
 80317cc:	fa2f f494 	sxtb16	r4, r4, ror #8
 80317d0:	fb25 cc00 	smlad	ip, r5, r0, ip
 80317d4:	fb25 ee02 	smlad	lr, r5, r2, lr
 80317d8:	f856 0b04 	ldr.w	r0, [r6], #4
 80317dc:	fb24 cc01 	smlad	ip, r4, r1, ip
 80317e0:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 80317e4:	fb24 ee03 	smlad	lr, r4, r3, lr
 80317e8:	fa2f f485 	sxtb16	r4, r5
 80317ec:	fa2f f595 	sxtb16	r5, r5, ror #8
 80317f0:	f856 1b04 	ldr.w	r1, [r6], #4
 80317f4:	fb24 aa00 	smlad	sl, r4, r0, sl
 80317f8:	f856 2b04 	ldr.w	r2, [r6], #4
 80317fc:	fb25 aa01 	smlad	sl, r5, r1, sl
 8031800:	f856 3b04 	ldr.w	r3, [r6], #4
 8031804:	fb24 bb02 	smlad	fp, r4, r2, fp
 8031808:	f859 4b04 	ldr.w	r4, [r9], #4
 803180c:	fb25 bb03 	smlad	fp, r5, r3, fp
 8031810:	fa2f f584 	sxtb16	r5, r4
 8031814:	fa2f f494 	sxtb16	r4, r4, ror #8
 8031818:	fb25 cc00 	smlad	ip, r5, r0, ip
 803181c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8031820:	f1b8 0801 	subs.w	r8, r8, #1
 8031824:	fb24 cc01 	smlad	ip, r4, r1, ip
 8031828:	fb24 ee03 	smlad	lr, r4, r3, lr
 803182c:	f73f af6c 	bgt.w	8031708 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 8031830:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8031832:	462e      	mov	r6, r5
 8031834:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031836:	1e90      	subs	r0, r2, #2
 8031838:	dc09      	bgt.n	803184e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x23e>
 803183a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803183c:	f1c2 0202 	rsb	r2, r2, #2
 8031840:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8031844:	920c      	str	r2, [sp, #48]	@ 0x30
 8031846:	f100 0005 	add.w	r0, r0, #5
 803184a:	f105 0502 	add.w	r5, r5, #2
 803184e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8031850:	9800      	ldr	r0, [sp, #0]
 8031852:	9902      	ldr	r1, [sp, #8]
 8031854:	9a04      	ldr	r2, [sp, #16]
 8031856:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8031858:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803185c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8031860:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8031864:	fb5a 0a01 	smmla	sl, sl, r1, r0
 8031868:	fa4c fc02 	asr.w	ip, ip, r2
 803186c:	fa4a fa02 	asr.w	sl, sl, r2
 8031870:	f30c 0c07 	ssat	ip, #8, ip
 8031874:	f30a 0a07 	ssat	sl, #8, sl
 8031878:	f886 c000 	strb.w	ip, [r6]
 803187c:	f884 a000 	strb.w	sl, [r4]
 8031880:	9801      	ldr	r0, [sp, #4]
 8031882:	9903      	ldr	r1, [sp, #12]
 8031884:	9a05      	ldr	r2, [sp, #20]
 8031886:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 803188a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 803188e:	fb5e 0e01 	smmla	lr, lr, r1, r0
 8031892:	fb5b 0b01 	smmla	fp, fp, r1, r0
 8031896:	fa4e fe02 	asr.w	lr, lr, r2
 803189a:	fa4b fb02 	asr.w	fp, fp, r2
 803189e:	f30e 0e07 	ssat	lr, #8, lr
 80318a2:	f30b 0b07 	ssat	fp, #8, fp
 80318a6:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 80318aa:	f884 b0bd 	strb.w	fp, [r4, #189]	@ 0xbd
 80318ae:	f105 0302 	add.w	r3, r5, #2
 80318b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80318b4:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 80318b8:	3f01      	subs	r7, #1
 80318ba:	f47f af1a 	bne.w	80316f2 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 80318be:	f8cd 9020 	str.w	r9, [sp, #32]
 80318c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80318c6:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80318c8:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 80318cc:	f04f 0810 	mov.w	r8, #16
 80318d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80318d4:	f856 0b04 	ldr.w	r0, [r6], #4
 80318d8:	f856 1b04 	ldr.w	r1, [r6], #4
 80318dc:	f856 2b04 	ldr.w	r2, [r6], #4
 80318e0:	f856 3b04 	ldr.w	r3, [r6], #4
 80318e4:	fa2f f584 	sxtb16	r5, r4
 80318e8:	fa2f f494 	sxtb16	r4, r4, ror #8
 80318ec:	fb25 cc00 	smlad	ip, r5, r0, ip
 80318f0:	fb25 ee02 	smlad	lr, r5, r2, lr
 80318f4:	fb24 cc01 	smlad	ip, r4, r1, ip
 80318f8:	fb24 ee03 	smlad	lr, r4, r3, lr
 80318fc:	f1b8 0801 	subs.w	r8, r8, #1
 8031900:	dce6      	bgt.n	80318d0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x2c0>
 8031902:	9800      	ldr	r0, [sp, #0]
 8031904:	9902      	ldr	r1, [sp, #8]
 8031906:	9a04      	ldr	r2, [sp, #16]
 8031908:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 803190a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 803190e:	fb5c 0c01 	smmla	ip, ip, r1, r0
 8031912:	fa4c fc02 	asr.w	ip, ip, r2
 8031916:	f30c 0c07 	ssat	ip, #8, ip
 803191a:	f886 c000 	strb.w	ip, [r6]
 803191e:	9801      	ldr	r0, [sp, #4]
 8031920:	9903      	ldr	r1, [sp, #12]
 8031922:	9a05      	ldr	r2, [sp, #20]
 8031924:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8031928:	fb5e 0e01 	smmla	lr, lr, r1, r0
 803192c:	fa4e fe02 	asr.w	lr, lr, r2
 8031930:	f30e 0e07 	ssat	lr, #8, lr
 8031934:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 8031938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803193a:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 803193e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031940:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031942:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8031944:	f503 73bd 	add.w	r3, r3, #378	@ 0x17a
 8031948:	9312      	str	r3, [sp, #72]	@ 0x48
 803194a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803194c:	f102 0201 	add.w	r2, r2, #1
 8031950:	920d      	str	r2, [sp, #52]	@ 0x34
 8031952:	2a20      	cmp	r2, #32
 8031954:	f6ff ae68 	blt.w	8031628 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 8031958:	2000      	movs	r0, #0
 803195a:	b019      	add	sp, #100	@ 0x64
 803195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08031960 <ai_sum_f32>:
 8031960:	edd1 7a00 	vldr	s15, [r1]
 8031964:	ed92 7a00 	vldr	s14, [r2]
 8031968:	ee77 7a87 	vadd.f32	s15, s15, s14
 803196c:	edc0 7a00 	vstr	s15, [r0]
 8031970:	4770      	bx	lr
 8031972:	bf00      	nop

08031974 <ai_sum_buffer_INT8>:
 8031974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031978:	9c07      	ldr	r4, [sp, #28]
 803197a:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 803197e:	ed94 0a00 	vldr	s0, [r4]
 8031982:	9c08      	ldr	r4, [sp, #32]
 8031984:	f994 e000 	ldrsb.w	lr, [r4]
 8031988:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 803198a:	edd4 0a00 	vldr	s1, [r4]
 803198e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8031990:	f994 9000 	ldrsb.w	r9, [r4]
 8031994:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8031996:	ed94 1a00 	vldr	s2, [r4]
 803199a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803199c:	f994 5000 	ldrsb.w	r5, [r4]
 80319a0:	f1b8 0f00 	cmp.w	r8, #0
 80319a4:	d121      	bne.n	80319ea <ai_sum_buffer_INT8+0x76>
 80319a6:	eeb4 0a41 	vcmp.f32	s0, s2
 80319aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80319ae:	f040 80c9 	bne.w	8031b44 <ai_sum_buffer_INT8+0x1d0>
 80319b2:	45ae      	cmp	lr, r5
 80319b4:	f040 80c6 	bne.w	8031b44 <ai_sum_buffer_INT8+0x1d0>
 80319b8:	eef4 0a41 	vcmp.f32	s1, s2
 80319bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80319c0:	f040 80c0 	bne.w	8031b44 <ai_sum_buffer_INT8+0x1d0>
 80319c4:	45a9      	cmp	r9, r5
 80319c6:	f040 80bd 	bne.w	8031b44 <ai_sum_buffer_INT8+0x1d0>
 80319ca:	b163      	cbz	r3, 80319e6 <ai_sum_buffer_INT8+0x72>
 80319cc:	4403      	add	r3, r0
 80319ce:	f911 4b01 	ldrsb.w	r4, [r1], #1
 80319d2:	f912 6b01 	ldrsb.w	r6, [r2], #1
 80319d6:	4434      	add	r4, r6
 80319d8:	1b64      	subs	r4, r4, r5
 80319da:	f304 0407 	ssat	r4, #8, r4
 80319de:	f800 4b01 	strb.w	r4, [r0], #1
 80319e2:	4298      	cmp	r0, r3
 80319e4:	d1f3      	bne.n	80319ce <ai_sum_buffer_INT8+0x5a>
 80319e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80319ea:	eec0 5a81 	vdiv.f32	s11, s1, s2
 80319ee:	f04f 0c01 	mov.w	ip, #1
 80319f2:	089f      	lsrs	r7, r3, #2
 80319f4:	ee80 7a01 	vdiv.f32	s14, s0, s2
 80319f8:	ee15 4a90 	vmov	r4, s11
 80319fc:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 8031a00:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 8031a04:	ee17 6a10 	vmov	r6, s14
 8031a08:	ea04 74e4 	and.w	r4, r4, r4, asr #31
 8031a0c:	f3c6 56c7 	ubfx	r6, r6, #23, #8
 8031a10:	f1c6 067e 	rsb	r6, r6, #126	@ 0x7e
 8031a14:	42b4      	cmp	r4, r6
 8031a16:	bfa8      	it	ge
 8031a18:	4634      	movge	r4, r6
 8031a1a:	45e0      	cmp	r8, ip
 8031a1c:	f104 061d 	add.w	r6, r4, #29
 8031a20:	fa0c f606 	lsl.w	r6, ip, r6
 8031a24:	ee07 6a90 	vmov	s15, r6
 8031a28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8031a2c:	f000 8092 	beq.w	8031b54 <ai_sum_buffer_INT8+0x1e0>
 8031a30:	ee07 ea90 	vmov	s15, lr
 8031a34:	f992 2000 	ldrsb.w	r2, [r2]
 8031a38:	f104 0616 	add.w	r6, r4, #22
 8031a3c:	3415      	adds	r4, #21
 8031a3e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8031a42:	ee07 5a90 	vmov	s15, r5
 8031a46:	eba2 0209 	sub.w	r2, r2, r9
 8031a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031a4e:	ee05 2a10 	vmov	s10, r2
 8031a52:	fa0c f204 	lsl.w	r2, ip, r4
 8031a56:	fa0c f406 	lsl.w	r4, ip, r6
 8031a5a:	eee6 7a47 	vfms.f32	s15, s12, s14
 8031a5e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8031a62:	ee37 7a07 	vadd.f32	s14, s14, s14
 8031a66:	ee67 6a26 	vmul.f32	s13, s14, s13
 8031a6a:	ee07 4a10 	vmov	s14, r4
 8031a6e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8031a72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8031a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a7a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8031a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8031a82:	ee17 4a10 	vmov	r4, s14
 8031a86:	ee17 5a90 	vmov	r5, s15
 8031a8a:	4415      	add	r5, r2
 8031a8c:	2f00      	cmp	r7, #0
 8031a8e:	f000 80ee 	beq.w	8031c6e <ai_sum_buffer_INT8+0x2fa>
 8031a92:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8031a96:	f100 0e04 	add.w	lr, r0, #4
 8031a9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8031a9e:	f851 2b04 	ldr.w	r2, [r1], #4
 8031aa2:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8031aa6:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 8031aaa:	fb34 590c 	smlawb	r9, r4, ip, r5
 8031aae:	fa49 f906 	asr.w	r9, r9, r6
 8031ab2:	f309 0907 	ssat	r9, #8, r9
 8031ab6:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8031aba:	f80e 9c04 	strb.w	r9, [lr, #-4]
 8031abe:	fb34 5902 	smlawb	r9, r4, r2, r5
 8031ac2:	fa49 f906 	asr.w	r9, r9, r6
 8031ac6:	f309 0907 	ssat	r9, #8, r9
 8031aca:	f80e 9c03 	strb.w	r9, [lr, #-3]
 8031ace:	fb34 5c1c 	smlawt	ip, r4, ip, r5
 8031ad2:	fa4c fc06 	asr.w	ip, ip, r6
 8031ad6:	f30c 0c07 	ssat	ip, #8, ip
 8031ada:	f80e cc02 	strb.w	ip, [lr, #-2]
 8031ade:	fb34 5212 	smlawt	r2, r4, r2, r5
 8031ae2:	4132      	asrs	r2, r6
 8031ae4:	f302 0207 	ssat	r2, #8, r2
 8031ae8:	42b9      	cmp	r1, r7
 8031aea:	f80e 2c01 	strb.w	r2, [lr, #-1]
 8031aee:	f10e 0e04 	add.w	lr, lr, #4
 8031af2:	d1d4      	bne.n	8031a9e <ai_sum_buffer_INT8+0x12a>
 8031af4:	4440      	add	r0, r8
 8031af6:	f013 0303 	ands.w	r3, r3, #3
 8031afa:	f43f af74 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031afe:	f997 2000 	ldrsb.w	r2, [r7]
 8031b02:	0212      	lsls	r2, r2, #8
 8031b04:	fb34 5202 	smlawb	r2, r4, r2, r5
 8031b08:	4132      	asrs	r2, r6
 8031b0a:	f302 0207 	ssat	r2, #8, r2
 8031b0e:	3b01      	subs	r3, #1
 8031b10:	7002      	strb	r2, [r0, #0]
 8031b12:	f43f af68 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031b16:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8031b1a:	0212      	lsls	r2, r2, #8
 8031b1c:	fb34 5202 	smlawb	r2, r4, r2, r5
 8031b20:	4132      	asrs	r2, r6
 8031b22:	f302 0207 	ssat	r2, #8, r2
 8031b26:	2b01      	cmp	r3, #1
 8031b28:	7042      	strb	r2, [r0, #1]
 8031b2a:	f43f af5c 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031b2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8031b32:	021b      	lsls	r3, r3, #8
 8031b34:	fb34 5303 	smlawb	r3, r4, r3, r5
 8031b38:	4133      	asrs	r3, r6
 8031b3a:	f303 0307 	ssat	r3, #8, r3
 8031b3e:	7083      	strb	r3, [r0, #2]
 8031b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031b44:	e9cd 9508 	strd	r9, r5, [sp, #32]
 8031b48:	f8cd e01c 	str.w	lr, [sp, #28]
 8031b4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031b50:	f000 ba0c 	b.w	8031f6c <ai_math_elementwise_sum_int8>
 8031b54:	ee07 9a90 	vmov	s15, r9
 8031b58:	f991 1000 	ldrsb.w	r1, [r1]
 8031b5c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8031b60:	ee07 5a90 	vmov	s15, r5
 8031b64:	eba1 010e 	sub.w	r1, r1, lr
 8031b68:	f104 0e16 	add.w	lr, r4, #22
 8031b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031b70:	3415      	adds	r4, #21
 8031b72:	ee06 1a10 	vmov	s12, r1
 8031b76:	fa08 f10e 	lsl.w	r1, r8, lr
 8031b7a:	fa08 f404 	lsl.w	r4, r8, r4
 8031b7e:	eee5 7a65 	vfms.f32	s15, s10, s11
 8031b82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8031b86:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8031b8a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8031b8e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8031b92:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 8031b96:	ee17 6a10 	vmov	r6, s14
 8031b9a:	eef0 6a67 	vmov.f32	s13, s15
 8031b9e:	ee07 1a90 	vmov	s15, r1
 8031ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8031baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8031bae:	ee17 5a90 	vmov	r5, s15
 8031bb2:	4425      	add	r5, r4
 8031bb4:	2f00      	cmp	r7, #0
 8031bb6:	d05c      	beq.n	8031c72 <ai_sum_buffer_INT8+0x2fe>
 8031bb8:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8031bbc:	f100 0c04 	add.w	ip, r0, #4
 8031bc0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8031bc4:	f852 1b04 	ldr.w	r1, [r2], #4
 8031bc8:	020c      	lsls	r4, r1, #8
 8031bca:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 8031bce:	fb36 5904 	smlawb	r9, r6, r4, r5
 8031bd2:	fa49 f90e 	asr.w	r9, r9, lr
 8031bd6:	f309 0907 	ssat	r9, #8, r9
 8031bda:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8031bde:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8031be2:	fb36 5901 	smlawb	r9, r6, r1, r5
 8031be6:	fa49 f90e 	asr.w	r9, r9, lr
 8031bea:	f309 0907 	ssat	r9, #8, r9
 8031bee:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8031bf2:	fb36 5414 	smlawt	r4, r6, r4, r5
 8031bf6:	fa44 f40e 	asr.w	r4, r4, lr
 8031bfa:	f304 0407 	ssat	r4, #8, r4
 8031bfe:	f80c 4c02 	strb.w	r4, [ip, #-2]
 8031c02:	fb36 5111 	smlawt	r1, r6, r1, r5
 8031c06:	fa41 f10e 	asr.w	r1, r1, lr
 8031c0a:	f301 0107 	ssat	r1, #8, r1
 8031c0e:	42ba      	cmp	r2, r7
 8031c10:	f80c 1c01 	strb.w	r1, [ip, #-1]
 8031c14:	f10c 0c04 	add.w	ip, ip, #4
 8031c18:	d1d4      	bne.n	8031bc4 <ai_sum_buffer_INT8+0x250>
 8031c1a:	4440      	add	r0, r8
 8031c1c:	f013 0303 	ands.w	r3, r3, #3
 8031c20:	f43f aee1 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031c24:	f997 2000 	ldrsb.w	r2, [r7]
 8031c28:	0212      	lsls	r2, r2, #8
 8031c2a:	fb36 5202 	smlawb	r2, r6, r2, r5
 8031c2e:	fa42 f20e 	asr.w	r2, r2, lr
 8031c32:	f302 0207 	ssat	r2, #8, r2
 8031c36:	3b01      	subs	r3, #1
 8031c38:	7002      	strb	r2, [r0, #0]
 8031c3a:	f43f aed4 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031c3e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8031c42:	0212      	lsls	r2, r2, #8
 8031c44:	fb36 5202 	smlawb	r2, r6, r2, r5
 8031c48:	fa42 f20e 	asr.w	r2, r2, lr
 8031c4c:	f302 0207 	ssat	r2, #8, r2
 8031c50:	2b01      	cmp	r3, #1
 8031c52:	7042      	strb	r2, [r0, #1]
 8031c54:	f43f aec7 	beq.w	80319e6 <ai_sum_buffer_INT8+0x72>
 8031c58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8031c5c:	021b      	lsls	r3, r3, #8
 8031c5e:	fb36 5303 	smlawb	r3, r6, r3, r5
 8031c62:	fa43 f30e 	asr.w	r3, r3, lr
 8031c66:	f303 0307 	ssat	r3, #8, r3
 8031c6a:	7083      	strb	r3, [r0, #2]
 8031c6c:	e6bb      	b.n	80319e6 <ai_sum_buffer_INT8+0x72>
 8031c6e:	460f      	mov	r7, r1
 8031c70:	e741      	b.n	8031af6 <ai_sum_buffer_INT8+0x182>
 8031c72:	4617      	mov	r7, r2
 8031c74:	e7d2      	b.n	8031c1c <ai_sum_buffer_INT8+0x2a8>
 8031c76:	bf00      	nop

08031c78 <ai_array_to_buffer_fmt>:
 8031c78:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8031c7c:	2b02      	cmp	r3, #2
 8031c7e:	d055      	beq.n	8031d2c <ai_array_to_buffer_fmt+0xb4>
 8031c80:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8031c84:	4a2c      	ldr	r2, [pc, #176]	@ (8031d38 <ai_array_to_buffer_fmt+0xc0>)
 8031c86:	4293      	cmp	r3, r2
 8031c88:	d010      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031c8a:	dc21      	bgt.n	8031cd0 <ai_array_to_buffer_fmt+0x58>
 8031c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8031d3c <ai_array_to_buffer_fmt+0xc4>)
 8031c8e:	4293      	cmp	r3, r2
 8031c90:	d00c      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031c92:	dd0f      	ble.n	8031cb4 <ai_array_to_buffer_fmt+0x3c>
 8031c94:	4a2a      	ldr	r2, [pc, #168]	@ (8031d40 <ai_array_to_buffer_fmt+0xc8>)
 8031c96:	4293      	cmp	r3, r2
 8031c98:	d008      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031c9a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8031c9e:	4293      	cmp	r3, r2
 8031ca0:	d004      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031ca2:	4a28      	ldr	r2, [pc, #160]	@ (8031d44 <ai_array_to_buffer_fmt+0xcc>)
 8031ca4:	4293      	cmp	r3, r2
 8031ca6:	bf0c      	ite	eq
 8031ca8:	4613      	moveq	r3, r2
 8031caa:	2340      	movne	r3, #64	@ 0x40
 8031cac:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031cb0:	4318      	orrs	r0, r3
 8031cb2:	4770      	bx	lr
 8031cb4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031cb8:	4293      	cmp	r3, r2
 8031cba:	d0f7      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031cbc:	dd2c      	ble.n	8031d18 <ai_array_to_buffer_fmt+0xa0>
 8031cbe:	4a22      	ldr	r2, [pc, #136]	@ (8031d48 <ai_array_to_buffer_fmt+0xd0>)
 8031cc0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031cc4:	4293      	cmp	r3, r2
 8031cc6:	bf0c      	ite	eq
 8031cc8:	4613      	moveq	r3, r2
 8031cca:	2340      	movne	r3, #64	@ 0x40
 8031ccc:	4318      	orrs	r0, r3
 8031cce:	4770      	bx	lr
 8031cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8031d4c <ai_array_to_buffer_fmt+0xd4>)
 8031cd2:	4293      	cmp	r3, r2
 8031cd4:	d0ea      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031cd6:	dd10      	ble.n	8031cfa <ai_array_to_buffer_fmt+0x82>
 8031cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8031d50 <ai_array_to_buffer_fmt+0xd8>)
 8031cda:	4293      	cmp	r3, r2
 8031cdc:	d0e6      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031cde:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8031ce2:	4293      	cmp	r3, r2
 8031ce4:	d0e2      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031ce6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8031cea:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8031cee:	4293      	cmp	r3, r2
 8031cf0:	bf0c      	ite	eq
 8031cf2:	4613      	moveq	r3, r2
 8031cf4:	2340      	movne	r3, #64	@ 0x40
 8031cf6:	4318      	orrs	r0, r3
 8031cf8:	4770      	bx	lr
 8031cfa:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8031cfe:	4293      	cmp	r3, r2
 8031d00:	d0d4      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d02:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8031d06:	4293      	cmp	r3, r2
 8031d08:	d0d0      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d0a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031d0e:	4293      	cmp	r3, r2
 8031d10:	bf0c      	ite	eq
 8031d12:	4613      	moveq	r3, r2
 8031d14:	2340      	movne	r3, #64	@ 0x40
 8031d16:	e7c9      	b.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d18:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8031d1c:	4293      	cmp	r3, r2
 8031d1e:	d0c5      	beq.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d20:	3280      	adds	r2, #128	@ 0x80
 8031d22:	4293      	cmp	r3, r2
 8031d24:	bf0c      	ite	eq
 8031d26:	4613      	moveq	r3, r2
 8031d28:	2340      	movne	r3, #64	@ 0x40
 8031d2a:	e7bf      	b.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d2c:	4b09      	ldr	r3, [pc, #36]	@ (8031d54 <ai_array_to_buffer_fmt+0xdc>)
 8031d2e:	4003      	ands	r3, r0
 8031d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8031d34:	e7ba      	b.n	8031cac <ai_array_to_buffer_fmt+0x34>
 8031d36:	bf00      	nop
 8031d38:	00821040 	.word	0x00821040
 8031d3c:	00040840 	.word	0x00040840
 8031d40:	00041040 	.word	0x00041040
 8031d44:	0004084f 	.word	0x0004084f
 8031d48:	00040447 	.word	0x00040447
 8031d4c:	00840447 	.word	0x00840447
 8031d50:	0084084f 	.word	0x0084084f
 8031d54:	00803fff 	.word	0x00803fff

08031d58 <ai_array_get_byte_size>:
 8031d58:	b321      	cbz	r1, 8031da4 <ai_array_get_byte_size+0x4c>
 8031d5a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8031d5e:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8031d62:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8031d66:	fb03 f101 	mul.w	r1, r3, r1
 8031d6a:	b500      	push	{lr}
 8031d6c:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8031d70:	3107      	adds	r1, #7
 8031d72:	11c0      	asrs	r0, r0, #7
 8031d74:	fa42 f20e 	asr.w	r2, r2, lr
 8031d78:	f021 0107 	bic.w	r1, r1, #7
 8031d7c:	07d2      	lsls	r2, r2, #31
 8031d7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8031d82:	d505      	bpl.n	8031d90 <ai_array_get_byte_size+0x38>
 8031d84:	2300      	movs	r3, #0
 8031d86:	3107      	adds	r1, #7
 8031d88:	4419      	add	r1, r3
 8031d8a:	08c8      	lsrs	r0, r1, #3
 8031d8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8031d90:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8031d94:	3107      	adds	r1, #7
 8031d96:	fa40 f00c 	asr.w	r0, r0, ip
 8031d9a:	4083      	lsls	r3, r0
 8031d9c:	4419      	add	r1, r3
 8031d9e:	08c8      	lsrs	r0, r1, #3
 8031da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8031da4:	4608      	mov	r0, r1
 8031da6:	4770      	bx	lr

08031da8 <ai_array_get_data_byte_size>:
 8031da8:	b169      	cbz	r1, 8031dc6 <ai_array_get_data_byte_size+0x1e>
 8031daa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8031dae:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8031db2:	fb03 f101 	mul.w	r1, r3, r1
 8031db6:	1dcb      	adds	r3, r1, #7
 8031db8:	f023 0307 	bic.w	r3, r3, #7
 8031dbc:	fa23 f000 	lsr.w	r0, r3, r0
 8031dc0:	3007      	adds	r0, #7
 8031dc2:	08c0      	lsrs	r0, r0, #3
 8031dc4:	4770      	bx	lr
 8031dc6:	4608      	mov	r0, r1
 8031dc8:	4770      	bx	lr
 8031dca:	bf00      	nop

08031dcc <ai_version_get>:
 8031dcc:	0212      	lsls	r2, r2, #8
 8031dce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8031dd2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8031dd6:	4770      	bx	lr

08031dd8 <get_tensor_byte_size>:
 8031dd8:	b430      	push	{r4, r5}
 8031dda:	6985      	ldr	r5, [r0, #24]
 8031ddc:	68c4      	ldr	r4, [r0, #12]
 8031dde:	6941      	ldr	r1, [r0, #20]
 8031de0:	4b06      	ldr	r3, [pc, #24]	@ (8031dfc <get_tensor_byte_size+0x24>)
 8031de2:	6828      	ldr	r0, [r5, #0]
 8031de4:	4a06      	ldr	r2, [pc, #24]	@ (8031e00 <get_tensor_byte_size+0x28>)
 8031de6:	4003      	ands	r3, r0
 8031de8:	68c9      	ldr	r1, [r1, #12]
 8031dea:	68e0      	ldr	r0, [r4, #12]
 8031dec:	4293      	cmp	r3, r2
 8031dee:	fb01 f000 	mul.w	r0, r1, r0
 8031df2:	d101      	bne.n	8031df8 <get_tensor_byte_size+0x20>
 8031df4:	3007      	adds	r0, #7
 8031df6:	08c0      	lsrs	r0, r0, #3
 8031df8:	bc30      	pop	{r4, r5}
 8031dfa:	4770      	bx	lr
 8031dfc:	017fffff 	.word	0x017fffff
 8031e00:	000400c0 	.word	0x000400c0

08031e04 <core_get_broadcasted_shape>:
 8031e04:	b470      	push	{r4, r5, r6}
 8031e06:	6804      	ldr	r4, [r0, #0]
 8031e08:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8031e0c:	b304      	cbz	r4, 8031e50 <core_get_broadcasted_shape+0x4c>
 8031e0e:	4623      	mov	r3, r4
 8031e10:	3b01      	subs	r3, #1
 8031e12:	429c      	cmp	r4, r3
 8031e14:	d917      	bls.n	8031e46 <core_get_broadcasted_shape+0x42>
 8031e16:	6815      	ldr	r5, [r2, #0]
 8031e18:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8031e1c:	2401      	movs	r4, #1
 8031e1e:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8031e22:	d202      	bcs.n	8031e2a <core_get_broadcasted_shape+0x26>
 8031e24:	6854      	ldr	r4, [r2, #4]
 8031e26:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8031e2a:	680e      	ldr	r6, [r1, #0]
 8031e2c:	2501      	movs	r5, #1
 8031e2e:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8031e32:	d202      	bcs.n	8031e3a <core_get_broadcasted_shape+0x36>
 8031e34:	684d      	ldr	r5, [r1, #4]
 8031e36:	f855 500c 	ldr.w	r5, [r5, ip]
 8031e3a:	42ac      	cmp	r4, r5
 8031e3c:	bf38      	it	cc
 8031e3e:	462c      	movcc	r4, r5
 8031e40:	6845      	ldr	r5, [r0, #4]
 8031e42:	f845 400c 	str.w	r4, [r5, ip]
 8031e46:	b11b      	cbz	r3, 8031e50 <core_get_broadcasted_shape+0x4c>
 8031e48:	6804      	ldr	r4, [r0, #0]
 8031e4a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8031e4e:	e7df      	b.n	8031e10 <core_get_broadcasted_shape+0xc>
 8031e50:	bc70      	pop	{r4, r5, r6}
 8031e52:	4770      	bx	lr

08031e54 <core_compute_offsets>:
 8031e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031e58:	e9d1 5c00 	ldrd	r5, ip, [r1]
 8031e5c:	6857      	ldr	r7, [r2, #4]
 8031e5e:	b085      	sub	sp, #20
 8031e60:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8031e64:	687e      	ldr	r6, [r7, #4]
 8031e66:	1ba1      	subs	r1, r4, r6
 8031e68:	bf18      	it	ne
 8031e6a:	2101      	movne	r1, #1
 8031e6c:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 8031e70:	9103      	str	r1, [sp, #12]
 8031e72:	d376      	bcc.n	8031f62 <core_compute_offsets+0x10e>
 8031e74:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8031e78:	fb09 fe04 	mul.w	lr, r9, r4
 8031e7c:	6812      	ldr	r2, [r2, #0]
 8031e7e:	f8d0 b000 	ldr.w	fp, [r0]
 8031e82:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8031e86:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 8031e8a:	bf2c      	ite	cs
 8031e8c:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 8031e90:	f04f 0a01 	movcc.w	sl, #1
 8031e94:	9201      	str	r2, [sp, #4]
 8031e96:	ebb9 0c0a 	subs.w	ip, r9, sl
 8031e9a:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 8031e9e:	bf18      	it	ne
 8031ea0:	f04f 0c01 	movne.w	ip, #1
 8031ea4:	ebb5 0708 	subs.w	r7, r5, r8
 8031ea8:	9202      	str	r2, [sp, #8]
 8031eaa:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8031eae:	bf18      	it	ne
 8031eb0:	2701      	movne	r7, #1
 8031eb2:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 8031eb6:	d321      	bcc.n	8031efc <core_compute_offsets+0xa8>
 8031eb8:	42b4      	cmp	r4, r6
 8031eba:	bf0c      	ite	eq
 8031ebc:	461a      	moveq	r2, r3
 8031ebe:	2200      	movne	r2, #0
 8031ec0:	6841      	ldr	r1, [r0, #4]
 8031ec2:	604a      	str	r2, [r1, #4]
 8031ec4:	f8d0 b000 	ldr.w	fp, [r0]
 8031ec8:	f5bb 6fa0 	cmp.w	fp, #1280	@ 0x500
 8031ecc:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8031ed0:	d314      	bcc.n	8031efc <core_compute_offsets+0xa8>
 8031ed2:	9a03      	ldr	r2, [sp, #12]
 8031ed4:	45d1      	cmp	r9, sl
 8031ed6:	bf14      	ite	ne
 8031ed8:	2200      	movne	r2, #0
 8031eda:	f002 0201 	andeq.w	r2, r2, #1
 8031ede:	42b4      	cmp	r4, r6
 8031ee0:	bf14      	ite	ne
 8031ee2:	f04f 0900 	movne.w	r9, #0
 8031ee6:	f00c 0901 	andeq.w	r9, ip, #1
 8031eea:	6846      	ldr	r6, [r0, #4]
 8031eec:	fb04 2219 	mls	r2, r4, r9, r2
 8031ef0:	fb03 f202 	mul.w	r2, r3, r2
 8031ef4:	6132      	str	r2, [r6, #16]
 8031ef6:	6802      	ldr	r2, [r0, #0]
 8031ef8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8031efc:	2a02      	cmp	r2, #2
 8031efe:	fb0e f607 	mul.w	r6, lr, r7
 8031f02:	d911      	bls.n	8031f28 <core_compute_offsets+0xd4>
 8031f04:	9a03      	ldr	r2, [sp, #12]
 8031f06:	4545      	cmp	r5, r8
 8031f08:	bf14      	ite	ne
 8031f0a:	2200      	movne	r2, #0
 8031f0c:	f002 0201 	andeq.w	r2, r2, #1
 8031f10:	ea0c 0202 	and.w	r2, ip, r2
 8031f14:	1b92      	subs	r2, r2, r6
 8031f16:	fb04 240c 	mla	r4, r4, ip, r2
 8031f1a:	6842      	ldr	r2, [r0, #4]
 8031f1c:	fb03 f404 	mul.w	r4, r3, r4
 8031f20:	6094      	str	r4, [r2, #8]
 8031f22:	6802      	ldr	r2, [r0, #0]
 8031f24:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8031f28:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 8031f2c:	428c      	cmp	r4, r1
 8031f2e:	d116      	bne.n	8031f5e <core_compute_offsets+0x10a>
 8031f30:	b1af      	cbz	r7, 8031f5e <core_compute_offsets+0x10a>
 8031f32:	9903      	ldr	r1, [sp, #12]
 8031f34:	ea01 010c 	and.w	r1, r1, ip
 8031f38:	2a03      	cmp	r2, #3
 8031f3a:	d90d      	bls.n	8031f58 <core_compute_offsets+0x104>
 8031f3c:	fb0e f505 	mul.w	r5, lr, r5
 8031f40:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 8031f44:	1b12      	subs	r2, r2, r4
 8031f46:	bf18      	it	ne
 8031f48:	2201      	movne	r2, #1
 8031f4a:	fb02 1115 	mls	r1, r2, r5, r1
 8031f4e:	6842      	ldr	r2, [r0, #4]
 8031f50:	4431      	add	r1, r6
 8031f52:	fb03 f101 	mul.w	r1, r3, r1
 8031f56:	60d1      	str	r1, [r2, #12]
 8031f58:	b005      	add	sp, #20
 8031f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031f5e:	2100      	movs	r1, #0
 8031f60:	e7ea      	b.n	8031f38 <core_compute_offsets+0xe4>
 8031f62:	46a6      	mov	lr, r4
 8031f64:	f04f 0901 	mov.w	r9, #1
 8031f68:	e788      	b.n	8031e7c <core_compute_offsets+0x28>
 8031f6a:	bf00      	nop

08031f6c <ai_math_elementwise_sum_int8>:
 8031f6c:	eec0 7a81 	vdiv.f32	s15, s1, s2
 8031f70:	4684      	mov	ip, r0
 8031f72:	eec0 6a01 	vdiv.f32	s13, s0, s2
 8031f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031f7a:	b085      	sub	sp, #20
 8031f7c:	461d      	mov	r5, r3
 8031f7e:	9001      	str	r0, [sp, #4]
 8031f80:	f99d 003c 	ldrsb.w	r0, [sp, #60]	@ 0x3c
 8031f84:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8031f88:	9302      	str	r3, [sp, #8]
 8031f8a:	ee17 3a90 	vmov	r3, s15
 8031f8e:	ee07 0a10 	vmov	s14, r0
 8031f92:	f99d 0038 	ldrsb.w	r0, [sp, #56]	@ 0x38
 8031f96:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8031f9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8031f9e:	4240      	negs	r0, r0
 8031fa0:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8031fa4:	ee76 5aa6 	vadd.f32	s11, s13, s13
 8031fa8:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 8031fac:	ee07 0a90 	vmov	s15, r0
 8031fb0:	ee16 0a90 	vmov	r0, s13
 8031fb4:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8031fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031fbc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8031fc0:	f1c0 007e 	rsb	r0, r0, #126	@ 0x7e
 8031fc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8031fc8:	4283      	cmp	r3, r0
 8031fca:	bfa8      	it	ge
 8031fcc:	4603      	movge	r3, r0
 8031fce:	f99d 0040 	ldrsb.w	r0, [sp, #64]	@ 0x40
 8031fd2:	ea5f 0b95 	movs.w	fp, r5, lsr #2
 8031fd6:	ee07 0a90 	vmov	s15, r0
 8031fda:	f103 041d 	add.w	r4, r3, #29
 8031fde:	f04f 0001 	mov.w	r0, #1
 8031fe2:	f103 0916 	add.w	r9, r3, #22
 8031fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031fea:	f103 0315 	add.w	r3, r3, #21
 8031fee:	fa00 f404 	lsl.w	r4, r0, r4
 8031ff2:	fa00 f303 	lsl.w	r3, r0, r3
 8031ff6:	fa00 f009 	lsl.w	r0, r0, r9
 8031ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8031ffe:	ee07 4a10 	vmov	s14, r4
 8032002:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8032006:	ee07 0a10 	vmov	s14, r0
 803200a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 803200e:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8032012:	ee66 6a26 	vmul.f32	s13, s12, s13
 8032016:	ee67 7a87 	vmul.f32	s15, s15, s14
 803201a:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 803201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8032022:	ee17 8a10 	vmov	r8, s14
 8032026:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 803202a:	ee17 6a90 	vmov	r6, s15
 803202e:	ee17 7a10 	vmov	r7, s14
 8032032:	441e      	add	r6, r3
 8032034:	f106 36ff 	add.w	r6, r6, #4294967295
 8032038:	f000 8081 	beq.w	803213e <ai_math_elementwise_sum_int8+0x1d2>
 803203c:	4663      	mov	r3, ip
 803203e:	4692      	mov	sl, r2
 8032040:	1d1d      	adds	r5, r3, #4
 8032042:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8032046:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 803204a:	9303      	str	r3, [sp, #12]
 803204c:	f851 4b04 	ldr.w	r4, [r1], #4
 8032050:	f85a 3b04 	ldr.w	r3, [sl], #4
 8032054:	ea4f 2e04 	mov.w	lr, r4, lsl #8
 8032058:	f00e 2eff 	and.w	lr, lr, #4278255360	@ 0xff00ff00
 803205c:	fb38 6c0e 	smlawb	ip, r8, lr, r6
 8032060:	0218      	lsls	r0, r3, #8
 8032062:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 8032066:	fb37 cc00 	smlawb	ip, r7, r0, ip
 803206a:	fa4c fc09 	asr.w	ip, ip, r9
 803206e:	f30c 0c07 	ssat	ip, #8, ip
 8032072:	f004 24ff 	and.w	r4, r4, #4278255360	@ 0xff00ff00
 8032076:	f805 cc04 	strb.w	ip, [r5, #-4]
 803207a:	fb38 6c04 	smlawb	ip, r8, r4, r6
 803207e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8032082:	fb37 cc03 	smlawb	ip, r7, r3, ip
 8032086:	fa4c fc09 	asr.w	ip, ip, r9
 803208a:	f30c 0c07 	ssat	ip, #8, ip
 803208e:	f805 cc03 	strb.w	ip, [r5, #-3]
 8032092:	fb38 6e1e 	smlawt	lr, r8, lr, r6
 8032096:	fb37 e010 	smlawt	r0, r7, r0, lr
 803209a:	fa40 f009 	asr.w	r0, r0, r9
 803209e:	f300 0007 	ssat	r0, #8, r0
 80320a2:	f805 0c02 	strb.w	r0, [r5, #-2]
 80320a6:	fb38 6414 	smlawt	r4, r8, r4, r6
 80320aa:	fb37 4313 	smlawt	r3, r7, r3, r4
 80320ae:	fa43 f309 	asr.w	r3, r3, r9
 80320b2:	f303 0307 	ssat	r3, #8, r3
 80320b6:	4559      	cmp	r1, fp
 80320b8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80320bc:	f105 0504 	add.w	r5, r5, #4
 80320c0:	d1c4      	bne.n	803204c <ai_math_elementwise_sum_int8+0xe0>
 80320c2:	9b01      	ldr	r3, [sp, #4]
 80320c4:	9903      	ldr	r1, [sp, #12]
 80320c6:	440b      	add	r3, r1
 80320c8:	440a      	add	r2, r1
 80320ca:	9301      	str	r3, [sp, #4]
 80320cc:	9b02      	ldr	r3, [sp, #8]
 80320ce:	f013 0003 	ands.w	r0, r3, #3
 80320d2:	d031      	beq.n	8032138 <ai_math_elementwise_sum_int8+0x1cc>
 80320d4:	f99b 1000 	ldrsb.w	r1, [fp]
 80320d8:	0209      	lsls	r1, r1, #8
 80320da:	fb38 6101 	smlawb	r1, r8, r1, r6
 80320de:	f992 3000 	ldrsb.w	r3, [r2]
 80320e2:	021b      	lsls	r3, r3, #8
 80320e4:	fb37 1303 	smlawb	r3, r7, r3, r1
 80320e8:	fa43 f309 	asr.w	r3, r3, r9
 80320ec:	f303 0307 	ssat	r3, #8, r3
 80320f0:	9c01      	ldr	r4, [sp, #4]
 80320f2:	3801      	subs	r0, #1
 80320f4:	7023      	strb	r3, [r4, #0]
 80320f6:	d01f      	beq.n	8032138 <ai_math_elementwise_sum_int8+0x1cc>
 80320f8:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 80320fc:	0209      	lsls	r1, r1, #8
 80320fe:	fb38 6101 	smlawb	r1, r8, r1, r6
 8032102:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8032106:	021b      	lsls	r3, r3, #8
 8032108:	fb37 1303 	smlawb	r3, r7, r3, r1
 803210c:	fa43 f309 	asr.w	r3, r3, r9
 8032110:	f303 0307 	ssat	r3, #8, r3
 8032114:	2801      	cmp	r0, #1
 8032116:	7063      	strb	r3, [r4, #1]
 8032118:	d00e      	beq.n	8032138 <ai_math_elementwise_sum_int8+0x1cc>
 803211a:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 803211e:	021b      	lsls	r3, r3, #8
 8032120:	fb38 6803 	smlawb	r8, r8, r3, r6
 8032124:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8032128:	021b      	lsls	r3, r3, #8
 803212a:	fb37 8303 	smlawb	r3, r7, r3, r8
 803212e:	fa43 f309 	asr.w	r3, r3, r9
 8032132:	f303 0307 	ssat	r3, #8, r3
 8032136:	70a3      	strb	r3, [r4, #2]
 8032138:	b005      	add	sp, #20
 803213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803213e:	468b      	mov	fp, r1
 8032140:	e7c4      	b.n	80320cc <ai_math_elementwise_sum_int8+0x160>
 8032142:	bf00      	nop

08032144 <_lite_kernel_nl_softmax_is8os8>:
 8032144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032148:	b08f      	sub	sp, #60	@ 0x3c
 803214a:	461f      	mov	r7, r3
 803214c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 803214e:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 8032152:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 8032156:	920c      	str	r2, [sp, #48]	@ 0x30
 8032158:	e9cd 1009 	strd	r1, r0, [sp, #36]	@ 0x24
 803215c:	f280 8408 	bge.w	8032970 <_lite_kernel_nl_softmax_is8os8+0x82c>
 8032160:	4613      	mov	r3, r2
 8032162:	f44f 7980 	mov.w	r9, #256	@ 0x100
 8032166:	fb07 f303 	mul.w	r3, r7, r3
 803216a:	2b01      	cmp	r3, #1
 803216c:	f240 840c 	bls.w	8032988 <_lite_kernel_nl_softmax_is8os8+0x844>
 8032170:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8032172:	f04f 0b00 	mov.w	fp, #0
 8032176:	f8df e47c 	ldr.w	lr, [pc, #1148]	@ 80325f4 <_lite_kernel_nl_softmax_is8os8+0x4b0>
 803217a:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 803217e:	3b04      	subs	r3, #4
 8032180:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 8032184:	9301      	str	r3, [sp, #4]
 8032186:	e9cd 9702 	strd	r9, r7, [sp, #8]
 803218a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 803218c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 803218e:	fa0b f203 	lsl.w	r2, fp, r3
 8032192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8032194:	4252      	negs	r2, r2
 8032196:	4053      	eors	r3, r2
 8032198:	0fdb      	lsrs	r3, r3, #31
 803219a:	2b00      	cmp	r3, #0
 803219c:	bf0b      	itete	eq
 803219e:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80321a2:	4673      	movne	r3, lr
 80321a4:	2100      	moveq	r1, #0
 80321a6:	f04f 31ff 	movne.w	r1, #4294967295
 80321aa:	fbc0 3102 	smlal	r3, r1, r0, r2
 80321ae:	2900      	cmp	r1, #0
 80321b0:	da04      	bge.n	80321bc <_lite_kernel_nl_softmax_is8os8+0x78>
 80321b2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80321b6:	189b      	adds	r3, r3, r2
 80321b8:	f141 0100 	adc.w	r1, r1, #0
 80321bc:	0fdb      	lsrs	r3, r3, #31
 80321be:	f04f 0c00 	mov.w	ip, #0
 80321c2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80321c6:	4641      	mov	r1, r8
 80321c8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80321cc:	0154      	lsls	r4, r2, #5
 80321ce:	1ad2      	subs	r2, r2, r3
 80321d0:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 80321d4:	fbc4 1c04 	smlal	r1, ip, r4, r4
 80321d8:	f1bc 0f00 	cmp.w	ip, #0
 80321dc:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80321e0:	da05      	bge.n	80321ee <_lite_kernel_nl_softmax_is8os8+0xaa>
 80321e2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80321e6:	1808      	adds	r0, r1, r0
 80321e8:	4601      	mov	r1, r0
 80321ea:	f14c 0c00 	adc.w	ip, ip, #0
 80321ee:	0fc9      	lsrs	r1, r1, #31
 80321f0:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 80321f4:	ea4f 7cec 	mov.w	ip, ip, asr #31
 80321f8:	fba1 0701 	umull	r0, r7, r1, r1
 80321fc:	fb01 f90c 	mul.w	r9, r1, ip
 8032200:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8032204:	eb47 0749 	adc.w	r7, r7, r9, lsl #1
 8032208:	2f00      	cmp	r7, #0
 803220a:	da06      	bge.n	803221a <_lite_kernel_nl_softmax_is8os8+0xd6>
 803220c:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8032210:	eb10 0909 	adds.w	r9, r0, r9
 8032214:	4648      	mov	r0, r9
 8032216:	f147 0700 	adc.w	r7, r7, #0
 803221a:	0fc0      	lsrs	r0, r0, #31
 803221c:	fb01 f505 	mul.w	r5, r1, r5
 8032220:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032224:	fb04 550c 	mla	r5, r4, ip, r5
 8032228:	1087      	asrs	r7, r0, #2
 803222a:	f000 0003 	and.w	r0, r0, #3
 803222e:	bf54      	ite	pl
 8032230:	f04f 0901 	movpl.w	r9, #1
 8032234:	f04f 0902 	movmi.w	r9, #2
 8032238:	4581      	cmp	r9, r0
 803223a:	ea81 0004 	eor.w	r0, r1, r4
 803223e:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8032242:	bfb8      	it	lt
 8032244:	3701      	addlt	r7, #1
 8032246:	2800      	cmp	r0, #0
 8032248:	fba1 0a04 	umull	r0, sl, r1, r4
 803224c:	bf0b      	itete	eq
 803224e:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8032252:	46f4      	movne	ip, lr
 8032254:	f04f 0900 	moveq.w	r9, #0
 8032258:	f04f 39ff 	movne.w	r9, #4294967295
 803225c:	4455      	add	r5, sl
 803225e:	eb10 000c 	adds.w	r0, r0, ip
 8032262:	eb45 0509 	adc.w	r5, r5, r9
 8032266:	2d00      	cmp	r5, #0
 8032268:	da06      	bge.n	8032278 <_lite_kernel_nl_softmax_is8os8+0x134>
 803226a:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 803226e:	eb10 0c0c 	adds.w	ip, r0, ip
 8032272:	4660      	mov	r0, ip
 8032274:	f145 0500 	adc.w	r5, r5, #0
 8032278:	0fc0      	lsrs	r0, r0, #31
 803227a:	4ed5      	ldr	r6, [pc, #852]	@ (80325d0 <_lite_kernel_nl_softmax_is8os8+0x48c>)
 803227c:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8032280:	4438      	add	r0, r7
 8032282:	0fc5      	lsrs	r5, r0, #31
 8032284:	2d00      	cmp	r5, #0
 8032286:	bf0b      	itete	eq
 8032288:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 803228c:	4675      	movne	r5, lr
 803228e:	2700      	moveq	r7, #0
 8032290:	f04f 37ff 	movne.w	r7, #4294967295
 8032294:	fbc0 5706 	smlal	r5, r7, r0, r6
 8032298:	2f00      	cmp	r7, #0
 803229a:	da05      	bge.n	80322a8 <_lite_kernel_nl_softmax_is8os8+0x164>
 803229c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80322a0:	1828      	adds	r0, r5, r0
 80322a2:	4605      	mov	r5, r0
 80322a4:	f147 0700 	adc.w	r7, r7, #0
 80322a8:	0fed      	lsrs	r5, r5, #31
 80322aa:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 80322ae:	4429      	add	r1, r5
 80322b0:	07cf      	lsls	r7, r1, #31
 80322b2:	ea4f 0061 	mov.w	r0, r1, asr #1
 80322b6:	d502      	bpl.n	80322be <_lite_kernel_nl_softmax_is8os8+0x17a>
 80322b8:	2800      	cmp	r0, #0
 80322ba:	bfa8      	it	ge
 80322bc:	3001      	addge	r0, #1
 80322be:	4404      	add	r4, r0
 80322c0:	4dc4      	ldr	r5, [pc, #784]	@ (80325d4 <_lite_kernel_nl_softmax_is8os8+0x490>)
 80322c2:	0fe1      	lsrs	r1, r4, #31
 80322c4:	2900      	cmp	r1, #0
 80322c6:	bf0b      	itete	eq
 80322c8:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 80322cc:	4670      	movne	r0, lr
 80322ce:	2100      	moveq	r1, #0
 80322d0:	f04f 31ff 	movne.w	r1, #4294967295
 80322d4:	fbc4 0105 	smlal	r0, r1, r4, r5
 80322d8:	2900      	cmp	r1, #0
 80322da:	da05      	bge.n	80322e8 <_lite_kernel_nl_softmax_is8os8+0x1a4>
 80322dc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80322e0:	1904      	adds	r4, r0, r4
 80322e2:	4620      	mov	r0, r4
 80322e4:	f141 0100 	adc.w	r1, r1, #0
 80322e8:	0fc0      	lsrs	r0, r0, #31
 80322ea:	f3c2 6400 	ubfx	r4, r2, #24, #1
 80322ee:	4eba      	ldr	r6, [pc, #744]	@ (80325d8 <_lite_kernel_nl_softmax_is8os8+0x494>)
 80322f0:	4645      	mov	r5, r8
 80322f2:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 80322f6:	2100      	movs	r1, #0
 80322f8:	3c01      	subs	r4, #1
 80322fa:	fab3 f383 	clz	r3, r3
 80322fe:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 8032302:	460f      	mov	r7, r1
 8032304:	468c      	mov	ip, r1
 8032306:	095b      	lsrs	r3, r3, #5
 8032308:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 803230c:	f10b 0b01 	add.w	fp, fp, #1
 8032310:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8032314:	fbc0 5706 	smlal	r5, r7, r0, r6
 8032318:	0fed      	lsrs	r5, r5, #31
 803231a:	4004      	ands	r4, r0
 803231c:	f342 6000 	sbfx	r0, r2, #24, #1
 8032320:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8032324:	4ead      	ldr	r6, [pc, #692]	@ (80325dc <_lite_kernel_nl_softmax_is8os8+0x498>)
 8032326:	460f      	mov	r7, r1
 8032328:	4028      	ands	r0, r5
 803232a:	4645      	mov	r5, r8
 803232c:	4060      	eors	r0, r4
 803232e:	f3c2 6440 	ubfx	r4, r2, #25, #1
 8032332:	fbc0 5706 	smlal	r5, r7, r0, r6
 8032336:	3c01      	subs	r4, #1
 8032338:	0fed      	lsrs	r5, r5, #31
 803233a:	4ea9      	ldr	r6, [pc, #676]	@ (80325e0 <_lite_kernel_nl_softmax_is8os8+0x49c>)
 803233c:	4004      	ands	r4, r0
 803233e:	f342 6040 	sbfx	r0, r2, #25, #1
 8032342:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8032346:	460f      	mov	r7, r1
 8032348:	4028      	ands	r0, r5
 803234a:	4645      	mov	r5, r8
 803234c:	4060      	eors	r0, r4
 803234e:	f3c2 6480 	ubfx	r4, r2, #26, #1
 8032352:	fbc0 5706 	smlal	r5, r7, r0, r6
 8032356:	3c01      	subs	r4, #1
 8032358:	0fed      	lsrs	r5, r5, #31
 803235a:	4ea2      	ldr	r6, [pc, #648]	@ (80325e4 <_lite_kernel_nl_softmax_is8os8+0x4a0>)
 803235c:	4004      	ands	r4, r0
 803235e:	f342 6080 	sbfx	r0, r2, #26, #1
 8032362:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8032366:	460f      	mov	r7, r1
 8032368:	4028      	ands	r0, r5
 803236a:	f3c2 65c0 	ubfx	r5, r2, #27, #1
 803236e:	4060      	eors	r0, r4
 8032370:	4644      	mov	r4, r8
 8032372:	3d01      	subs	r5, #1
 8032374:	fbc0 4706 	smlal	r4, r7, r0, r6
 8032378:	0fe4      	lsrs	r4, r4, #31
 803237a:	4005      	ands	r5, r0
 803237c:	f342 60c0 	sbfx	r0, r2, #27, #1
 8032380:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 8032384:	4e98      	ldr	r6, [pc, #608]	@ (80325e8 <_lite_kernel_nl_softmax_is8os8+0x4a4>)
 8032386:	460f      	mov	r7, r1
 8032388:	4020      	ands	r0, r4
 803238a:	ea85 0400 	eor.w	r4, r5, r0
 803238e:	f3c2 7000 	ubfx	r0, r2, #28, #1
 8032392:	4645      	mov	r5, r8
 8032394:	3801      	subs	r0, #1
 8032396:	fbc4 5706 	smlal	r5, r7, r4, r6
 803239a:	0fed      	lsrs	r5, r5, #31
 803239c:	4020      	ands	r0, r4
 803239e:	f342 7400 	sbfx	r4, r2, #28, #1
 80323a2:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 80323a6:	4f91      	ldr	r7, [pc, #580]	@ (80325ec <_lite_kernel_nl_softmax_is8os8+0x4a8>)
 80323a8:	402c      	ands	r4, r5
 80323aa:	4645      	mov	r5, r8
 80323ac:	4060      	eors	r0, r4
 80323ae:	f3c2 7440 	ubfx	r4, r2, #29, #1
 80323b2:	fbc0 5c07 	smlal	r5, ip, r0, r7
 80323b6:	3c01      	subs	r4, #1
 80323b8:	0fed      	lsrs	r5, r5, #31
 80323ba:	4004      	ands	r4, r0
 80323bc:	f342 7040 	sbfx	r0, r2, #29, #1
 80323c0:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 80323c4:	4028      	ands	r0, r5
 80323c6:	4645      	mov	r5, r8
 80323c8:	4060      	eors	r0, r4
 80323ca:	24f2      	movs	r4, #242	@ 0xf2
 80323cc:	fbc0 5104 	smlal	r5, r1, r0, r4
 80323d0:	0fed      	lsrs	r5, r5, #31
 80323d2:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 80323d6:	f3c2 7180 	ubfx	r1, r2, #30, #1
 80323da:	f342 7280 	sbfx	r2, r2, #30, #1
 80323de:	3901      	subs	r1, #1
 80323e0:	402a      	ands	r2, r5
 80323e2:	4001      	ands	r1, r0
 80323e4:	404a      	eors	r2, r1
 80323e6:	1e59      	subs	r1, r3, #1
 80323e8:	425b      	negs	r3, r3
 80323ea:	400a      	ands	r2, r1
 80323ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80323f0:	4053      	eors	r3, r2
 80323f2:	9a01      	ldr	r2, [sp, #4]
 80323f4:	f842 3f04 	str.w	r3, [r2, #4]!
 80323f8:	9b02      	ldr	r3, [sp, #8]
 80323fa:	9201      	str	r2, [sp, #4]
 80323fc:	455b      	cmp	r3, fp
 80323fe:	f63f aec4 	bhi.w	803218a <_lite_kernel_nl_softmax_is8os8+0x46>
 8032402:	4699      	mov	r9, r3
 8032404:	9f03      	ldr	r7, [sp, #12]
 8032406:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 803240a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803240c:	2b00      	cmp	r3, #0
 803240e:	f000 823b 	beq.w	8032888 <_lite_kernel_nl_softmax_is8os8+0x744>
 8032412:	fb0a f307 	mul.w	r3, sl, r7
 8032416:	930d      	str	r3, [sp, #52]	@ 0x34
 8032418:	2f00      	cmp	r7, #0
 803241a:	f000 8235 	beq.w	8032888 <_lite_kernel_nl_softmax_is8os8+0x744>
 803241e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032420:	46c8      	mov	r8, r9
 8032422:	46be      	mov	lr, r7
 8032424:	443b      	add	r3, r7
 8032426:	9308      	str	r3, [sp, #32]
 8032428:	2300      	movs	r3, #0
 803242a:	930b      	str	r3, [sp, #44]	@ 0x2c
 803242c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803242e:	4651      	mov	r1, sl
 8032430:	46c2      	mov	sl, r8
 8032432:	9303      	str	r3, [sp, #12]
 8032434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032436:	9302      	str	r3, [sp, #8]
 8032438:	9b02      	ldr	r3, [sp, #8]
 803243a:	2901      	cmp	r1, #1
 803243c:	f993 2000 	ldrsb.w	r2, [r3]
 8032440:	f240 8254 	bls.w	80328ec <_lite_kernel_nl_softmax_is8os8+0x7a8>
 8032444:	eb03 000e 	add.w	r0, r3, lr
 8032448:	2301      	movs	r3, #1
 803244a:	f990 4000 	ldrsb.w	r4, [r0]
 803244e:	3301      	adds	r3, #1
 8032450:	4470      	add	r0, lr
 8032452:	42a2      	cmp	r2, r4
 8032454:	bfb8      	it	lt
 8032456:	4622      	movlt	r2, r4
 8032458:	4299      	cmp	r1, r3
 803245a:	d1f6      	bne.n	803244a <_lite_kernel_nl_softmax_is8os8+0x306>
 803245c:	2500      	movs	r5, #0
 803245e:	9802      	ldr	r0, [sp, #8]
 8032460:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 8032464:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8032466:	462b      	mov	r3, r5
 8032468:	f990 4000 	ldrsb.w	r4, [r0]
 803246c:	3301      	adds	r3, #1
 803246e:	4470      	add	r0, lr
 8032470:	1b14      	subs	r4, r2, r4
 8032472:	4554      	cmp	r4, sl
 8032474:	da0c      	bge.n	8032490 <_lite_kernel_nl_softmax_is8os8+0x34c>
 8032476:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 803247a:	1326      	asrs	r6, r4, #12
 803247c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8032480:	bf54      	ite	pl
 8032482:	46e0      	movpl	r8, ip
 8032484:	f44f 6800 	movmi.w	r8, #2048	@ 0x800
 8032488:	4544      	cmp	r4, r8
 803248a:	bfc8      	it	gt
 803248c:	3601      	addgt	r6, #1
 803248e:	4435      	add	r5, r6
 8032490:	4299      	cmp	r1, r3
 8032492:	d8e9      	bhi.n	8032468 <_lite_kernel_nl_softmax_is8os8+0x324>
 8032494:	2d00      	cmp	r5, #0
 8032496:	f000 822c 	beq.w	80328f2 <_lite_kernel_nl_softmax_is8os8+0x7ae>
 803249a:	fab5 f385 	clz	r3, r5
 803249e:	409d      	lsls	r5, r3
 80324a0:	9306      	str	r3, [sp, #24]
 80324a2:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 80324a6:	9301      	str	r3, [sp, #4]
 80324a8:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80324ac:	17de      	asrs	r6, r3, #31
 80324ae:	f1b6 3fff 	cmp.w	r6, #4294967295
 80324b2:	bf08      	it	eq
 80324b4:	2d00      	cmpeq	r5, #0
 80324b6:	f000 8220 	beq.w	80328fa <_lite_kernel_nl_softmax_is8os8+0x7b6>
 80324ba:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 80324be:	484c      	ldr	r0, [pc, #304]	@ (80325f0 <_lite_kernel_nl_softmax_is8os8+0x4ac>)
 80324c0:	f146 0600 	adc.w	r6, r6, #0
 80324c4:	085b      	lsrs	r3, r3, #1
 80324c6:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 80324ca:	1076      	asrs	r6, r6, #1
 80324cc:	425d      	negs	r5, r3
 80324ce:	469b      	mov	fp, r3
 80324d0:	fb00 5506 	mla	r5, r0, r6, r5
 80324d4:	fba3 0400 	umull	r0, r4, r3, r0
 80324d8:	442c      	add	r4, r5
 80324da:	4d46      	ldr	r5, [pc, #280]	@ (80325f4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 80324dc:	1940      	adds	r0, r0, r5
 80324de:	f164 0400 	sbc.w	r4, r4, #0
 80324e2:	2c00      	cmp	r4, #0
 80324e4:	da05      	bge.n	80324f2 <_lite_kernel_nl_softmax_is8os8+0x3ae>
 80324e6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80324ea:	1945      	adds	r5, r0, r5
 80324ec:	4628      	mov	r0, r5
 80324ee:	f144 0400 	adc.w	r4, r4, #0
 80324f2:	0fc0      	lsrs	r0, r0, #31
 80324f4:	ea40 0544 	orr.w	r5, r0, r4, lsl #1
 80324f8:	f105 3c5a 	add.w	ip, r5, #1515870810	@ 0x5a5a5a5a
 80324fc:	ea4f 70ec 	mov.w	r0, ip, asr #31
 8032500:	4667      	mov	r7, ip
 8032502:	fb03 f900 	mul.w	r9, r3, r0
 8032506:	9004      	str	r0, [sp, #16]
 8032508:	fba3 080c 	umull	r0, r8, r3, ip
 803250c:	fb0c 9906 	mla	r9, ip, r6, r9
 8032510:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8032514:	eb49 0808 	adc.w	r8, r9, r8
 8032518:	f1b8 0f00 	cmp.w	r8, #0
 803251c:	da06      	bge.n	803252c <_lite_kernel_nl_softmax_is8os8+0x3e8>
 803251e:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8032522:	eb10 0909 	adds.w	r9, r0, r9
 8032526:	4648      	mov	r0, r9
 8032528:	f148 0800 	adc.w	r8, r8, #0
 803252c:	0fc0      	lsrs	r0, r0, #31
 803252e:	4c31      	ldr	r4, [pc, #196]	@ (80325f4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 8032530:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
 8032534:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 8032538:	ea80 080c 	eor.w	r8, r0, ip
 803253c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8032540:	f1b8 0f00 	cmp.w	r8, #0
 8032544:	bf15      	itete	ne
 8032546:	46a0      	movne	r8, r4
 8032548:	2400      	moveq	r4, #0
 803254a:	f04f 34ff 	movne.w	r4, #4294967295
 803254e:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 8032552:	9405      	str	r4, [sp, #20]
 8032554:	9c04      	ldr	r4, [sp, #16]
 8032556:	ea4f 79e0 	mov.w	r9, r0, asr #31
 803255a:	fb00 f404 	mul.w	r4, r0, r4
 803255e:	fb07 4409 	mla	r4, r7, r9, r4
 8032562:	fba0 0707 	umull	r0, r7, r0, r7
 8032566:	eb10 0008 	adds.w	r0, r0, r8
 803256a:	443c      	add	r4, r7
 803256c:	9f05      	ldr	r7, [sp, #20]
 803256e:	eb44 0707 	adc.w	r7, r4, r7
 8032572:	2f00      	cmp	r7, #0
 8032574:	da05      	bge.n	8032582 <_lite_kernel_nl_softmax_is8os8+0x43e>
 8032576:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 803257a:	1904      	adds	r4, r0, r4
 803257c:	4620      	mov	r0, r4
 803257e:	f147 0700 	adc.w	r7, r7, #0
 8032582:	0fc0      	lsrs	r0, r0, #31
 8032584:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032588:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 803258c:	f340 809d 	ble.w	80326ca <_lite_kernel_nl_softmax_is8os8+0x586>
 8032590:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
 8032594:	ea8b 0004 	eor.w	r0, fp, r4
 8032598:	17e5      	asrs	r5, r4, #31
 803259a:	0fc0      	lsrs	r0, r0, #31
 803259c:	fb03 f705 	mul.w	r7, r3, r5
 80325a0:	2800      	cmp	r0, #0
 80325a2:	4814      	ldr	r0, [pc, #80]	@ (80325f4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 80325a4:	fb04 7706 	mla	r7, r4, r6, r7
 80325a8:	bf14      	ite	ne
 80325aa:	4684      	movne	ip, r0
 80325ac:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 80325b0:	fba3 0904 	umull	r0, r9, r3, r4
 80325b4:	bf0c      	ite	eq
 80325b6:	f04f 0800 	moveq.w	r8, #0
 80325ba:	f04f 38ff 	movne.w	r8, #4294967295
 80325be:	444f      	add	r7, r9
 80325c0:	eb10 000c 	adds.w	r0, r0, ip
 80325c4:	eb47 0708 	adc.w	r7, r7, r8
 80325c8:	2f00      	cmp	r7, #0
 80325ca:	da1c      	bge.n	8032606 <_lite_kernel_nl_softmax_is8os8+0x4c2>
 80325cc:	e014      	b.n	80325f8 <_lite_kernel_nl_softmax_is8os8+0x4b4>
 80325ce:	bf00      	nop
 80325d0:	2aaaaaab 	.word	0x2aaaaaab
 80325d4:	70f5a894 	.word	0x70f5a894
 80325d8:	63afbe7b 	.word	0x63afbe7b
 80325dc:	4da2cbf2 	.word	0x4da2cbf2
 80325e0:	2f16ac6c 	.word	0x2f16ac6c
 80325e4:	1152aaa4 	.word	0x1152aaa4
 80325e8:	02582ab7 	.word	0x02582ab7
 80325ec:	000afe11 	.word	0x000afe11
 80325f0:	c3c3c3c4 	.word	0xc3c3c3c4
 80325f4:	c0000001 	.word	0xc0000001
 80325f8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80325fc:	eb10 0c0c 	adds.w	ip, r0, ip
 8032600:	4660      	mov	r0, ip
 8032602:	f147 0700 	adc.w	r7, r7, #0
 8032606:	0fc0      	lsrs	r0, r0, #31
 8032608:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 803260c:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 8032610:	ea84 0700 	eor.w	r7, r4, r0
 8032614:	0fff      	lsrs	r7, r7, #31
 8032616:	2f00      	cmp	r7, #0
 8032618:	4fbf      	ldr	r7, [pc, #764]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 803261a:	bf06      	itte	eq
 803261c:	f04f 0c00 	moveq.w	ip, #0
 8032620:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8032624:	f04f 3cff 	movne.w	ip, #4294967295
 8032628:	fb00 f505 	mul.w	r5, r0, r5
 803262c:	ea4f 78e0 	mov.w	r8, r0, asr #31
 8032630:	fb04 5508 	mla	r5, r4, r8, r5
 8032634:	fba0 0804 	umull	r0, r8, r0, r4
 8032638:	19c0      	adds	r0, r0, r7
 803263a:	4445      	add	r5, r8
 803263c:	eb45 050c 	adc.w	r5, r5, ip
 8032640:	2d00      	cmp	r5, #0
 8032642:	da05      	bge.n	8032650 <_lite_kernel_nl_softmax_is8os8+0x50c>
 8032644:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8032648:	19c7      	adds	r7, r0, r7
 803264a:	4638      	mov	r0, r7
 803264c:	f145 0500 	adc.w	r5, r5, #0
 8032650:	0fc0      	lsrs	r0, r0, #31
 8032652:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8032656:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 803265a:	db65      	blt.n	8032728 <_lite_kernel_nl_softmax_is8os8+0x5e4>
 803265c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032660:	1960      	adds	r0, r4, r5
 8032662:	ea9b 0f00 	teq	fp, r0
 8032666:	f140 813d 	bpl.w	80328e4 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 803266a:	4dab      	ldr	r5, [pc, #684]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 803266c:	f04f 37ff 	mov.w	r7, #4294967295
 8032670:	17c4      	asrs	r4, r0, #31
 8032672:	fb03 fc04 	mul.w	ip, r3, r4
 8032676:	fb00 c606 	mla	r6, r0, r6, ip
 803267a:	fba3 3c00 	umull	r3, ip, r3, r0
 803267e:	195b      	adds	r3, r3, r5
 8032680:	4466      	add	r6, ip
 8032682:	eb46 0607 	adc.w	r6, r6, r7
 8032686:	2e00      	cmp	r6, #0
 8032688:	da05      	bge.n	8032696 <_lite_kernel_nl_softmax_is8os8+0x552>
 803268a:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 803268e:	195d      	adds	r5, r3, r5
 8032690:	462b      	mov	r3, r5
 8032692:	f146 0600 	adc.w	r6, r6, #0
 8032696:	0fdb      	lsrs	r3, r3, #31
 8032698:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 803269c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 80326a0:	ea80 0503 	eor.w	r5, r0, r3
 80326a4:	0fed      	lsrs	r5, r5, #31
 80326a6:	2d00      	cmp	r5, #0
 80326a8:	4d9b      	ldr	r5, [pc, #620]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 80326aa:	bf06      	itte	eq
 80326ac:	2600      	moveq	r6, #0
 80326ae:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 80326b2:	f04f 36ff 	movne.w	r6, #4294967295
 80326b6:	4298      	cmp	r0, r3
 80326b8:	d15d      	bne.n	8032776 <_lite_kernel_nl_softmax_is8os8+0x632>
 80326ba:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80326be:	d15a      	bne.n	8032776 <_lite_kernel_nl_softmax_is8os8+0x632>
 80326c0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80326c4:	4406      	add	r6, r0
 80326c6:	0076      	lsls	r6, r6, #1
 80326c8:	e075      	b.n	80327b6 <_lite_kernel_nl_softmax_is8os8+0x672>
 80326ca:	4c94      	ldr	r4, [pc, #592]	@ (803291c <_lite_kernel_nl_softmax_is8os8+0x7d8>)
 80326cc:	192c      	adds	r4, r5, r4
 80326ce:	ea9b 0f04 	teq	fp, r4
 80326d2:	f140 8127 	bpl.w	8032924 <_lite_kernel_nl_softmax_is8os8+0x7e0>
 80326d6:	17e0      	asrs	r0, r4, #31
 80326d8:	fb04 f506 	mul.w	r5, r4, r6
 80326dc:	fb03 5500 	mla	r5, r3, r0, r5
 80326e0:	fba4 0703 	umull	r0, r7, r4, r3
 80326e4:	442f      	add	r7, r5
 80326e6:	4d8c      	ldr	r5, [pc, #560]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 80326e8:	1940      	adds	r0, r0, r5
 80326ea:	f167 0700 	sbc.w	r7, r7, #0
 80326ee:	2f00      	cmp	r7, #0
 80326f0:	da05      	bge.n	80326fe <_lite_kernel_nl_softmax_is8os8+0x5ba>
 80326f2:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80326f6:	1945      	adds	r5, r0, r5
 80326f8:	4628      	mov	r0, r5
 80326fa:	f147 0700 	adc.w	r7, r7, #0
 80326fe:	0fc0      	lsrs	r0, r0, #31
 8032700:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032704:	f04f 37ff 	mov.w	r7, #4294967295
 8032708:	f1c0 5500 	rsb	r5, r0, #536870912	@ 0x20000000
 803270c:	4882      	ldr	r0, [pc, #520]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 803270e:	fbc5 0704 	smlal	r0, r7, r5, r4
 8032712:	2f00      	cmp	r7, #0
 8032714:	da05      	bge.n	8032722 <_lite_kernel_nl_softmax_is8os8+0x5de>
 8032716:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 803271a:	1945      	adds	r5, r0, r5
 803271c:	4628      	mov	r0, r5
 803271e:	f147 0700 	adc.w	r7, r7, #0
 8032722:	0fc0      	lsrs	r0, r0, #31
 8032724:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032728:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 803272c:	ea4f 0580 	mov.w	r5, r0, lsl #2
 8032730:	dc96      	bgt.n	8032660 <_lite_kernel_nl_softmax_is8os8+0x51c>
 8032732:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 8032736:	ea90 0f0b 	teq	r0, fp
 803273a:	f140 80d3 	bpl.w	80328e4 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 803273e:	fb00 f606 	mul.w	r6, r0, r6
 8032742:	17c4      	asrs	r4, r0, #31
 8032744:	fb03 6604 	mla	r6, r3, r4, r6
 8032748:	fba0 3503 	umull	r3, r5, r0, r3
 803274c:	4435      	add	r5, r6
 803274e:	4e72      	ldr	r6, [pc, #456]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8032750:	199b      	adds	r3, r3, r6
 8032752:	f165 0500 	sbc.w	r5, r5, #0
 8032756:	2d00      	cmp	r5, #0
 8032758:	da05      	bge.n	8032766 <_lite_kernel_nl_softmax_is8os8+0x622>
 803275a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 803275e:	199e      	adds	r6, r3, r6
 8032760:	4633      	mov	r3, r6
 8032762:	f145 0500 	adc.w	r5, r5, #0
 8032766:	0fdb      	lsrs	r3, r3, #31
 8032768:	f04f 36ff 	mov.w	r6, #4294967295
 803276c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8032770:	4d69      	ldr	r5, [pc, #420]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8032772:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8032776:	fb03 f404 	mul.w	r4, r3, r4
 803277a:	17df      	asrs	r7, r3, #31
 803277c:	fb00 4407 	mla	r4, r0, r7, r4
 8032780:	fba3 3700 	umull	r3, r7, r3, r0
 8032784:	195b      	adds	r3, r3, r5
 8032786:	443c      	add	r4, r7
 8032788:	eb44 0406 	adc.w	r4, r4, r6
 803278c:	2c00      	cmp	r4, #0
 803278e:	da04      	bge.n	803279a <_lite_kernel_nl_softmax_is8os8+0x656>
 8032790:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8032794:	195b      	adds	r3, r3, r5
 8032796:	f144 0400 	adc.w	r4, r4, #0
 803279a:	0fdb      	lsrs	r3, r3, #31
 803279c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80327a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80327a4:	f2c0 8092 	blt.w	80328cc <_lite_kernel_nl_softmax_is8os8+0x788>
 80327a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80327ac:	18c6      	adds	r6, r0, r3
 80327ae:	f1b6 4f80 	cmp.w	r6, #1073741824	@ 0x40000000
 80327b2:	db88      	blt.n	80326c6 <_lite_kernel_nl_softmax_is8os8+0x582>
 80327b4:	461e      	mov	r6, r3
 80327b6:	9b01      	ldr	r3, [sp, #4]
 80327b8:	2b1f      	cmp	r3, #31
 80327ba:	dd05      	ble.n	80327c8 <_lite_kernel_nl_softmax_is8os8+0x684>
 80327bc:	9b06      	ldr	r3, [sp, #24]
 80327be:	f1c3 0304 	rsb	r3, r3, #4
 80327c2:	411e      	asrs	r6, r3
 80327c4:	231f      	movs	r3, #31
 80327c6:	9301      	str	r3, [sp, #4]
 80327c8:	2900      	cmp	r1, #0
 80327ca:	d040      	beq.n	803284e <_lite_kernel_nl_softmax_is8os8+0x70a>
 80327cc:	9801      	ldr	r0, [sp, #4]
 80327ce:	f04f 0c01 	mov.w	ip, #1
 80327d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80327d6:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80327da:	fa0c fc00 	lsl.w	ip, ip, r0
 80327de:	fa43 f000 	asr.w	r0, r3, r0
 80327e2:	9307      	str	r3, [sp, #28]
 80327e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80327e8:	9005      	str	r0, [sp, #20]
 80327ea:	2000      	movs	r0, #0
 80327ec:	ea4f 096c 	mov.w	r9, ip, asr #1
 80327f0:	ea0c 0703 	and.w	r7, ip, r3
 80327f4:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80327f8:	f109 0301 	add.w	r3, r9, #1
 80327fc:	9706      	str	r7, [sp, #24]
 80327fe:	9304      	str	r3, [sp, #16]
 8032800:	f995 3000 	ldrsb.w	r3, [r5]
 8032804:	1ad3      	subs	r3, r2, r3
 8032806:	4553      	cmp	r3, sl
 8032808:	da41      	bge.n	803288e <_lite_kernel_nl_softmax_is8os8+0x74a>
 803280a:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 803280c:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8032810:	ea87 0306 	eor.w	r3, r7, r6
 8032814:	0fdb      	lsrs	r3, r3, #31
 8032816:	2b00      	cmp	r3, #0
 8032818:	4b3f      	ldr	r3, [pc, #252]	@ (8032918 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 803281a:	bf06      	itte	eq
 803281c:	f04f 0b00 	moveq.w	fp, #0
 8032820:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8032824:	f04f 3bff 	movne.w	fp, #4294967295
 8032828:	42b7      	cmp	r7, r6
 803282a:	d133      	bne.n	8032894 <_lite_kernel_nl_softmax_is8os8+0x750>
 803282c:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 8032830:	d130      	bne.n	8032894 <_lite_kernel_nl_softmax_is8os8+0x750>
 8032832:	e9dd 3b05 	ldrd	r3, fp, [sp, #20]
 8032836:	45d9      	cmp	r9, fp
 8032838:	da00      	bge.n	803283c <_lite_kernel_nl_softmax_is8os8+0x6f8>
 803283a:	3301      	adds	r3, #1
 803283c:	2bfe      	cmp	r3, #254	@ 0xfe
 803283e:	dd40      	ble.n	80328c2 <_lite_kernel_nl_softmax_is8os8+0x77e>
 8032840:	237f      	movs	r3, #127	@ 0x7f
 8032842:	7023      	strb	r3, [r4, #0]
 8032844:	3001      	adds	r0, #1
 8032846:	4475      	add	r5, lr
 8032848:	4474      	add	r4, lr
 803284a:	4281      	cmp	r1, r0
 803284c:	d1d8      	bne.n	8032800 <_lite_kernel_nl_softmax_is8os8+0x6bc>
 803284e:	9a03      	ldr	r2, [sp, #12]
 8032850:	9b02      	ldr	r3, [sp, #8]
 8032852:	3201      	adds	r2, #1
 8032854:	3301      	adds	r3, #1
 8032856:	9203      	str	r2, [sp, #12]
 8032858:	9a08      	ldr	r2, [sp, #32]
 803285a:	9302      	str	r3, [sp, #8]
 803285c:	4293      	cmp	r3, r2
 803285e:	f47f adeb 	bne.w	8032438 <_lite_kernel_nl_softmax_is8os8+0x2f4>
 8032862:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032864:	46d0      	mov	r8, sl
 8032866:	468a      	mov	sl, r1
 8032868:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803286a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803286c:	4411      	add	r1, r2
 803286e:	3301      	adds	r3, #1
 8032870:	9109      	str	r1, [sp, #36]	@ 0x24
 8032872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8032874:	930b      	str	r3, [sp, #44]	@ 0x2c
 8032876:	4411      	add	r1, r2
 8032878:	910a      	str	r1, [sp, #40]	@ 0x28
 803287a:	9908      	ldr	r1, [sp, #32]
 803287c:	4411      	add	r1, r2
 803287e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8032880:	429a      	cmp	r2, r3
 8032882:	9108      	str	r1, [sp, #32]
 8032884:	f47f add2 	bne.w	803242c <_lite_kernel_nl_softmax_is8os8+0x2e8>
 8032888:	b00f      	add	sp, #60	@ 0x3c
 803288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803288e:	f884 8000 	strb.w	r8, [r4]
 8032892:	e7d7      	b.n	8032844 <_lite_kernel_nl_softmax_is8os8+0x700>
 8032894:	fbc6 3b07 	smlal	r3, fp, r6, r7
 8032898:	f1bb 0f00 	cmp.w	fp, #0
 803289c:	da03      	bge.n	80328a6 <_lite_kernel_nl_softmax_is8os8+0x762>
 803289e:	9f07      	ldr	r7, [sp, #28]
 80328a0:	19db      	adds	r3, r3, r7
 80328a2:	f14b 0b00 	adc.w	fp, fp, #0
 80328a6:	0fdb      	lsrs	r3, r3, #31
 80328a8:	9f01      	ldr	r7, [sp, #4]
 80328aa:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 80328ae:	ea03 0b0c 	and.w	fp, r3, ip
 80328b2:	413b      	asrs	r3, r7
 80328b4:	d5bf      	bpl.n	8032836 <_lite_kernel_nl_softmax_is8os8+0x6f2>
 80328b6:	9f04      	ldr	r7, [sp, #16]
 80328b8:	45bb      	cmp	fp, r7
 80328ba:	dcbe      	bgt.n	803283a <_lite_kernel_nl_softmax_is8os8+0x6f6>
 80328bc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80328c0:	e7bf      	b.n	8032842 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 80328c2:	2b00      	cmp	r3, #0
 80328c4:	ddfa      	ble.n	80328bc <_lite_kernel_nl_softmax_is8os8+0x778>
 80328c6:	3b80      	subs	r3, #128	@ 0x80
 80328c8:	b25b      	sxtb	r3, r3
 80328ca:	e7ba      	b.n	8032842 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 80328cc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80328d0:	dc45      	bgt.n	803295e <_lite_kernel_nl_softmax_is8os8+0x81a>
 80328d2:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 80328d6:	0046      	lsls	r6, r0, #1
 80328d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80328dc:	bfd8      	it	le
 80328de:	f04f 4600 	movle.w	r6, #2147483648	@ 0x80000000
 80328e2:	e768      	b.n	80327b6 <_lite_kernel_nl_softmax_is8os8+0x672>
 80328e4:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 80328e8:	2700      	movs	r7, #0
 80328ea:	e6c1      	b.n	8032670 <_lite_kernel_nl_softmax_is8os8+0x52c>
 80328ec:	2900      	cmp	r1, #0
 80328ee:	f47f adb5 	bne.w	803245c <_lite_kernel_nl_softmax_is8os8+0x318>
 80328f2:	2303      	movs	r3, #3
 80328f4:	9301      	str	r3, [sp, #4]
 80328f6:	2320      	movs	r3, #32
 80328f8:	9306      	str	r3, [sp, #24]
 80328fa:	f04f 3bff 	mov.w	fp, #4294967295
 80328fe:	2500      	movs	r5, #0
 8032900:	f04f 375a 	mov.w	r7, #1515870810	@ 0x5a5a5a5a
 8032904:	4806      	ldr	r0, [pc, #24]	@ (8032920 <_lite_kernel_nl_softmax_is8os8+0x7dc>)
 8032906:	465b      	mov	r3, fp
 8032908:	465e      	mov	r6, fp
 803290a:	46bc      	mov	ip, r7
 803290c:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 8032910:	9504      	str	r5, [sp, #16]
 8032912:	9505      	str	r5, [sp, #20]
 8032914:	e61e      	b.n	8032554 <_lite_kernel_nl_softmax_is8os8+0x410>
 8032916:	bf00      	nop
 8032918:	c0000001 	.word	0xc0000001
 803291c:	da5a5a5a 	.word	0xda5a5a5a
 8032920:	20000001 	.word	0x20000001
 8032924:	fba4 0703 	umull	r0, r7, r4, r3
 8032928:	17e5      	asrs	r5, r4, #31
 803292a:	fb04 fc06 	mul.w	ip, r4, r6
 803292e:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8032932:	fb03 cc05 	mla	ip, r3, r5, ip
 8032936:	eb4c 0707 	adc.w	r7, ip, r7
 803293a:	2f00      	cmp	r7, #0
 803293c:	da06      	bge.n	803294c <_lite_kernel_nl_softmax_is8os8+0x808>
 803293e:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8032942:	eb10 0c0c 	adds.w	ip, r0, ip
 8032946:	4660      	mov	r0, ip
 8032948:	f147 0700 	adc.w	r7, r7, #0
 803294c:	0fc0      	lsrs	r0, r0, #31
 803294e:	f04f 3cff 	mov.w	ip, #4294967295
 8032952:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8032956:	4fcb      	ldr	r7, [pc, #812]	@ (8032c84 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8032958:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 803295c:	e664      	b.n	8032628 <_lite_kernel_nl_softmax_is8os8+0x4e4>
 803295e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8032962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032966:	f2c0 818b 	blt.w	8032c80 <_lite_kernel_nl_softmax_is8os8+0xb3c>
 803296a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 803296e:	e722      	b.n	80327b6 <_lite_kernel_nl_softmax_is8os8+0x672>
 8032970:	f1c3 0900 	rsb	r9, r3, #0
 8032974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8032976:	fb07 f303 	mul.w	r3, r7, r3
 803297a:	2b01      	cmp	r3, #1
 803297c:	d904      	bls.n	8032988 <_lite_kernel_nl_softmax_is8os8+0x844>
 803297e:	f1b9 0f00 	cmp.w	r9, #0
 8032982:	f47f abf5 	bne.w	8032170 <_lite_kernel_nl_softmax_is8os8+0x2c>
 8032986:	e540      	b.n	803240a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 8032988:	fb03 f10a 	mul.w	r1, r3, sl
 803298c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803298e:	2901      	cmp	r1, #1
 8032990:	f993 2000 	ldrsb.w	r2, [r3]
 8032994:	9102      	str	r1, [sp, #8]
 8032996:	9203      	str	r2, [sp, #12]
 8032998:	f240 816c 	bls.w	8032c74 <_lite_kernel_nl_softmax_is8os8+0xb30>
 803299c:	1e58      	subs	r0, r3, #1
 803299e:	1841      	adds	r1, r0, r1
 80329a0:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 80329a4:	42a2      	cmp	r2, r4
 80329a6:	bfb8      	it	lt
 80329a8:	4622      	movlt	r2, r4
 80329aa:	428b      	cmp	r3, r1
 80329ac:	d1f8      	bne.n	80329a0 <_lite_kernel_nl_softmax_is8os8+0x85c>
 80329ae:	9203      	str	r2, [sp, #12]
 80329b0:	4605      	mov	r5, r0
 80329b2:	9704      	str	r7, [sp, #16]
 80329b4:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 80329b8:	9b03      	ldr	r3, [sp, #12]
 80329ba:	9501      	str	r5, [sp, #4]
 80329bc:	f915 cf01 	ldrsb.w	ip, [r5, #1]!
 80329c0:	eba3 0c0c 	sub.w	ip, r3, ip
 80329c4:	45cc      	cmp	ip, r9
 80329c6:	f080 8148 	bcs.w	8032c5a <_lite_kernel_nl_softmax_is8os8+0xb16>
 80329ca:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80329cc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80329ce:	fa0c f203 	lsl.w	r2, ip, r3
 80329d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80329d4:	4252      	negs	r2, r2
 80329d6:	4053      	eors	r3, r2
 80329d8:	0fdb      	lsrs	r3, r3, #31
 80329da:	2b00      	cmp	r3, #0
 80329dc:	4ba9      	ldr	r3, [pc, #676]	@ (8032c84 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 80329de:	bf06      	itte	eq
 80329e0:	2100      	moveq	r1, #0
 80329e2:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80329e6:	f04f 31ff 	movne.w	r1, #4294967295
 80329ea:	fbc2 3100 	smlal	r3, r1, r2, r0
 80329ee:	2900      	cmp	r1, #0
 80329f0:	da05      	bge.n	80329fe <_lite_kernel_nl_softmax_is8os8+0x8ba>
 80329f2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80329f6:	189a      	adds	r2, r3, r2
 80329f8:	4613      	mov	r3, r2
 80329fa:	f141 0100 	adc.w	r1, r1, #0
 80329fe:	0fdb      	lsrs	r3, r3, #31
 8032a00:	2400      	movs	r4, #0
 8032a02:	ea43 0241 	orr.w	r2, r3, r1, lsl #1
 8032a06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8032a0a:	f042 417f 	orr.w	r1, r2, #4278190080	@ 0xff000000
 8032a0e:	014f      	lsls	r7, r1, #5
 8032a10:	1a89      	subs	r1, r1, r2
 8032a12:	f107 5780 	add.w	r7, r7, #268435456	@ 0x10000000
 8032a16:	fbc7 3407 	smlal	r3, r4, r7, r7
 8032a1a:	2c00      	cmp	r4, #0
 8032a1c:	ea4f 78e7 	mov.w	r8, r7, asr #31
 8032a20:	da05      	bge.n	8032a2e <_lite_kernel_nl_softmax_is8os8+0x8ea>
 8032a22:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032a26:	1818      	adds	r0, r3, r0
 8032a28:	4603      	mov	r3, r0
 8032a2a:	f144 0400 	adc.w	r4, r4, #0
 8032a2e:	0fdb      	lsrs	r3, r3, #31
 8032a30:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8032a34:	17e4      	asrs	r4, r4, #31
 8032a36:	fba3 0e03 	umull	r0, lr, r3, r3
 8032a3a:	fb03 fa04 	mul.w	sl, r3, r4
 8032a3e:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 8032a42:	eb4e 0e4a 	adc.w	lr, lr, sl, lsl #1
 8032a46:	f1be 0f00 	cmp.w	lr, #0
 8032a4a:	da06      	bge.n	8032a5a <_lite_kernel_nl_softmax_is8os8+0x916>
 8032a4c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8032a50:	eb10 0a0a 	adds.w	sl, r0, sl
 8032a54:	4650      	mov	r0, sl
 8032a56:	f14e 0e00 	adc.w	lr, lr, #0
 8032a5a:	0fc0      	lsrs	r0, r0, #31
 8032a5c:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 8032a60:	ea5f 0ea0 	movs.w	lr, r0, asr #2
 8032a64:	f000 0003 	and.w	r0, r0, #3
 8032a68:	bf54      	ite	pl
 8032a6a:	f04f 0a01 	movpl.w	sl, #1
 8032a6e:	f04f 0a02 	movmi.w	sl, #2
 8032a72:	4550      	cmp	r0, sl
 8032a74:	fb07 f004 	mul.w	r0, r7, r4
 8032a78:	ea87 0403 	eor.w	r4, r7, r3
 8032a7c:	bfc8      	it	gt
 8032a7e:	f10e 0e01 	addgt.w	lr, lr, #1
 8032a82:	fb03 0008 	mla	r0, r3, r8, r0
 8032a86:	0fe4      	lsrs	r4, r4, #31
 8032a88:	2c00      	cmp	r4, #0
 8032a8a:	4c7e      	ldr	r4, [pc, #504]	@ (8032c84 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8032a8c:	bf0c      	ite	eq
 8032a8e:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 8032a92:	46a0      	movne	r8, r4
 8032a94:	fba7 4b03 	umull	r4, fp, r7, r3
 8032a98:	bf0c      	ite	eq
 8032a9a:	f04f 0a00 	moveq.w	sl, #0
 8032a9e:	f04f 3aff 	movne.w	sl, #4294967295
 8032aa2:	4458      	add	r0, fp
 8032aa4:	eb14 0408 	adds.w	r4, r4, r8
 8032aa8:	eb40 000a 	adc.w	r0, r0, sl
 8032aac:	2800      	cmp	r0, #0
 8032aae:	da06      	bge.n	8032abe <_lite_kernel_nl_softmax_is8os8+0x97a>
 8032ab0:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 8032ab4:	eb14 0808 	adds.w	r8, r4, r8
 8032ab8:	4644      	mov	r4, r8
 8032aba:	f140 0000 	adc.w	r0, r0, #0
 8032abe:	0fe4      	lsrs	r4, r4, #31
 8032ac0:	4e71      	ldr	r6, [pc, #452]	@ (8032c88 <_lite_kernel_nl_softmax_is8os8+0xb44>)
 8032ac2:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 8032ac6:	eb0e 0004 	add.w	r0, lr, r4
 8032aca:	0fc4      	lsrs	r4, r0, #31
 8032acc:	2c00      	cmp	r4, #0
 8032ace:	4c6d      	ldr	r4, [pc, #436]	@ (8032c84 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8032ad0:	bf06      	itte	eq
 8032ad2:	f04f 0e00 	moveq.w	lr, #0
 8032ad6:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 8032ada:	f04f 3eff 	movne.w	lr, #4294967295
 8032ade:	fbc0 4e06 	smlal	r4, lr, r0, r6
 8032ae2:	f1be 0f00 	cmp.w	lr, #0
 8032ae6:	da05      	bge.n	8032af4 <_lite_kernel_nl_softmax_is8os8+0x9b0>
 8032ae8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8032aec:	1820      	adds	r0, r4, r0
 8032aee:	4604      	mov	r4, r0
 8032af0:	f14e 0e00 	adc.w	lr, lr, #0
 8032af4:	0fe4      	lsrs	r4, r4, #31
 8032af6:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 8032afa:	4423      	add	r3, r4
 8032afc:	07de      	lsls	r6, r3, #31
 8032afe:	ea4f 0463 	mov.w	r4, r3, asr #1
 8032b02:	d502      	bpl.n	8032b0a <_lite_kernel_nl_softmax_is8os8+0x9c6>
 8032b04:	2c00      	cmp	r4, #0
 8032b06:	bfa8      	it	ge
 8032b08:	3401      	addge	r4, #1
 8032b0a:	443c      	add	r4, r7
 8032b0c:	4e5f      	ldr	r6, [pc, #380]	@ (8032c8c <_lite_kernel_nl_softmax_is8os8+0xb48>)
 8032b0e:	0fe3      	lsrs	r3, r4, #31
 8032b10:	2b00      	cmp	r3, #0
 8032b12:	4b5c      	ldr	r3, [pc, #368]	@ (8032c84 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8032b14:	bf0b      	itete	eq
 8032b16:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8032b1a:	4618      	movne	r0, r3
 8032b1c:	2300      	moveq	r3, #0
 8032b1e:	f04f 33ff 	movne.w	r3, #4294967295
 8032b22:	fbc4 0306 	smlal	r0, r3, r4, r6
 8032b26:	2b00      	cmp	r3, #0
 8032b28:	da05      	bge.n	8032b36 <_lite_kernel_nl_softmax_is8os8+0x9f2>
 8032b2a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8032b2e:	1904      	adds	r4, r0, r4
 8032b30:	4620      	mov	r0, r4
 8032b32:	f143 0300 	adc.w	r3, r3, #0
 8032b36:	0fc0      	lsrs	r0, r0, #31
 8032b38:	2400      	movs	r4, #0
 8032b3a:	f3c1 6700 	ubfx	r7, r1, #24, #1
 8032b3e:	4e54      	ldr	r6, [pc, #336]	@ (8032c90 <_lite_kernel_nl_softmax_is8os8+0xb4c>)
 8032b40:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8032b44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8032b48:	46a0      	mov	r8, r4
 8032b4a:	3f01      	subs	r7, #1
 8032b4c:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 8032b50:	469e      	mov	lr, r3
 8032b52:	fab2 f282 	clz	r2, r2
 8032b56:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 8032b5a:	0952      	lsrs	r2, r2, #5
 8032b5c:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8032b60:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032b64:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032b68:	4007      	ands	r7, r0
 8032b6a:	f341 6000 	sbfx	r0, r1, #24, #1
 8032b6e:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032b72:	4e48      	ldr	r6, [pc, #288]	@ (8032c94 <_lite_kernel_nl_softmax_is8os8+0xb50>)
 8032b74:	46a0      	mov	r8, r4
 8032b76:	ea00 000e 	and.w	r0, r0, lr
 8032b7a:	469e      	mov	lr, r3
 8032b7c:	4078      	eors	r0, r7
 8032b7e:	f3c1 6740 	ubfx	r7, r1, #25, #1
 8032b82:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032b86:	3f01      	subs	r7, #1
 8032b88:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032b8c:	4e42      	ldr	r6, [pc, #264]	@ (8032c98 <_lite_kernel_nl_softmax_is8os8+0xb54>)
 8032b8e:	4007      	ands	r7, r0
 8032b90:	f341 6040 	sbfx	r0, r1, #25, #1
 8032b94:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032b98:	46a0      	mov	r8, r4
 8032b9a:	ea00 000e 	and.w	r0, r0, lr
 8032b9e:	469e      	mov	lr, r3
 8032ba0:	4078      	eors	r0, r7
 8032ba2:	f3c1 6780 	ubfx	r7, r1, #26, #1
 8032ba6:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032baa:	3f01      	subs	r7, #1
 8032bac:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032bb0:	4e3a      	ldr	r6, [pc, #232]	@ (8032c9c <_lite_kernel_nl_softmax_is8os8+0xb58>)
 8032bb2:	4007      	ands	r7, r0
 8032bb4:	f341 6080 	sbfx	r0, r1, #26, #1
 8032bb8:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032bbc:	46a0      	mov	r8, r4
 8032bbe:	ea00 000e 	and.w	r0, r0, lr
 8032bc2:	469e      	mov	lr, r3
 8032bc4:	4078      	eors	r0, r7
 8032bc6:	f3c1 67c0 	ubfx	r7, r1, #27, #1
 8032bca:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032bce:	3f01      	subs	r7, #1
 8032bd0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032bd4:	4e32      	ldr	r6, [pc, #200]	@ (8032ca0 <_lite_kernel_nl_softmax_is8os8+0xb5c>)
 8032bd6:	4007      	ands	r7, r0
 8032bd8:	f341 60c0 	sbfx	r0, r1, #27, #1
 8032bdc:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032be0:	46a0      	mov	r8, r4
 8032be2:	ea00 000e 	and.w	r0, r0, lr
 8032be6:	469e      	mov	lr, r3
 8032be8:	4078      	eors	r0, r7
 8032bea:	f3c1 7700 	ubfx	r7, r1, #28, #1
 8032bee:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032bf2:	3f01      	subs	r7, #1
 8032bf4:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032bf8:	4e2a      	ldr	r6, [pc, #168]	@ (8032ca4 <_lite_kernel_nl_softmax_is8os8+0xb60>)
 8032bfa:	4007      	ands	r7, r0
 8032bfc:	f341 7000 	sbfx	r0, r1, #28, #1
 8032c00:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032c04:	46a0      	mov	r8, r4
 8032c06:	ea00 000e 	and.w	r0, r0, lr
 8032c0a:	469e      	mov	lr, r3
 8032c0c:	4078      	eors	r0, r7
 8032c0e:	f3c1 7740 	ubfx	r7, r1, #29, #1
 8032c12:	fbc0 e806 	smlal	lr, r8, r0, r6
 8032c16:	3f01      	subs	r7, #1
 8032c18:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032c1c:	4007      	ands	r7, r0
 8032c1e:	f341 7040 	sbfx	r0, r1, #29, #1
 8032c22:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8032c26:	ea00 000e 	and.w	r0, r0, lr
 8032c2a:	4078      	eors	r0, r7
 8032c2c:	27f2      	movs	r7, #242	@ 0xf2
 8032c2e:	fbc0 3407 	smlal	r3, r4, r0, r7
 8032c32:	0fdb      	lsrs	r3, r3, #31
 8032c34:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8032c38:	f3c1 7480 	ubfx	r4, r1, #30, #1
 8032c3c:	f341 7180 	sbfx	r1, r1, #30, #1
 8032c40:	3c01      	subs	r4, #1
 8032c42:	4019      	ands	r1, r3
 8032c44:	1e53      	subs	r3, r2, #1
 8032c46:	4004      	ands	r4, r0
 8032c48:	4252      	negs	r2, r2
 8032c4a:	4061      	eors	r1, r4
 8032c4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8032c50:	400b      	ands	r3, r1
 8032c52:	4053      	eors	r3, r2
 8032c54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8032c56:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8032c5a:	9b01      	ldr	r3, [sp, #4]
 8032c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8032c5e:	3302      	adds	r3, #2
 8032c60:	1a9b      	subs	r3, r3, r2
 8032c62:	9a02      	ldr	r2, [sp, #8]
 8032c64:	429a      	cmp	r2, r3
 8032c66:	f63f aea7 	bhi.w	80329b8 <_lite_kernel_nl_softmax_is8os8+0x874>
 8032c6a:	9f04      	ldr	r7, [sp, #16]
 8032c6c:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 8032c70:	f7ff bbcb 	b.w	803240a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 8032c74:	2900      	cmp	r1, #0
 8032c76:	f43f abc8 	beq.w	803240a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 8032c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032c7c:	1e58      	subs	r0, r3, #1
 8032c7e:	e697      	b.n	80329b0 <_lite_kernel_nl_softmax_is8os8+0x86c>
 8032c80:	005e      	lsls	r6, r3, #1
 8032c82:	e629      	b.n	80328d8 <_lite_kernel_nl_softmax_is8os8+0x794>
 8032c84:	c0000001 	.word	0xc0000001
 8032c88:	2aaaaaab 	.word	0x2aaaaaab
 8032c8c:	70f5a894 	.word	0x70f5a894
 8032c90:	63afbe7b 	.word	0x63afbe7b
 8032c94:	4da2cbf2 	.word	0x4da2cbf2
 8032c98:	2f16ac6c 	.word	0x2f16ac6c
 8032c9c:	1152aaa4 	.word	0x1152aaa4
 8032ca0:	02582ab7 	.word	0x02582ab7
 8032ca4:	000afe11 	.word	0x000afe11

08032ca8 <_lite_kernel_nl_softmax_iu8ou8>:
 8032ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032cac:	b09d      	sub	sp, #116	@ 0x74
 8032cae:	4698      	mov	r8, r3
 8032cb0:	e9cd 0117 	strd	r0, r1, [sp, #92]	@ 0x5c
 8032cb4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8032cb6:	921b      	str	r2, [sp, #108]	@ 0x6c
 8032cb8:	2a00      	cmp	r2, #0
 8032cba:	f000 83d8 	beq.w	803346e <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 8032cbe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8032cc0:	fb02 f208 	mul.w	r2, r2, r8
 8032cc4:	921a      	str	r2, [sp, #104]	@ 0x68
 8032cc6:	f1b8 0f00 	cmp.w	r8, #0
 8032cca:	f000 83d0 	beq.w	803346e <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 8032cce:	2200      	movs	r2, #0
 8032cd0:	3b04      	subs	r3, #4
 8032cd2:	f8cd 8004 	str.w	r8, [sp, #4]
 8032cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8032cd8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8032cda:	9314      	str	r3, [sp, #80]	@ 0x50
 8032cdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8032ce0:	9316      	str	r3, [sp, #88]	@ 0x58
 8032ce2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8032ce4:	9a01      	ldr	r2, [sp, #4]
 8032ce6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032ce8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8032cea:	9312      	str	r3, [sp, #72]	@ 0x48
 8032cec:	4413      	add	r3, r2
 8032cee:	9315      	str	r3, [sp, #84]	@ 0x54
 8032cf0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8032cf2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8032cf4:	7819      	ldrb	r1, [r3, #0]
 8032cf6:	2a01      	cmp	r2, #1
 8032cf8:	9110      	str	r1, [sp, #64]	@ 0x40
 8032cfa:	f240 83cf 	bls.w	803349c <_lite_kernel_nl_softmax_iu8ou8+0x7f4>
 8032cfe:	9c01      	ldr	r4, [sp, #4]
 8032d00:	4615      	mov	r5, r2
 8032d02:	191a      	adds	r2, r3, r4
 8032d04:	2301      	movs	r3, #1
 8032d06:	7810      	ldrb	r0, [r2, #0]
 8032d08:	3301      	adds	r3, #1
 8032d0a:	4422      	add	r2, r4
 8032d0c:	4281      	cmp	r1, r0
 8032d0e:	bfb8      	it	lt
 8032d10:	4601      	movlt	r1, r0
 8032d12:	429d      	cmp	r5, r3
 8032d14:	d1f7      	bne.n	8032d06 <_lite_kernel_nl_softmax_iu8ou8+0x5e>
 8032d16:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8032d18:	9110      	str	r1, [sp, #64]	@ 0x40
 8032d1a:	440b      	add	r3, r1
 8032d1c:	9303      	str	r3, [sp, #12]
 8032d1e:	2300      	movs	r3, #0
 8032d20:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8032d24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8032d26:	469b      	mov	fp, r3
 8032d28:	46d4      	mov	ip, sl
 8032d2a:	4699      	mov	r9, r3
 8032d2c:	9302      	str	r3, [sp, #8]
 8032d2e:	9200      	str	r2, [sp, #0]
 8032d30:	e103      	b.n	8032f3a <_lite_kernel_nl_softmax_iu8ou8+0x292>
 8032d32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8032d34:	1a9b      	subs	r3, r3, r2
 8032d36:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8032d38:	4093      	lsls	r3, r2
 8032d3a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8032d3c:	405a      	eors	r2, r3
 8032d3e:	0fd2      	lsrs	r2, r2, #31
 8032d40:	2a00      	cmp	r2, #0
 8032d42:	4ac6      	ldr	r2, [pc, #792]	@ (803305c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8032d44:	bf0b      	itete	eq
 8032d46:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8032d4a:	4611      	movne	r1, r2
 8032d4c:	2200      	moveq	r2, #0
 8032d4e:	f04f 32ff 	movne.w	r2, #4294967295
 8032d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8032d56:	f040 80f8 	bne.w	8032f4a <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 8032d5a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8032d5c:	4298      	cmp	r0, r3
 8032d5e:	f040 80f4 	bne.w	8032f4a <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 8032d62:	4bbf      	ldr	r3, [pc, #764]	@ (8033060 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 8032d64:	2200      	movs	r2, #0
 8032d66:	f04f 36ff 	mov.w	r6, #4294967295
 8032d6a:	4dbe      	ldr	r5, [pc, #760]	@ (8033064 <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 8032d6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8032d6e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8032d72:	4bbd      	ldr	r3, [pc, #756]	@ (8033068 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 8032d74:	4696      	mov	lr, r2
 8032d76:	4637      	mov	r7, r6
 8032d78:	46b3      	mov	fp, r6
 8032d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032d7c:	46b0      	mov	r8, r6
 8032d7e:	4bbb      	ldr	r3, [pc, #748]	@ (803306c <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 8032d80:	4614      	mov	r4, r2
 8032d82:	4692      	mov	sl, r2
 8032d84:	2001      	movs	r0, #1
 8032d86:	9207      	str	r2, [sp, #28]
 8032d88:	9204      	str	r2, [sp, #16]
 8032d8a:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8032d8e:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8032d92:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8032d96:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8032d9a:	4282      	cmp	r2, r0
 8032d9c:	4aaf      	ldr	r2, [pc, #700]	@ (803305c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8032d9e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8032da0:	bfc8      	it	gt
 8032da2:	3101      	addgt	r1, #1
 8032da4:	f1be 0f00 	cmp.w	lr, #0
 8032da8:	bf06      	itte	eq
 8032daa:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8032dae:	f04f 0e00 	moveq.w	lr, #0
 8032db2:	f04f 3eff 	movne.w	lr, #4294967295
 8032db6:	1882      	adds	r2, r0, r2
 8032db8:	eb43 0e0e 	adc.w	lr, r3, lr
 8032dbc:	f1be 0f00 	cmp.w	lr, #0
 8032dc0:	da05      	bge.n	8032dce <_lite_kernel_nl_softmax_iu8ou8+0x126>
 8032dc2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8032dc6:	18d3      	adds	r3, r2, r3
 8032dc8:	461a      	mov	r2, r3
 8032dca:	f14e 0e00 	adc.w	lr, lr, #0
 8032dce:	0fd2      	lsrs	r2, r2, #31
 8032dd0:	48a7      	ldr	r0, [pc, #668]	@ (8033070 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>)
 8032dd2:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8032dd6:	440a      	add	r2, r1
 8032dd8:	0fd3      	lsrs	r3, r2, #31
 8032dda:	2b00      	cmp	r3, #0
 8032ddc:	4b9f      	ldr	r3, [pc, #636]	@ (803305c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8032dde:	bf06      	itte	eq
 8032de0:	2100      	moveq	r1, #0
 8032de2:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8032de6:	f04f 31ff 	movne.w	r1, #4294967295
 8032dea:	fbc2 3100 	smlal	r3, r1, r2, r0
 8032dee:	2900      	cmp	r1, #0
 8032df0:	da05      	bge.n	8032dfe <_lite_kernel_nl_softmax_iu8ou8+0x156>
 8032df2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8032df6:	189a      	adds	r2, r3, r2
 8032df8:	4613      	mov	r3, r2
 8032dfa:	f141 0100 	adc.w	r1, r1, #0
 8032dfe:	0fdb      	lsrs	r3, r3, #31
 8032e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8032e02:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8032e06:	441a      	add	r2, r3
 8032e08:	07d0      	lsls	r0, r2, #31
 8032e0a:	ea4f 0362 	mov.w	r3, r2, asr #1
 8032e0e:	d502      	bpl.n	8032e16 <_lite_kernel_nl_softmax_iu8ou8+0x16e>
 8032e10:	2b00      	cmp	r3, #0
 8032e12:	bfa8      	it	ge
 8032e14:	3301      	addge	r3, #1
 8032e16:	442b      	add	r3, r5
 8032e18:	4896      	ldr	r0, [pc, #600]	@ (8033074 <_lite_kernel_nl_softmax_iu8ou8+0x3cc>)
 8032e1a:	0fda      	lsrs	r2, r3, #31
 8032e1c:	2a00      	cmp	r2, #0
 8032e1e:	4a8f      	ldr	r2, [pc, #572]	@ (803305c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8032e20:	bf06      	itte	eq
 8032e22:	2100      	moveq	r1, #0
 8032e24:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8032e28:	f04f 31ff 	movne.w	r1, #4294967295
 8032e2c:	fbc3 2100 	smlal	r2, r1, r3, r0
 8032e30:	2900      	cmp	r1, #0
 8032e32:	da05      	bge.n	8032e40 <_lite_kernel_nl_softmax_iu8ou8+0x198>
 8032e34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8032e38:	18d3      	adds	r3, r2, r3
 8032e3a:	461a      	mov	r2, r3
 8032e3c:	f141 0100 	adc.w	r1, r1, #0
 8032e40:	0fd2      	lsrs	r2, r2, #31
 8032e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8032e46:	488c      	ldr	r0, [pc, #560]	@ (8033078 <_lite_kernel_nl_softmax_iu8ou8+0x3d0>)
 8032e48:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8032e4c:	2100      	movs	r1, #0
 8032e4e:	461d      	mov	r5, r3
 8032e50:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 8032e54:	468e      	mov	lr, r1
 8032e56:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 8032e5a:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8032e5e:	fbc2 5e00 	smlal	r5, lr, r2, r0
 8032e62:	0fed      	lsrs	r5, r5, #31
 8032e64:	ea08 0802 	and.w	r8, r8, r2
 8032e68:	4884      	ldr	r0, [pc, #528]	@ (803307c <_lite_kernel_nl_softmax_iu8ou8+0x3d4>)
 8032e6a:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8032e6e:	461a      	mov	r2, r3
 8032e70:	402c      	ands	r4, r5
 8032e72:	460d      	mov	r5, r1
 8032e74:	ea88 0404 	eor.w	r4, r8, r4
 8032e78:	fbc4 2500 	smlal	r2, r5, r4, r0
 8032e7c:	0fd2      	lsrs	r2, r2, #31
 8032e7e:	9807      	ldr	r0, [sp, #28]
 8032e80:	4027      	ands	r7, r4
 8032e82:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8032e86:	460c      	mov	r4, r1
 8032e88:	4d7d      	ldr	r5, [pc, #500]	@ (8033080 <_lite_kernel_nl_softmax_iu8ou8+0x3d8>)
 8032e8a:	4010      	ands	r0, r2
 8032e8c:	461a      	mov	r2, r3
 8032e8e:	4078      	eors	r0, r7
 8032e90:	4f7c      	ldr	r7, [pc, #496]	@ (8033084 <_lite_kernel_nl_softmax_iu8ou8+0x3dc>)
 8032e92:	fbc0 2405 	smlal	r2, r4, r0, r5
 8032e96:	0fd2      	lsrs	r2, r2, #31
 8032e98:	ea0b 0b00 	and.w	fp, fp, r0
 8032e9c:	4d7a      	ldr	r5, [pc, #488]	@ (8033088 <_lite_kernel_nl_softmax_iu8ou8+0x3e0>)
 8032e9e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8032ea2:	460c      	mov	r4, r1
 8032ea4:	ea0a 0a02 	and.w	sl, sl, r2
 8032ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8032eaa:	ea8b 0a0a 	eor.w	sl, fp, sl
 8032eae:	ea02 000a 	and.w	r0, r2, sl
 8032eb2:	461a      	mov	r2, r3
 8032eb4:	fbca 2405 	smlal	r2, r4, sl, r5
 8032eb8:	0fd2      	lsrs	r2, r2, #31
 8032eba:	460d      	mov	r5, r1
 8032ebc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8032ec0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8032ec2:	4014      	ands	r4, r2
 8032ec4:	4622      	mov	r2, r4
 8032ec6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8032ec8:	4042      	eors	r2, r0
 8032eca:	4618      	mov	r0, r3
 8032ecc:	fbc2 0507 	smlal	r0, r5, r2, r7
 8032ed0:	0fc0      	lsrs	r0, r0, #31
 8032ed2:	4014      	ands	r4, r2
 8032ed4:	9a06      	ldr	r2, [sp, #24]
 8032ed6:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8032eda:	4f6c      	ldr	r7, [pc, #432]	@ (803308c <_lite_kernel_nl_softmax_iu8ou8+0x3e4>)
 8032edc:	460d      	mov	r5, r1
 8032ede:	4002      	ands	r2, r0
 8032ee0:	4618      	mov	r0, r3
 8032ee2:	4062      	eors	r2, r4
 8032ee4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8032ee6:	fbc2 0507 	smlal	r0, r5, r2, r7
 8032eea:	0fc0      	lsrs	r0, r0, #31
 8032eec:	4014      	ands	r4, r2
 8032eee:	9a05      	ldr	r2, [sp, #20]
 8032ef0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8032ef4:	4002      	ands	r2, r0
 8032ef6:	20f2      	movs	r0, #242	@ 0xf2
 8032ef8:	4062      	eors	r2, r4
 8032efa:	fbc2 3100 	smlal	r3, r1, r2, r0
 8032efe:	0fdb      	lsrs	r3, r3, #31
 8032f00:	4032      	ands	r2, r6
 8032f02:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8032f06:	9904      	ldr	r1, [sp, #16]
 8032f08:	4019      	ands	r1, r3
 8032f0a:	9b08      	ldr	r3, [sp, #32]
 8032f0c:	404a      	eors	r2, r1
 8032f0e:	401a      	ands	r2, r3
 8032f10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032f12:	405a      	eors	r2, r3
 8032f14:	1313      	asrs	r3, r2, #12
 8032f16:	0511      	lsls	r1, r2, #20
 8032f18:	9902      	ldr	r1, [sp, #8]
 8032f1a:	bf48      	it	mi
 8032f1c:	3301      	addmi	r3, #1
 8032f1e:	4419      	add	r1, r3
 8032f20:	9102      	str	r1, [sp, #8]
 8032f22:	9b00      	ldr	r3, [sp, #0]
 8032f24:	f109 0901 	add.w	r9, r9, #1
 8032f28:	f843 2f04 	str.w	r2, [r3, #4]!
 8032f2c:	9300      	str	r3, [sp, #0]
 8032f2e:	9b01      	ldr	r3, [sp, #4]
 8032f30:	449c      	add	ip, r3
 8032f32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8032f34:	454b      	cmp	r3, r9
 8032f36:	f240 80ab 	bls.w	8033090 <_lite_kernel_nl_softmax_iu8ou8+0x3e8>
 8032f3a:	f89c 3000 	ldrb.w	r3, [ip]
 8032f3e:	9a03      	ldr	r2, [sp, #12]
 8032f40:	429a      	cmp	r2, r3
 8032f42:	f77f aef6 	ble.w	8032d32 <_lite_kernel_nl_softmax_iu8ou8+0x8a>
 8032f46:	2200      	movs	r2, #0
 8032f48:	e7eb      	b.n	8032f22 <_lite_kernel_nl_softmax_iu8ou8+0x27a>
 8032f4a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8032f4c:	fbc3 1200 	smlal	r1, r2, r3, r0
 8032f50:	2a00      	cmp	r2, #0
 8032f52:	da04      	bge.n	8032f5e <_lite_kernel_nl_softmax_iu8ou8+0x2b6>
 8032f54:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8032f58:	18c9      	adds	r1, r1, r3
 8032f5a:	f142 0200 	adc.w	r2, r2, #0
 8032f5e:	0fc9      	lsrs	r1, r1, #31
 8032f60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8032f64:	2600      	movs	r6, #0
 8032f66:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8032f6a:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 8032f6e:	017d      	lsls	r5, r7, #5
 8032f70:	1a7f      	subs	r7, r7, r1
 8032f72:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8032f76:	fbc5 3605 	smlal	r3, r6, r5, r5
 8032f7a:	2e00      	cmp	r6, #0
 8032f7c:	da05      	bge.n	8032f8a <_lite_kernel_nl_softmax_iu8ou8+0x2e2>
 8032f7e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8032f82:	189a      	adds	r2, r3, r2
 8032f84:	4613      	mov	r3, r2
 8032f86:	f146 0600 	adc.w	r6, r6, #0
 8032f8a:	0fdb      	lsrs	r3, r3, #31
 8032f8c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8032f90:	17f6      	asrs	r6, r6, #31
 8032f92:	fba3 2003 	umull	r2, r0, r3, r3
 8032f96:	fb03 f406 	mul.w	r4, r3, r6
 8032f9a:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8032f9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8032fa0:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8032fa4:	2800      	cmp	r0, #0
 8032fa6:	da05      	bge.n	8032fb4 <_lite_kernel_nl_softmax_iu8ou8+0x30c>
 8032fa8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8032fac:	1914      	adds	r4, r2, r4
 8032fae:	4622      	mov	r2, r4
 8032fb0:	f140 0000 	adc.w	r0, r0, #0
 8032fb4:	0fd2      	lsrs	r2, r2, #31
 8032fb6:	f3c7 6400 	ubfx	r4, r7, #24, #1
 8032fba:	fb05 f606 	mul.w	r6, r5, r6
 8032fbe:	ea83 0e05 	eor.w	lr, r3, r5
 8032fc2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8032fc6:	9411      	str	r4, [sp, #68]	@ 0x44
 8032fc8:	17e8      	asrs	r0, r5, #31
 8032fca:	fab1 f181 	clz	r1, r1
 8032fce:	f3c7 7b80 	ubfx	fp, r7, #30, #1
 8032fd2:	f3c7 7a40 	ubfx	sl, r7, #29, #1
 8032fd6:	fb03 6600 	mla	r6, r3, r0, r6
 8032fda:	0949      	lsrs	r1, r1, #5
 8032fdc:	fba5 4303 	umull	r4, r3, r5, r3
 8032fe0:	f3c7 7000 	ubfx	r0, r7, #28, #1
 8032fe4:	f3c7 6880 	ubfx	r8, r7, #26, #1
 8032fe8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8032fec:	940f      	str	r4, [sp, #60]	@ 0x3c
 8032fee:	f347 64c0 	sbfx	r4, r7, #27, #1
 8032ff2:	4433      	add	r3, r6
 8032ff4:	424e      	negs	r6, r1
 8032ff6:	940c      	str	r4, [sp, #48]	@ 0x30
 8032ff8:	3901      	subs	r1, #1
 8032ffa:	f1cb 0400 	rsb	r4, fp, #0
 8032ffe:	9006      	str	r0, [sp, #24]
 8033000:	9108      	str	r1, [sp, #32]
 8033002:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8033006:	9404      	str	r4, [sp, #16]
 8033008:	f10a 34ff 	add.w	r4, sl, #4294967295
 803300c:	f3c7 6040 	ubfx	r0, r7, #25, #1
 8033010:	910d      	str	r1, [sp, #52]	@ 0x34
 8033012:	940b      	str	r4, [sp, #44]	@ 0x2c
 8033014:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 8033018:	f1ca 0400 	rsb	r4, sl, #0
 803301c:	9f06      	ldr	r7, [sp, #24]
 803301e:	3901      	subs	r1, #1
 8033020:	f10b 36ff 	add.w	r6, fp, #4294967295
 8033024:	9405      	str	r4, [sp, #20]
 8033026:	1e7c      	subs	r4, r7, #1
 8033028:	9109      	str	r1, [sp, #36]	@ 0x24
 803302a:	1091      	asrs	r1, r2, #2
 803302c:	940a      	str	r4, [sp, #40]	@ 0x28
 803302e:	f1c7 0400 	rsb	r4, r7, #0
 8033032:	f100 37ff 	add.w	r7, r0, #4294967295
 8033036:	f1c0 0000 	rsb	r0, r0, #0
 803303a:	f108 3bff 	add.w	fp, r8, #4294967295
 803303e:	f1c8 0a00 	rsb	sl, r8, #0
 8033042:	9007      	str	r0, [sp, #28]
 8033044:	f002 0203 	and.w	r2, r2, #3
 8033048:	9811      	ldr	r0, [sp, #68]	@ 0x44
 803304a:	9406      	str	r4, [sp, #24]
 803304c:	f100 38ff 	add.w	r8, r0, #4294967295
 8033050:	f1c0 0400 	rsb	r4, r0, #0
 8033054:	bf54      	ite	pl
 8033056:	2001      	movpl	r0, #1
 8033058:	2002      	movmi	r0, #2
 803305a:	e69e      	b.n	8032d9a <_lite_kernel_nl_softmax_iu8ou8+0xf2>
 803305c:	c0000001 	.word	0xc0000001
 8033060:	01fffff8 	.word	0x01fffff8
 8033064:	0fffffe0 	.word	0x0fffffe0
 8033068:	40000100 	.word	0x40000100
 803306c:	001fffff 	.word	0x001fffff
 8033070:	2aaaaaab 	.word	0x2aaaaaab
 8033074:	70f5a894 	.word	0x70f5a894
 8033078:	63afbe7b 	.word	0x63afbe7b
 803307c:	4da2cbf2 	.word	0x4da2cbf2
 8033080:	2f16ac6c 	.word	0x2f16ac6c
 8033084:	02582ab7 	.word	0x02582ab7
 8033088:	1152aaa4 	.word	0x1152aaa4
 803308c:	000afe11 	.word	0x000afe11
 8033090:	9b02      	ldr	r3, [sp, #8]
 8033092:	2b00      	cmp	r3, #0
 8033094:	f000 8203 	beq.w	803349e <_lite_kernel_nl_softmax_iu8ou8+0x7f6>
 8033098:	fab3 f983 	clz	r9, r3
 803309c:	fa03 f209 	lsl.w	r2, r3, r9
 80330a0:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 80330a4:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 80330a8:	17d9      	asrs	r1, r3, #31
 80330aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80330ae:	bf08      	it	eq
 80330b0:	2a00      	cmpeq	r2, #0
 80330b2:	f000 81f8 	beq.w	80334a6 <_lite_kernel_nl_softmax_iu8ou8+0x7fe>
 80330b6:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 80330ba:	4ac3      	ldr	r2, [pc, #780]	@ (80333c8 <_lite_kernel_nl_softmax_iu8ou8+0x720>)
 80330bc:	4dc3      	ldr	r5, [pc, #780]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80330be:	f141 0100 	adc.w	r1, r1, #0
 80330c2:	085b      	lsrs	r3, r3, #1
 80330c4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 80330c8:	1049      	asrs	r1, r1, #1
 80330ca:	4258      	negs	r0, r3
 80330cc:	469c      	mov	ip, r3
 80330ce:	fb02 0001 	mla	r0, r2, r1, r0
 80330d2:	fba3 2402 	umull	r2, r4, r3, r2
 80330d6:	1952      	adds	r2, r2, r5
 80330d8:	4420      	add	r0, r4
 80330da:	f160 0000 	sbc.w	r0, r0, #0
 80330de:	2800      	cmp	r0, #0
 80330e0:	da05      	bge.n	80330ee <_lite_kernel_nl_softmax_iu8ou8+0x446>
 80330e2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80330e6:	1914      	adds	r4, r2, r4
 80330e8:	4622      	mov	r2, r4
 80330ea:	f140 0000 	adc.w	r0, r0, #0
 80330ee:	0fd2      	lsrs	r2, r2, #31
 80330f0:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 80330f4:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 80330f8:	17f0      	asrs	r0, r6, #31
 80330fa:	fba3 2706 	umull	r2, r7, r3, r6
 80330fe:	4635      	mov	r5, r6
 8033100:	fb03 fe00 	mul.w	lr, r3, r0
 8033104:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8033108:	fb06 ee01 	mla	lr, r6, r1, lr
 803310c:	eb4e 0707 	adc.w	r7, lr, r7
 8033110:	2f00      	cmp	r7, #0
 8033112:	da06      	bge.n	8033122 <_lite_kernel_nl_softmax_iu8ou8+0x47a>
 8033114:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8033118:	eb12 0e0e 	adds.w	lr, r2, lr
 803311c:	4672      	mov	r2, lr
 803311e:	f147 0700 	adc.w	r7, r7, #0
 8033122:	0fd2      	lsrs	r2, r2, #31
 8033124:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8033128:	4fa8      	ldr	r7, [pc, #672]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 803312a:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 803312e:	ea82 0e06 	eor.w	lr, r2, r6
 8033132:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8033136:	f1be 0f00 	cmp.w	lr, #0
 803313a:	bf06      	itte	eq
 803313c:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 8033140:	f04f 0800 	moveq.w	r8, #0
 8033144:	f04f 38ff 	movne.w	r8, #4294967295
 8033148:	fb02 f000 	mul.w	r0, r2, r0
 803314c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8033150:	fb05 000e 	mla	r0, r5, lr, r0
 8033154:	fba2 2505 	umull	r2, r5, r2, r5
 8033158:	19d2      	adds	r2, r2, r7
 803315a:	4428      	add	r0, r5
 803315c:	eb40 0508 	adc.w	r5, r0, r8
 8033160:	2d00      	cmp	r5, #0
 8033162:	da05      	bge.n	8033170 <_lite_kernel_nl_softmax_iu8ou8+0x4c8>
 8033164:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8033168:	1810      	adds	r0, r2, r0
 803316a:	4602      	mov	r2, r0
 803316c:	f145 0500 	adc.w	r5, r5, #0
 8033170:	0fd2      	lsrs	r2, r2, #31
 8033172:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8033176:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 803317a:	dd7f      	ble.n	803327c <_lite_kernel_nl_softmax_iu8ou8+0x5d4>
 803317c:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 8033180:	4e92      	ldr	r6, [pc, #584]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8033182:	ea80 020c 	eor.w	r2, r0, ip
 8033186:	17c4      	asrs	r4, r0, #31
 8033188:	fb00 f501 	mul.w	r5, r0, r1
 803318c:	0fd2      	lsrs	r2, r2, #31
 803318e:	fb03 5504 	mla	r5, r3, r4, r5
 8033192:	2a00      	cmp	r2, #0
 8033194:	fba0 2e03 	umull	r2, lr, r0, r3
 8033198:	bf06      	itte	eq
 803319a:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 803319e:	2700      	moveq	r7, #0
 80331a0:	f04f 37ff 	movne.w	r7, #4294967295
 80331a4:	4475      	add	r5, lr
 80331a6:	1992      	adds	r2, r2, r6
 80331a8:	eb45 0507 	adc.w	r5, r5, r7
 80331ac:	2d00      	cmp	r5, #0
 80331ae:	da05      	bge.n	80331bc <_lite_kernel_nl_softmax_iu8ou8+0x514>
 80331b0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80331b4:	1996      	adds	r6, r2, r6
 80331b6:	4632      	mov	r2, r6
 80331b8:	f145 0500 	adc.w	r5, r5, #0
 80331bc:	0fd2      	lsrs	r2, r2, #31
 80331be:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80331c2:	4d82      	ldr	r5, [pc, #520]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80331c4:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 80331c8:	ea80 0602 	eor.w	r6, r0, r2
 80331cc:	0ff6      	lsrs	r6, r6, #31
 80331ce:	2e00      	cmp	r6, #0
 80331d0:	bf06      	itte	eq
 80331d2:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 80331d6:	2600      	moveq	r6, #0
 80331d8:	f04f 36ff 	movne.w	r6, #4294967295
 80331dc:	fb02 f404 	mul.w	r4, r2, r4
 80331e0:	17d7      	asrs	r7, r2, #31
 80331e2:	fb00 4407 	mla	r4, r0, r7, r4
 80331e6:	fba2 2700 	umull	r2, r7, r2, r0
 80331ea:	1952      	adds	r2, r2, r5
 80331ec:	443c      	add	r4, r7
 80331ee:	eb44 0406 	adc.w	r4, r4, r6
 80331f2:	2c00      	cmp	r4, #0
 80331f4:	da05      	bge.n	8033202 <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 80331f6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80331fa:	1955      	adds	r5, r2, r5
 80331fc:	462a      	mov	r2, r5
 80331fe:	f144 0400 	adc.w	r4, r4, #0
 8033202:	0fd2      	lsrs	r2, r2, #31
 8033204:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8033208:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 803320c:	db65      	blt.n	80332da <_lite_kernel_nl_softmax_iu8ou8+0x632>
 803320e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8033212:	1902      	adds	r2, r0, r4
 8033214:	ea92 0f0c 	teq	r2, ip
 8033218:	f140 813c 	bpl.w	8033494 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 803321c:	4c6b      	ldr	r4, [pc, #428]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 803321e:	f04f 35ff 	mov.w	r5, #4294967295
 8033222:	fb02 f101 	mul.w	r1, r2, r1
 8033226:	17d0      	asrs	r0, r2, #31
 8033228:	fb03 1100 	mla	r1, r3, r0, r1
 803322c:	fba2 3603 	umull	r3, r6, r2, r3
 8033230:	191b      	adds	r3, r3, r4
 8033232:	4431      	add	r1, r6
 8033234:	eb41 0105 	adc.w	r1, r1, r5
 8033238:	2900      	cmp	r1, #0
 803323a:	da05      	bge.n	8033248 <_lite_kernel_nl_softmax_iu8ou8+0x5a0>
 803323c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8033240:	191c      	adds	r4, r3, r4
 8033242:	4623      	mov	r3, r4
 8033244:	f141 0100 	adc.w	r1, r1, #0
 8033248:	0fdb      	lsrs	r3, r3, #31
 803324a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 803324e:	495f      	ldr	r1, [pc, #380]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8033250:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8033254:	ea83 0402 	eor.w	r4, r3, r2
 8033258:	0fe4      	lsrs	r4, r4, #31
 803325a:	2c00      	cmp	r4, #0
 803325c:	bf06      	itte	eq
 803325e:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8033262:	2400      	moveq	r4, #0
 8033264:	f04f 34ff 	movne.w	r4, #4294967295
 8033268:	4293      	cmp	r3, r2
 803326a:	d15d      	bne.n	8033328 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 803326c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8033270:	d15a      	bne.n	8033328 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 8033272:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8033276:	4411      	add	r1, r2
 8033278:	0049      	lsls	r1, r1, #1
 803327a:	e076      	b.n	803336a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 803327c:	4854      	ldr	r0, [pc, #336]	@ (80333d0 <_lite_kernel_nl_softmax_iu8ou8+0x728>)
 803327e:	4420      	add	r0, r4
 8033280:	ea90 0f0c 	teq	r0, ip
 8033284:	f140 811d 	bpl.w	80334c2 <_lite_kernel_nl_softmax_iu8ou8+0x81a>
 8033288:	17c2      	asrs	r2, r0, #31
 803328a:	fb00 f401 	mul.w	r4, r0, r1
 803328e:	4d4f      	ldr	r5, [pc, #316]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8033290:	fb03 4402 	mla	r4, r3, r2, r4
 8033294:	fba0 2603 	umull	r2, r6, r0, r3
 8033298:	1952      	adds	r2, r2, r5
 803329a:	4434      	add	r4, r6
 803329c:	f164 0500 	sbc.w	r5, r4, #0
 80332a0:	2d00      	cmp	r5, #0
 80332a2:	da05      	bge.n	80332b0 <_lite_kernel_nl_softmax_iu8ou8+0x608>
 80332a4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80332a8:	1914      	adds	r4, r2, r4
 80332aa:	4622      	mov	r2, r4
 80332ac:	f145 0500 	adc.w	r5, r5, #0
 80332b0:	0fd2      	lsrs	r2, r2, #31
 80332b2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80332b6:	f04f 35ff 	mov.w	r5, #4294967295
 80332ba:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 80332be:	4a43      	ldr	r2, [pc, #268]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80332c0:	fbc0 2504 	smlal	r2, r5, r0, r4
 80332c4:	2d00      	cmp	r5, #0
 80332c6:	da05      	bge.n	80332d4 <_lite_kernel_nl_softmax_iu8ou8+0x62c>
 80332c8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80332cc:	1914      	adds	r4, r2, r4
 80332ce:	4622      	mov	r2, r4
 80332d0:	f145 0500 	adc.w	r5, r5, #0
 80332d4:	0fd2      	lsrs	r2, r2, #31
 80332d6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80332da:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 80332de:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80332e2:	dc96      	bgt.n	8033212 <_lite_kernel_nl_softmax_iu8ou8+0x56a>
 80332e4:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 80332e8:	ea92 0f0c 	teq	r2, ip
 80332ec:	f140 80d2 	bpl.w	8033494 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 80332f0:	fb02 f101 	mul.w	r1, r2, r1
 80332f4:	17d0      	asrs	r0, r2, #31
 80332f6:	fb03 1100 	mla	r1, r3, r0, r1
 80332fa:	fba2 4303 	umull	r4, r3, r2, r3
 80332fe:	4419      	add	r1, r3
 8033300:	4b32      	ldr	r3, [pc, #200]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8033302:	18e3      	adds	r3, r4, r3
 8033304:	f161 0100 	sbc.w	r1, r1, #0
 8033308:	2900      	cmp	r1, #0
 803330a:	da05      	bge.n	8033318 <_lite_kernel_nl_softmax_iu8ou8+0x670>
 803330c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8033310:	191c      	adds	r4, r3, r4
 8033312:	4623      	mov	r3, r4
 8033314:	f141 0100 	adc.w	r1, r1, #0
 8033318:	0fdb      	lsrs	r3, r3, #31
 803331a:	f04f 34ff 	mov.w	r4, #4294967295
 803331e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8033322:	492a      	ldr	r1, [pc, #168]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8033324:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8033328:	fb03 f000 	mul.w	r0, r3, r0
 803332c:	17dd      	asrs	r5, r3, #31
 803332e:	fb02 0005 	mla	r0, r2, r5, r0
 8033332:	fba3 3502 	umull	r3, r5, r3, r2
 8033336:	185b      	adds	r3, r3, r1
 8033338:	4428      	add	r0, r5
 803333a:	eb40 0004 	adc.w	r0, r0, r4
 803333e:	2800      	cmp	r0, #0
 8033340:	da05      	bge.n	803334e <_lite_kernel_nl_softmax_iu8ou8+0x6a6>
 8033342:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8033346:	1859      	adds	r1, r3, r1
 8033348:	460b      	mov	r3, r1
 803334a:	f140 0000 	adc.w	r0, r0, #0
 803334e:	0fdb      	lsrs	r3, r3, #31
 8033350:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8033354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8033358:	f2c0 8090 	blt.w	803347c <_lite_kernel_nl_softmax_iu8ou8+0x7d4>
 803335c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8033360:	18d1      	adds	r1, r2, r3
 8033362:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8033366:	db87      	blt.n	8033278 <_lite_kernel_nl_softmax_iu8ou8+0x5d0>
 8033368:	4619      	mov	r1, r3
 803336a:	f1ba 0f1f 	cmp.w	sl, #31
 803336e:	dd04      	ble.n	803337a <_lite_kernel_nl_softmax_iu8ou8+0x6d2>
 8033370:	f1c9 0304 	rsb	r3, r9, #4
 8033374:	f04f 0a1f 	mov.w	sl, #31
 8033378:	4119      	asrs	r1, r3
 803337a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803337c:	2b00      	cmp	r3, #0
 803337e:	d05e      	beq.n	803343e <_lite_kernel_nl_softmax_iu8ou8+0x796>
 8033380:	2501      	movs	r5, #1
 8033382:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 8033386:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 803338a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803338c:	fa05 f50a 	lsl.w	r5, r5, sl
 8033390:	fabe fe8e 	clz	lr, lr
 8033394:	fa47 f90a 	asr.w	r9, r7, sl
 8033398:	9703      	str	r7, [sp, #12]
 803339a:	3d01      	subs	r5, #1
 803339c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80333a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80333a4:	ea05 0307 	and.w	r3, r5, r7
 80333a8:	ea4f 0c65 	mov.w	ip, r5, asr #1
 80333ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80333ae:	f10c 0801 	add.w	r8, ip, #1
 80333b2:	9300      	str	r3, [sp, #0]
 80333b4:	4673      	mov	r3, lr
 80333b6:	4e05      	ldr	r6, [pc, #20]	@ (80333cc <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80333b8:	4647      	mov	r7, r8
 80333ba:	46ae      	mov	lr, r5
 80333bc:	f8dd 9058 	ldr.w	r9, [sp, #88]	@ 0x58
 80333c0:	461d      	mov	r5, r3
 80333c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80333c6:	e012      	b.n	80333ee <_lite_kernel_nl_softmax_iu8ou8+0x746>
 80333c8:	c3c3c3c4 	.word	0xc3c3c3c4
 80333cc:	c0000001 	.word	0xc0000001
 80333d0:	da5a5a5a 	.word	0xda5a5a5a
 80333d4:	b1dd      	cbz	r5, 803340e <_lite_kernel_nl_softmax_iu8ou8+0x766>
 80333d6:	9b02      	ldr	r3, [sp, #8]
 80333d8:	9a00      	ldr	r2, [sp, #0]
 80333da:	4594      	cmp	ip, r2
 80333dc:	da00      	bge.n	80333e0 <_lite_kernel_nl_softmax_iu8ou8+0x738>
 80333de:	3301      	adds	r3, #1
 80333e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80333e2:	dd47      	ble.n	8033474 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>
 80333e4:	23ff      	movs	r3, #255	@ 0xff
 80333e6:	45a1      	cmp	r9, r4
 80333e8:	7003      	strb	r3, [r0, #0]
 80333ea:	4440      	add	r0, r8
 80333ec:	d027      	beq.n	803343e <_lite_kernel_nl_softmax_iu8ou8+0x796>
 80333ee:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80333f2:	ea81 0302 	eor.w	r3, r1, r2
 80333f6:	0fdb      	lsrs	r3, r3, #31
 80333f8:	2b00      	cmp	r3, #0
 80333fa:	bf0b      	itete	eq
 80333fc:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8033400:	4633      	movne	r3, r6
 8033402:	f04f 0b00 	moveq.w	fp, #0
 8033406:	f04f 3bff 	movne.w	fp, #4294967295
 803340a:	4291      	cmp	r1, r2
 803340c:	d0e2      	beq.n	80333d4 <_lite_kernel_nl_softmax_iu8ou8+0x72c>
 803340e:	fbc2 3b01 	smlal	r3, fp, r2, r1
 8033412:	f1bb 0f00 	cmp.w	fp, #0
 8033416:	da03      	bge.n	8033420 <_lite_kernel_nl_softmax_iu8ou8+0x778>
 8033418:	9a03      	ldr	r2, [sp, #12]
 803341a:	189b      	adds	r3, r3, r2
 803341c:	f14b 0b00 	adc.w	fp, fp, #0
 8033420:	0fdb      	lsrs	r3, r3, #31
 8033422:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8033426:	ea0e 0203 	and.w	r2, lr, r3
 803342a:	fa53 f30a 	asrs.w	r3, r3, sl
 803342e:	d5d4      	bpl.n	80333da <_lite_kernel_nl_softmax_iu8ou8+0x732>
 8033430:	4297      	cmp	r7, r2
 8033432:	dbd4      	blt.n	80333de <_lite_kernel_nl_softmax_iu8ou8+0x736>
 8033434:	2300      	movs	r3, #0
 8033436:	45a1      	cmp	r9, r4
 8033438:	7003      	strb	r3, [r0, #0]
 803343a:	4440      	add	r0, r8
 803343c:	d1d7      	bne.n	80333ee <_lite_kernel_nl_softmax_iu8ou8+0x746>
 803343e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8033440:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8033442:	3201      	adds	r2, #1
 8033444:	3301      	adds	r3, #1
 8033446:	9213      	str	r2, [sp, #76]	@ 0x4c
 8033448:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 803344a:	9312      	str	r3, [sp, #72]	@ 0x48
 803344c:	4293      	cmp	r3, r2
 803344e:	f47f ac4f 	bne.w	8032cf0 <_lite_kernel_nl_softmax_iu8ou8+0x48>
 8033452:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8033454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033458:	440a      	add	r2, r1
 803345a:	3301      	adds	r3, #1
 803345c:	9218      	str	r2, [sp, #96]	@ 0x60
 803345e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8033460:	9319      	str	r3, [sp, #100]	@ 0x64
 8033462:	440a      	add	r2, r1
 8033464:	9217      	str	r2, [sp, #92]	@ 0x5c
 8033466:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8033468:	429a      	cmp	r2, r3
 803346a:	f47f ac3a 	bne.w	8032ce2 <_lite_kernel_nl_softmax_iu8ou8+0x3a>
 803346e:	b01d      	add	sp, #116	@ 0x74
 8033470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033474:	2b00      	cmp	r3, #0
 8033476:	dddd      	ble.n	8033434 <_lite_kernel_nl_softmax_iu8ou8+0x78c>
 8033478:	b2db      	uxtb	r3, r3
 803347a:	e7b4      	b.n	80333e6 <_lite_kernel_nl_softmax_iu8ou8+0x73e>
 803347c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8033480:	dc3b      	bgt.n	80334fa <_lite_kernel_nl_softmax_iu8ou8+0x852>
 8033482:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8033486:	0051      	lsls	r1, r2, #1
 8033488:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 803348c:	bfd8      	it	le
 803348e:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 8033492:	e76a      	b.n	803336a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 8033494:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8033498:	2500      	movs	r5, #0
 803349a:	e6c2      	b.n	8033222 <_lite_kernel_nl_softmax_iu8ou8+0x57a>
 803349c:	bbba      	cbnz	r2, 803350e <_lite_kernel_nl_softmax_iu8ou8+0x866>
 803349e:	f04f 0a03 	mov.w	sl, #3
 80334a2:	f04f 0920 	mov.w	r9, #32
 80334a6:	2000      	movs	r0, #0
 80334a8:	f04f 33ff 	mov.w	r3, #4294967295
 80334ac:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 80334b0:	4a19      	ldr	r2, [pc, #100]	@ (8033518 <_lite_kernel_nl_softmax_iu8ou8+0x870>)
 80334b2:	4604      	mov	r4, r0
 80334b4:	4619      	mov	r1, r3
 80334b6:	462e      	mov	r6, r5
 80334b8:	469c      	mov	ip, r3
 80334ba:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80334be:	4680      	mov	r8, r0
 80334c0:	e642      	b.n	8033148 <_lite_kernel_nl_softmax_iu8ou8+0x4a0>
 80334c2:	17c4      	asrs	r4, r0, #31
 80334c4:	fba3 2500 	umull	r2, r5, r3, r0
 80334c8:	fb03 f604 	mul.w	r6, r3, r4
 80334cc:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 80334d0:	fb00 6601 	mla	r6, r0, r1, r6
 80334d4:	eb46 0505 	adc.w	r5, r6, r5
 80334d8:	2d00      	cmp	r5, #0
 80334da:	da05      	bge.n	80334e8 <_lite_kernel_nl_softmax_iu8ou8+0x840>
 80334dc:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80334e0:	1996      	adds	r6, r2, r6
 80334e2:	4632      	mov	r2, r6
 80334e4:	f145 0500 	adc.w	r5, r5, #0
 80334e8:	0fd2      	lsrs	r2, r2, #31
 80334ea:	f04f 36ff 	mov.w	r6, #4294967295
 80334ee:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80334f2:	4d0a      	ldr	r5, [pc, #40]	@ (803351c <_lite_kernel_nl_softmax_iu8ou8+0x874>)
 80334f4:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 80334f8:	e670      	b.n	80331dc <_lite_kernel_nl_softmax_iu8ou8+0x534>
 80334fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80334fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033502:	db02      	blt.n	803350a <_lite_kernel_nl_softmax_iu8ou8+0x862>
 8033504:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8033508:	e72f      	b.n	803336a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 803350a:	0059      	lsls	r1, r3, #1
 803350c:	e7bc      	b.n	8033488 <_lite_kernel_nl_softmax_iu8ou8+0x7e0>
 803350e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8033510:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8033512:	4413      	add	r3, r2
 8033514:	9303      	str	r3, [sp, #12]
 8033516:	e402      	b.n	8032d1e <_lite_kernel_nl_softmax_iu8ou8+0x76>
 8033518:	20000001 	.word	0x20000001
 803351c:	c0000001 	.word	0xc0000001

08033520 <lite_bilinear_is8os8_kernel>:
 8033520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8033524:	9c07      	ldr	r4, [sp, #28]
 8033526:	2a00      	cmp	r2, #0
 8033528:	d04b      	beq.n	80335c2 <lite_bilinear_is8os8_kernel+0xa2>
 803352a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 803352e:	eb01 0e02 	add.w	lr, r1, r2
 8033532:	f100 3cff 	add.w	ip, r0, #4294967295
 8033536:	f1c0 0501 	rsb	r5, r0, #1
 803353a:	685f      	ldr	r7, [r3, #4]
 803353c:	eb05 060c 	add.w	r6, r5, ip
 8033540:	681a      	ldr	r2, [r3, #0]
 8033542:	eb00 0807 	add.w	r8, r0, r7
 8033546:	edd4 3a02 	vldr	s7, [r4, #8]
 803354a:	4402      	add	r2, r0
 803354c:	ed94 4a01 	vldr	s8, [r4, #4]
 8033550:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8033554:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8033558:	ee07 8a90 	vmov	s15, r8
 803355c:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8033560:	ee06 9a90 	vmov	s13, r9
 8033564:	443a      	add	r2, r7
 8033566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 803356a:	ee06 8a10 	vmov	s12, r8
 803356e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8033572:	edd4 4a00 	vldr	s9, [r4]
 8033576:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 803357a:	5792      	ldrsb	r2, [r2, r6]
 803357c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8033580:	ed94 5a03 	vldr	s10, [r4, #12]
 8033584:	ee07 2a10 	vmov	s14, r2
 8033588:	eee4 7a06 	vfma.f32	s15, s8, s12
 803358c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8033590:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8033594:	eee5 7a07 	vfma.f32	s15, s10, s14
 8033598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 803359c:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80335a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80335a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80335a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80335ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80335b0:	dd09      	ble.n	80335c6 <lite_bilinear_is8os8_kernel+0xa6>
 80335b2:	ee17 2a10 	vmov	r2, s14
 80335b6:	f302 0207 	ssat	r2, #8, r2
 80335ba:	f801 2b01 	strb.w	r2, [r1], #1
 80335be:	4571      	cmp	r1, lr
 80335c0:	d1bb      	bne.n	803353a <lite_bilinear_is8os8_kernel+0x1a>
 80335c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80335c6:	ee17 2a90 	vmov	r2, s15
 80335ca:	f302 0207 	ssat	r2, #8, r2
 80335ce:	f801 2b01 	strb.w	r2, [r1], #1
 80335d2:	4571      	cmp	r1, lr
 80335d4:	d1b1      	bne.n	803353a <lite_bilinear_is8os8_kernel+0x1a>
 80335d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80335da:	bf00      	nop

080335dc <SSD_quick_sort_partition.constprop.0>:
 80335dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80335e0:	ed2d 8b02 	vpush	{d8}
 80335e4:	b087      	sub	sp, #28
 80335e6:	461f      	mov	r7, r3
 80335e8:	f102 3cff 	add.w	ip, r2, #4294967295
 80335ec:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 80335f0:	1c7e      	adds	r6, r7, #1
 80335f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80335f4:	45b4      	cmp	ip, r6
 80335f6:	9104      	str	r1, [sp, #16]
 80335f8:	fb08 3202 	mla	r2, r8, r2, r3
 80335fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8033600:	ed92 8a00 	vldr	s16, [r2]
 8033604:	da35      	bge.n	8033672 <SSD_quick_sort_partition.constprop.0+0x96>
 8033606:	469a      	mov	sl, r3
 8033608:	ebc8 7388 	rsb	r3, r8, r8, lsl #30
 803360c:	f1b8 0f01 	cmp.w	r8, #1
 8033610:	4681      	mov	r9, r0
 8033612:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8033616:	f10c 0401 	add.w	r4, ip, #1
 803361a:	9701      	str	r7, [sp, #4]
 803361c:	9305      	str	r3, [sp, #20]
 803361e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8033622:	ee08 3a90 	vmov	s17, r3
 8033626:	d174      	bne.n	8033712 <SSD_quick_sort_partition.constprop.0+0x136>
 8033628:	eb04 030a 	add.w	r3, r4, sl
 803362c:	9f01      	ldr	r7, [sp, #4]
 803362e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8033632:	e002      	b.n	803363a <SSD_quick_sort_partition.constprop.0+0x5e>
 8033634:	42a7      	cmp	r7, r4
 8033636:	dd08      	ble.n	803364a <SSD_quick_sort_partition.constprop.0+0x6e>
 8033638:	3401      	adds	r4, #1
 803363a:	ecf3 7a01 	vldmia	r3!, {s15}
 803363e:	46a4      	mov	ip, r4
 8033640:	eeb4 8a67 	vcmp.f32	s16, s15
 8033644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033648:	d4f4      	bmi.n	8033634 <SSD_quick_sort_partition.constprop.0+0x58>
 803364a:	eb06 030a 	add.w	r3, r6, sl
 803364e:	1e75      	subs	r5, r6, #1
 8033650:	9701      	str	r7, [sp, #4]
 8033652:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8033656:	e000      	b.n	803365a <SSD_quick_sort_partition.constprop.0+0x7e>
 8033658:	3d01      	subs	r5, #1
 803365a:	ed73 7a01 	vldmdb	r3!, {s15}
 803365e:	462e      	mov	r6, r5
 8033660:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8033664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033668:	dcf6      	bgt.n	8033658 <SSD_quick_sort_partition.constprop.0+0x7c>
 803366a:	46ab      	mov	fp, r5
 803366c:	9701      	str	r7, [sp, #4]
 803366e:	42ac      	cmp	r4, r5
 8033670:	db05      	blt.n	803367e <SSD_quick_sort_partition.constprop.0+0xa2>
 8033672:	4630      	mov	r0, r6
 8033674:	b007      	add	sp, #28
 8033676:	ecbd 8b02 	vpop	{d8}
 803367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803367e:	eb09 018c 	add.w	r1, r9, ip, lsl #2
 8033682:	ee18 2a90 	vmov	r2, s17
 8033686:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8033688:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 803368c:	9102      	str	r1, [sp, #8]
 803368e:	f001 fb62 	bl	8034d56 <memcpy>
 8033692:	9902      	ldr	r1, [sp, #8]
 8033694:	ee18 2a90 	vmov	r2, s17
 8033698:	4608      	mov	r0, r1
 803369a:	4659      	mov	r1, fp
 803369c:	f001 fb5b 	bl	8034d56 <memcpy>
 80336a0:	ee18 2a90 	vmov	r2, s17
 80336a4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80336a6:	4658      	mov	r0, fp
 80336a8:	f001 fb55 	bl	8034d56 <memcpy>
 80336ac:	9b04      	ldr	r3, [sp, #16]
 80336ae:	ea4f 1b04 	mov.w	fp, r4, lsl #4
 80336b2:	46a4      	mov	ip, r4
 80336b4:	eb03 1e04 	add.w	lr, r3, r4, lsl #4
 80336b8:	461c      	mov	r4, r3
 80336ba:	f853 000b 	ldr.w	r0, [r3, fp]
 80336be:	f1b8 0f01 	cmp.w	r8, #1
 80336c2:	eb04 1705 	add.w	r7, r4, r5, lsl #4
 80336c6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80336ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80336ce:	f8de 2008 	ldr.w	r2, [lr, #8]
 80336d2:	f8de 300c 	ldr.w	r3, [lr, #12]
 80336d6:	9503      	str	r5, [sp, #12]
 80336d8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80336da:	9702      	str	r7, [sp, #8]
 80336dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80336de:	4625      	mov	r5, r4
 80336e0:	9b02      	ldr	r3, [sp, #8]
 80336e2:	9c03      	ldr	r4, [sp, #12]
 80336e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80336e6:	5928      	ldr	r0, [r5, r4]
 80336e8:	6859      	ldr	r1, [r3, #4]
 80336ea:	4617      	mov	r7, r2
 80336ec:	689a      	ldr	r2, [r3, #8]
 80336ee:	68db      	ldr	r3, [r3, #12]
 80336f0:	f845 000b 	str.w	r0, [r5, fp]
 80336f4:	f8ce 1004 	str.w	r1, [lr, #4]
 80336f8:	f8ce 2008 	str.w	r2, [lr, #8]
 80336fc:	f8ce 300c 	str.w	r3, [lr, #12]
 8033700:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8033702:	5128      	str	r0, [r5, r4]
 8033704:	f10c 0401 	add.w	r4, ip, #1
 8033708:	9802      	ldr	r0, [sp, #8]
 803370a:	6041      	str	r1, [r0, #4]
 803370c:	6082      	str	r2, [r0, #8]
 803370e:	60c3      	str	r3, [r0, #12]
 8033710:	d08a      	beq.n	8033628 <SSD_quick_sort_partition.constprop.0+0x4c>
 8033712:	fb0c 8108 	mla	r1, ip, r8, r8
 8033716:	9f01      	ldr	r7, [sp, #4]
 8033718:	e000      	b.n	803371c <SSD_quick_sort_partition.constprop.0+0x140>
 803371a:	3401      	adds	r4, #1
 803371c:	eb0a 0301 	add.w	r3, sl, r1
 8033720:	468c      	mov	ip, r1
 8033722:	4441      	add	r1, r8
 8033724:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8033728:	edd3 7a00 	vldr	s15, [r3]
 803372c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8033730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033734:	bf4c      	ite	mi
 8033736:	2301      	movmi	r3, #1
 8033738:	2300      	movpl	r3, #0
 803373a:	42a7      	cmp	r7, r4
 803373c:	bfd4      	ite	le
 803373e:	2300      	movle	r3, #0
 8033740:	f003 0301 	andgt.w	r3, r3, #1
 8033744:	2b00      	cmp	r3, #0
 8033746:	d1e8      	bne.n	803371a <SSD_quick_sort_partition.constprop.0+0x13e>
 8033748:	1e75      	subs	r5, r6, #1
 803374a:	9905      	ldr	r1, [sp, #20]
 803374c:	9701      	str	r7, [sp, #4]
 803374e:	fb08 f205 	mul.w	r2, r8, r5
 8033752:	eb0a 0302 	add.w	r3, sl, r2
 8033756:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 803375a:	e000      	b.n	803375e <SSD_quick_sort_partition.constprop.0+0x182>
 803375c:	3d01      	subs	r5, #1
 803375e:	edd3 7a00 	vldr	s15, [r3]
 8033762:	4693      	mov	fp, r2
 8033764:	462e      	mov	r6, r5
 8033766:	440b      	add	r3, r1
 8033768:	eeb4 8ae7 	vcmpe.f32	s16, s15
 803376c:	eba2 0208 	sub.w	r2, r2, r8
 8033770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033774:	dcf2      	bgt.n	803375c <SSD_quick_sort_partition.constprop.0+0x180>
 8033776:	9701      	str	r7, [sp, #4]
 8033778:	e779      	b.n	803366e <SSD_quick_sort_partition.constprop.0+0x92>
 803377a:	bf00      	nop

0803377c <SSD_quick_sort_core.constprop.1>:
 803377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033780:	4293      	cmp	r3, r2
 8033782:	b08b      	sub	sp, #44	@ 0x2c
 8033784:	e9dd ba15 	ldrd	fp, sl, [sp, #84]	@ 0x54
 8033788:	9309      	str	r3, [sp, #36]	@ 0x24
 803378a:	f340 80c6 	ble.w	803391a <SSD_quick_sort_core.constprop.1+0x19e>
 803378e:	465e      	mov	r6, fp
 8033790:	4657      	mov	r7, sl
 8033792:	4691      	mov	r9, r2
 8033794:	468b      	mov	fp, r1
 8033796:	4682      	mov	sl, r0
 8033798:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803379a:	464a      	mov	r2, r9
 803379c:	4659      	mov	r1, fp
 803379e:	4650      	mov	r0, sl
 80337a0:	9300      	str	r3, [sp, #0]
 80337a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80337a4:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80337a8:	f7ff ff18 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 80337ac:	4548      	cmp	r0, r9
 80337ae:	9006      	str	r0, [sp, #24]
 80337b0:	f340 80ac 	ble.w	803390c <SSD_quick_sort_core.constprop.1+0x190>
 80337b4:	46b0      	mov	r8, r6
 80337b6:	463e      	mov	r6, r7
 80337b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80337ba:	464a      	mov	r2, r9
 80337bc:	9b06      	ldr	r3, [sp, #24]
 80337be:	4659      	mov	r1, fp
 80337c0:	4650      	mov	r0, sl
 80337c2:	9400      	str	r4, [sp, #0]
 80337c4:	e9cd 8601 	strd	r8, r6, [sp, #4]
 80337c8:	f7ff ff08 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 80337cc:	4548      	cmp	r0, r9
 80337ce:	9007      	str	r0, [sp, #28]
 80337d0:	f340 8093 	ble.w	80338fa <SSD_quick_sort_core.constprop.1+0x17e>
 80337d4:	4659      	mov	r1, fp
 80337d6:	46c3      	mov	fp, r8
 80337d8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80337da:	464a      	mov	r2, r9
 80337dc:	9b07      	ldr	r3, [sp, #28]
 80337de:	4650      	mov	r0, sl
 80337e0:	9400      	str	r4, [sp, #0]
 80337e2:	9104      	str	r1, [sp, #16]
 80337e4:	e9cd b601 	strd	fp, r6, [sp, #4]
 80337e8:	f7ff fef8 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 80337ec:	4548      	cmp	r0, r9
 80337ee:	9904      	ldr	r1, [sp, #16]
 80337f0:	9008      	str	r0, [sp, #32]
 80337f2:	dd79      	ble.n	80338e8 <SSD_quick_sort_core.constprop.1+0x16c>
 80337f4:	465f      	mov	r7, fp
 80337f6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80337f8:	464a      	mov	r2, r9
 80337fa:	9b08      	ldr	r3, [sp, #32]
 80337fc:	9000      	str	r0, [sp, #0]
 80337fe:	4650      	mov	r0, sl
 8033800:	9104      	str	r1, [sp, #16]
 8033802:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8033806:	f7ff fee9 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 803380a:	4548      	cmp	r0, r9
 803380c:	4683      	mov	fp, r0
 803380e:	9904      	ldr	r1, [sp, #16]
 8033810:	dd64      	ble.n	80338dc <SSD_quick_sort_core.constprop.1+0x160>
 8033812:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8033814:	465b      	mov	r3, fp
 8033816:	464a      	mov	r2, r9
 8033818:	9104      	str	r1, [sp, #16]
 803381a:	9000      	str	r0, [sp, #0]
 803381c:	4650      	mov	r0, sl
 803381e:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8033822:	f7ff fedb 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 8033826:	4548      	cmp	r0, r9
 8033828:	4604      	mov	r4, r0
 803382a:	9904      	ldr	r1, [sp, #16]
 803382c:	dd52      	ble.n	80338d4 <SSD_quick_sort_core.constprop.1+0x158>
 803382e:	f8cd b014 	str.w	fp, [sp, #20]
 8033832:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8033834:	4623      	mov	r3, r4
 8033836:	4650      	mov	r0, sl
 8033838:	9104      	str	r1, [sp, #16]
 803383a:	9200      	str	r2, [sp, #0]
 803383c:	464a      	mov	r2, r9
 803383e:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8033842:	f7ff fecb 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 8033846:	4581      	cmp	r9, r0
 8033848:	4683      	mov	fp, r0
 803384a:	9904      	ldr	r1, [sp, #16]
 803384c:	da3c      	bge.n	80338c8 <SSD_quick_sort_core.constprop.1+0x14c>
 803384e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8033850:	464a      	mov	r2, r9
 8033852:	4650      	mov	r0, sl
 8033854:	9104      	str	r1, [sp, #16]
 8033856:	9300      	str	r3, [sp, #0]
 8033858:	465b      	mov	r3, fp
 803385a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 803385e:	f7ff febd 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 8033862:	4548      	cmp	r0, r9
 8033864:	4680      	mov	r8, r0
 8033866:	9904      	ldr	r1, [sp, #16]
 8033868:	dd2a      	ble.n	80338c0 <SSD_quick_sort_core.constprop.1+0x144>
 803386a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803386c:	464a      	mov	r2, r9
 803386e:	4650      	mov	r0, sl
 8033870:	9104      	str	r1, [sp, #16]
 8033872:	9300      	str	r3, [sp, #0]
 8033874:	4643      	mov	r3, r8
 8033876:	e9cd 7601 	strd	r7, r6, [sp, #4]
 803387a:	f7ff feaf 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 803387e:	4548      	cmp	r0, r9
 8033880:	4605      	mov	r5, r0
 8033882:	9904      	ldr	r1, [sp, #16]
 8033884:	dd18      	ble.n	80338b8 <SSD_quick_sort_core.constprop.1+0x13c>
 8033886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8033888:	464a      	mov	r2, r9
 803388a:	4650      	mov	r0, sl
 803388c:	9104      	str	r1, [sp, #16]
 803388e:	9300      	str	r3, [sp, #0]
 8033890:	462b      	mov	r3, r5
 8033892:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8033896:	f7ff fea1 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 803389a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 803389c:	464a      	mov	r2, r9
 803389e:	f100 0901 	add.w	r9, r0, #1
 80338a2:	4603      	mov	r3, r0
 80338a4:	9100      	str	r1, [sp, #0]
 80338a6:	4650      	mov	r0, sl
 80338a8:	9904      	ldr	r1, [sp, #16]
 80338aa:	9602      	str	r6, [sp, #8]
 80338ac:	9701      	str	r7, [sp, #4]
 80338ae:	f7ff ff65 	bl	803377c <SSD_quick_sort_core.constprop.1>
 80338b2:	454d      	cmp	r5, r9
 80338b4:	9904      	ldr	r1, [sp, #16]
 80338b6:	dce6      	bgt.n	8033886 <SSD_quick_sort_core.constprop.1+0x10a>
 80338b8:	f105 0901 	add.w	r9, r5, #1
 80338bc:	45c8      	cmp	r8, r9
 80338be:	dcd4      	bgt.n	803386a <SSD_quick_sort_core.constprop.1+0xee>
 80338c0:	f108 0901 	add.w	r9, r8, #1
 80338c4:	45cb      	cmp	fp, r9
 80338c6:	dcc2      	bgt.n	803384e <SSD_quick_sort_core.constprop.1+0xd2>
 80338c8:	f10b 0901 	add.w	r9, fp, #1
 80338cc:	454c      	cmp	r4, r9
 80338ce:	dcb0      	bgt.n	8033832 <SSD_quick_sort_core.constprop.1+0xb6>
 80338d0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80338d4:	f104 0901 	add.w	r9, r4, #1
 80338d8:	45cb      	cmp	fp, r9
 80338da:	dc9a      	bgt.n	8033812 <SSD_quick_sort_core.constprop.1+0x96>
 80338dc:	f10b 0901 	add.w	r9, fp, #1
 80338e0:	9b08      	ldr	r3, [sp, #32]
 80338e2:	454b      	cmp	r3, r9
 80338e4:	dc87      	bgt.n	80337f6 <SSD_quick_sort_core.constprop.1+0x7a>
 80338e6:	46bb      	mov	fp, r7
 80338e8:	9b08      	ldr	r3, [sp, #32]
 80338ea:	f103 0901 	add.w	r9, r3, #1
 80338ee:	9b07      	ldr	r3, [sp, #28]
 80338f0:	454b      	cmp	r3, r9
 80338f2:	f73f af71 	bgt.w	80337d8 <SSD_quick_sort_core.constprop.1+0x5c>
 80338f6:	46d8      	mov	r8, fp
 80338f8:	468b      	mov	fp, r1
 80338fa:	9b07      	ldr	r3, [sp, #28]
 80338fc:	f103 0901 	add.w	r9, r3, #1
 8033900:	9b06      	ldr	r3, [sp, #24]
 8033902:	454b      	cmp	r3, r9
 8033904:	f73f af58 	bgt.w	80337b8 <SSD_quick_sort_core.constprop.1+0x3c>
 8033908:	4637      	mov	r7, r6
 803390a:	4646      	mov	r6, r8
 803390c:	9b06      	ldr	r3, [sp, #24]
 803390e:	f103 0901 	add.w	r9, r3, #1
 8033912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033914:	454b      	cmp	r3, r9
 8033916:	f73f af3f 	bgt.w	8033798 <SSD_quick_sort_core.constprop.1+0x1c>
 803391a:	b00b      	add	sp, #44	@ 0x2c
 803391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033920 <ssd_st_pp_getNNBoxes>:
 8033920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033924:	f04f 33ff 	mov.w	r3, #4294967295
 8033928:	2700      	movs	r7, #0
 803392a:	f04f 0800 	mov.w	r8, #0
 803392e:	ed2d 8b02 	vpush	{d8}
 8033932:	b082      	sub	sp, #8
 8033934:	614f      	str	r7, [r1, #20]
 8033936:	9301      	str	r3, [sp, #4]
 8033938:	684b      	ldr	r3, [r1, #4]
 803393a:	f8cd 8000 	str.w	r8, [sp]
 803393e:	42bb      	cmp	r3, r7
 8033940:	f340 8101 	ble.w	8033b46 <ssd_st_pp_getNNBoxes+0x226>
 8033944:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 8033948:	460c      	mov	r4, r1
 803394a:	4605      	mov	r5, r0
 803394c:	463e      	mov	r6, r7
 803394e:	e005      	b.n	803395c <ssd_st_pp_getNNBoxes+0x3c>
 8033950:	3601      	adds	r6, #1
 8033952:	6863      	ldr	r3, [r4, #4]
 8033954:	3710      	adds	r7, #16
 8033956:	42b3      	cmp	r3, r6
 8033958:	f340 80f5 	ble.w	8033b46 <ssd_st_pp_getNNBoxes+0x226>
 803395c:	6820      	ldr	r0, [r4, #0]
 803395e:	ab01      	add	r3, sp, #4
 8033960:	68a9      	ldr	r1, [r5, #8]
 8033962:	466a      	mov	r2, sp
 8033964:	fb06 f000 	mul.w	r0, r6, r0
 8033968:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 803396c:	f8c1 8000 	str.w	r8, [r1]
 8033970:	6821      	ldr	r1, [r4, #0]
 8033972:	68a8      	ldr	r0, [r5, #8]
 8033974:	fb06 fc01 	mul.w	ip, r6, r1
 8033978:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 803397c:	f000 fa54 	bl	8033e28 <objdetect_maxi>
 8033980:	ed94 7a03 	vldr	s14, [r4, #12]
 8033984:	eddd 7a00 	vldr	s15, [sp]
 8033988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 803398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033990:	d8de      	bhi.n	8033950 <ssd_st_pp_getNNBoxes+0x30>
 8033992:	6823      	ldr	r3, [r4, #0]
 8033994:	2b00      	cmp	r3, #0
 8033996:	dd11      	ble.n	80339bc <ssd_st_pp_getNNBoxes+0x9c>
 8033998:	2200      	movs	r2, #0
 803399a:	68a9      	ldr	r1, [r5, #8]
 803399c:	fb06 2c03 	mla	ip, r6, r3, r2
 80339a0:	6960      	ldr	r0, [r4, #20]
 80339a2:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80339a6:	fb00 2303 	mla	r3, r0, r3, r2
 80339aa:	3201      	adds	r2, #1
 80339ac:	f8dc 0000 	ldr.w	r0, [ip]
 80339b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80339b4:	6018      	str	r0, [r3, #0]
 80339b6:	6823      	ldr	r3, [r4, #0]
 80339b8:	4293      	cmp	r3, r2
 80339ba:	dcee      	bgt.n	803399a <ssd_st_pp_getNNBoxes+0x7a>
 80339bc:	6829      	ldr	r1, [r5, #0]
 80339be:	f107 0208 	add.w	r2, r7, #8
 80339c2:	6960      	ldr	r0, [r4, #20]
 80339c4:	f107 0c04 	add.w	ip, r7, #4
 80339c8:	686b      	ldr	r3, [r5, #4]
 80339ca:	3601      	adds	r6, #1
 80339cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80339d0:	4439      	add	r1, r7
 80339d2:	ed91 7a00 	vldr	s14, [r1]
 80339d6:	1899      	adds	r1, r3, r2
 80339d8:	443b      	add	r3, r7
 80339da:	edd1 7a00 	vldr	s15, [r1]
 80339de:	edd3 6a00 	vldr	s13, [r3]
 80339e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80339e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80339ea:	edc0 7a00 	vstr	s15, [r0]
 80339ee:	6961      	ldr	r1, [r4, #20]
 80339f0:	e9d5 0300 	ldrd	r0, r3, [r5]
 80339f4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80339f8:	4410      	add	r0, r2
 80339fa:	ed90 7a00 	vldr	s14, [r0]
 80339fe:	1898      	adds	r0, r3, r2
 8033a00:	443b      	add	r3, r7
 8033a02:	edd0 7a00 	vldr	s15, [r0]
 8033a06:	edd3 6a00 	vldr	s13, [r3]
 8033a0a:	f107 030c 	add.w	r3, r7, #12
 8033a0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8033a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8033a16:	edc1 7a02 	vstr	s15, [r1, #8]
 8033a1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8033a1e:	eb00 0e0c 	add.w	lr, r0, ip
 8033a22:	ed9e 7a00 	vldr	s14, [lr]
 8033a26:	eb01 0e03 	add.w	lr, r1, r3
 8033a2a:	4461      	add	r1, ip
 8033a2c:	edde 7a00 	vldr	s15, [lr]
 8033a30:	edd1 6a00 	vldr	s13, [r1]
 8033a34:	6961      	ldr	r1, [r4, #20]
 8033a36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8033a3a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8033a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8033a42:	edc1 7a01 	vstr	s15, [r1, #4]
 8033a46:	6961      	ldr	r1, [r4, #20]
 8033a48:	e9d5 e000 	ldrd	lr, r0, [r5]
 8033a4c:	eb0e 1101 	add.w	r1, lr, r1, lsl #4
 8033a50:	449e      	add	lr, r3
 8033a52:	ed9e 7a00 	vldr	s14, [lr]
 8033a56:	eb00 0e03 	add.w	lr, r0, r3
 8033a5a:	4460      	add	r0, ip
 8033a5c:	edde 7a00 	vldr	s15, [lr]
 8033a60:	edd0 6a00 	vldr	s13, [r0]
 8033a64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8033a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8033a6c:	edc1 7a03 	vstr	s15, [r1, #12]
 8033a70:	6960      	ldr	r0, [r4, #20]
 8033a72:	6829      	ldr	r1, [r5, #0]
 8033a74:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8033a78:	6868      	ldr	r0, [r5, #4]
 8033a7a:	4438      	add	r0, r7
 8033a7c:	edd1 7a00 	vldr	s15, [r1]
 8033a80:	3710      	adds	r7, #16
 8033a82:	ed90 7a00 	vldr	s14, [r0]
 8033a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033a8a:	edc1 7a00 	vstr	s15, [r1]
 8033a8e:	6961      	ldr	r1, [r4, #20]
 8033a90:	6828      	ldr	r0, [r5, #0]
 8033a92:	0109      	lsls	r1, r1, #4
 8033a94:	3104      	adds	r1, #4
 8033a96:	4401      	add	r1, r0
 8033a98:	6868      	ldr	r0, [r5, #4]
 8033a9a:	4484      	add	ip, r0
 8033a9c:	edd1 7a00 	vldr	s15, [r1]
 8033aa0:	ed9c 7a00 	vldr	s14, [ip]
 8033aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033aa8:	edc1 7a00 	vstr	s15, [r1]
 8033aac:	6961      	ldr	r1, [r4, #20]
 8033aae:	6828      	ldr	r0, [r5, #0]
 8033ab0:	0109      	lsls	r1, r1, #4
 8033ab2:	3108      	adds	r1, #8
 8033ab4:	4401      	add	r1, r0
 8033ab6:	6868      	ldr	r0, [r5, #4]
 8033ab8:	4402      	add	r2, r0
 8033aba:	edd1 7a00 	vldr	s15, [r1]
 8033abe:	ed92 7a00 	vldr	s14, [r2]
 8033ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033ac6:	edc1 7a00 	vstr	s15, [r1]
 8033aca:	6962      	ldr	r2, [r4, #20]
 8033acc:	6829      	ldr	r1, [r5, #0]
 8033ace:	0112      	lsls	r2, r2, #4
 8033ad0:	320c      	adds	r2, #12
 8033ad2:	440a      	add	r2, r1
 8033ad4:	6869      	ldr	r1, [r5, #4]
 8033ad6:	440b      	add	r3, r1
 8033ad8:	edd2 7a00 	vldr	s15, [r2]
 8033adc:	ed93 7a00 	vldr	s14, [r3]
 8033ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033ae4:	edc2 7a00 	vstr	s15, [r2]
 8033ae8:	6962      	ldr	r2, [r4, #20]
 8033aea:	682b      	ldr	r3, [r5, #0]
 8033aec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8033af0:	ed93 6a01 	vldr	s12, [r3, #4]
 8033af4:	ed93 7a03 	vldr	s14, [r3, #12]
 8033af8:	edd3 6a00 	vldr	s13, [r3]
 8033afc:	ee37 7a46 	vsub.f32	s14, s14, s12
 8033b00:	edd3 7a02 	vldr	s15, [r3, #8]
 8033b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8033b08:	eea7 6a08 	vfma.f32	s12, s14, s16
 8033b0c:	eee7 6a88 	vfma.f32	s13, s15, s16
 8033b10:	ed83 6a00 	vstr	s12, [r3]
 8033b14:	6962      	ldr	r2, [r4, #20]
 8033b16:	682b      	ldr	r3, [r5, #0]
 8033b18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8033b1c:	edc3 6a01 	vstr	s13, [r3, #4]
 8033b20:	6962      	ldr	r2, [r4, #20]
 8033b22:	682b      	ldr	r3, [r5, #0]
 8033b24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8033b28:	ed83 7a02 	vstr	s14, [r3, #8]
 8033b2c:	6962      	ldr	r2, [r4, #20]
 8033b2e:	682b      	ldr	r3, [r5, #0]
 8033b30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8033b34:	edc3 7a03 	vstr	s15, [r3, #12]
 8033b38:	6963      	ldr	r3, [r4, #20]
 8033b3a:	3301      	adds	r3, #1
 8033b3c:	6163      	str	r3, [r4, #20]
 8033b3e:	6863      	ldr	r3, [r4, #4]
 8033b40:	42b3      	cmp	r3, r6
 8033b42:	f73f af0b 	bgt.w	803395c <ssd_st_pp_getNNBoxes+0x3c>
 8033b46:	2000      	movs	r0, #0
 8033b48:	b002      	add	sp, #8
 8033b4a:	ecbd 8b02 	vpop	{d8}
 8033b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033b52:	bf00      	nop

08033b54 <ssd_st_pp_nms_filtering>:
 8033b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033b58:	ed2d 8b02 	vpush	{d8}
 8033b5c:	b089      	sub	sp, #36	@ 0x24
 8033b5e:	680a      	ldr	r2, [r1, #0]
 8033b60:	af04      	add	r7, sp, #16
 8033b62:	2a04      	cmp	r2, #4
 8033b64:	4613      	mov	r3, r2
 8033b66:	bfb8      	it	lt
 8033b68:	2304      	movlt	r3, #4
 8033b6a:	2a00      	cmp	r2, #0
 8033b6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8033b70:	f103 0307 	add.w	r3, r3, #7
 8033b74:	f023 0307 	bic.w	r3, r3, #7
 8033b78:	ebad 0d03 	sub.w	sp, sp, r3
 8033b7c:	ab04      	add	r3, sp, #16
 8033b7e:	603b      	str	r3, [r7, #0]
 8033b80:	f340 80b9 	ble.w	8033cf6 <ssd_st_pp_nms_filtering+0x1a2>
 8033b84:	460c      	mov	r4, r1
 8033b86:	4680      	mov	r8, r0
 8033b88:	694b      	ldr	r3, [r1, #20]
 8033b8a:	2600      	movs	r6, #0
 8033b8c:	ed9f 8a5e 	vldr	s16, [pc, #376]	@ 8033d08 <ssd_st_pp_nms_filtering+0x1b4>
 8033b90:	4691      	mov	r9, r2
 8033b92:	1e5a      	subs	r2, r3, #1
 8033b94:	2a00      	cmp	r2, #0
 8033b96:	60fa      	str	r2, [r7, #12]
 8033b98:	dd3b      	ble.n	8033c12 <ssd_st_pp_nms_filtering+0xbe>
 8033b9a:	f8d8 1000 	ldr.w	r1, [r8]
 8033b9e:	2500      	movs	r5, #0
 8033ba0:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8033ba4:	f8c7 8008 	str.w	r8, [r7, #8]
 8033ba8:	468a      	mov	sl, r1
 8033baa:	46b0      	mov	r8, r6
 8033bac:	683e      	ldr	r6, [r7, #0]
 8033bae:	607c      	str	r4, [r7, #4]
 8033bb0:	68fb      	ldr	r3, [r7, #12]
 8033bb2:	462a      	mov	r2, r5
 8033bb4:	4651      	mov	r1, sl
 8033bb6:	4658      	mov	r0, fp
 8033bb8:	f8cd 8000 	str.w	r8, [sp]
 8033bbc:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8033bc0:	f7ff fd0c 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 8033bc4:	42a8      	cmp	r0, r5
 8033bc6:	4604      	mov	r4, r0
 8033bc8:	dd19      	ble.n	8033bfe <ssd_st_pp_nms_filtering+0xaa>
 8033bca:	4644      	mov	r4, r8
 8033bcc:	4680      	mov	r8, r0
 8033bce:	462a      	mov	r2, r5
 8033bd0:	4643      	mov	r3, r8
 8033bd2:	4651      	mov	r1, sl
 8033bd4:	4658      	mov	r0, fp
 8033bd6:	9400      	str	r4, [sp, #0]
 8033bd8:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8033bdc:	f7ff fcfe 	bl	80335dc <SSD_quick_sort_partition.constprop.0>
 8033be0:	4603      	mov	r3, r0
 8033be2:	462a      	mov	r2, r5
 8033be4:	4651      	mov	r1, sl
 8033be6:	1c5d      	adds	r5, r3, #1
 8033be8:	4658      	mov	r0, fp
 8033bea:	9400      	str	r4, [sp, #0]
 8033bec:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8033bf0:	f7ff fdc4 	bl	803377c <SSD_quick_sort_core.constprop.1>
 8033bf4:	45a8      	cmp	r8, r5
 8033bf6:	dcea      	bgt.n	8033bce <ssd_st_pp_nms_filtering+0x7a>
 8033bf8:	4643      	mov	r3, r8
 8033bfa:	46a0      	mov	r8, r4
 8033bfc:	461c      	mov	r4, r3
 8033bfe:	1c65      	adds	r5, r4, #1
 8033c00:	68fb      	ldr	r3, [r7, #12]
 8033c02:	42ab      	cmp	r3, r5
 8033c04:	dcd4      	bgt.n	8033bb0 <ssd_st_pp_nms_filtering+0x5c>
 8033c06:	4646      	mov	r6, r8
 8033c08:	e9d7 4801 	ldrd	r4, r8, [r7, #4]
 8033c0c:	6963      	ldr	r3, [r4, #20]
 8033c0e:	f8d4 9000 	ldr.w	r9, [r4]
 8033c12:	2b00      	cmp	r3, #0
 8033c14:	dd6b      	ble.n	8033cee <ssd_st_pp_nms_filtering+0x19a>
 8033c16:	2501      	movs	r5, #1
 8033c18:	4648      	mov	r0, r9
 8033c1a:	e003      	b.n	8033c24 <ssd_st_pp_nms_filtering+0xd0>
 8033c1c:	46aa      	mov	sl, r5
 8033c1e:	3501      	adds	r5, #1
 8033c20:	4553      	cmp	r3, sl
 8033c22:	dd3e      	ble.n	8033ca2 <ssd_st_pp_nms_filtering+0x14e>
 8033c24:	1e69      	subs	r1, r5, #1
 8033c26:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8033c2a:	fb00 6101 	mla	r1, r0, r1, r6
 8033c2e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8033c32:	edd1 7a00 	vldr	s15, [r1]
 8033c36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8033c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033c3e:	d0ed      	beq.n	8033c1c <ssd_st_pp_nms_filtering+0xc8>
 8033c40:	f8d8 1000 	ldr.w	r1, [r8]
 8033c44:	429d      	cmp	r5, r3
 8033c46:	46aa      	mov	sl, r5
 8033c48:	eb01 1b05 	add.w	fp, r1, r5, lsl #4
 8033c4c:	f1ab 0b10 	sub.w	fp, fp, #16
 8033c50:	da58      	bge.n	8033d04 <ssd_st_pp_nms_filtering+0x1b0>
 8033c52:	46a9      	mov	r9, r5
 8033c54:	e00f      	b.n	8033c76 <ssd_st_pp_nms_filtering+0x122>
 8033c56:	6822      	ldr	r2, [r4, #0]
 8033c58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8033c5c:	fb02 6209 	mla	r2, r2, r9, r6
 8033c60:	f109 0901 	add.w	r9, r9, #1
 8033c64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8033c68:	ed83 8a00 	vstr	s16, [r3]
 8033c6c:	6963      	ldr	r3, [r4, #20]
 8033c6e:	4599      	cmp	r9, r3
 8033c70:	da12      	bge.n	8033c98 <ssd_st_pp_nms_filtering+0x144>
 8033c72:	f8d8 1000 	ldr.w	r1, [r8]
 8033c76:	eb01 1109 	add.w	r1, r1, r9, lsl #4
 8033c7a:	4658      	mov	r0, fp
 8033c7c:	f000 f8f6 	bl	8033e6c <objdetect_box_iou>
 8033c80:	edd4 7a04 	vldr	s15, [r4, #16]
 8033c84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8033c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033c8c:	dce3      	bgt.n	8033c56 <ssd_st_pp_nms_filtering+0x102>
 8033c8e:	f109 0901 	add.w	r9, r9, #1
 8033c92:	6963      	ldr	r3, [r4, #20]
 8033c94:	454b      	cmp	r3, r9
 8033c96:	dcec      	bgt.n	8033c72 <ssd_st_pp_nms_filtering+0x11e>
 8033c98:	4553      	cmp	r3, sl
 8033c9a:	6820      	ldr	r0, [r4, #0]
 8033c9c:	f105 0501 	add.w	r5, r5, #1
 8033ca0:	dcc0      	bgt.n	8033c24 <ssd_st_pp_nms_filtering+0xd0>
 8033ca2:	2b00      	cmp	r3, #0
 8033ca4:	4681      	mov	r9, r0
 8033ca6:	dd22      	ble.n	8033cee <ssd_st_pp_nms_filtering+0x19a>
 8033ca8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8033cac:	2000      	movs	r0, #0
 8033cae:	464d      	mov	r5, r9
 8033cb0:	4684      	mov	ip, r0
 8033cb2:	e009      	b.n	8033cc8 <ssd_st_pp_nms_filtering+0x174>
 8033cb4:	68a1      	ldr	r1, [r4, #8]
 8033cb6:	4561      	cmp	r1, ip
 8033cb8:	dd11      	ble.n	8033cde <ssd_st_pp_nms_filtering+0x18a>
 8033cba:	3001      	adds	r0, #1
 8033cbc:	f10c 0c01 	add.w	ip, ip, #1
 8033cc0:	4298      	cmp	r0, r3
 8033cc2:	da13      	bge.n	8033cec <ssd_st_pp_nms_filtering+0x198>
 8033cc4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8033cc8:	fb05 6100 	mla	r1, r5, r0, r6
 8033ccc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8033cd0:	edd2 7a00 	vldr	s15, [r2]
 8033cd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8033cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033cdc:	d1ea      	bne.n	8033cb4 <ssd_st_pp_nms_filtering+0x160>
 8033cde:	ed82 8a00 	vstr	s16, [r2]
 8033ce2:	3001      	adds	r0, #1
 8033ce4:	6963      	ldr	r3, [r4, #20]
 8033ce6:	6825      	ldr	r5, [r4, #0]
 8033ce8:	4298      	cmp	r0, r3
 8033cea:	dbeb      	blt.n	8033cc4 <ssd_st_pp_nms_filtering+0x170>
 8033cec:	46a9      	mov	r9, r5
 8033cee:	3601      	adds	r6, #1
 8033cf0:	454e      	cmp	r6, r9
 8033cf2:	f6ff af4e 	blt.w	8033b92 <ssd_st_pp_nms_filtering+0x3e>
 8033cf6:	2000      	movs	r0, #0
 8033cf8:	3714      	adds	r7, #20
 8033cfa:	46bd      	mov	sp, r7
 8033cfc:	ecbd 8b02 	vpop	{d8}
 8033d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033d04:	4681      	mov	r9, r0
 8033d06:	e7d1      	b.n	8033cac <ssd_st_pp_nms_filtering+0x158>
 8033d08:	00000000 	.word	0x00000000

08033d0c <ssd_st_pp_score_filtering>:
 8033d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8033d10:	f04f 33ff 	mov.w	r3, #4294967295
 8033d14:	b083      	sub	sp, #12
 8033d16:	2400      	movs	r4, #0
 8033d18:	460e      	mov	r6, r1
 8033d1a:	9301      	str	r3, [sp, #4]
 8033d1c:	6953      	ldr	r3, [r2, #20]
 8033d1e:	9400      	str	r4, [sp, #0]
 8033d20:	2b00      	cmp	r3, #0
 8033d22:	dd5d      	ble.n	8033de0 <ssd_st_pp_score_filtering+0xd4>
 8033d24:	2400      	movs	r4, #0
 8033d26:	4617      	mov	r7, r2
 8033d28:	4680      	mov	r8, r0
 8033d2a:	2504      	movs	r5, #4
 8033d2c:	46a1      	mov	r9, r4
 8033d2e:	6839      	ldr	r1, [r7, #0]
 8033d30:	ab01      	add	r3, sp, #4
 8033d32:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8033d36:	466a      	mov	r2, sp
 8033d38:	fb04 fc01 	mul.w	ip, r4, r1
 8033d3c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8033d40:	f000 f872 	bl	8033e28 <objdetect_maxi>
 8033d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8033d48:	eddd 7a00 	vldr	s15, [sp]
 8033d4c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8033d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8033d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033d58:	d837      	bhi.n	8033dca <ssd_st_pp_score_filtering+0xbe>
 8033d5a:	6832      	ldr	r2, [r6, #0]
 8033d5c:	f109 0901 	add.w	r9, r9, #1
 8033d60:	9901      	ldr	r1, [sp, #4]
 8033d62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8033d66:	6151      	str	r1, [r2, #20]
 8033d68:	6832      	ldr	r2, [r6, #0]
 8033d6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8033d6e:	edc2 7a04 	vstr	s15, [r2, #16]
 8033d72:	f8d8 1000 	ldr.w	r1, [r8]
 8033d76:	6832      	ldr	r2, [r6, #0]
 8033d78:	4429      	add	r1, r5
 8033d7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8033d7e:	6809      	ldr	r1, [r1, #0]
 8033d80:	6011      	str	r1, [r2, #0]
 8033d82:	f8d8 1000 	ldr.w	r1, [r8]
 8033d86:	6832      	ldr	r2, [r6, #0]
 8033d88:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8033d8c:	3401      	adds	r4, #1
 8033d8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8033d92:	6809      	ldr	r1, [r1, #0]
 8033d94:	6051      	str	r1, [r2, #4]
 8033d96:	f8d8 1000 	ldr.w	r1, [r8]
 8033d9a:	6832      	ldr	r2, [r6, #0]
 8033d9c:	4429      	add	r1, r5
 8033d9e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8033da2:	6889      	ldr	r1, [r1, #8]
 8033da4:	6091      	str	r1, [r2, #8]
 8033da6:	f8d8 1000 	ldr.w	r1, [r8]
 8033daa:	6832      	ldr	r2, [r6, #0]
 8033dac:	4429      	add	r1, r5
 8033dae:	3510      	adds	r5, #16
 8033db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8033db4:	684a      	ldr	r2, [r1, #4]
 8033db6:	60da      	str	r2, [r3, #12]
 8033db8:	697b      	ldr	r3, [r7, #20]
 8033dba:	42a3      	cmp	r3, r4
 8033dbc:	dcb7      	bgt.n	8033d2e <ssd_st_pp_score_filtering+0x22>
 8033dbe:	2000      	movs	r0, #0
 8033dc0:	f8c6 9004 	str.w	r9, [r6, #4]
 8033dc4:	b003      	add	sp, #12
 8033dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033dca:	3401      	adds	r4, #1
 8033dcc:	697b      	ldr	r3, [r7, #20]
 8033dce:	3510      	adds	r5, #16
 8033dd0:	42a3      	cmp	r3, r4
 8033dd2:	dcac      	bgt.n	8033d2e <ssd_st_pp_score_filtering+0x22>
 8033dd4:	2000      	movs	r0, #0
 8033dd6:	f8c6 9004 	str.w	r9, [r6, #4]
 8033dda:	b003      	add	sp, #12
 8033ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033de0:	f04f 0900 	mov.w	r9, #0
 8033de4:	2000      	movs	r0, #0
 8033de6:	f8c6 9004 	str.w	r9, [r6, #4]
 8033dea:	b003      	add	sp, #12
 8033dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08033df0 <objdetect_ssd_st_pp_reset>:
 8033df0:	2200      	movs	r2, #0
 8033df2:	4603      	mov	r3, r0
 8033df4:	4610      	mov	r0, r2
 8033df6:	615a      	str	r2, [r3, #20]
 8033df8:	4770      	bx	lr
 8033dfa:	bf00      	nop

08033dfc <objdetect_ssd_st_pp_process>:
 8033dfc:	b570      	push	{r4, r5, r6, lr}
 8033dfe:	460e      	mov	r6, r1
 8033e00:	4611      	mov	r1, r2
 8033e02:	4614      	mov	r4, r2
 8033e04:	4605      	mov	r5, r0
 8033e06:	f7ff fd8b 	bl	8033920 <ssd_st_pp_getNNBoxes>
 8033e0a:	b100      	cbz	r0, 8033e0e <objdetect_ssd_st_pp_process+0x12>
 8033e0c:	bd70      	pop	{r4, r5, r6, pc}
 8033e0e:	4621      	mov	r1, r4
 8033e10:	4628      	mov	r0, r5
 8033e12:	f7ff fe9f 	bl	8033b54 <ssd_st_pp_nms_filtering>
 8033e16:	2800      	cmp	r0, #0
 8033e18:	d1f8      	bne.n	8033e0c <objdetect_ssd_st_pp_process+0x10>
 8033e1a:	4622      	mov	r2, r4
 8033e1c:	4631      	mov	r1, r6
 8033e1e:	4628      	mov	r0, r5
 8033e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8033e24:	f7ff bf72 	b.w	8033d0c <ssd_st_pp_score_filtering>

08033e28 <objdetect_maxi>:
 8033e28:	b410      	push	{r4}
 8033e2a:	2400      	movs	r4, #0
 8033e2c:	2901      	cmp	r1, #1
 8033e2e:	601c      	str	r4, [r3, #0]
 8033e30:	ed90 7a00 	vldr	s14, [r0]
 8033e34:	ed82 7a00 	vstr	s14, [r2]
 8033e38:	dd15      	ble.n	8033e66 <objdetect_maxi+0x3e>
 8033e3a:	f100 0c04 	add.w	ip, r0, #4
 8033e3e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8033e42:	2101      	movs	r1, #1
 8033e44:	e001      	b.n	8033e4a <objdetect_maxi+0x22>
 8033e46:	ed92 7a00 	vldr	s14, [r2]
 8033e4a:	ecfc 7a01 	vldmia	ip!, {s15}
 8033e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8033e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033e56:	dd02      	ble.n	8033e5e <objdetect_maxi+0x36>
 8033e58:	edc2 7a00 	vstr	s15, [r2]
 8033e5c:	6019      	str	r1, [r3, #0]
 8033e5e:	4560      	cmp	r0, ip
 8033e60:	f101 0101 	add.w	r1, r1, #1
 8033e64:	d1ef      	bne.n	8033e46 <objdetect_maxi+0x1e>
 8033e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8033e6a:	4770      	bx	lr

08033e6c <objdetect_box_iou>:
 8033e6c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8033e70:	edd0 7a00 	vldr	s15, [r0]
 8033e74:	ed91 7a00 	vldr	s14, [r1]
 8033e78:	ed91 6a02 	vldr	s12, [r1, #8]
 8033e7c:	eeb0 4a67 	vmov.f32	s8, s15
 8033e80:	eef0 1a47 	vmov.f32	s3, s14
 8033e84:	ed90 3a02 	vldr	s6, [r0, #8]
 8033e88:	eea6 7a26 	vfma.f32	s14, s12, s13
 8033e8c:	edd1 5a01 	vldr	s11, [r1, #4]
 8033e90:	eea3 4a66 	vfms.f32	s8, s6, s13
 8033e94:	edd0 3a03 	vldr	s7, [r0, #12]
 8033e98:	eee3 7a26 	vfma.f32	s15, s6, s13
 8033e9c:	edd1 2a03 	vldr	s5, [r1, #12]
 8033ea0:	eee6 1a66 	vfms.f32	s3, s12, s13
 8033ea4:	eeb0 2a65 	vmov.f32	s4, s11
 8033ea8:	eee2 5aa6 	vfma.f32	s11, s5, s13
 8033eac:	eeb0 5a47 	vmov.f32	s10, s14
 8033eb0:	ed90 7a01 	vldr	s14, [r0, #4]
 8033eb4:	eea2 2ae6 	vfms.f32	s4, s5, s13
 8033eb8:	eef0 4a47 	vmov.f32	s9, s14
 8033ebc:	fe84 4a21 	vmaxnm.f32	s8, s8, s3
 8033ec0:	fec7 7ac5 	vminnm.f32	s15, s15, s10
 8033ec4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8033ec8:	eea3 7aa6 	vfma.f32	s14, s7, s13
 8033ecc:	eee3 4ae6 	vfms.f32	s9, s7, s13
 8033ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8033ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033ed8:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8033edc:	fec4 6a82 	vmaxnm.f32	s13, s9, s4
 8033ee0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8033ee4:	d419      	bmi.n	8033f1a <objdetect_box_iou+0xae>
 8033ee6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8033eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033eee:	d414      	bmi.n	8033f1a <objdetect_box_iou+0xae>
 8033ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8033ef4:	ee26 6a22 	vmul.f32	s12, s12, s5
 8033ef8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8033efc:	eea3 6a23 	vfma.f32	s12, s6, s7
 8033f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033f04:	ee36 6a67 	vsub.f32	s12, s12, s15
 8033f08:	d007      	beq.n	8033f1a <objdetect_box_iou+0xae>
 8033f0a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8033f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033f12:	d002      	beq.n	8033f1a <objdetect_box_iou+0xae>
 8033f14:	ee87 0a86 	vdiv.f32	s0, s15, s12
 8033f18:	4770      	bx	lr
 8033f1a:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8033f20 <objdetect_box_iou+0xb4>
 8033f1e:	4770      	bx	lr
 8033f20:	00000000 	.word	0x00000000

08033f24 <malloc>:
 8033f24:	4b02      	ldr	r3, [pc, #8]	@ (8033f30 <malloc+0xc>)
 8033f26:	4601      	mov	r1, r0
 8033f28:	6818      	ldr	r0, [r3, #0]
 8033f2a:	f000 b825 	b.w	8033f78 <_malloc_r>
 8033f2e:	bf00      	nop
 8033f30:	240082f8 	.word	0x240082f8

08033f34 <sbrk_aligned>:
 8033f34:	b570      	push	{r4, r5, r6, lr}
 8033f36:	4e0f      	ldr	r6, [pc, #60]	@ (8033f74 <sbrk_aligned+0x40>)
 8033f38:	460c      	mov	r4, r1
 8033f3a:	6831      	ldr	r1, [r6, #0]
 8033f3c:	4605      	mov	r5, r0
 8033f3e:	b911      	cbnz	r1, 8033f46 <sbrk_aligned+0x12>
 8033f40:	f000 fec0 	bl	8034cc4 <_sbrk_r>
 8033f44:	6030      	str	r0, [r6, #0]
 8033f46:	4621      	mov	r1, r4
 8033f48:	4628      	mov	r0, r5
 8033f4a:	f000 febb 	bl	8034cc4 <_sbrk_r>
 8033f4e:	1c43      	adds	r3, r0, #1
 8033f50:	d103      	bne.n	8033f5a <sbrk_aligned+0x26>
 8033f52:	f04f 34ff 	mov.w	r4, #4294967295
 8033f56:	4620      	mov	r0, r4
 8033f58:	bd70      	pop	{r4, r5, r6, pc}
 8033f5a:	1cc4      	adds	r4, r0, #3
 8033f5c:	f024 0403 	bic.w	r4, r4, #3
 8033f60:	42a0      	cmp	r0, r4
 8033f62:	d0f8      	beq.n	8033f56 <sbrk_aligned+0x22>
 8033f64:	1a21      	subs	r1, r4, r0
 8033f66:	4628      	mov	r0, r5
 8033f68:	f000 feac 	bl	8034cc4 <_sbrk_r>
 8033f6c:	3001      	adds	r0, #1
 8033f6e:	d1f2      	bne.n	8033f56 <sbrk_aligned+0x22>
 8033f70:	e7ef      	b.n	8033f52 <sbrk_aligned+0x1e>
 8033f72:	bf00      	nop
 8033f74:	24009a78 	.word	0x24009a78

08033f78 <_malloc_r>:
 8033f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033f7c:	1ccd      	adds	r5, r1, #3
 8033f7e:	f025 0503 	bic.w	r5, r5, #3
 8033f82:	3508      	adds	r5, #8
 8033f84:	2d0c      	cmp	r5, #12
 8033f86:	bf38      	it	cc
 8033f88:	250c      	movcc	r5, #12
 8033f8a:	2d00      	cmp	r5, #0
 8033f8c:	4606      	mov	r6, r0
 8033f8e:	db01      	blt.n	8033f94 <_malloc_r+0x1c>
 8033f90:	42a9      	cmp	r1, r5
 8033f92:	d904      	bls.n	8033f9e <_malloc_r+0x26>
 8033f94:	230c      	movs	r3, #12
 8033f96:	6033      	str	r3, [r6, #0]
 8033f98:	2000      	movs	r0, #0
 8033f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8034074 <_malloc_r+0xfc>
 8033fa2:	f000 f869 	bl	8034078 <__malloc_lock>
 8033fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8033faa:	461c      	mov	r4, r3
 8033fac:	bb44      	cbnz	r4, 8034000 <_malloc_r+0x88>
 8033fae:	4629      	mov	r1, r5
 8033fb0:	4630      	mov	r0, r6
 8033fb2:	f7ff ffbf 	bl	8033f34 <sbrk_aligned>
 8033fb6:	1c43      	adds	r3, r0, #1
 8033fb8:	4604      	mov	r4, r0
 8033fba:	d158      	bne.n	803406e <_malloc_r+0xf6>
 8033fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8033fc0:	4627      	mov	r7, r4
 8033fc2:	2f00      	cmp	r7, #0
 8033fc4:	d143      	bne.n	803404e <_malloc_r+0xd6>
 8033fc6:	2c00      	cmp	r4, #0
 8033fc8:	d04b      	beq.n	8034062 <_malloc_r+0xea>
 8033fca:	6823      	ldr	r3, [r4, #0]
 8033fcc:	4639      	mov	r1, r7
 8033fce:	4630      	mov	r0, r6
 8033fd0:	eb04 0903 	add.w	r9, r4, r3
 8033fd4:	f000 fe76 	bl	8034cc4 <_sbrk_r>
 8033fd8:	4581      	cmp	r9, r0
 8033fda:	d142      	bne.n	8034062 <_malloc_r+0xea>
 8033fdc:	6821      	ldr	r1, [r4, #0]
 8033fde:	1a6d      	subs	r5, r5, r1
 8033fe0:	4629      	mov	r1, r5
 8033fe2:	4630      	mov	r0, r6
 8033fe4:	f7ff ffa6 	bl	8033f34 <sbrk_aligned>
 8033fe8:	3001      	adds	r0, #1
 8033fea:	d03a      	beq.n	8034062 <_malloc_r+0xea>
 8033fec:	6823      	ldr	r3, [r4, #0]
 8033fee:	442b      	add	r3, r5
 8033ff0:	6023      	str	r3, [r4, #0]
 8033ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8033ff6:	685a      	ldr	r2, [r3, #4]
 8033ff8:	bb62      	cbnz	r2, 8034054 <_malloc_r+0xdc>
 8033ffa:	f8c8 7000 	str.w	r7, [r8]
 8033ffe:	e00f      	b.n	8034020 <_malloc_r+0xa8>
 8034000:	6822      	ldr	r2, [r4, #0]
 8034002:	1b52      	subs	r2, r2, r5
 8034004:	d420      	bmi.n	8034048 <_malloc_r+0xd0>
 8034006:	2a0b      	cmp	r2, #11
 8034008:	d917      	bls.n	803403a <_malloc_r+0xc2>
 803400a:	1961      	adds	r1, r4, r5
 803400c:	42a3      	cmp	r3, r4
 803400e:	6025      	str	r5, [r4, #0]
 8034010:	bf18      	it	ne
 8034012:	6059      	strne	r1, [r3, #4]
 8034014:	6863      	ldr	r3, [r4, #4]
 8034016:	bf08      	it	eq
 8034018:	f8c8 1000 	streq.w	r1, [r8]
 803401c:	5162      	str	r2, [r4, r5]
 803401e:	604b      	str	r3, [r1, #4]
 8034020:	4630      	mov	r0, r6
 8034022:	f000 f82f 	bl	8034084 <__malloc_unlock>
 8034026:	f104 000b 	add.w	r0, r4, #11
 803402a:	1d23      	adds	r3, r4, #4
 803402c:	f020 0007 	bic.w	r0, r0, #7
 8034030:	1ac2      	subs	r2, r0, r3
 8034032:	bf1c      	itt	ne
 8034034:	1a1b      	subne	r3, r3, r0
 8034036:	50a3      	strne	r3, [r4, r2]
 8034038:	e7af      	b.n	8033f9a <_malloc_r+0x22>
 803403a:	6862      	ldr	r2, [r4, #4]
 803403c:	42a3      	cmp	r3, r4
 803403e:	bf0c      	ite	eq
 8034040:	f8c8 2000 	streq.w	r2, [r8]
 8034044:	605a      	strne	r2, [r3, #4]
 8034046:	e7eb      	b.n	8034020 <_malloc_r+0xa8>
 8034048:	4623      	mov	r3, r4
 803404a:	6864      	ldr	r4, [r4, #4]
 803404c:	e7ae      	b.n	8033fac <_malloc_r+0x34>
 803404e:	463c      	mov	r4, r7
 8034050:	687f      	ldr	r7, [r7, #4]
 8034052:	e7b6      	b.n	8033fc2 <_malloc_r+0x4a>
 8034054:	461a      	mov	r2, r3
 8034056:	685b      	ldr	r3, [r3, #4]
 8034058:	42a3      	cmp	r3, r4
 803405a:	d1fb      	bne.n	8034054 <_malloc_r+0xdc>
 803405c:	2300      	movs	r3, #0
 803405e:	6053      	str	r3, [r2, #4]
 8034060:	e7de      	b.n	8034020 <_malloc_r+0xa8>
 8034062:	230c      	movs	r3, #12
 8034064:	6033      	str	r3, [r6, #0]
 8034066:	4630      	mov	r0, r6
 8034068:	f000 f80c 	bl	8034084 <__malloc_unlock>
 803406c:	e794      	b.n	8033f98 <_malloc_r+0x20>
 803406e:	6005      	str	r5, [r0, #0]
 8034070:	e7d6      	b.n	8034020 <_malloc_r+0xa8>
 8034072:	bf00      	nop
 8034074:	24009a7c 	.word	0x24009a7c

08034078 <__malloc_lock>:
 8034078:	4801      	ldr	r0, [pc, #4]	@ (8034080 <__malloc_lock+0x8>)
 803407a:	f000 be6a 	b.w	8034d52 <__retarget_lock_acquire_recursive>
 803407e:	bf00      	nop
 8034080:	24009bc0 	.word	0x24009bc0

08034084 <__malloc_unlock>:
 8034084:	4801      	ldr	r0, [pc, #4]	@ (803408c <__malloc_unlock+0x8>)
 8034086:	f000 be65 	b.w	8034d54 <__retarget_lock_release_recursive>
 803408a:	bf00      	nop
 803408c:	24009bc0 	.word	0x24009bc0

08034090 <_realloc_r>:
 8034090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034094:	4607      	mov	r7, r0
 8034096:	4614      	mov	r4, r2
 8034098:	460d      	mov	r5, r1
 803409a:	b921      	cbnz	r1, 80340a6 <_realloc_r+0x16>
 803409c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80340a0:	4611      	mov	r1, r2
 80340a2:	f7ff bf69 	b.w	8033f78 <_malloc_r>
 80340a6:	b92a      	cbnz	r2, 80340b4 <_realloc_r+0x24>
 80340a8:	f001 fc4c 	bl	8035944 <_free_r>
 80340ac:	4625      	mov	r5, r4
 80340ae:	4628      	mov	r0, r5
 80340b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80340b4:	f002 f80a 	bl	80360cc <_malloc_usable_size_r>
 80340b8:	4284      	cmp	r4, r0
 80340ba:	4606      	mov	r6, r0
 80340bc:	d802      	bhi.n	80340c4 <_realloc_r+0x34>
 80340be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80340c2:	d8f4      	bhi.n	80340ae <_realloc_r+0x1e>
 80340c4:	4621      	mov	r1, r4
 80340c6:	4638      	mov	r0, r7
 80340c8:	f7ff ff56 	bl	8033f78 <_malloc_r>
 80340cc:	4680      	mov	r8, r0
 80340ce:	b908      	cbnz	r0, 80340d4 <_realloc_r+0x44>
 80340d0:	4645      	mov	r5, r8
 80340d2:	e7ec      	b.n	80340ae <_realloc_r+0x1e>
 80340d4:	42b4      	cmp	r4, r6
 80340d6:	4622      	mov	r2, r4
 80340d8:	4629      	mov	r1, r5
 80340da:	bf28      	it	cs
 80340dc:	4632      	movcs	r2, r6
 80340de:	f000 fe3a 	bl	8034d56 <memcpy>
 80340e2:	4629      	mov	r1, r5
 80340e4:	4638      	mov	r0, r7
 80340e6:	f001 fc2d 	bl	8035944 <_free_r>
 80340ea:	e7f1      	b.n	80340d0 <_realloc_r+0x40>

080340ec <__cvt>:
 80340ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80340ee:	ed2d 8b02 	vpush	{d8}
 80340f2:	eeb0 8b40 	vmov.f64	d8, d0
 80340f6:	b085      	sub	sp, #20
 80340f8:	4617      	mov	r7, r2
 80340fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80340fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80340fe:	ee18 2a90 	vmov	r2, s17
 8034102:	f025 0520 	bic.w	r5, r5, #32
 8034106:	2a00      	cmp	r2, #0
 8034108:	bfb6      	itet	lt
 803410a:	222d      	movlt	r2, #45	@ 0x2d
 803410c:	2200      	movge	r2, #0
 803410e:	eeb1 8b40 	vneglt.f64	d8, d0
 8034112:	2d46      	cmp	r5, #70	@ 0x46
 8034114:	460c      	mov	r4, r1
 8034116:	701a      	strb	r2, [r3, #0]
 8034118:	d004      	beq.n	8034124 <__cvt+0x38>
 803411a:	2d45      	cmp	r5, #69	@ 0x45
 803411c:	d100      	bne.n	8034120 <__cvt+0x34>
 803411e:	3401      	adds	r4, #1
 8034120:	2102      	movs	r1, #2
 8034122:	e000      	b.n	8034126 <__cvt+0x3a>
 8034124:	2103      	movs	r1, #3
 8034126:	ab03      	add	r3, sp, #12
 8034128:	9301      	str	r3, [sp, #4]
 803412a:	ab02      	add	r3, sp, #8
 803412c:	9300      	str	r3, [sp, #0]
 803412e:	4622      	mov	r2, r4
 8034130:	4633      	mov	r3, r6
 8034132:	eeb0 0b48 	vmov.f64	d0, d8
 8034136:	f000 fea7 	bl	8034e88 <_dtoa_r>
 803413a:	2d47      	cmp	r5, #71	@ 0x47
 803413c:	d114      	bne.n	8034168 <__cvt+0x7c>
 803413e:	07fb      	lsls	r3, r7, #31
 8034140:	d50a      	bpl.n	8034158 <__cvt+0x6c>
 8034142:	1902      	adds	r2, r0, r4
 8034144:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8034148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803414c:	bf08      	it	eq
 803414e:	9203      	streq	r2, [sp, #12]
 8034150:	2130      	movs	r1, #48	@ 0x30
 8034152:	9b03      	ldr	r3, [sp, #12]
 8034154:	4293      	cmp	r3, r2
 8034156:	d319      	bcc.n	803418c <__cvt+0xa0>
 8034158:	9b03      	ldr	r3, [sp, #12]
 803415a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803415c:	1a1b      	subs	r3, r3, r0
 803415e:	6013      	str	r3, [r2, #0]
 8034160:	b005      	add	sp, #20
 8034162:	ecbd 8b02 	vpop	{d8}
 8034166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034168:	2d46      	cmp	r5, #70	@ 0x46
 803416a:	eb00 0204 	add.w	r2, r0, r4
 803416e:	d1e9      	bne.n	8034144 <__cvt+0x58>
 8034170:	7803      	ldrb	r3, [r0, #0]
 8034172:	2b30      	cmp	r3, #48	@ 0x30
 8034174:	d107      	bne.n	8034186 <__cvt+0x9a>
 8034176:	eeb5 8b40 	vcmp.f64	d8, #0.0
 803417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803417e:	bf1c      	itt	ne
 8034180:	f1c4 0401 	rsbne	r4, r4, #1
 8034184:	6034      	strne	r4, [r6, #0]
 8034186:	6833      	ldr	r3, [r6, #0]
 8034188:	441a      	add	r2, r3
 803418a:	e7db      	b.n	8034144 <__cvt+0x58>
 803418c:	1c5c      	adds	r4, r3, #1
 803418e:	9403      	str	r4, [sp, #12]
 8034190:	7019      	strb	r1, [r3, #0]
 8034192:	e7de      	b.n	8034152 <__cvt+0x66>

08034194 <__exponent>:
 8034194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8034196:	2900      	cmp	r1, #0
 8034198:	bfba      	itte	lt
 803419a:	4249      	neglt	r1, r1
 803419c:	232d      	movlt	r3, #45	@ 0x2d
 803419e:	232b      	movge	r3, #43	@ 0x2b
 80341a0:	2909      	cmp	r1, #9
 80341a2:	7002      	strb	r2, [r0, #0]
 80341a4:	7043      	strb	r3, [r0, #1]
 80341a6:	dd29      	ble.n	80341fc <__exponent+0x68>
 80341a8:	f10d 0307 	add.w	r3, sp, #7
 80341ac:	461d      	mov	r5, r3
 80341ae:	270a      	movs	r7, #10
 80341b0:	461a      	mov	r2, r3
 80341b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80341b6:	fb07 1416 	mls	r4, r7, r6, r1
 80341ba:	3430      	adds	r4, #48	@ 0x30
 80341bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80341c0:	460c      	mov	r4, r1
 80341c2:	2c63      	cmp	r4, #99	@ 0x63
 80341c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80341c8:	4631      	mov	r1, r6
 80341ca:	dcf1      	bgt.n	80341b0 <__exponent+0x1c>
 80341cc:	3130      	adds	r1, #48	@ 0x30
 80341ce:	1e94      	subs	r4, r2, #2
 80341d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80341d4:	1c41      	adds	r1, r0, #1
 80341d6:	4623      	mov	r3, r4
 80341d8:	42ab      	cmp	r3, r5
 80341da:	d30a      	bcc.n	80341f2 <__exponent+0x5e>
 80341dc:	f10d 0309 	add.w	r3, sp, #9
 80341e0:	1a9b      	subs	r3, r3, r2
 80341e2:	42ac      	cmp	r4, r5
 80341e4:	bf88      	it	hi
 80341e6:	2300      	movhi	r3, #0
 80341e8:	3302      	adds	r3, #2
 80341ea:	4403      	add	r3, r0
 80341ec:	1a18      	subs	r0, r3, r0
 80341ee:	b003      	add	sp, #12
 80341f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80341f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80341f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80341fa:	e7ed      	b.n	80341d8 <__exponent+0x44>
 80341fc:	2330      	movs	r3, #48	@ 0x30
 80341fe:	3130      	adds	r1, #48	@ 0x30
 8034200:	7083      	strb	r3, [r0, #2]
 8034202:	70c1      	strb	r1, [r0, #3]
 8034204:	1d03      	adds	r3, r0, #4
 8034206:	e7f1      	b.n	80341ec <__exponent+0x58>

08034208 <_printf_float>:
 8034208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803420c:	b08d      	sub	sp, #52	@ 0x34
 803420e:	460c      	mov	r4, r1
 8034210:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8034214:	4616      	mov	r6, r2
 8034216:	461f      	mov	r7, r3
 8034218:	4605      	mov	r5, r0
 803421a:	f000 fd1b 	bl	8034c54 <_localeconv_r>
 803421e:	f8d0 b000 	ldr.w	fp, [r0]
 8034222:	4658      	mov	r0, fp
 8034224:	f7db ff5c 	bl	80100e0 <strlen>
 8034228:	2300      	movs	r3, #0
 803422a:	930a      	str	r3, [sp, #40]	@ 0x28
 803422c:	f8d8 3000 	ldr.w	r3, [r8]
 8034230:	f894 9018 	ldrb.w	r9, [r4, #24]
 8034234:	6822      	ldr	r2, [r4, #0]
 8034236:	9005      	str	r0, [sp, #20]
 8034238:	3307      	adds	r3, #7
 803423a:	f023 0307 	bic.w	r3, r3, #7
 803423e:	f103 0108 	add.w	r1, r3, #8
 8034242:	f8c8 1000 	str.w	r1, [r8]
 8034246:	ed93 0b00 	vldr	d0, [r3]
 803424a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80344a8 <_printf_float+0x2a0>
 803424e:	eeb0 7bc0 	vabs.f64	d7, d0
 8034252:	eeb4 7b46 	vcmp.f64	d7, d6
 8034256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803425a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 803425e:	dd24      	ble.n	80342aa <_printf_float+0xa2>
 8034260:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8034264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034268:	d502      	bpl.n	8034270 <_printf_float+0x68>
 803426a:	232d      	movs	r3, #45	@ 0x2d
 803426c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8034270:	498f      	ldr	r1, [pc, #572]	@ (80344b0 <_printf_float+0x2a8>)
 8034272:	4b90      	ldr	r3, [pc, #576]	@ (80344b4 <_printf_float+0x2ac>)
 8034274:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8034278:	bf8c      	ite	hi
 803427a:	4688      	movhi	r8, r1
 803427c:	4698      	movls	r8, r3
 803427e:	f022 0204 	bic.w	r2, r2, #4
 8034282:	2303      	movs	r3, #3
 8034284:	6123      	str	r3, [r4, #16]
 8034286:	6022      	str	r2, [r4, #0]
 8034288:	f04f 0a00 	mov.w	sl, #0
 803428c:	9700      	str	r7, [sp, #0]
 803428e:	4633      	mov	r3, r6
 8034290:	aa0b      	add	r2, sp, #44	@ 0x2c
 8034292:	4621      	mov	r1, r4
 8034294:	4628      	mov	r0, r5
 8034296:	f000 f9d1 	bl	803463c <_printf_common>
 803429a:	3001      	adds	r0, #1
 803429c:	f040 8089 	bne.w	80343b2 <_printf_float+0x1aa>
 80342a0:	f04f 30ff 	mov.w	r0, #4294967295
 80342a4:	b00d      	add	sp, #52	@ 0x34
 80342a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80342aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80342ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80342b2:	d709      	bvc.n	80342c8 <_printf_float+0xc0>
 80342b4:	ee10 3a90 	vmov	r3, s1
 80342b8:	2b00      	cmp	r3, #0
 80342ba:	bfbc      	itt	lt
 80342bc:	232d      	movlt	r3, #45	@ 0x2d
 80342be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80342c2:	497d      	ldr	r1, [pc, #500]	@ (80344b8 <_printf_float+0x2b0>)
 80342c4:	4b7d      	ldr	r3, [pc, #500]	@ (80344bc <_printf_float+0x2b4>)
 80342c6:	e7d5      	b.n	8034274 <_printf_float+0x6c>
 80342c8:	6863      	ldr	r3, [r4, #4]
 80342ca:	1c59      	adds	r1, r3, #1
 80342cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80342d0:	d139      	bne.n	8034346 <_printf_float+0x13e>
 80342d2:	2306      	movs	r3, #6
 80342d4:	6063      	str	r3, [r4, #4]
 80342d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80342da:	2300      	movs	r3, #0
 80342dc:	6022      	str	r2, [r4, #0]
 80342de:	9303      	str	r3, [sp, #12]
 80342e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80342e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80342e6:	ab09      	add	r3, sp, #36	@ 0x24
 80342e8:	9300      	str	r3, [sp, #0]
 80342ea:	6861      	ldr	r1, [r4, #4]
 80342ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80342f0:	4628      	mov	r0, r5
 80342f2:	f7ff fefb 	bl	80340ec <__cvt>
 80342f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80342fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80342fc:	4680      	mov	r8, r0
 80342fe:	d129      	bne.n	8034354 <_printf_float+0x14c>
 8034300:	1cc8      	adds	r0, r1, #3
 8034302:	db02      	blt.n	803430a <_printf_float+0x102>
 8034304:	6863      	ldr	r3, [r4, #4]
 8034306:	4299      	cmp	r1, r3
 8034308:	dd41      	ble.n	803438e <_printf_float+0x186>
 803430a:	f1a9 0902 	sub.w	r9, r9, #2
 803430e:	fa5f f989 	uxtb.w	r9, r9
 8034312:	3901      	subs	r1, #1
 8034314:	464a      	mov	r2, r9
 8034316:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 803431a:	9109      	str	r1, [sp, #36]	@ 0x24
 803431c:	f7ff ff3a 	bl	8034194 <__exponent>
 8034320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034322:	1813      	adds	r3, r2, r0
 8034324:	2a01      	cmp	r2, #1
 8034326:	4682      	mov	sl, r0
 8034328:	6123      	str	r3, [r4, #16]
 803432a:	dc02      	bgt.n	8034332 <_printf_float+0x12a>
 803432c:	6822      	ldr	r2, [r4, #0]
 803432e:	07d2      	lsls	r2, r2, #31
 8034330:	d501      	bpl.n	8034336 <_printf_float+0x12e>
 8034332:	3301      	adds	r3, #1
 8034334:	6123      	str	r3, [r4, #16]
 8034336:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 803433a:	2b00      	cmp	r3, #0
 803433c:	d0a6      	beq.n	803428c <_printf_float+0x84>
 803433e:	232d      	movs	r3, #45	@ 0x2d
 8034340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8034344:	e7a2      	b.n	803428c <_printf_float+0x84>
 8034346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 803434a:	d1c4      	bne.n	80342d6 <_printf_float+0xce>
 803434c:	2b00      	cmp	r3, #0
 803434e:	d1c2      	bne.n	80342d6 <_printf_float+0xce>
 8034350:	2301      	movs	r3, #1
 8034352:	e7bf      	b.n	80342d4 <_printf_float+0xcc>
 8034354:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8034358:	d9db      	bls.n	8034312 <_printf_float+0x10a>
 803435a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 803435e:	d118      	bne.n	8034392 <_printf_float+0x18a>
 8034360:	2900      	cmp	r1, #0
 8034362:	6863      	ldr	r3, [r4, #4]
 8034364:	dd0b      	ble.n	803437e <_printf_float+0x176>
 8034366:	6121      	str	r1, [r4, #16]
 8034368:	b913      	cbnz	r3, 8034370 <_printf_float+0x168>
 803436a:	6822      	ldr	r2, [r4, #0]
 803436c:	07d0      	lsls	r0, r2, #31
 803436e:	d502      	bpl.n	8034376 <_printf_float+0x16e>
 8034370:	3301      	adds	r3, #1
 8034372:	440b      	add	r3, r1
 8034374:	6123      	str	r3, [r4, #16]
 8034376:	65a1      	str	r1, [r4, #88]	@ 0x58
 8034378:	f04f 0a00 	mov.w	sl, #0
 803437c:	e7db      	b.n	8034336 <_printf_float+0x12e>
 803437e:	b913      	cbnz	r3, 8034386 <_printf_float+0x17e>
 8034380:	6822      	ldr	r2, [r4, #0]
 8034382:	07d2      	lsls	r2, r2, #31
 8034384:	d501      	bpl.n	803438a <_printf_float+0x182>
 8034386:	3302      	adds	r3, #2
 8034388:	e7f4      	b.n	8034374 <_printf_float+0x16c>
 803438a:	2301      	movs	r3, #1
 803438c:	e7f2      	b.n	8034374 <_printf_float+0x16c>
 803438e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8034392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034394:	4299      	cmp	r1, r3
 8034396:	db05      	blt.n	80343a4 <_printf_float+0x19c>
 8034398:	6823      	ldr	r3, [r4, #0]
 803439a:	6121      	str	r1, [r4, #16]
 803439c:	07d8      	lsls	r0, r3, #31
 803439e:	d5ea      	bpl.n	8034376 <_printf_float+0x16e>
 80343a0:	1c4b      	adds	r3, r1, #1
 80343a2:	e7e7      	b.n	8034374 <_printf_float+0x16c>
 80343a4:	2900      	cmp	r1, #0
 80343a6:	bfd4      	ite	le
 80343a8:	f1c1 0202 	rsble	r2, r1, #2
 80343ac:	2201      	movgt	r2, #1
 80343ae:	4413      	add	r3, r2
 80343b0:	e7e0      	b.n	8034374 <_printf_float+0x16c>
 80343b2:	6823      	ldr	r3, [r4, #0]
 80343b4:	055a      	lsls	r2, r3, #21
 80343b6:	d407      	bmi.n	80343c8 <_printf_float+0x1c0>
 80343b8:	6923      	ldr	r3, [r4, #16]
 80343ba:	4642      	mov	r2, r8
 80343bc:	4631      	mov	r1, r6
 80343be:	4628      	mov	r0, r5
 80343c0:	47b8      	blx	r7
 80343c2:	3001      	adds	r0, #1
 80343c4:	d12a      	bne.n	803441c <_printf_float+0x214>
 80343c6:	e76b      	b.n	80342a0 <_printf_float+0x98>
 80343c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80343cc:	f240 80e0 	bls.w	8034590 <_printf_float+0x388>
 80343d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80343d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80343d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80343dc:	d133      	bne.n	8034446 <_printf_float+0x23e>
 80343de:	4a38      	ldr	r2, [pc, #224]	@ (80344c0 <_printf_float+0x2b8>)
 80343e0:	2301      	movs	r3, #1
 80343e2:	4631      	mov	r1, r6
 80343e4:	4628      	mov	r0, r5
 80343e6:	47b8      	blx	r7
 80343e8:	3001      	adds	r0, #1
 80343ea:	f43f af59 	beq.w	80342a0 <_printf_float+0x98>
 80343ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80343f2:	4543      	cmp	r3, r8
 80343f4:	db02      	blt.n	80343fc <_printf_float+0x1f4>
 80343f6:	6823      	ldr	r3, [r4, #0]
 80343f8:	07d8      	lsls	r0, r3, #31
 80343fa:	d50f      	bpl.n	803441c <_printf_float+0x214>
 80343fc:	9b05      	ldr	r3, [sp, #20]
 80343fe:	465a      	mov	r2, fp
 8034400:	4631      	mov	r1, r6
 8034402:	4628      	mov	r0, r5
 8034404:	47b8      	blx	r7
 8034406:	3001      	adds	r0, #1
 8034408:	f43f af4a 	beq.w	80342a0 <_printf_float+0x98>
 803440c:	f04f 0900 	mov.w	r9, #0
 8034410:	f108 38ff 	add.w	r8, r8, #4294967295
 8034414:	f104 0a1a 	add.w	sl, r4, #26
 8034418:	45c8      	cmp	r8, r9
 803441a:	dc09      	bgt.n	8034430 <_printf_float+0x228>
 803441c:	6823      	ldr	r3, [r4, #0]
 803441e:	079b      	lsls	r3, r3, #30
 8034420:	f100 8107 	bmi.w	8034632 <_printf_float+0x42a>
 8034424:	68e0      	ldr	r0, [r4, #12]
 8034426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034428:	4298      	cmp	r0, r3
 803442a:	bfb8      	it	lt
 803442c:	4618      	movlt	r0, r3
 803442e:	e739      	b.n	80342a4 <_printf_float+0x9c>
 8034430:	2301      	movs	r3, #1
 8034432:	4652      	mov	r2, sl
 8034434:	4631      	mov	r1, r6
 8034436:	4628      	mov	r0, r5
 8034438:	47b8      	blx	r7
 803443a:	3001      	adds	r0, #1
 803443c:	f43f af30 	beq.w	80342a0 <_printf_float+0x98>
 8034440:	f109 0901 	add.w	r9, r9, #1
 8034444:	e7e8      	b.n	8034418 <_printf_float+0x210>
 8034446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034448:	2b00      	cmp	r3, #0
 803444a:	dc3b      	bgt.n	80344c4 <_printf_float+0x2bc>
 803444c:	4a1c      	ldr	r2, [pc, #112]	@ (80344c0 <_printf_float+0x2b8>)
 803444e:	2301      	movs	r3, #1
 8034450:	4631      	mov	r1, r6
 8034452:	4628      	mov	r0, r5
 8034454:	47b8      	blx	r7
 8034456:	3001      	adds	r0, #1
 8034458:	f43f af22 	beq.w	80342a0 <_printf_float+0x98>
 803445c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8034460:	ea59 0303 	orrs.w	r3, r9, r3
 8034464:	d102      	bne.n	803446c <_printf_float+0x264>
 8034466:	6823      	ldr	r3, [r4, #0]
 8034468:	07d9      	lsls	r1, r3, #31
 803446a:	d5d7      	bpl.n	803441c <_printf_float+0x214>
 803446c:	9b05      	ldr	r3, [sp, #20]
 803446e:	465a      	mov	r2, fp
 8034470:	4631      	mov	r1, r6
 8034472:	4628      	mov	r0, r5
 8034474:	47b8      	blx	r7
 8034476:	3001      	adds	r0, #1
 8034478:	f43f af12 	beq.w	80342a0 <_printf_float+0x98>
 803447c:	f04f 0a00 	mov.w	sl, #0
 8034480:	f104 0b1a 	add.w	fp, r4, #26
 8034484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034486:	425b      	negs	r3, r3
 8034488:	4553      	cmp	r3, sl
 803448a:	dc01      	bgt.n	8034490 <_printf_float+0x288>
 803448c:	464b      	mov	r3, r9
 803448e:	e794      	b.n	80343ba <_printf_float+0x1b2>
 8034490:	2301      	movs	r3, #1
 8034492:	465a      	mov	r2, fp
 8034494:	4631      	mov	r1, r6
 8034496:	4628      	mov	r0, r5
 8034498:	47b8      	blx	r7
 803449a:	3001      	adds	r0, #1
 803449c:	f43f af00 	beq.w	80342a0 <_printf_float+0x98>
 80344a0:	f10a 0a01 	add.w	sl, sl, #1
 80344a4:	e7ee      	b.n	8034484 <_printf_float+0x27c>
 80344a6:	bf00      	nop
 80344a8:	ffffffff 	.word	0xffffffff
 80344ac:	7fefffff 	.word	0x7fefffff
 80344b0:	08059980 	.word	0x08059980
 80344b4:	0805997c 	.word	0x0805997c
 80344b8:	08059988 	.word	0x08059988
 80344bc:	08059984 	.word	0x08059984
 80344c0:	0805998c 	.word	0x0805998c
 80344c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80344c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80344ca:	4553      	cmp	r3, sl
 80344cc:	bfa8      	it	ge
 80344ce:	4653      	movge	r3, sl
 80344d0:	2b00      	cmp	r3, #0
 80344d2:	4699      	mov	r9, r3
 80344d4:	dc37      	bgt.n	8034546 <_printf_float+0x33e>
 80344d6:	2300      	movs	r3, #0
 80344d8:	9307      	str	r3, [sp, #28]
 80344da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80344de:	f104 021a 	add.w	r2, r4, #26
 80344e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80344e4:	9907      	ldr	r1, [sp, #28]
 80344e6:	9306      	str	r3, [sp, #24]
 80344e8:	eba3 0309 	sub.w	r3, r3, r9
 80344ec:	428b      	cmp	r3, r1
 80344ee:	dc31      	bgt.n	8034554 <_printf_float+0x34c>
 80344f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80344f2:	459a      	cmp	sl, r3
 80344f4:	dc3b      	bgt.n	803456e <_printf_float+0x366>
 80344f6:	6823      	ldr	r3, [r4, #0]
 80344f8:	07da      	lsls	r2, r3, #31
 80344fa:	d438      	bmi.n	803456e <_printf_float+0x366>
 80344fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80344fe:	ebaa 0903 	sub.w	r9, sl, r3
 8034502:	9b06      	ldr	r3, [sp, #24]
 8034504:	ebaa 0303 	sub.w	r3, sl, r3
 8034508:	4599      	cmp	r9, r3
 803450a:	bfa8      	it	ge
 803450c:	4699      	movge	r9, r3
 803450e:	f1b9 0f00 	cmp.w	r9, #0
 8034512:	dc34      	bgt.n	803457e <_printf_float+0x376>
 8034514:	f04f 0800 	mov.w	r8, #0
 8034518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803451c:	f104 0b1a 	add.w	fp, r4, #26
 8034520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034522:	ebaa 0303 	sub.w	r3, sl, r3
 8034526:	eba3 0309 	sub.w	r3, r3, r9
 803452a:	4543      	cmp	r3, r8
 803452c:	f77f af76 	ble.w	803441c <_printf_float+0x214>
 8034530:	2301      	movs	r3, #1
 8034532:	465a      	mov	r2, fp
 8034534:	4631      	mov	r1, r6
 8034536:	4628      	mov	r0, r5
 8034538:	47b8      	blx	r7
 803453a:	3001      	adds	r0, #1
 803453c:	f43f aeb0 	beq.w	80342a0 <_printf_float+0x98>
 8034540:	f108 0801 	add.w	r8, r8, #1
 8034544:	e7ec      	b.n	8034520 <_printf_float+0x318>
 8034546:	4642      	mov	r2, r8
 8034548:	4631      	mov	r1, r6
 803454a:	4628      	mov	r0, r5
 803454c:	47b8      	blx	r7
 803454e:	3001      	adds	r0, #1
 8034550:	d1c1      	bne.n	80344d6 <_printf_float+0x2ce>
 8034552:	e6a5      	b.n	80342a0 <_printf_float+0x98>
 8034554:	2301      	movs	r3, #1
 8034556:	4631      	mov	r1, r6
 8034558:	4628      	mov	r0, r5
 803455a:	9206      	str	r2, [sp, #24]
 803455c:	47b8      	blx	r7
 803455e:	3001      	adds	r0, #1
 8034560:	f43f ae9e 	beq.w	80342a0 <_printf_float+0x98>
 8034564:	9b07      	ldr	r3, [sp, #28]
 8034566:	9a06      	ldr	r2, [sp, #24]
 8034568:	3301      	adds	r3, #1
 803456a:	9307      	str	r3, [sp, #28]
 803456c:	e7b9      	b.n	80344e2 <_printf_float+0x2da>
 803456e:	9b05      	ldr	r3, [sp, #20]
 8034570:	465a      	mov	r2, fp
 8034572:	4631      	mov	r1, r6
 8034574:	4628      	mov	r0, r5
 8034576:	47b8      	blx	r7
 8034578:	3001      	adds	r0, #1
 803457a:	d1bf      	bne.n	80344fc <_printf_float+0x2f4>
 803457c:	e690      	b.n	80342a0 <_printf_float+0x98>
 803457e:	9a06      	ldr	r2, [sp, #24]
 8034580:	464b      	mov	r3, r9
 8034582:	4442      	add	r2, r8
 8034584:	4631      	mov	r1, r6
 8034586:	4628      	mov	r0, r5
 8034588:	47b8      	blx	r7
 803458a:	3001      	adds	r0, #1
 803458c:	d1c2      	bne.n	8034514 <_printf_float+0x30c>
 803458e:	e687      	b.n	80342a0 <_printf_float+0x98>
 8034590:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8034594:	f1b9 0f01 	cmp.w	r9, #1
 8034598:	dc01      	bgt.n	803459e <_printf_float+0x396>
 803459a:	07db      	lsls	r3, r3, #31
 803459c:	d536      	bpl.n	803460c <_printf_float+0x404>
 803459e:	2301      	movs	r3, #1
 80345a0:	4642      	mov	r2, r8
 80345a2:	4631      	mov	r1, r6
 80345a4:	4628      	mov	r0, r5
 80345a6:	47b8      	blx	r7
 80345a8:	3001      	adds	r0, #1
 80345aa:	f43f ae79 	beq.w	80342a0 <_printf_float+0x98>
 80345ae:	9b05      	ldr	r3, [sp, #20]
 80345b0:	465a      	mov	r2, fp
 80345b2:	4631      	mov	r1, r6
 80345b4:	4628      	mov	r0, r5
 80345b6:	47b8      	blx	r7
 80345b8:	3001      	adds	r0, #1
 80345ba:	f43f ae71 	beq.w	80342a0 <_printf_float+0x98>
 80345be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80345c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80345c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80345ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80345ce:	d018      	beq.n	8034602 <_printf_float+0x3fa>
 80345d0:	464b      	mov	r3, r9
 80345d2:	f108 0201 	add.w	r2, r8, #1
 80345d6:	4631      	mov	r1, r6
 80345d8:	4628      	mov	r0, r5
 80345da:	47b8      	blx	r7
 80345dc:	3001      	adds	r0, #1
 80345de:	d10c      	bne.n	80345fa <_printf_float+0x3f2>
 80345e0:	e65e      	b.n	80342a0 <_printf_float+0x98>
 80345e2:	2301      	movs	r3, #1
 80345e4:	465a      	mov	r2, fp
 80345e6:	4631      	mov	r1, r6
 80345e8:	4628      	mov	r0, r5
 80345ea:	47b8      	blx	r7
 80345ec:	3001      	adds	r0, #1
 80345ee:	f43f ae57 	beq.w	80342a0 <_printf_float+0x98>
 80345f2:	f108 0801 	add.w	r8, r8, #1
 80345f6:	45c8      	cmp	r8, r9
 80345f8:	dbf3      	blt.n	80345e2 <_printf_float+0x3da>
 80345fa:	4653      	mov	r3, sl
 80345fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8034600:	e6dc      	b.n	80343bc <_printf_float+0x1b4>
 8034602:	f04f 0800 	mov.w	r8, #0
 8034606:	f104 0b1a 	add.w	fp, r4, #26
 803460a:	e7f4      	b.n	80345f6 <_printf_float+0x3ee>
 803460c:	2301      	movs	r3, #1
 803460e:	4642      	mov	r2, r8
 8034610:	e7e1      	b.n	80345d6 <_printf_float+0x3ce>
 8034612:	2301      	movs	r3, #1
 8034614:	464a      	mov	r2, r9
 8034616:	4631      	mov	r1, r6
 8034618:	4628      	mov	r0, r5
 803461a:	47b8      	blx	r7
 803461c:	3001      	adds	r0, #1
 803461e:	f43f ae3f 	beq.w	80342a0 <_printf_float+0x98>
 8034622:	f108 0801 	add.w	r8, r8, #1
 8034626:	68e3      	ldr	r3, [r4, #12]
 8034628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803462a:	1a5b      	subs	r3, r3, r1
 803462c:	4543      	cmp	r3, r8
 803462e:	dcf0      	bgt.n	8034612 <_printf_float+0x40a>
 8034630:	e6f8      	b.n	8034424 <_printf_float+0x21c>
 8034632:	f04f 0800 	mov.w	r8, #0
 8034636:	f104 0919 	add.w	r9, r4, #25
 803463a:	e7f4      	b.n	8034626 <_printf_float+0x41e>

0803463c <_printf_common>:
 803463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034640:	4616      	mov	r6, r2
 8034642:	4698      	mov	r8, r3
 8034644:	688a      	ldr	r2, [r1, #8]
 8034646:	690b      	ldr	r3, [r1, #16]
 8034648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 803464c:	4293      	cmp	r3, r2
 803464e:	bfb8      	it	lt
 8034650:	4613      	movlt	r3, r2
 8034652:	6033      	str	r3, [r6, #0]
 8034654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8034658:	4607      	mov	r7, r0
 803465a:	460c      	mov	r4, r1
 803465c:	b10a      	cbz	r2, 8034662 <_printf_common+0x26>
 803465e:	3301      	adds	r3, #1
 8034660:	6033      	str	r3, [r6, #0]
 8034662:	6823      	ldr	r3, [r4, #0]
 8034664:	0699      	lsls	r1, r3, #26
 8034666:	bf42      	ittt	mi
 8034668:	6833      	ldrmi	r3, [r6, #0]
 803466a:	3302      	addmi	r3, #2
 803466c:	6033      	strmi	r3, [r6, #0]
 803466e:	6825      	ldr	r5, [r4, #0]
 8034670:	f015 0506 	ands.w	r5, r5, #6
 8034674:	d106      	bne.n	8034684 <_printf_common+0x48>
 8034676:	f104 0a19 	add.w	sl, r4, #25
 803467a:	68e3      	ldr	r3, [r4, #12]
 803467c:	6832      	ldr	r2, [r6, #0]
 803467e:	1a9b      	subs	r3, r3, r2
 8034680:	42ab      	cmp	r3, r5
 8034682:	dc26      	bgt.n	80346d2 <_printf_common+0x96>
 8034684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8034688:	6822      	ldr	r2, [r4, #0]
 803468a:	3b00      	subs	r3, #0
 803468c:	bf18      	it	ne
 803468e:	2301      	movne	r3, #1
 8034690:	0692      	lsls	r2, r2, #26
 8034692:	d42b      	bmi.n	80346ec <_printf_common+0xb0>
 8034694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8034698:	4641      	mov	r1, r8
 803469a:	4638      	mov	r0, r7
 803469c:	47c8      	blx	r9
 803469e:	3001      	adds	r0, #1
 80346a0:	d01e      	beq.n	80346e0 <_printf_common+0xa4>
 80346a2:	6823      	ldr	r3, [r4, #0]
 80346a4:	6922      	ldr	r2, [r4, #16]
 80346a6:	f003 0306 	and.w	r3, r3, #6
 80346aa:	2b04      	cmp	r3, #4
 80346ac:	bf02      	ittt	eq
 80346ae:	68e5      	ldreq	r5, [r4, #12]
 80346b0:	6833      	ldreq	r3, [r6, #0]
 80346b2:	1aed      	subeq	r5, r5, r3
 80346b4:	68a3      	ldr	r3, [r4, #8]
 80346b6:	bf0c      	ite	eq
 80346b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80346bc:	2500      	movne	r5, #0
 80346be:	4293      	cmp	r3, r2
 80346c0:	bfc4      	itt	gt
 80346c2:	1a9b      	subgt	r3, r3, r2
 80346c4:	18ed      	addgt	r5, r5, r3
 80346c6:	2600      	movs	r6, #0
 80346c8:	341a      	adds	r4, #26
 80346ca:	42b5      	cmp	r5, r6
 80346cc:	d11a      	bne.n	8034704 <_printf_common+0xc8>
 80346ce:	2000      	movs	r0, #0
 80346d0:	e008      	b.n	80346e4 <_printf_common+0xa8>
 80346d2:	2301      	movs	r3, #1
 80346d4:	4652      	mov	r2, sl
 80346d6:	4641      	mov	r1, r8
 80346d8:	4638      	mov	r0, r7
 80346da:	47c8      	blx	r9
 80346dc:	3001      	adds	r0, #1
 80346de:	d103      	bne.n	80346e8 <_printf_common+0xac>
 80346e0:	f04f 30ff 	mov.w	r0, #4294967295
 80346e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80346e8:	3501      	adds	r5, #1
 80346ea:	e7c6      	b.n	803467a <_printf_common+0x3e>
 80346ec:	18e1      	adds	r1, r4, r3
 80346ee:	1c5a      	adds	r2, r3, #1
 80346f0:	2030      	movs	r0, #48	@ 0x30
 80346f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80346f6:	4422      	add	r2, r4
 80346f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80346fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8034700:	3302      	adds	r3, #2
 8034702:	e7c7      	b.n	8034694 <_printf_common+0x58>
 8034704:	2301      	movs	r3, #1
 8034706:	4622      	mov	r2, r4
 8034708:	4641      	mov	r1, r8
 803470a:	4638      	mov	r0, r7
 803470c:	47c8      	blx	r9
 803470e:	3001      	adds	r0, #1
 8034710:	d0e6      	beq.n	80346e0 <_printf_common+0xa4>
 8034712:	3601      	adds	r6, #1
 8034714:	e7d9      	b.n	80346ca <_printf_common+0x8e>
	...

08034718 <_printf_i>:
 8034718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803471c:	7e0f      	ldrb	r7, [r1, #24]
 803471e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8034720:	2f78      	cmp	r7, #120	@ 0x78
 8034722:	4691      	mov	r9, r2
 8034724:	4680      	mov	r8, r0
 8034726:	460c      	mov	r4, r1
 8034728:	469a      	mov	sl, r3
 803472a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 803472e:	d807      	bhi.n	8034740 <_printf_i+0x28>
 8034730:	2f62      	cmp	r7, #98	@ 0x62
 8034732:	d80a      	bhi.n	803474a <_printf_i+0x32>
 8034734:	2f00      	cmp	r7, #0
 8034736:	f000 80d1 	beq.w	80348dc <_printf_i+0x1c4>
 803473a:	2f58      	cmp	r7, #88	@ 0x58
 803473c:	f000 80b8 	beq.w	80348b0 <_printf_i+0x198>
 8034740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8034744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8034748:	e03a      	b.n	80347c0 <_printf_i+0xa8>
 803474a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 803474e:	2b15      	cmp	r3, #21
 8034750:	d8f6      	bhi.n	8034740 <_printf_i+0x28>
 8034752:	a101      	add	r1, pc, #4	@ (adr r1, 8034758 <_printf_i+0x40>)
 8034754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8034758:	080347b1 	.word	0x080347b1
 803475c:	080347c5 	.word	0x080347c5
 8034760:	08034741 	.word	0x08034741
 8034764:	08034741 	.word	0x08034741
 8034768:	08034741 	.word	0x08034741
 803476c:	08034741 	.word	0x08034741
 8034770:	080347c5 	.word	0x080347c5
 8034774:	08034741 	.word	0x08034741
 8034778:	08034741 	.word	0x08034741
 803477c:	08034741 	.word	0x08034741
 8034780:	08034741 	.word	0x08034741
 8034784:	080348c3 	.word	0x080348c3
 8034788:	080347ef 	.word	0x080347ef
 803478c:	0803487d 	.word	0x0803487d
 8034790:	08034741 	.word	0x08034741
 8034794:	08034741 	.word	0x08034741
 8034798:	080348e5 	.word	0x080348e5
 803479c:	08034741 	.word	0x08034741
 80347a0:	080347ef 	.word	0x080347ef
 80347a4:	08034741 	.word	0x08034741
 80347a8:	08034741 	.word	0x08034741
 80347ac:	08034885 	.word	0x08034885
 80347b0:	6833      	ldr	r3, [r6, #0]
 80347b2:	1d1a      	adds	r2, r3, #4
 80347b4:	681b      	ldr	r3, [r3, #0]
 80347b6:	6032      	str	r2, [r6, #0]
 80347b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80347bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80347c0:	2301      	movs	r3, #1
 80347c2:	e09c      	b.n	80348fe <_printf_i+0x1e6>
 80347c4:	6833      	ldr	r3, [r6, #0]
 80347c6:	6820      	ldr	r0, [r4, #0]
 80347c8:	1d19      	adds	r1, r3, #4
 80347ca:	6031      	str	r1, [r6, #0]
 80347cc:	0606      	lsls	r6, r0, #24
 80347ce:	d501      	bpl.n	80347d4 <_printf_i+0xbc>
 80347d0:	681d      	ldr	r5, [r3, #0]
 80347d2:	e003      	b.n	80347dc <_printf_i+0xc4>
 80347d4:	0645      	lsls	r5, r0, #25
 80347d6:	d5fb      	bpl.n	80347d0 <_printf_i+0xb8>
 80347d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80347dc:	2d00      	cmp	r5, #0
 80347de:	da03      	bge.n	80347e8 <_printf_i+0xd0>
 80347e0:	232d      	movs	r3, #45	@ 0x2d
 80347e2:	426d      	negs	r5, r5
 80347e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80347e8:	4858      	ldr	r0, [pc, #352]	@ (803494c <_printf_i+0x234>)
 80347ea:	230a      	movs	r3, #10
 80347ec:	e011      	b.n	8034812 <_printf_i+0xfa>
 80347ee:	6821      	ldr	r1, [r4, #0]
 80347f0:	6833      	ldr	r3, [r6, #0]
 80347f2:	0608      	lsls	r0, r1, #24
 80347f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80347f8:	d402      	bmi.n	8034800 <_printf_i+0xe8>
 80347fa:	0649      	lsls	r1, r1, #25
 80347fc:	bf48      	it	mi
 80347fe:	b2ad      	uxthmi	r5, r5
 8034800:	2f6f      	cmp	r7, #111	@ 0x6f
 8034802:	4852      	ldr	r0, [pc, #328]	@ (803494c <_printf_i+0x234>)
 8034804:	6033      	str	r3, [r6, #0]
 8034806:	bf14      	ite	ne
 8034808:	230a      	movne	r3, #10
 803480a:	2308      	moveq	r3, #8
 803480c:	2100      	movs	r1, #0
 803480e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8034812:	6866      	ldr	r6, [r4, #4]
 8034814:	60a6      	str	r6, [r4, #8]
 8034816:	2e00      	cmp	r6, #0
 8034818:	db05      	blt.n	8034826 <_printf_i+0x10e>
 803481a:	6821      	ldr	r1, [r4, #0]
 803481c:	432e      	orrs	r6, r5
 803481e:	f021 0104 	bic.w	r1, r1, #4
 8034822:	6021      	str	r1, [r4, #0]
 8034824:	d04b      	beq.n	80348be <_printf_i+0x1a6>
 8034826:	4616      	mov	r6, r2
 8034828:	fbb5 f1f3 	udiv	r1, r5, r3
 803482c:	fb03 5711 	mls	r7, r3, r1, r5
 8034830:	5dc7      	ldrb	r7, [r0, r7]
 8034832:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8034836:	462f      	mov	r7, r5
 8034838:	42bb      	cmp	r3, r7
 803483a:	460d      	mov	r5, r1
 803483c:	d9f4      	bls.n	8034828 <_printf_i+0x110>
 803483e:	2b08      	cmp	r3, #8
 8034840:	d10b      	bne.n	803485a <_printf_i+0x142>
 8034842:	6823      	ldr	r3, [r4, #0]
 8034844:	07df      	lsls	r7, r3, #31
 8034846:	d508      	bpl.n	803485a <_printf_i+0x142>
 8034848:	6923      	ldr	r3, [r4, #16]
 803484a:	6861      	ldr	r1, [r4, #4]
 803484c:	4299      	cmp	r1, r3
 803484e:	bfde      	ittt	le
 8034850:	2330      	movle	r3, #48	@ 0x30
 8034852:	f806 3c01 	strble.w	r3, [r6, #-1]
 8034856:	f106 36ff 	addle.w	r6, r6, #4294967295
 803485a:	1b92      	subs	r2, r2, r6
 803485c:	6122      	str	r2, [r4, #16]
 803485e:	f8cd a000 	str.w	sl, [sp]
 8034862:	464b      	mov	r3, r9
 8034864:	aa03      	add	r2, sp, #12
 8034866:	4621      	mov	r1, r4
 8034868:	4640      	mov	r0, r8
 803486a:	f7ff fee7 	bl	803463c <_printf_common>
 803486e:	3001      	adds	r0, #1
 8034870:	d14a      	bne.n	8034908 <_printf_i+0x1f0>
 8034872:	f04f 30ff 	mov.w	r0, #4294967295
 8034876:	b004      	add	sp, #16
 8034878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803487c:	6823      	ldr	r3, [r4, #0]
 803487e:	f043 0320 	orr.w	r3, r3, #32
 8034882:	6023      	str	r3, [r4, #0]
 8034884:	4832      	ldr	r0, [pc, #200]	@ (8034950 <_printf_i+0x238>)
 8034886:	2778      	movs	r7, #120	@ 0x78
 8034888:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803488c:	6823      	ldr	r3, [r4, #0]
 803488e:	6831      	ldr	r1, [r6, #0]
 8034890:	061f      	lsls	r7, r3, #24
 8034892:	f851 5b04 	ldr.w	r5, [r1], #4
 8034896:	d402      	bmi.n	803489e <_printf_i+0x186>
 8034898:	065f      	lsls	r7, r3, #25
 803489a:	bf48      	it	mi
 803489c:	b2ad      	uxthmi	r5, r5
 803489e:	6031      	str	r1, [r6, #0]
 80348a0:	07d9      	lsls	r1, r3, #31
 80348a2:	bf44      	itt	mi
 80348a4:	f043 0320 	orrmi.w	r3, r3, #32
 80348a8:	6023      	strmi	r3, [r4, #0]
 80348aa:	b11d      	cbz	r5, 80348b4 <_printf_i+0x19c>
 80348ac:	2310      	movs	r3, #16
 80348ae:	e7ad      	b.n	803480c <_printf_i+0xf4>
 80348b0:	4826      	ldr	r0, [pc, #152]	@ (803494c <_printf_i+0x234>)
 80348b2:	e7e9      	b.n	8034888 <_printf_i+0x170>
 80348b4:	6823      	ldr	r3, [r4, #0]
 80348b6:	f023 0320 	bic.w	r3, r3, #32
 80348ba:	6023      	str	r3, [r4, #0]
 80348bc:	e7f6      	b.n	80348ac <_printf_i+0x194>
 80348be:	4616      	mov	r6, r2
 80348c0:	e7bd      	b.n	803483e <_printf_i+0x126>
 80348c2:	6833      	ldr	r3, [r6, #0]
 80348c4:	6825      	ldr	r5, [r4, #0]
 80348c6:	6961      	ldr	r1, [r4, #20]
 80348c8:	1d18      	adds	r0, r3, #4
 80348ca:	6030      	str	r0, [r6, #0]
 80348cc:	062e      	lsls	r6, r5, #24
 80348ce:	681b      	ldr	r3, [r3, #0]
 80348d0:	d501      	bpl.n	80348d6 <_printf_i+0x1be>
 80348d2:	6019      	str	r1, [r3, #0]
 80348d4:	e002      	b.n	80348dc <_printf_i+0x1c4>
 80348d6:	0668      	lsls	r0, r5, #25
 80348d8:	d5fb      	bpl.n	80348d2 <_printf_i+0x1ba>
 80348da:	8019      	strh	r1, [r3, #0]
 80348dc:	2300      	movs	r3, #0
 80348de:	6123      	str	r3, [r4, #16]
 80348e0:	4616      	mov	r6, r2
 80348e2:	e7bc      	b.n	803485e <_printf_i+0x146>
 80348e4:	6833      	ldr	r3, [r6, #0]
 80348e6:	1d1a      	adds	r2, r3, #4
 80348e8:	6032      	str	r2, [r6, #0]
 80348ea:	681e      	ldr	r6, [r3, #0]
 80348ec:	6862      	ldr	r2, [r4, #4]
 80348ee:	2100      	movs	r1, #0
 80348f0:	4630      	mov	r0, r6
 80348f2:	f7db fba5 	bl	8010040 <memchr>
 80348f6:	b108      	cbz	r0, 80348fc <_printf_i+0x1e4>
 80348f8:	1b80      	subs	r0, r0, r6
 80348fa:	6060      	str	r0, [r4, #4]
 80348fc:	6863      	ldr	r3, [r4, #4]
 80348fe:	6123      	str	r3, [r4, #16]
 8034900:	2300      	movs	r3, #0
 8034902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8034906:	e7aa      	b.n	803485e <_printf_i+0x146>
 8034908:	6923      	ldr	r3, [r4, #16]
 803490a:	4632      	mov	r2, r6
 803490c:	4649      	mov	r1, r9
 803490e:	4640      	mov	r0, r8
 8034910:	47d0      	blx	sl
 8034912:	3001      	adds	r0, #1
 8034914:	d0ad      	beq.n	8034872 <_printf_i+0x15a>
 8034916:	6823      	ldr	r3, [r4, #0]
 8034918:	079b      	lsls	r3, r3, #30
 803491a:	d413      	bmi.n	8034944 <_printf_i+0x22c>
 803491c:	68e0      	ldr	r0, [r4, #12]
 803491e:	9b03      	ldr	r3, [sp, #12]
 8034920:	4298      	cmp	r0, r3
 8034922:	bfb8      	it	lt
 8034924:	4618      	movlt	r0, r3
 8034926:	e7a6      	b.n	8034876 <_printf_i+0x15e>
 8034928:	2301      	movs	r3, #1
 803492a:	4632      	mov	r2, r6
 803492c:	4649      	mov	r1, r9
 803492e:	4640      	mov	r0, r8
 8034930:	47d0      	blx	sl
 8034932:	3001      	adds	r0, #1
 8034934:	d09d      	beq.n	8034872 <_printf_i+0x15a>
 8034936:	3501      	adds	r5, #1
 8034938:	68e3      	ldr	r3, [r4, #12]
 803493a:	9903      	ldr	r1, [sp, #12]
 803493c:	1a5b      	subs	r3, r3, r1
 803493e:	42ab      	cmp	r3, r5
 8034940:	dcf2      	bgt.n	8034928 <_printf_i+0x210>
 8034942:	e7eb      	b.n	803491c <_printf_i+0x204>
 8034944:	2500      	movs	r5, #0
 8034946:	f104 0619 	add.w	r6, r4, #25
 803494a:	e7f5      	b.n	8034938 <_printf_i+0x220>
 803494c:	0805998e 	.word	0x0805998e
 8034950:	0805999f 	.word	0x0805999f

08034954 <std>:
 8034954:	2300      	movs	r3, #0
 8034956:	b510      	push	{r4, lr}
 8034958:	4604      	mov	r4, r0
 803495a:	e9c0 3300 	strd	r3, r3, [r0]
 803495e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8034962:	6083      	str	r3, [r0, #8]
 8034964:	8181      	strh	r1, [r0, #12]
 8034966:	6643      	str	r3, [r0, #100]	@ 0x64
 8034968:	81c2      	strh	r2, [r0, #14]
 803496a:	6183      	str	r3, [r0, #24]
 803496c:	4619      	mov	r1, r3
 803496e:	2208      	movs	r2, #8
 8034970:	305c      	adds	r0, #92	@ 0x5c
 8034972:	f000 f966 	bl	8034c42 <memset>
 8034976:	4b0d      	ldr	r3, [pc, #52]	@ (80349ac <std+0x58>)
 8034978:	6263      	str	r3, [r4, #36]	@ 0x24
 803497a:	4b0d      	ldr	r3, [pc, #52]	@ (80349b0 <std+0x5c>)
 803497c:	62a3      	str	r3, [r4, #40]	@ 0x28
 803497e:	4b0d      	ldr	r3, [pc, #52]	@ (80349b4 <std+0x60>)
 8034980:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8034982:	4b0d      	ldr	r3, [pc, #52]	@ (80349b8 <std+0x64>)
 8034984:	6323      	str	r3, [r4, #48]	@ 0x30
 8034986:	4b0d      	ldr	r3, [pc, #52]	@ (80349bc <std+0x68>)
 8034988:	6224      	str	r4, [r4, #32]
 803498a:	429c      	cmp	r4, r3
 803498c:	d006      	beq.n	803499c <std+0x48>
 803498e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8034992:	4294      	cmp	r4, r2
 8034994:	d002      	beq.n	803499c <std+0x48>
 8034996:	33d0      	adds	r3, #208	@ 0xd0
 8034998:	429c      	cmp	r4, r3
 803499a:	d105      	bne.n	80349a8 <std+0x54>
 803499c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80349a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80349a4:	f000 b9d4 	b.w	8034d50 <__retarget_lock_init_recursive>
 80349a8:	bd10      	pop	{r4, pc}
 80349aa:	bf00      	nop
 80349ac:	08034b89 	.word	0x08034b89
 80349b0:	08034bab 	.word	0x08034bab
 80349b4:	08034be3 	.word	0x08034be3
 80349b8:	08034c07 	.word	0x08034c07
 80349bc:	24009a80 	.word	0x24009a80

080349c0 <stdio_exit_handler>:
 80349c0:	4a02      	ldr	r2, [pc, #8]	@ (80349cc <stdio_exit_handler+0xc>)
 80349c2:	4903      	ldr	r1, [pc, #12]	@ (80349d0 <stdio_exit_handler+0x10>)
 80349c4:	4803      	ldr	r0, [pc, #12]	@ (80349d4 <stdio_exit_handler+0x14>)
 80349c6:	f000 b869 	b.w	8034a9c <_fwalk_sglue>
 80349ca:	bf00      	nop
 80349cc:	240082ec 	.word	0x240082ec
 80349d0:	08036495 	.word	0x08036495
 80349d4:	240082fc 	.word	0x240082fc

080349d8 <cleanup_stdio>:
 80349d8:	6841      	ldr	r1, [r0, #4]
 80349da:	4b0c      	ldr	r3, [pc, #48]	@ (8034a0c <cleanup_stdio+0x34>)
 80349dc:	4299      	cmp	r1, r3
 80349de:	b510      	push	{r4, lr}
 80349e0:	4604      	mov	r4, r0
 80349e2:	d001      	beq.n	80349e8 <cleanup_stdio+0x10>
 80349e4:	f001 fd56 	bl	8036494 <_fflush_r>
 80349e8:	68a1      	ldr	r1, [r4, #8]
 80349ea:	4b09      	ldr	r3, [pc, #36]	@ (8034a10 <cleanup_stdio+0x38>)
 80349ec:	4299      	cmp	r1, r3
 80349ee:	d002      	beq.n	80349f6 <cleanup_stdio+0x1e>
 80349f0:	4620      	mov	r0, r4
 80349f2:	f001 fd4f 	bl	8036494 <_fflush_r>
 80349f6:	68e1      	ldr	r1, [r4, #12]
 80349f8:	4b06      	ldr	r3, [pc, #24]	@ (8034a14 <cleanup_stdio+0x3c>)
 80349fa:	4299      	cmp	r1, r3
 80349fc:	d004      	beq.n	8034a08 <cleanup_stdio+0x30>
 80349fe:	4620      	mov	r0, r4
 8034a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8034a04:	f001 bd46 	b.w	8036494 <_fflush_r>
 8034a08:	bd10      	pop	{r4, pc}
 8034a0a:	bf00      	nop
 8034a0c:	24009a80 	.word	0x24009a80
 8034a10:	24009ae8 	.word	0x24009ae8
 8034a14:	24009b50 	.word	0x24009b50

08034a18 <global_stdio_init.part.0>:
 8034a18:	b510      	push	{r4, lr}
 8034a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8034a48 <global_stdio_init.part.0+0x30>)
 8034a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8034a4c <global_stdio_init.part.0+0x34>)
 8034a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8034a50 <global_stdio_init.part.0+0x38>)
 8034a20:	601a      	str	r2, [r3, #0]
 8034a22:	4620      	mov	r0, r4
 8034a24:	2200      	movs	r2, #0
 8034a26:	2104      	movs	r1, #4
 8034a28:	f7ff ff94 	bl	8034954 <std>
 8034a2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8034a30:	2201      	movs	r2, #1
 8034a32:	2109      	movs	r1, #9
 8034a34:	f7ff ff8e 	bl	8034954 <std>
 8034a38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8034a3c:	2202      	movs	r2, #2
 8034a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8034a42:	2112      	movs	r1, #18
 8034a44:	f7ff bf86 	b.w	8034954 <std>
 8034a48:	24009bb8 	.word	0x24009bb8
 8034a4c:	24009a80 	.word	0x24009a80
 8034a50:	080349c1 	.word	0x080349c1

08034a54 <__sfp_lock_acquire>:
 8034a54:	4801      	ldr	r0, [pc, #4]	@ (8034a5c <__sfp_lock_acquire+0x8>)
 8034a56:	f000 b97c 	b.w	8034d52 <__retarget_lock_acquire_recursive>
 8034a5a:	bf00      	nop
 8034a5c:	24009bc1 	.word	0x24009bc1

08034a60 <__sfp_lock_release>:
 8034a60:	4801      	ldr	r0, [pc, #4]	@ (8034a68 <__sfp_lock_release+0x8>)
 8034a62:	f000 b977 	b.w	8034d54 <__retarget_lock_release_recursive>
 8034a66:	bf00      	nop
 8034a68:	24009bc1 	.word	0x24009bc1

08034a6c <__sinit>:
 8034a6c:	b510      	push	{r4, lr}
 8034a6e:	4604      	mov	r4, r0
 8034a70:	f7ff fff0 	bl	8034a54 <__sfp_lock_acquire>
 8034a74:	6a23      	ldr	r3, [r4, #32]
 8034a76:	b11b      	cbz	r3, 8034a80 <__sinit+0x14>
 8034a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8034a7c:	f7ff bff0 	b.w	8034a60 <__sfp_lock_release>
 8034a80:	4b04      	ldr	r3, [pc, #16]	@ (8034a94 <__sinit+0x28>)
 8034a82:	6223      	str	r3, [r4, #32]
 8034a84:	4b04      	ldr	r3, [pc, #16]	@ (8034a98 <__sinit+0x2c>)
 8034a86:	681b      	ldr	r3, [r3, #0]
 8034a88:	2b00      	cmp	r3, #0
 8034a8a:	d1f5      	bne.n	8034a78 <__sinit+0xc>
 8034a8c:	f7ff ffc4 	bl	8034a18 <global_stdio_init.part.0>
 8034a90:	e7f2      	b.n	8034a78 <__sinit+0xc>
 8034a92:	bf00      	nop
 8034a94:	080349d9 	.word	0x080349d9
 8034a98:	24009bb8 	.word	0x24009bb8

08034a9c <_fwalk_sglue>:
 8034a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8034aa0:	4607      	mov	r7, r0
 8034aa2:	4688      	mov	r8, r1
 8034aa4:	4614      	mov	r4, r2
 8034aa6:	2600      	movs	r6, #0
 8034aa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8034aac:	f1b9 0901 	subs.w	r9, r9, #1
 8034ab0:	d505      	bpl.n	8034abe <_fwalk_sglue+0x22>
 8034ab2:	6824      	ldr	r4, [r4, #0]
 8034ab4:	2c00      	cmp	r4, #0
 8034ab6:	d1f7      	bne.n	8034aa8 <_fwalk_sglue+0xc>
 8034ab8:	4630      	mov	r0, r6
 8034aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8034abe:	89ab      	ldrh	r3, [r5, #12]
 8034ac0:	2b01      	cmp	r3, #1
 8034ac2:	d907      	bls.n	8034ad4 <_fwalk_sglue+0x38>
 8034ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8034ac8:	3301      	adds	r3, #1
 8034aca:	d003      	beq.n	8034ad4 <_fwalk_sglue+0x38>
 8034acc:	4629      	mov	r1, r5
 8034ace:	4638      	mov	r0, r7
 8034ad0:	47c0      	blx	r8
 8034ad2:	4306      	orrs	r6, r0
 8034ad4:	3568      	adds	r5, #104	@ 0x68
 8034ad6:	e7e9      	b.n	8034aac <_fwalk_sglue+0x10>

08034ad8 <sniprintf>:
 8034ad8:	b40c      	push	{r2, r3}
 8034ada:	b530      	push	{r4, r5, lr}
 8034adc:	4b18      	ldr	r3, [pc, #96]	@ (8034b40 <sniprintf+0x68>)
 8034ade:	1e0c      	subs	r4, r1, #0
 8034ae0:	681d      	ldr	r5, [r3, #0]
 8034ae2:	b09d      	sub	sp, #116	@ 0x74
 8034ae4:	da08      	bge.n	8034af8 <sniprintf+0x20>
 8034ae6:	238b      	movs	r3, #139	@ 0x8b
 8034ae8:	602b      	str	r3, [r5, #0]
 8034aea:	f04f 30ff 	mov.w	r0, #4294967295
 8034aee:	b01d      	add	sp, #116	@ 0x74
 8034af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8034af4:	b002      	add	sp, #8
 8034af6:	4770      	bx	lr
 8034af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8034afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8034b00:	f04f 0300 	mov.w	r3, #0
 8034b04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8034b06:	bf14      	ite	ne
 8034b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8034b0c:	4623      	moveq	r3, r4
 8034b0e:	9304      	str	r3, [sp, #16]
 8034b10:	9307      	str	r3, [sp, #28]
 8034b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8034b16:	9002      	str	r0, [sp, #8]
 8034b18:	9006      	str	r0, [sp, #24]
 8034b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8034b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8034b20:	ab21      	add	r3, sp, #132	@ 0x84
 8034b22:	a902      	add	r1, sp, #8
 8034b24:	4628      	mov	r0, r5
 8034b26:	9301      	str	r3, [sp, #4]
 8034b28:	f001 fb34 	bl	8036194 <_svfiprintf_r>
 8034b2c:	1c43      	adds	r3, r0, #1
 8034b2e:	bfbc      	itt	lt
 8034b30:	238b      	movlt	r3, #139	@ 0x8b
 8034b32:	602b      	strlt	r3, [r5, #0]
 8034b34:	2c00      	cmp	r4, #0
 8034b36:	d0da      	beq.n	8034aee <sniprintf+0x16>
 8034b38:	9b02      	ldr	r3, [sp, #8]
 8034b3a:	2200      	movs	r2, #0
 8034b3c:	701a      	strb	r2, [r3, #0]
 8034b3e:	e7d6      	b.n	8034aee <sniprintf+0x16>
 8034b40:	240082f8 	.word	0x240082f8

08034b44 <siprintf>:
 8034b44:	b40e      	push	{r1, r2, r3}
 8034b46:	b510      	push	{r4, lr}
 8034b48:	b09d      	sub	sp, #116	@ 0x74
 8034b4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8034b4c:	9002      	str	r0, [sp, #8]
 8034b4e:	9006      	str	r0, [sp, #24]
 8034b50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8034b54:	480a      	ldr	r0, [pc, #40]	@ (8034b80 <siprintf+0x3c>)
 8034b56:	9107      	str	r1, [sp, #28]
 8034b58:	9104      	str	r1, [sp, #16]
 8034b5a:	490a      	ldr	r1, [pc, #40]	@ (8034b84 <siprintf+0x40>)
 8034b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8034b60:	9105      	str	r1, [sp, #20]
 8034b62:	2400      	movs	r4, #0
 8034b64:	a902      	add	r1, sp, #8
 8034b66:	6800      	ldr	r0, [r0, #0]
 8034b68:	9301      	str	r3, [sp, #4]
 8034b6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8034b6c:	f001 fb12 	bl	8036194 <_svfiprintf_r>
 8034b70:	9b02      	ldr	r3, [sp, #8]
 8034b72:	701c      	strb	r4, [r3, #0]
 8034b74:	b01d      	add	sp, #116	@ 0x74
 8034b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8034b7a:	b003      	add	sp, #12
 8034b7c:	4770      	bx	lr
 8034b7e:	bf00      	nop
 8034b80:	240082f8 	.word	0x240082f8
 8034b84:	ffff0208 	.word	0xffff0208

08034b88 <__sread>:
 8034b88:	b510      	push	{r4, lr}
 8034b8a:	460c      	mov	r4, r1
 8034b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8034b90:	f000 f886 	bl	8034ca0 <_read_r>
 8034b94:	2800      	cmp	r0, #0
 8034b96:	bfab      	itete	ge
 8034b98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8034b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8034b9c:	181b      	addge	r3, r3, r0
 8034b9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8034ba2:	bfac      	ite	ge
 8034ba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8034ba6:	81a3      	strhlt	r3, [r4, #12]
 8034ba8:	bd10      	pop	{r4, pc}

08034baa <__swrite>:
 8034baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034bae:	461f      	mov	r7, r3
 8034bb0:	898b      	ldrh	r3, [r1, #12]
 8034bb2:	05db      	lsls	r3, r3, #23
 8034bb4:	4605      	mov	r5, r0
 8034bb6:	460c      	mov	r4, r1
 8034bb8:	4616      	mov	r6, r2
 8034bba:	d505      	bpl.n	8034bc8 <__swrite+0x1e>
 8034bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8034bc0:	2302      	movs	r3, #2
 8034bc2:	2200      	movs	r2, #0
 8034bc4:	f000 f85a 	bl	8034c7c <_lseek_r>
 8034bc8:	89a3      	ldrh	r3, [r4, #12]
 8034bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8034bce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8034bd2:	81a3      	strh	r3, [r4, #12]
 8034bd4:	4632      	mov	r2, r6
 8034bd6:	463b      	mov	r3, r7
 8034bd8:	4628      	mov	r0, r5
 8034bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8034bde:	f000 b881 	b.w	8034ce4 <_write_r>

08034be2 <__sseek>:
 8034be2:	b510      	push	{r4, lr}
 8034be4:	460c      	mov	r4, r1
 8034be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8034bea:	f000 f847 	bl	8034c7c <_lseek_r>
 8034bee:	1c43      	adds	r3, r0, #1
 8034bf0:	89a3      	ldrh	r3, [r4, #12]
 8034bf2:	bf15      	itete	ne
 8034bf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8034bf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8034bfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8034bfe:	81a3      	strheq	r3, [r4, #12]
 8034c00:	bf18      	it	ne
 8034c02:	81a3      	strhne	r3, [r4, #12]
 8034c04:	bd10      	pop	{r4, pc}

08034c06 <__sclose>:
 8034c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8034c0a:	f000 b827 	b.w	8034c5c <_close_r>

08034c0e <memmove>:
 8034c0e:	4288      	cmp	r0, r1
 8034c10:	b510      	push	{r4, lr}
 8034c12:	eb01 0402 	add.w	r4, r1, r2
 8034c16:	d902      	bls.n	8034c1e <memmove+0x10>
 8034c18:	4284      	cmp	r4, r0
 8034c1a:	4623      	mov	r3, r4
 8034c1c:	d807      	bhi.n	8034c2e <memmove+0x20>
 8034c1e:	1e43      	subs	r3, r0, #1
 8034c20:	42a1      	cmp	r1, r4
 8034c22:	d008      	beq.n	8034c36 <memmove+0x28>
 8034c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8034c28:	f803 2f01 	strb.w	r2, [r3, #1]!
 8034c2c:	e7f8      	b.n	8034c20 <memmove+0x12>
 8034c2e:	4402      	add	r2, r0
 8034c30:	4601      	mov	r1, r0
 8034c32:	428a      	cmp	r2, r1
 8034c34:	d100      	bne.n	8034c38 <memmove+0x2a>
 8034c36:	bd10      	pop	{r4, pc}
 8034c38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8034c3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8034c40:	e7f7      	b.n	8034c32 <memmove+0x24>

08034c42 <memset>:
 8034c42:	4402      	add	r2, r0
 8034c44:	4603      	mov	r3, r0
 8034c46:	4293      	cmp	r3, r2
 8034c48:	d100      	bne.n	8034c4c <memset+0xa>
 8034c4a:	4770      	bx	lr
 8034c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8034c50:	e7f9      	b.n	8034c46 <memset+0x4>
	...

08034c54 <_localeconv_r>:
 8034c54:	4800      	ldr	r0, [pc, #0]	@ (8034c58 <_localeconv_r+0x4>)
 8034c56:	4770      	bx	lr
 8034c58:	24008438 	.word	0x24008438

08034c5c <_close_r>:
 8034c5c:	b538      	push	{r3, r4, r5, lr}
 8034c5e:	4d06      	ldr	r5, [pc, #24]	@ (8034c78 <_close_r+0x1c>)
 8034c60:	2300      	movs	r3, #0
 8034c62:	4604      	mov	r4, r0
 8034c64:	4608      	mov	r0, r1
 8034c66:	602b      	str	r3, [r5, #0]
 8034c68:	f002 f912 	bl	8036e90 <_close>
 8034c6c:	1c43      	adds	r3, r0, #1
 8034c6e:	d102      	bne.n	8034c76 <_close_r+0x1a>
 8034c70:	682b      	ldr	r3, [r5, #0]
 8034c72:	b103      	cbz	r3, 8034c76 <_close_r+0x1a>
 8034c74:	6023      	str	r3, [r4, #0]
 8034c76:	bd38      	pop	{r3, r4, r5, pc}
 8034c78:	24009bbc 	.word	0x24009bbc

08034c7c <_lseek_r>:
 8034c7c:	b538      	push	{r3, r4, r5, lr}
 8034c7e:	4d07      	ldr	r5, [pc, #28]	@ (8034c9c <_lseek_r+0x20>)
 8034c80:	4604      	mov	r4, r0
 8034c82:	4608      	mov	r0, r1
 8034c84:	4611      	mov	r1, r2
 8034c86:	2200      	movs	r2, #0
 8034c88:	602a      	str	r2, [r5, #0]
 8034c8a:	461a      	mov	r2, r3
 8034c8c:	f002 f928 	bl	8036ee0 <_lseek>
 8034c90:	1c43      	adds	r3, r0, #1
 8034c92:	d102      	bne.n	8034c9a <_lseek_r+0x1e>
 8034c94:	682b      	ldr	r3, [r5, #0]
 8034c96:	b103      	cbz	r3, 8034c9a <_lseek_r+0x1e>
 8034c98:	6023      	str	r3, [r4, #0]
 8034c9a:	bd38      	pop	{r3, r4, r5, pc}
 8034c9c:	24009bbc 	.word	0x24009bbc

08034ca0 <_read_r>:
 8034ca0:	b538      	push	{r3, r4, r5, lr}
 8034ca2:	4d07      	ldr	r5, [pc, #28]	@ (8034cc0 <_read_r+0x20>)
 8034ca4:	4604      	mov	r4, r0
 8034ca6:	4608      	mov	r0, r1
 8034ca8:	4611      	mov	r1, r2
 8034caa:	2200      	movs	r2, #0
 8034cac:	602a      	str	r2, [r5, #0]
 8034cae:	461a      	mov	r2, r3
 8034cb0:	f002 f91e 	bl	8036ef0 <_read>
 8034cb4:	1c43      	adds	r3, r0, #1
 8034cb6:	d102      	bne.n	8034cbe <_read_r+0x1e>
 8034cb8:	682b      	ldr	r3, [r5, #0]
 8034cba:	b103      	cbz	r3, 8034cbe <_read_r+0x1e>
 8034cbc:	6023      	str	r3, [r4, #0]
 8034cbe:	bd38      	pop	{r3, r4, r5, pc}
 8034cc0:	24009bbc 	.word	0x24009bbc

08034cc4 <_sbrk_r>:
 8034cc4:	b538      	push	{r3, r4, r5, lr}
 8034cc6:	4d06      	ldr	r5, [pc, #24]	@ (8034ce0 <_sbrk_r+0x1c>)
 8034cc8:	2300      	movs	r3, #0
 8034cca:	4604      	mov	r4, r0
 8034ccc:	4608      	mov	r0, r1
 8034cce:	602b      	str	r3, [r5, #0]
 8034cd0:	f002 f916 	bl	8036f00 <_sbrk>
 8034cd4:	1c43      	adds	r3, r0, #1
 8034cd6:	d102      	bne.n	8034cde <_sbrk_r+0x1a>
 8034cd8:	682b      	ldr	r3, [r5, #0]
 8034cda:	b103      	cbz	r3, 8034cde <_sbrk_r+0x1a>
 8034cdc:	6023      	str	r3, [r4, #0]
 8034cde:	bd38      	pop	{r3, r4, r5, pc}
 8034ce0:	24009bbc 	.word	0x24009bbc

08034ce4 <_write_r>:
 8034ce4:	b538      	push	{r3, r4, r5, lr}
 8034ce6:	4d07      	ldr	r5, [pc, #28]	@ (8034d04 <_write_r+0x20>)
 8034ce8:	4604      	mov	r4, r0
 8034cea:	4608      	mov	r0, r1
 8034cec:	4611      	mov	r1, r2
 8034cee:	2200      	movs	r2, #0
 8034cf0:	602a      	str	r2, [r5, #0]
 8034cf2:	461a      	mov	r2, r3
 8034cf4:	f002 f912 	bl	8036f1c <_write>
 8034cf8:	1c43      	adds	r3, r0, #1
 8034cfa:	d102      	bne.n	8034d02 <_write_r+0x1e>
 8034cfc:	682b      	ldr	r3, [r5, #0]
 8034cfe:	b103      	cbz	r3, 8034d02 <_write_r+0x1e>
 8034d00:	6023      	str	r3, [r4, #0]
 8034d02:	bd38      	pop	{r3, r4, r5, pc}
 8034d04:	24009bbc 	.word	0x24009bbc

08034d08 <__libc_init_array>:
 8034d08:	b570      	push	{r4, r5, r6, lr}
 8034d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8034d40 <__libc_init_array+0x38>)
 8034d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8034d44 <__libc_init_array+0x3c>)
 8034d0e:	1b64      	subs	r4, r4, r5
 8034d10:	10a4      	asrs	r4, r4, #2
 8034d12:	2600      	movs	r6, #0
 8034d14:	42a6      	cmp	r6, r4
 8034d16:	d109      	bne.n	8034d2c <__libc_init_array+0x24>
 8034d18:	4d0b      	ldr	r5, [pc, #44]	@ (8034d48 <__libc_init_array+0x40>)
 8034d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8034d4c <__libc_init_array+0x44>)
 8034d1c:	f002 f908 	bl	8036f30 <_init>
 8034d20:	1b64      	subs	r4, r4, r5
 8034d22:	10a4      	asrs	r4, r4, #2
 8034d24:	2600      	movs	r6, #0
 8034d26:	42a6      	cmp	r6, r4
 8034d28:	d105      	bne.n	8034d36 <__libc_init_array+0x2e>
 8034d2a:	bd70      	pop	{r4, r5, r6, pc}
 8034d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8034d30:	4798      	blx	r3
 8034d32:	3601      	adds	r6, #1
 8034d34:	e7ee      	b.n	8034d14 <__libc_init_array+0xc>
 8034d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8034d3a:	4798      	blx	r3
 8034d3c:	3601      	adds	r6, #1
 8034d3e:	e7f2      	b.n	8034d26 <__libc_init_array+0x1e>
 8034d40:	08059f70 	.word	0x08059f70
 8034d44:	08059f70 	.word	0x08059f70
 8034d48:	08059f70 	.word	0x08059f70
 8034d4c:	08059f74 	.word	0x08059f74

08034d50 <__retarget_lock_init_recursive>:
 8034d50:	4770      	bx	lr

08034d52 <__retarget_lock_acquire_recursive>:
 8034d52:	4770      	bx	lr

08034d54 <__retarget_lock_release_recursive>:
 8034d54:	4770      	bx	lr

08034d56 <memcpy>:
 8034d56:	440a      	add	r2, r1
 8034d58:	4291      	cmp	r1, r2
 8034d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8034d5e:	d100      	bne.n	8034d62 <memcpy+0xc>
 8034d60:	4770      	bx	lr
 8034d62:	b510      	push	{r4, lr}
 8034d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8034d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8034d6c:	4291      	cmp	r1, r2
 8034d6e:	d1f9      	bne.n	8034d64 <memcpy+0xe>
 8034d70:	bd10      	pop	{r4, pc}

08034d72 <quorem>:
 8034d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034d76:	6903      	ldr	r3, [r0, #16]
 8034d78:	690c      	ldr	r4, [r1, #16]
 8034d7a:	42a3      	cmp	r3, r4
 8034d7c:	4607      	mov	r7, r0
 8034d7e:	db7e      	blt.n	8034e7e <quorem+0x10c>
 8034d80:	3c01      	subs	r4, #1
 8034d82:	f101 0814 	add.w	r8, r1, #20
 8034d86:	00a3      	lsls	r3, r4, #2
 8034d88:	f100 0514 	add.w	r5, r0, #20
 8034d8c:	9300      	str	r3, [sp, #0]
 8034d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034d92:	9301      	str	r3, [sp, #4]
 8034d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8034d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8034d9c:	3301      	adds	r3, #1
 8034d9e:	429a      	cmp	r2, r3
 8034da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8034da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8034da8:	d32e      	bcc.n	8034e08 <quorem+0x96>
 8034daa:	f04f 0a00 	mov.w	sl, #0
 8034dae:	46c4      	mov	ip, r8
 8034db0:	46ae      	mov	lr, r5
 8034db2:	46d3      	mov	fp, sl
 8034db4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8034db8:	b298      	uxth	r0, r3
 8034dba:	fb06 a000 	mla	r0, r6, r0, sl
 8034dbe:	0c02      	lsrs	r2, r0, #16
 8034dc0:	0c1b      	lsrs	r3, r3, #16
 8034dc2:	fb06 2303 	mla	r3, r6, r3, r2
 8034dc6:	f8de 2000 	ldr.w	r2, [lr]
 8034dca:	b280      	uxth	r0, r0
 8034dcc:	b292      	uxth	r2, r2
 8034dce:	1a12      	subs	r2, r2, r0
 8034dd0:	445a      	add	r2, fp
 8034dd2:	f8de 0000 	ldr.w	r0, [lr]
 8034dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8034dda:	b29b      	uxth	r3, r3
 8034ddc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8034de0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8034de4:	b292      	uxth	r2, r2
 8034de6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8034dea:	45e1      	cmp	r9, ip
 8034dec:	f84e 2b04 	str.w	r2, [lr], #4
 8034df0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8034df4:	d2de      	bcs.n	8034db4 <quorem+0x42>
 8034df6:	9b00      	ldr	r3, [sp, #0]
 8034df8:	58eb      	ldr	r3, [r5, r3]
 8034dfa:	b92b      	cbnz	r3, 8034e08 <quorem+0x96>
 8034dfc:	9b01      	ldr	r3, [sp, #4]
 8034dfe:	3b04      	subs	r3, #4
 8034e00:	429d      	cmp	r5, r3
 8034e02:	461a      	mov	r2, r3
 8034e04:	d32f      	bcc.n	8034e66 <quorem+0xf4>
 8034e06:	613c      	str	r4, [r7, #16]
 8034e08:	4638      	mov	r0, r7
 8034e0a:	f001 f857 	bl	8035ebc <__mcmp>
 8034e0e:	2800      	cmp	r0, #0
 8034e10:	db25      	blt.n	8034e5e <quorem+0xec>
 8034e12:	4629      	mov	r1, r5
 8034e14:	2000      	movs	r0, #0
 8034e16:	f858 2b04 	ldr.w	r2, [r8], #4
 8034e1a:	f8d1 c000 	ldr.w	ip, [r1]
 8034e1e:	fa1f fe82 	uxth.w	lr, r2
 8034e22:	fa1f f38c 	uxth.w	r3, ip
 8034e26:	eba3 030e 	sub.w	r3, r3, lr
 8034e2a:	4403      	add	r3, r0
 8034e2c:	0c12      	lsrs	r2, r2, #16
 8034e2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8034e32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8034e36:	b29b      	uxth	r3, r3
 8034e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034e3c:	45c1      	cmp	r9, r8
 8034e3e:	f841 3b04 	str.w	r3, [r1], #4
 8034e42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8034e46:	d2e6      	bcs.n	8034e16 <quorem+0xa4>
 8034e48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8034e4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034e50:	b922      	cbnz	r2, 8034e5c <quorem+0xea>
 8034e52:	3b04      	subs	r3, #4
 8034e54:	429d      	cmp	r5, r3
 8034e56:	461a      	mov	r2, r3
 8034e58:	d30b      	bcc.n	8034e72 <quorem+0x100>
 8034e5a:	613c      	str	r4, [r7, #16]
 8034e5c:	3601      	adds	r6, #1
 8034e5e:	4630      	mov	r0, r6
 8034e60:	b003      	add	sp, #12
 8034e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034e66:	6812      	ldr	r2, [r2, #0]
 8034e68:	3b04      	subs	r3, #4
 8034e6a:	2a00      	cmp	r2, #0
 8034e6c:	d1cb      	bne.n	8034e06 <quorem+0x94>
 8034e6e:	3c01      	subs	r4, #1
 8034e70:	e7c6      	b.n	8034e00 <quorem+0x8e>
 8034e72:	6812      	ldr	r2, [r2, #0]
 8034e74:	3b04      	subs	r3, #4
 8034e76:	2a00      	cmp	r2, #0
 8034e78:	d1ef      	bne.n	8034e5a <quorem+0xe8>
 8034e7a:	3c01      	subs	r4, #1
 8034e7c:	e7ea      	b.n	8034e54 <quorem+0xe2>
 8034e7e:	2000      	movs	r0, #0
 8034e80:	e7ee      	b.n	8034e60 <quorem+0xee>
 8034e82:	0000      	movs	r0, r0
 8034e84:	0000      	movs	r0, r0
	...

08034e88 <_dtoa_r>:
 8034e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034e8c:	ed2d 8b02 	vpush	{d8}
 8034e90:	69c7      	ldr	r7, [r0, #28]
 8034e92:	b091      	sub	sp, #68	@ 0x44
 8034e94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8034e98:	ec55 4b10 	vmov	r4, r5, d0
 8034e9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8034e9e:	9107      	str	r1, [sp, #28]
 8034ea0:	4681      	mov	r9, r0
 8034ea2:	9209      	str	r2, [sp, #36]	@ 0x24
 8034ea4:	930d      	str	r3, [sp, #52]	@ 0x34
 8034ea6:	b97f      	cbnz	r7, 8034ec8 <_dtoa_r+0x40>
 8034ea8:	2010      	movs	r0, #16
 8034eaa:	f7ff f83b 	bl	8033f24 <malloc>
 8034eae:	4602      	mov	r2, r0
 8034eb0:	f8c9 001c 	str.w	r0, [r9, #28]
 8034eb4:	b920      	cbnz	r0, 8034ec0 <_dtoa_r+0x38>
 8034eb6:	4ba0      	ldr	r3, [pc, #640]	@ (8035138 <_dtoa_r+0x2b0>)
 8034eb8:	21ef      	movs	r1, #239	@ 0xef
 8034eba:	48a0      	ldr	r0, [pc, #640]	@ (803513c <_dtoa_r+0x2b4>)
 8034ebc:	f001 fb12 	bl	80364e4 <__assert_func>
 8034ec0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8034ec4:	6007      	str	r7, [r0, #0]
 8034ec6:	60c7      	str	r7, [r0, #12]
 8034ec8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8034ecc:	6819      	ldr	r1, [r3, #0]
 8034ece:	b159      	cbz	r1, 8034ee8 <_dtoa_r+0x60>
 8034ed0:	685a      	ldr	r2, [r3, #4]
 8034ed2:	604a      	str	r2, [r1, #4]
 8034ed4:	2301      	movs	r3, #1
 8034ed6:	4093      	lsls	r3, r2
 8034ed8:	608b      	str	r3, [r1, #8]
 8034eda:	4648      	mov	r0, r9
 8034edc:	f000 fdbc 	bl	8035a58 <_Bfree>
 8034ee0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8034ee4:	2200      	movs	r2, #0
 8034ee6:	601a      	str	r2, [r3, #0]
 8034ee8:	1e2b      	subs	r3, r5, #0
 8034eea:	bfbb      	ittet	lt
 8034eec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8034ef0:	9303      	strlt	r3, [sp, #12]
 8034ef2:	2300      	movge	r3, #0
 8034ef4:	2201      	movlt	r2, #1
 8034ef6:	bfac      	ite	ge
 8034ef8:	6033      	strge	r3, [r6, #0]
 8034efa:	6032      	strlt	r2, [r6, #0]
 8034efc:	4b90      	ldr	r3, [pc, #576]	@ (8035140 <_dtoa_r+0x2b8>)
 8034efe:	9e03      	ldr	r6, [sp, #12]
 8034f00:	43b3      	bics	r3, r6
 8034f02:	d110      	bne.n	8034f26 <_dtoa_r+0x9e>
 8034f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034f06:	f242 730f 	movw	r3, #9999	@ 0x270f
 8034f0a:	6013      	str	r3, [r2, #0]
 8034f0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8034f10:	4323      	orrs	r3, r4
 8034f12:	f000 84e6 	beq.w	80358e2 <_dtoa_r+0xa5a>
 8034f16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034f18:	4f8a      	ldr	r7, [pc, #552]	@ (8035144 <_dtoa_r+0x2bc>)
 8034f1a:	2b00      	cmp	r3, #0
 8034f1c:	f000 84e8 	beq.w	80358f0 <_dtoa_r+0xa68>
 8034f20:	1cfb      	adds	r3, r7, #3
 8034f22:	f000 bce3 	b.w	80358ec <_dtoa_r+0xa64>
 8034f26:	ed9d 8b02 	vldr	d8, [sp, #8]
 8034f2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8034f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034f32:	d10a      	bne.n	8034f4a <_dtoa_r+0xc2>
 8034f34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034f36:	2301      	movs	r3, #1
 8034f38:	6013      	str	r3, [r2, #0]
 8034f3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034f3c:	b113      	cbz	r3, 8034f44 <_dtoa_r+0xbc>
 8034f3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8034f40:	4b81      	ldr	r3, [pc, #516]	@ (8035148 <_dtoa_r+0x2c0>)
 8034f42:	6013      	str	r3, [r2, #0]
 8034f44:	4f81      	ldr	r7, [pc, #516]	@ (803514c <_dtoa_r+0x2c4>)
 8034f46:	f000 bcd3 	b.w	80358f0 <_dtoa_r+0xa68>
 8034f4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8034f4c:	a90f      	add	r1, sp, #60	@ 0x3c
 8034f4e:	4648      	mov	r0, r9
 8034f50:	eeb0 0b48 	vmov.f64	d0, d8
 8034f54:	f001 f862 	bl	803601c <__d2b>
 8034f58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8034f5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034f5e:	9001      	str	r0, [sp, #4]
 8034f60:	2b00      	cmp	r3, #0
 8034f62:	d045      	beq.n	8034ff0 <_dtoa_r+0x168>
 8034f64:	eeb0 7b48 	vmov.f64	d7, d8
 8034f68:	ee18 1a90 	vmov	r1, s17
 8034f6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8034f70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8034f74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8034f78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8034f7c:	2500      	movs	r5, #0
 8034f7e:	ee07 1a90 	vmov	s15, r1
 8034f82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8034f86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8035120 <_dtoa_r+0x298>
 8034f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8034f8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8035128 <_dtoa_r+0x2a0>
 8034f92:	eea7 6b05 	vfma.f64	d6, d7, d5
 8034f96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8035130 <_dtoa_r+0x2a8>
 8034f9a:	ee07 3a90 	vmov	s15, r3
 8034f9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8034fa2:	eeb0 7b46 	vmov.f64	d7, d6
 8034fa6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8034faa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8034fae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8034fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034fb6:	ee16 8a90 	vmov	r8, s13
 8034fba:	d508      	bpl.n	8034fce <_dtoa_r+0x146>
 8034fbc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8034fc0:	eeb4 6b47 	vcmp.f64	d6, d7
 8034fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034fc8:	bf18      	it	ne
 8034fca:	f108 38ff 	addne.w	r8, r8, #4294967295
 8034fce:	f1b8 0f16 	cmp.w	r8, #22
 8034fd2:	d82b      	bhi.n	803502c <_dtoa_r+0x1a4>
 8034fd4:	495e      	ldr	r1, [pc, #376]	@ (8035150 <_dtoa_r+0x2c8>)
 8034fd6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8034fda:	ed91 7b00 	vldr	d7, [r1]
 8034fde:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8034fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8034fe6:	d501      	bpl.n	8034fec <_dtoa_r+0x164>
 8034fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8034fec:	2100      	movs	r1, #0
 8034fee:	e01e      	b.n	803502e <_dtoa_r+0x1a6>
 8034ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034ff2:	4413      	add	r3, r2
 8034ff4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8034ff8:	2920      	cmp	r1, #32
 8034ffa:	bfc1      	itttt	gt
 8034ffc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8035000:	408e      	lslgt	r6, r1
 8035002:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8035006:	fa24 f101 	lsrgt.w	r1, r4, r1
 803500a:	bfd6      	itet	le
 803500c:	f1c1 0120 	rsble	r1, r1, #32
 8035010:	4331      	orrgt	r1, r6
 8035012:	fa04 f101 	lslle.w	r1, r4, r1
 8035016:	ee07 1a90 	vmov	s15, r1
 803501a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 803501e:	3b01      	subs	r3, #1
 8035020:	ee17 1a90 	vmov	r1, s15
 8035024:	2501      	movs	r5, #1
 8035026:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 803502a:	e7a8      	b.n	8034f7e <_dtoa_r+0xf6>
 803502c:	2101      	movs	r1, #1
 803502e:	1ad2      	subs	r2, r2, r3
 8035030:	1e53      	subs	r3, r2, #1
 8035032:	9306      	str	r3, [sp, #24]
 8035034:	bf45      	ittet	mi
 8035036:	f1c2 0301 	rsbmi	r3, r2, #1
 803503a:	9304      	strmi	r3, [sp, #16]
 803503c:	2300      	movpl	r3, #0
 803503e:	2300      	movmi	r3, #0
 8035040:	bf4c      	ite	mi
 8035042:	9306      	strmi	r3, [sp, #24]
 8035044:	9304      	strpl	r3, [sp, #16]
 8035046:	f1b8 0f00 	cmp.w	r8, #0
 803504a:	910c      	str	r1, [sp, #48]	@ 0x30
 803504c:	db18      	blt.n	8035080 <_dtoa_r+0x1f8>
 803504e:	9b06      	ldr	r3, [sp, #24]
 8035050:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8035054:	4443      	add	r3, r8
 8035056:	9306      	str	r3, [sp, #24]
 8035058:	2300      	movs	r3, #0
 803505a:	9a07      	ldr	r2, [sp, #28]
 803505c:	2a09      	cmp	r2, #9
 803505e:	d845      	bhi.n	80350ec <_dtoa_r+0x264>
 8035060:	2a05      	cmp	r2, #5
 8035062:	bfc4      	itt	gt
 8035064:	3a04      	subgt	r2, #4
 8035066:	9207      	strgt	r2, [sp, #28]
 8035068:	9a07      	ldr	r2, [sp, #28]
 803506a:	f1a2 0202 	sub.w	r2, r2, #2
 803506e:	bfcc      	ite	gt
 8035070:	2400      	movgt	r4, #0
 8035072:	2401      	movle	r4, #1
 8035074:	2a03      	cmp	r2, #3
 8035076:	d844      	bhi.n	8035102 <_dtoa_r+0x27a>
 8035078:	e8df f002 	tbb	[pc, r2]
 803507c:	0b173634 	.word	0x0b173634
 8035080:	9b04      	ldr	r3, [sp, #16]
 8035082:	2200      	movs	r2, #0
 8035084:	eba3 0308 	sub.w	r3, r3, r8
 8035088:	9304      	str	r3, [sp, #16]
 803508a:	920a      	str	r2, [sp, #40]	@ 0x28
 803508c:	f1c8 0300 	rsb	r3, r8, #0
 8035090:	e7e3      	b.n	803505a <_dtoa_r+0x1d2>
 8035092:	2201      	movs	r2, #1
 8035094:	9208      	str	r2, [sp, #32]
 8035096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8035098:	eb08 0b02 	add.w	fp, r8, r2
 803509c:	f10b 0a01 	add.w	sl, fp, #1
 80350a0:	4652      	mov	r2, sl
 80350a2:	2a01      	cmp	r2, #1
 80350a4:	bfb8      	it	lt
 80350a6:	2201      	movlt	r2, #1
 80350a8:	e006      	b.n	80350b8 <_dtoa_r+0x230>
 80350aa:	2201      	movs	r2, #1
 80350ac:	9208      	str	r2, [sp, #32]
 80350ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80350b0:	2a00      	cmp	r2, #0
 80350b2:	dd29      	ble.n	8035108 <_dtoa_r+0x280>
 80350b4:	4693      	mov	fp, r2
 80350b6:	4692      	mov	sl, r2
 80350b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80350bc:	2100      	movs	r1, #0
 80350be:	2004      	movs	r0, #4
 80350c0:	f100 0614 	add.w	r6, r0, #20
 80350c4:	4296      	cmp	r6, r2
 80350c6:	d926      	bls.n	8035116 <_dtoa_r+0x28e>
 80350c8:	6079      	str	r1, [r7, #4]
 80350ca:	4648      	mov	r0, r9
 80350cc:	9305      	str	r3, [sp, #20]
 80350ce:	f000 fc83 	bl	80359d8 <_Balloc>
 80350d2:	9b05      	ldr	r3, [sp, #20]
 80350d4:	4607      	mov	r7, r0
 80350d6:	2800      	cmp	r0, #0
 80350d8:	d13e      	bne.n	8035158 <_dtoa_r+0x2d0>
 80350da:	4b1e      	ldr	r3, [pc, #120]	@ (8035154 <_dtoa_r+0x2cc>)
 80350dc:	4602      	mov	r2, r0
 80350de:	f240 11af 	movw	r1, #431	@ 0x1af
 80350e2:	e6ea      	b.n	8034eba <_dtoa_r+0x32>
 80350e4:	2200      	movs	r2, #0
 80350e6:	e7e1      	b.n	80350ac <_dtoa_r+0x224>
 80350e8:	2200      	movs	r2, #0
 80350ea:	e7d3      	b.n	8035094 <_dtoa_r+0x20c>
 80350ec:	2401      	movs	r4, #1
 80350ee:	2200      	movs	r2, #0
 80350f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80350f4:	f04f 3bff 	mov.w	fp, #4294967295
 80350f8:	2100      	movs	r1, #0
 80350fa:	46da      	mov	sl, fp
 80350fc:	2212      	movs	r2, #18
 80350fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8035100:	e7da      	b.n	80350b8 <_dtoa_r+0x230>
 8035102:	2201      	movs	r2, #1
 8035104:	9208      	str	r2, [sp, #32]
 8035106:	e7f5      	b.n	80350f4 <_dtoa_r+0x26c>
 8035108:	f04f 0b01 	mov.w	fp, #1
 803510c:	46da      	mov	sl, fp
 803510e:	465a      	mov	r2, fp
 8035110:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8035114:	e7d0      	b.n	80350b8 <_dtoa_r+0x230>
 8035116:	3101      	adds	r1, #1
 8035118:	0040      	lsls	r0, r0, #1
 803511a:	e7d1      	b.n	80350c0 <_dtoa_r+0x238>
 803511c:	f3af 8000 	nop.w
 8035120:	636f4361 	.word	0x636f4361
 8035124:	3fd287a7 	.word	0x3fd287a7
 8035128:	8b60c8b3 	.word	0x8b60c8b3
 803512c:	3fc68a28 	.word	0x3fc68a28
 8035130:	509f79fb 	.word	0x509f79fb
 8035134:	3fd34413 	.word	0x3fd34413
 8035138:	080599bd 	.word	0x080599bd
 803513c:	080599d4 	.word	0x080599d4
 8035140:	7ff00000 	.word	0x7ff00000
 8035144:	080599b9 	.word	0x080599b9
 8035148:	0805998d 	.word	0x0805998d
 803514c:	0805998c 	.word	0x0805998c
 8035150:	08059b28 	.word	0x08059b28
 8035154:	08059a2c 	.word	0x08059a2c
 8035158:	f8d9 201c 	ldr.w	r2, [r9, #28]
 803515c:	f1ba 0f0e 	cmp.w	sl, #14
 8035160:	6010      	str	r0, [r2, #0]
 8035162:	d86e      	bhi.n	8035242 <_dtoa_r+0x3ba>
 8035164:	2c00      	cmp	r4, #0
 8035166:	d06c      	beq.n	8035242 <_dtoa_r+0x3ba>
 8035168:	f1b8 0f00 	cmp.w	r8, #0
 803516c:	f340 80b4 	ble.w	80352d8 <_dtoa_r+0x450>
 8035170:	4ac8      	ldr	r2, [pc, #800]	@ (8035494 <_dtoa_r+0x60c>)
 8035172:	f008 010f 	and.w	r1, r8, #15
 8035176:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 803517a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 803517e:	ed92 7b00 	vldr	d7, [r2]
 8035182:	ea4f 1128 	mov.w	r1, r8, asr #4
 8035186:	f000 809b 	beq.w	80352c0 <_dtoa_r+0x438>
 803518a:	4ac3      	ldr	r2, [pc, #780]	@ (8035498 <_dtoa_r+0x610>)
 803518c:	ed92 6b08 	vldr	d6, [r2, #32]
 8035190:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8035194:	ed8d 6b02 	vstr	d6, [sp, #8]
 8035198:	f001 010f 	and.w	r1, r1, #15
 803519c:	2203      	movs	r2, #3
 803519e:	48be      	ldr	r0, [pc, #760]	@ (8035498 <_dtoa_r+0x610>)
 80351a0:	2900      	cmp	r1, #0
 80351a2:	f040 808f 	bne.w	80352c4 <_dtoa_r+0x43c>
 80351a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80351aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80351ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80351b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80351b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80351b8:	2900      	cmp	r1, #0
 80351ba:	f000 80b3 	beq.w	8035324 <_dtoa_r+0x49c>
 80351be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80351c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80351c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80351ca:	f140 80ab 	bpl.w	8035324 <_dtoa_r+0x49c>
 80351ce:	f1ba 0f00 	cmp.w	sl, #0
 80351d2:	f000 80a7 	beq.w	8035324 <_dtoa_r+0x49c>
 80351d6:	f1bb 0f00 	cmp.w	fp, #0
 80351da:	dd30      	ble.n	803523e <_dtoa_r+0x3b6>
 80351dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80351e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80351e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80351e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80351ec:	9105      	str	r1, [sp, #20]
 80351ee:	3201      	adds	r2, #1
 80351f0:	465c      	mov	r4, fp
 80351f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80351f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80351fa:	ee07 2a90 	vmov	s15, r2
 80351fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8035202:	eea7 5b06 	vfma.f64	d5, d7, d6
 8035206:	ee15 2a90 	vmov	r2, s11
 803520a:	ec51 0b15 	vmov	r0, r1, d5
 803520e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8035212:	2c00      	cmp	r4, #0
 8035214:	f040 808a 	bne.w	803532c <_dtoa_r+0x4a4>
 8035218:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 803521c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8035220:	ec41 0b17 	vmov	d7, r0, r1
 8035224:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8035228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803522c:	f300 826a 	bgt.w	8035704 <_dtoa_r+0x87c>
 8035230:	eeb1 7b47 	vneg.f64	d7, d7
 8035234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8035238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803523c:	d423      	bmi.n	8035286 <_dtoa_r+0x3fe>
 803523e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8035242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8035244:	2a00      	cmp	r2, #0
 8035246:	f2c0 8129 	blt.w	803549c <_dtoa_r+0x614>
 803524a:	f1b8 0f0e 	cmp.w	r8, #14
 803524e:	f300 8125 	bgt.w	803549c <_dtoa_r+0x614>
 8035252:	4b90      	ldr	r3, [pc, #576]	@ (8035494 <_dtoa_r+0x60c>)
 8035254:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8035258:	ed93 6b00 	vldr	d6, [r3]
 803525c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803525e:	2b00      	cmp	r3, #0
 8035260:	f280 80c8 	bge.w	80353f4 <_dtoa_r+0x56c>
 8035264:	f1ba 0f00 	cmp.w	sl, #0
 8035268:	f300 80c4 	bgt.w	80353f4 <_dtoa_r+0x56c>
 803526c:	d10b      	bne.n	8035286 <_dtoa_r+0x3fe>
 803526e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8035272:	ee26 6b07 	vmul.f64	d6, d6, d7
 8035276:	ed9d 7b02 	vldr	d7, [sp, #8]
 803527a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 803527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035282:	f2c0 823c 	blt.w	80356fe <_dtoa_r+0x876>
 8035286:	2400      	movs	r4, #0
 8035288:	4625      	mov	r5, r4
 803528a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803528c:	43db      	mvns	r3, r3
 803528e:	9305      	str	r3, [sp, #20]
 8035290:	463e      	mov	r6, r7
 8035292:	f04f 0800 	mov.w	r8, #0
 8035296:	4621      	mov	r1, r4
 8035298:	4648      	mov	r0, r9
 803529a:	f000 fbdd 	bl	8035a58 <_Bfree>
 803529e:	2d00      	cmp	r5, #0
 80352a0:	f000 80a2 	beq.w	80353e8 <_dtoa_r+0x560>
 80352a4:	f1b8 0f00 	cmp.w	r8, #0
 80352a8:	d005      	beq.n	80352b6 <_dtoa_r+0x42e>
 80352aa:	45a8      	cmp	r8, r5
 80352ac:	d003      	beq.n	80352b6 <_dtoa_r+0x42e>
 80352ae:	4641      	mov	r1, r8
 80352b0:	4648      	mov	r0, r9
 80352b2:	f000 fbd1 	bl	8035a58 <_Bfree>
 80352b6:	4629      	mov	r1, r5
 80352b8:	4648      	mov	r0, r9
 80352ba:	f000 fbcd 	bl	8035a58 <_Bfree>
 80352be:	e093      	b.n	80353e8 <_dtoa_r+0x560>
 80352c0:	2202      	movs	r2, #2
 80352c2:	e76c      	b.n	803519e <_dtoa_r+0x316>
 80352c4:	07cc      	lsls	r4, r1, #31
 80352c6:	d504      	bpl.n	80352d2 <_dtoa_r+0x44a>
 80352c8:	ed90 6b00 	vldr	d6, [r0]
 80352cc:	3201      	adds	r2, #1
 80352ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80352d2:	1049      	asrs	r1, r1, #1
 80352d4:	3008      	adds	r0, #8
 80352d6:	e763      	b.n	80351a0 <_dtoa_r+0x318>
 80352d8:	d022      	beq.n	8035320 <_dtoa_r+0x498>
 80352da:	f1c8 0100 	rsb	r1, r8, #0
 80352de:	4a6d      	ldr	r2, [pc, #436]	@ (8035494 <_dtoa_r+0x60c>)
 80352e0:	f001 000f 	and.w	r0, r1, #15
 80352e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80352e8:	ed92 7b00 	vldr	d7, [r2]
 80352ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80352f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80352f4:	4868      	ldr	r0, [pc, #416]	@ (8035498 <_dtoa_r+0x610>)
 80352f6:	1109      	asrs	r1, r1, #4
 80352f8:	2400      	movs	r4, #0
 80352fa:	2202      	movs	r2, #2
 80352fc:	b929      	cbnz	r1, 803530a <_dtoa_r+0x482>
 80352fe:	2c00      	cmp	r4, #0
 8035300:	f43f af57 	beq.w	80351b2 <_dtoa_r+0x32a>
 8035304:	ed8d 7b02 	vstr	d7, [sp, #8]
 8035308:	e753      	b.n	80351b2 <_dtoa_r+0x32a>
 803530a:	07ce      	lsls	r6, r1, #31
 803530c:	d505      	bpl.n	803531a <_dtoa_r+0x492>
 803530e:	ed90 6b00 	vldr	d6, [r0]
 8035312:	3201      	adds	r2, #1
 8035314:	2401      	movs	r4, #1
 8035316:	ee27 7b06 	vmul.f64	d7, d7, d6
 803531a:	1049      	asrs	r1, r1, #1
 803531c:	3008      	adds	r0, #8
 803531e:	e7ed      	b.n	80352fc <_dtoa_r+0x474>
 8035320:	2202      	movs	r2, #2
 8035322:	e746      	b.n	80351b2 <_dtoa_r+0x32a>
 8035324:	f8cd 8014 	str.w	r8, [sp, #20]
 8035328:	4654      	mov	r4, sl
 803532a:	e762      	b.n	80351f2 <_dtoa_r+0x36a>
 803532c:	4a59      	ldr	r2, [pc, #356]	@ (8035494 <_dtoa_r+0x60c>)
 803532e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8035332:	ed12 4b02 	vldr	d4, [r2, #-8]
 8035336:	9a08      	ldr	r2, [sp, #32]
 8035338:	ec41 0b17 	vmov	d7, r0, r1
 803533c:	443c      	add	r4, r7
 803533e:	b34a      	cbz	r2, 8035394 <_dtoa_r+0x50c>
 8035340:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8035344:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8035348:	463e      	mov	r6, r7
 803534a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 803534e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8035352:	ee35 7b47 	vsub.f64	d7, d5, d7
 8035356:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 803535a:	ee14 2a90 	vmov	r2, s9
 803535e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8035362:	3230      	adds	r2, #48	@ 0x30
 8035364:	ee36 6b45 	vsub.f64	d6, d6, d5
 8035368:	eeb4 6bc7 	vcmpe.f64	d6, d7
 803536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035370:	f806 2b01 	strb.w	r2, [r6], #1
 8035374:	d438      	bmi.n	80353e8 <_dtoa_r+0x560>
 8035376:	ee32 5b46 	vsub.f64	d5, d2, d6
 803537a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 803537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035382:	d46e      	bmi.n	8035462 <_dtoa_r+0x5da>
 8035384:	42a6      	cmp	r6, r4
 8035386:	f43f af5a 	beq.w	803523e <_dtoa_r+0x3b6>
 803538a:	ee27 7b03 	vmul.f64	d7, d7, d3
 803538e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8035392:	e7e0      	b.n	8035356 <_dtoa_r+0x4ce>
 8035394:	4621      	mov	r1, r4
 8035396:	463e      	mov	r6, r7
 8035398:	ee27 7b04 	vmul.f64	d7, d7, d4
 803539c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80353a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80353a4:	ee14 2a90 	vmov	r2, s9
 80353a8:	3230      	adds	r2, #48	@ 0x30
 80353aa:	f806 2b01 	strb.w	r2, [r6], #1
 80353ae:	42a6      	cmp	r6, r4
 80353b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80353b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80353b8:	d119      	bne.n	80353ee <_dtoa_r+0x566>
 80353ba:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80353be:	ee37 4b05 	vadd.f64	d4, d7, d5
 80353c2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80353c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80353ca:	dc4a      	bgt.n	8035462 <_dtoa_r+0x5da>
 80353cc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80353d0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80353d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80353d8:	f57f af31 	bpl.w	803523e <_dtoa_r+0x3b6>
 80353dc:	460e      	mov	r6, r1
 80353de:	3901      	subs	r1, #1
 80353e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80353e4:	2b30      	cmp	r3, #48	@ 0x30
 80353e6:	d0f9      	beq.n	80353dc <_dtoa_r+0x554>
 80353e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80353ec:	e027      	b.n	803543e <_dtoa_r+0x5b6>
 80353ee:	ee26 6b03 	vmul.f64	d6, d6, d3
 80353f2:	e7d5      	b.n	80353a0 <_dtoa_r+0x518>
 80353f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80353f8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80353fc:	463e      	mov	r6, r7
 80353fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8035402:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8035406:	ee15 3a10 	vmov	r3, s10
 803540a:	3330      	adds	r3, #48	@ 0x30
 803540c:	f806 3b01 	strb.w	r3, [r6], #1
 8035410:	1bf3      	subs	r3, r6, r7
 8035412:	459a      	cmp	sl, r3
 8035414:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8035418:	eea3 7b46 	vfms.f64	d7, d3, d6
 803541c:	d132      	bne.n	8035484 <_dtoa_r+0x5fc>
 803541e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8035422:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8035426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803542a:	dc18      	bgt.n	803545e <_dtoa_r+0x5d6>
 803542c:	eeb4 7b46 	vcmp.f64	d7, d6
 8035430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035434:	d103      	bne.n	803543e <_dtoa_r+0x5b6>
 8035436:	ee15 3a10 	vmov	r3, s10
 803543a:	07db      	lsls	r3, r3, #31
 803543c:	d40f      	bmi.n	803545e <_dtoa_r+0x5d6>
 803543e:	9901      	ldr	r1, [sp, #4]
 8035440:	4648      	mov	r0, r9
 8035442:	f000 fb09 	bl	8035a58 <_Bfree>
 8035446:	2300      	movs	r3, #0
 8035448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803544a:	7033      	strb	r3, [r6, #0]
 803544c:	f108 0301 	add.w	r3, r8, #1
 8035450:	6013      	str	r3, [r2, #0]
 8035452:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8035454:	2b00      	cmp	r3, #0
 8035456:	f000 824b 	beq.w	80358f0 <_dtoa_r+0xa68>
 803545a:	601e      	str	r6, [r3, #0]
 803545c:	e248      	b.n	80358f0 <_dtoa_r+0xa68>
 803545e:	f8cd 8014 	str.w	r8, [sp, #20]
 8035462:	4633      	mov	r3, r6
 8035464:	461e      	mov	r6, r3
 8035466:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803546a:	2a39      	cmp	r2, #57	@ 0x39
 803546c:	d106      	bne.n	803547c <_dtoa_r+0x5f4>
 803546e:	429f      	cmp	r7, r3
 8035470:	d1f8      	bne.n	8035464 <_dtoa_r+0x5dc>
 8035472:	9a05      	ldr	r2, [sp, #20]
 8035474:	3201      	adds	r2, #1
 8035476:	9205      	str	r2, [sp, #20]
 8035478:	2230      	movs	r2, #48	@ 0x30
 803547a:	703a      	strb	r2, [r7, #0]
 803547c:	781a      	ldrb	r2, [r3, #0]
 803547e:	3201      	adds	r2, #1
 8035480:	701a      	strb	r2, [r3, #0]
 8035482:	e7b1      	b.n	80353e8 <_dtoa_r+0x560>
 8035484:	ee27 7b04 	vmul.f64	d7, d7, d4
 8035488:	eeb5 7b40 	vcmp.f64	d7, #0.0
 803548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8035490:	d1b5      	bne.n	80353fe <_dtoa_r+0x576>
 8035492:	e7d4      	b.n	803543e <_dtoa_r+0x5b6>
 8035494:	08059b28 	.word	0x08059b28
 8035498:	08059b00 	.word	0x08059b00
 803549c:	9908      	ldr	r1, [sp, #32]
 803549e:	2900      	cmp	r1, #0
 80354a0:	f000 80e9 	beq.w	8035676 <_dtoa_r+0x7ee>
 80354a4:	9907      	ldr	r1, [sp, #28]
 80354a6:	2901      	cmp	r1, #1
 80354a8:	f300 80cb 	bgt.w	8035642 <_dtoa_r+0x7ba>
 80354ac:	2d00      	cmp	r5, #0
 80354ae:	f000 80c4 	beq.w	803563a <_dtoa_r+0x7b2>
 80354b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80354b6:	9e04      	ldr	r6, [sp, #16]
 80354b8:	461c      	mov	r4, r3
 80354ba:	9305      	str	r3, [sp, #20]
 80354bc:	9b04      	ldr	r3, [sp, #16]
 80354be:	4413      	add	r3, r2
 80354c0:	9304      	str	r3, [sp, #16]
 80354c2:	9b06      	ldr	r3, [sp, #24]
 80354c4:	2101      	movs	r1, #1
 80354c6:	4413      	add	r3, r2
 80354c8:	4648      	mov	r0, r9
 80354ca:	9306      	str	r3, [sp, #24]
 80354cc:	f000 fb78 	bl	8035bc0 <__i2b>
 80354d0:	9b05      	ldr	r3, [sp, #20]
 80354d2:	4605      	mov	r5, r0
 80354d4:	b166      	cbz	r6, 80354f0 <_dtoa_r+0x668>
 80354d6:	9a06      	ldr	r2, [sp, #24]
 80354d8:	2a00      	cmp	r2, #0
 80354da:	dd09      	ble.n	80354f0 <_dtoa_r+0x668>
 80354dc:	42b2      	cmp	r2, r6
 80354de:	9904      	ldr	r1, [sp, #16]
 80354e0:	bfa8      	it	ge
 80354e2:	4632      	movge	r2, r6
 80354e4:	1a89      	subs	r1, r1, r2
 80354e6:	9104      	str	r1, [sp, #16]
 80354e8:	9906      	ldr	r1, [sp, #24]
 80354ea:	1ab6      	subs	r6, r6, r2
 80354ec:	1a8a      	subs	r2, r1, r2
 80354ee:	9206      	str	r2, [sp, #24]
 80354f0:	b30b      	cbz	r3, 8035536 <_dtoa_r+0x6ae>
 80354f2:	9a08      	ldr	r2, [sp, #32]
 80354f4:	2a00      	cmp	r2, #0
 80354f6:	f000 80c5 	beq.w	8035684 <_dtoa_r+0x7fc>
 80354fa:	2c00      	cmp	r4, #0
 80354fc:	f000 80bf 	beq.w	803567e <_dtoa_r+0x7f6>
 8035500:	4629      	mov	r1, r5
 8035502:	4622      	mov	r2, r4
 8035504:	4648      	mov	r0, r9
 8035506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8035508:	f000 fc12 	bl	8035d30 <__pow5mult>
 803550c:	9a01      	ldr	r2, [sp, #4]
 803550e:	4601      	mov	r1, r0
 8035510:	4605      	mov	r5, r0
 8035512:	4648      	mov	r0, r9
 8035514:	f000 fb6a 	bl	8035bec <__multiply>
 8035518:	9901      	ldr	r1, [sp, #4]
 803551a:	9005      	str	r0, [sp, #20]
 803551c:	4648      	mov	r0, r9
 803551e:	f000 fa9b 	bl	8035a58 <_Bfree>
 8035522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035524:	1b1b      	subs	r3, r3, r4
 8035526:	f000 80b0 	beq.w	803568a <_dtoa_r+0x802>
 803552a:	9905      	ldr	r1, [sp, #20]
 803552c:	461a      	mov	r2, r3
 803552e:	4648      	mov	r0, r9
 8035530:	f000 fbfe 	bl	8035d30 <__pow5mult>
 8035534:	9001      	str	r0, [sp, #4]
 8035536:	2101      	movs	r1, #1
 8035538:	4648      	mov	r0, r9
 803553a:	f000 fb41 	bl	8035bc0 <__i2b>
 803553e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035540:	4604      	mov	r4, r0
 8035542:	2b00      	cmp	r3, #0
 8035544:	f000 81da 	beq.w	80358fc <_dtoa_r+0xa74>
 8035548:	461a      	mov	r2, r3
 803554a:	4601      	mov	r1, r0
 803554c:	4648      	mov	r0, r9
 803554e:	f000 fbef 	bl	8035d30 <__pow5mult>
 8035552:	9b07      	ldr	r3, [sp, #28]
 8035554:	2b01      	cmp	r3, #1
 8035556:	4604      	mov	r4, r0
 8035558:	f300 80a0 	bgt.w	803569c <_dtoa_r+0x814>
 803555c:	9b02      	ldr	r3, [sp, #8]
 803555e:	2b00      	cmp	r3, #0
 8035560:	f040 8096 	bne.w	8035690 <_dtoa_r+0x808>
 8035564:	9b03      	ldr	r3, [sp, #12]
 8035566:	f3c3 0213 	ubfx	r2, r3, #0, #20
 803556a:	2a00      	cmp	r2, #0
 803556c:	f040 8092 	bne.w	8035694 <_dtoa_r+0x80c>
 8035570:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8035574:	0d12      	lsrs	r2, r2, #20
 8035576:	0512      	lsls	r2, r2, #20
 8035578:	2a00      	cmp	r2, #0
 803557a:	f000 808d 	beq.w	8035698 <_dtoa_r+0x810>
 803557e:	9b04      	ldr	r3, [sp, #16]
 8035580:	3301      	adds	r3, #1
 8035582:	9304      	str	r3, [sp, #16]
 8035584:	9b06      	ldr	r3, [sp, #24]
 8035586:	3301      	adds	r3, #1
 8035588:	9306      	str	r3, [sp, #24]
 803558a:	2301      	movs	r3, #1
 803558c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803558e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035590:	2b00      	cmp	r3, #0
 8035592:	f000 81b9 	beq.w	8035908 <_dtoa_r+0xa80>
 8035596:	6922      	ldr	r2, [r4, #16]
 8035598:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 803559c:	6910      	ldr	r0, [r2, #16]
 803559e:	f000 fac3 	bl	8035b28 <__hi0bits>
 80355a2:	f1c0 0020 	rsb	r0, r0, #32
 80355a6:	9b06      	ldr	r3, [sp, #24]
 80355a8:	4418      	add	r0, r3
 80355aa:	f010 001f 	ands.w	r0, r0, #31
 80355ae:	f000 8081 	beq.w	80356b4 <_dtoa_r+0x82c>
 80355b2:	f1c0 0220 	rsb	r2, r0, #32
 80355b6:	2a04      	cmp	r2, #4
 80355b8:	dd73      	ble.n	80356a2 <_dtoa_r+0x81a>
 80355ba:	9b04      	ldr	r3, [sp, #16]
 80355bc:	f1c0 001c 	rsb	r0, r0, #28
 80355c0:	4403      	add	r3, r0
 80355c2:	9304      	str	r3, [sp, #16]
 80355c4:	9b06      	ldr	r3, [sp, #24]
 80355c6:	4406      	add	r6, r0
 80355c8:	4403      	add	r3, r0
 80355ca:	9306      	str	r3, [sp, #24]
 80355cc:	9b04      	ldr	r3, [sp, #16]
 80355ce:	2b00      	cmp	r3, #0
 80355d0:	dd05      	ble.n	80355de <_dtoa_r+0x756>
 80355d2:	9901      	ldr	r1, [sp, #4]
 80355d4:	461a      	mov	r2, r3
 80355d6:	4648      	mov	r0, r9
 80355d8:	f000 fc04 	bl	8035de4 <__lshift>
 80355dc:	9001      	str	r0, [sp, #4]
 80355de:	9b06      	ldr	r3, [sp, #24]
 80355e0:	2b00      	cmp	r3, #0
 80355e2:	dd05      	ble.n	80355f0 <_dtoa_r+0x768>
 80355e4:	4621      	mov	r1, r4
 80355e6:	461a      	mov	r2, r3
 80355e8:	4648      	mov	r0, r9
 80355ea:	f000 fbfb 	bl	8035de4 <__lshift>
 80355ee:	4604      	mov	r4, r0
 80355f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80355f2:	2b00      	cmp	r3, #0
 80355f4:	d060      	beq.n	80356b8 <_dtoa_r+0x830>
 80355f6:	9801      	ldr	r0, [sp, #4]
 80355f8:	4621      	mov	r1, r4
 80355fa:	f000 fc5f 	bl	8035ebc <__mcmp>
 80355fe:	2800      	cmp	r0, #0
 8035600:	da5a      	bge.n	80356b8 <_dtoa_r+0x830>
 8035602:	f108 33ff 	add.w	r3, r8, #4294967295
 8035606:	9305      	str	r3, [sp, #20]
 8035608:	9901      	ldr	r1, [sp, #4]
 803560a:	2300      	movs	r3, #0
 803560c:	220a      	movs	r2, #10
 803560e:	4648      	mov	r0, r9
 8035610:	f000 fa44 	bl	8035a9c <__multadd>
 8035614:	9b08      	ldr	r3, [sp, #32]
 8035616:	9001      	str	r0, [sp, #4]
 8035618:	2b00      	cmp	r3, #0
 803561a:	f000 8177 	beq.w	803590c <_dtoa_r+0xa84>
 803561e:	4629      	mov	r1, r5
 8035620:	2300      	movs	r3, #0
 8035622:	220a      	movs	r2, #10
 8035624:	4648      	mov	r0, r9
 8035626:	f000 fa39 	bl	8035a9c <__multadd>
 803562a:	f1bb 0f00 	cmp.w	fp, #0
 803562e:	4605      	mov	r5, r0
 8035630:	dc6e      	bgt.n	8035710 <_dtoa_r+0x888>
 8035632:	9b07      	ldr	r3, [sp, #28]
 8035634:	2b02      	cmp	r3, #2
 8035636:	dc48      	bgt.n	80356ca <_dtoa_r+0x842>
 8035638:	e06a      	b.n	8035710 <_dtoa_r+0x888>
 803563a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803563c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8035640:	e739      	b.n	80354b6 <_dtoa_r+0x62e>
 8035642:	f10a 34ff 	add.w	r4, sl, #4294967295
 8035646:	42a3      	cmp	r3, r4
 8035648:	db07      	blt.n	803565a <_dtoa_r+0x7d2>
 803564a:	f1ba 0f00 	cmp.w	sl, #0
 803564e:	eba3 0404 	sub.w	r4, r3, r4
 8035652:	db0b      	blt.n	803566c <_dtoa_r+0x7e4>
 8035654:	9e04      	ldr	r6, [sp, #16]
 8035656:	4652      	mov	r2, sl
 8035658:	e72f      	b.n	80354ba <_dtoa_r+0x632>
 803565a:	1ae2      	subs	r2, r4, r3
 803565c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803565e:	9e04      	ldr	r6, [sp, #16]
 8035660:	4413      	add	r3, r2
 8035662:	930a      	str	r3, [sp, #40]	@ 0x28
 8035664:	4652      	mov	r2, sl
 8035666:	4623      	mov	r3, r4
 8035668:	2400      	movs	r4, #0
 803566a:	e726      	b.n	80354ba <_dtoa_r+0x632>
 803566c:	9a04      	ldr	r2, [sp, #16]
 803566e:	eba2 060a 	sub.w	r6, r2, sl
 8035672:	2200      	movs	r2, #0
 8035674:	e721      	b.n	80354ba <_dtoa_r+0x632>
 8035676:	9e04      	ldr	r6, [sp, #16]
 8035678:	9d08      	ldr	r5, [sp, #32]
 803567a:	461c      	mov	r4, r3
 803567c:	e72a      	b.n	80354d4 <_dtoa_r+0x64c>
 803567e:	9a01      	ldr	r2, [sp, #4]
 8035680:	9205      	str	r2, [sp, #20]
 8035682:	e752      	b.n	803552a <_dtoa_r+0x6a2>
 8035684:	9901      	ldr	r1, [sp, #4]
 8035686:	461a      	mov	r2, r3
 8035688:	e751      	b.n	803552e <_dtoa_r+0x6a6>
 803568a:	9b05      	ldr	r3, [sp, #20]
 803568c:	9301      	str	r3, [sp, #4]
 803568e:	e752      	b.n	8035536 <_dtoa_r+0x6ae>
 8035690:	2300      	movs	r3, #0
 8035692:	e77b      	b.n	803558c <_dtoa_r+0x704>
 8035694:	9b02      	ldr	r3, [sp, #8]
 8035696:	e779      	b.n	803558c <_dtoa_r+0x704>
 8035698:	920b      	str	r2, [sp, #44]	@ 0x2c
 803569a:	e778      	b.n	803558e <_dtoa_r+0x706>
 803569c:	2300      	movs	r3, #0
 803569e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80356a0:	e779      	b.n	8035596 <_dtoa_r+0x70e>
 80356a2:	d093      	beq.n	80355cc <_dtoa_r+0x744>
 80356a4:	9b04      	ldr	r3, [sp, #16]
 80356a6:	321c      	adds	r2, #28
 80356a8:	4413      	add	r3, r2
 80356aa:	9304      	str	r3, [sp, #16]
 80356ac:	9b06      	ldr	r3, [sp, #24]
 80356ae:	4416      	add	r6, r2
 80356b0:	4413      	add	r3, r2
 80356b2:	e78a      	b.n	80355ca <_dtoa_r+0x742>
 80356b4:	4602      	mov	r2, r0
 80356b6:	e7f5      	b.n	80356a4 <_dtoa_r+0x81c>
 80356b8:	f1ba 0f00 	cmp.w	sl, #0
 80356bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80356c0:	46d3      	mov	fp, sl
 80356c2:	dc21      	bgt.n	8035708 <_dtoa_r+0x880>
 80356c4:	9b07      	ldr	r3, [sp, #28]
 80356c6:	2b02      	cmp	r3, #2
 80356c8:	dd1e      	ble.n	8035708 <_dtoa_r+0x880>
 80356ca:	f1bb 0f00 	cmp.w	fp, #0
 80356ce:	f47f addc 	bne.w	803528a <_dtoa_r+0x402>
 80356d2:	4621      	mov	r1, r4
 80356d4:	465b      	mov	r3, fp
 80356d6:	2205      	movs	r2, #5
 80356d8:	4648      	mov	r0, r9
 80356da:	f000 f9df 	bl	8035a9c <__multadd>
 80356de:	4601      	mov	r1, r0
 80356e0:	4604      	mov	r4, r0
 80356e2:	9801      	ldr	r0, [sp, #4]
 80356e4:	f000 fbea 	bl	8035ebc <__mcmp>
 80356e8:	2800      	cmp	r0, #0
 80356ea:	f77f adce 	ble.w	803528a <_dtoa_r+0x402>
 80356ee:	463e      	mov	r6, r7
 80356f0:	2331      	movs	r3, #49	@ 0x31
 80356f2:	f806 3b01 	strb.w	r3, [r6], #1
 80356f6:	9b05      	ldr	r3, [sp, #20]
 80356f8:	3301      	adds	r3, #1
 80356fa:	9305      	str	r3, [sp, #20]
 80356fc:	e5c9      	b.n	8035292 <_dtoa_r+0x40a>
 80356fe:	f8cd 8014 	str.w	r8, [sp, #20]
 8035702:	4654      	mov	r4, sl
 8035704:	4625      	mov	r5, r4
 8035706:	e7f2      	b.n	80356ee <_dtoa_r+0x866>
 8035708:	9b08      	ldr	r3, [sp, #32]
 803570a:	2b00      	cmp	r3, #0
 803570c:	f000 8102 	beq.w	8035914 <_dtoa_r+0xa8c>
 8035710:	2e00      	cmp	r6, #0
 8035712:	dd05      	ble.n	8035720 <_dtoa_r+0x898>
 8035714:	4629      	mov	r1, r5
 8035716:	4632      	mov	r2, r6
 8035718:	4648      	mov	r0, r9
 803571a:	f000 fb63 	bl	8035de4 <__lshift>
 803571e:	4605      	mov	r5, r0
 8035720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8035722:	2b00      	cmp	r3, #0
 8035724:	d058      	beq.n	80357d8 <_dtoa_r+0x950>
 8035726:	6869      	ldr	r1, [r5, #4]
 8035728:	4648      	mov	r0, r9
 803572a:	f000 f955 	bl	80359d8 <_Balloc>
 803572e:	4606      	mov	r6, r0
 8035730:	b928      	cbnz	r0, 803573e <_dtoa_r+0x8b6>
 8035732:	4b82      	ldr	r3, [pc, #520]	@ (803593c <_dtoa_r+0xab4>)
 8035734:	4602      	mov	r2, r0
 8035736:	f240 21ef 	movw	r1, #751	@ 0x2ef
 803573a:	f7ff bbbe 	b.w	8034eba <_dtoa_r+0x32>
 803573e:	692a      	ldr	r2, [r5, #16]
 8035740:	3202      	adds	r2, #2
 8035742:	0092      	lsls	r2, r2, #2
 8035744:	f105 010c 	add.w	r1, r5, #12
 8035748:	300c      	adds	r0, #12
 803574a:	f7ff fb04 	bl	8034d56 <memcpy>
 803574e:	2201      	movs	r2, #1
 8035750:	4631      	mov	r1, r6
 8035752:	4648      	mov	r0, r9
 8035754:	f000 fb46 	bl	8035de4 <__lshift>
 8035758:	1c7b      	adds	r3, r7, #1
 803575a:	9304      	str	r3, [sp, #16]
 803575c:	eb07 030b 	add.w	r3, r7, fp
 8035760:	9309      	str	r3, [sp, #36]	@ 0x24
 8035762:	9b02      	ldr	r3, [sp, #8]
 8035764:	f003 0301 	and.w	r3, r3, #1
 8035768:	46a8      	mov	r8, r5
 803576a:	9308      	str	r3, [sp, #32]
 803576c:	4605      	mov	r5, r0
 803576e:	9b04      	ldr	r3, [sp, #16]
 8035770:	9801      	ldr	r0, [sp, #4]
 8035772:	4621      	mov	r1, r4
 8035774:	f103 3bff 	add.w	fp, r3, #4294967295
 8035778:	f7ff fafb 	bl	8034d72 <quorem>
 803577c:	4641      	mov	r1, r8
 803577e:	9002      	str	r0, [sp, #8]
 8035780:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8035784:	9801      	ldr	r0, [sp, #4]
 8035786:	f000 fb99 	bl	8035ebc <__mcmp>
 803578a:	462a      	mov	r2, r5
 803578c:	9006      	str	r0, [sp, #24]
 803578e:	4621      	mov	r1, r4
 8035790:	4648      	mov	r0, r9
 8035792:	f000 fbaf 	bl	8035ef4 <__mdiff>
 8035796:	68c2      	ldr	r2, [r0, #12]
 8035798:	4606      	mov	r6, r0
 803579a:	b9fa      	cbnz	r2, 80357dc <_dtoa_r+0x954>
 803579c:	4601      	mov	r1, r0
 803579e:	9801      	ldr	r0, [sp, #4]
 80357a0:	f000 fb8c 	bl	8035ebc <__mcmp>
 80357a4:	4602      	mov	r2, r0
 80357a6:	4631      	mov	r1, r6
 80357a8:	4648      	mov	r0, r9
 80357aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80357ac:	f000 f954 	bl	8035a58 <_Bfree>
 80357b0:	9b07      	ldr	r3, [sp, #28]
 80357b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80357b4:	9e04      	ldr	r6, [sp, #16]
 80357b6:	ea42 0103 	orr.w	r1, r2, r3
 80357ba:	9b08      	ldr	r3, [sp, #32]
 80357bc:	4319      	orrs	r1, r3
 80357be:	d10f      	bne.n	80357e0 <_dtoa_r+0x958>
 80357c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80357c4:	d028      	beq.n	8035818 <_dtoa_r+0x990>
 80357c6:	9b06      	ldr	r3, [sp, #24]
 80357c8:	2b00      	cmp	r3, #0
 80357ca:	dd02      	ble.n	80357d2 <_dtoa_r+0x94a>
 80357cc:	9b02      	ldr	r3, [sp, #8]
 80357ce:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80357d2:	f88b a000 	strb.w	sl, [fp]
 80357d6:	e55e      	b.n	8035296 <_dtoa_r+0x40e>
 80357d8:	4628      	mov	r0, r5
 80357da:	e7bd      	b.n	8035758 <_dtoa_r+0x8d0>
 80357dc:	2201      	movs	r2, #1
 80357de:	e7e2      	b.n	80357a6 <_dtoa_r+0x91e>
 80357e0:	9b06      	ldr	r3, [sp, #24]
 80357e2:	2b00      	cmp	r3, #0
 80357e4:	db04      	blt.n	80357f0 <_dtoa_r+0x968>
 80357e6:	9907      	ldr	r1, [sp, #28]
 80357e8:	430b      	orrs	r3, r1
 80357ea:	9908      	ldr	r1, [sp, #32]
 80357ec:	430b      	orrs	r3, r1
 80357ee:	d120      	bne.n	8035832 <_dtoa_r+0x9aa>
 80357f0:	2a00      	cmp	r2, #0
 80357f2:	ddee      	ble.n	80357d2 <_dtoa_r+0x94a>
 80357f4:	9901      	ldr	r1, [sp, #4]
 80357f6:	2201      	movs	r2, #1
 80357f8:	4648      	mov	r0, r9
 80357fa:	f000 faf3 	bl	8035de4 <__lshift>
 80357fe:	4621      	mov	r1, r4
 8035800:	9001      	str	r0, [sp, #4]
 8035802:	f000 fb5b 	bl	8035ebc <__mcmp>
 8035806:	2800      	cmp	r0, #0
 8035808:	dc03      	bgt.n	8035812 <_dtoa_r+0x98a>
 803580a:	d1e2      	bne.n	80357d2 <_dtoa_r+0x94a>
 803580c:	f01a 0f01 	tst.w	sl, #1
 8035810:	d0df      	beq.n	80357d2 <_dtoa_r+0x94a>
 8035812:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8035816:	d1d9      	bne.n	80357cc <_dtoa_r+0x944>
 8035818:	2339      	movs	r3, #57	@ 0x39
 803581a:	f88b 3000 	strb.w	r3, [fp]
 803581e:	4633      	mov	r3, r6
 8035820:	461e      	mov	r6, r3
 8035822:	3b01      	subs	r3, #1
 8035824:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8035828:	2a39      	cmp	r2, #57	@ 0x39
 803582a:	d052      	beq.n	80358d2 <_dtoa_r+0xa4a>
 803582c:	3201      	adds	r2, #1
 803582e:	701a      	strb	r2, [r3, #0]
 8035830:	e531      	b.n	8035296 <_dtoa_r+0x40e>
 8035832:	2a00      	cmp	r2, #0
 8035834:	dd07      	ble.n	8035846 <_dtoa_r+0x9be>
 8035836:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 803583a:	d0ed      	beq.n	8035818 <_dtoa_r+0x990>
 803583c:	f10a 0301 	add.w	r3, sl, #1
 8035840:	f88b 3000 	strb.w	r3, [fp]
 8035844:	e527      	b.n	8035296 <_dtoa_r+0x40e>
 8035846:	9b04      	ldr	r3, [sp, #16]
 8035848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803584a:	f803 ac01 	strb.w	sl, [r3, #-1]
 803584e:	4293      	cmp	r3, r2
 8035850:	d029      	beq.n	80358a6 <_dtoa_r+0xa1e>
 8035852:	9901      	ldr	r1, [sp, #4]
 8035854:	2300      	movs	r3, #0
 8035856:	220a      	movs	r2, #10
 8035858:	4648      	mov	r0, r9
 803585a:	f000 f91f 	bl	8035a9c <__multadd>
 803585e:	45a8      	cmp	r8, r5
 8035860:	9001      	str	r0, [sp, #4]
 8035862:	f04f 0300 	mov.w	r3, #0
 8035866:	f04f 020a 	mov.w	r2, #10
 803586a:	4641      	mov	r1, r8
 803586c:	4648      	mov	r0, r9
 803586e:	d107      	bne.n	8035880 <_dtoa_r+0x9f8>
 8035870:	f000 f914 	bl	8035a9c <__multadd>
 8035874:	4680      	mov	r8, r0
 8035876:	4605      	mov	r5, r0
 8035878:	9b04      	ldr	r3, [sp, #16]
 803587a:	3301      	adds	r3, #1
 803587c:	9304      	str	r3, [sp, #16]
 803587e:	e776      	b.n	803576e <_dtoa_r+0x8e6>
 8035880:	f000 f90c 	bl	8035a9c <__multadd>
 8035884:	4629      	mov	r1, r5
 8035886:	4680      	mov	r8, r0
 8035888:	2300      	movs	r3, #0
 803588a:	220a      	movs	r2, #10
 803588c:	4648      	mov	r0, r9
 803588e:	f000 f905 	bl	8035a9c <__multadd>
 8035892:	4605      	mov	r5, r0
 8035894:	e7f0      	b.n	8035878 <_dtoa_r+0x9f0>
 8035896:	f1bb 0f00 	cmp.w	fp, #0
 803589a:	bfcc      	ite	gt
 803589c:	465e      	movgt	r6, fp
 803589e:	2601      	movle	r6, #1
 80358a0:	443e      	add	r6, r7
 80358a2:	f04f 0800 	mov.w	r8, #0
 80358a6:	9901      	ldr	r1, [sp, #4]
 80358a8:	2201      	movs	r2, #1
 80358aa:	4648      	mov	r0, r9
 80358ac:	f000 fa9a 	bl	8035de4 <__lshift>
 80358b0:	4621      	mov	r1, r4
 80358b2:	9001      	str	r0, [sp, #4]
 80358b4:	f000 fb02 	bl	8035ebc <__mcmp>
 80358b8:	2800      	cmp	r0, #0
 80358ba:	dcb0      	bgt.n	803581e <_dtoa_r+0x996>
 80358bc:	d102      	bne.n	80358c4 <_dtoa_r+0xa3c>
 80358be:	f01a 0f01 	tst.w	sl, #1
 80358c2:	d1ac      	bne.n	803581e <_dtoa_r+0x996>
 80358c4:	4633      	mov	r3, r6
 80358c6:	461e      	mov	r6, r3
 80358c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80358cc:	2a30      	cmp	r2, #48	@ 0x30
 80358ce:	d0fa      	beq.n	80358c6 <_dtoa_r+0xa3e>
 80358d0:	e4e1      	b.n	8035296 <_dtoa_r+0x40e>
 80358d2:	429f      	cmp	r7, r3
 80358d4:	d1a4      	bne.n	8035820 <_dtoa_r+0x998>
 80358d6:	9b05      	ldr	r3, [sp, #20]
 80358d8:	3301      	adds	r3, #1
 80358da:	9305      	str	r3, [sp, #20]
 80358dc:	2331      	movs	r3, #49	@ 0x31
 80358de:	703b      	strb	r3, [r7, #0]
 80358e0:	e4d9      	b.n	8035296 <_dtoa_r+0x40e>
 80358e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80358e4:	4f16      	ldr	r7, [pc, #88]	@ (8035940 <_dtoa_r+0xab8>)
 80358e6:	b11b      	cbz	r3, 80358f0 <_dtoa_r+0xa68>
 80358e8:	f107 0308 	add.w	r3, r7, #8
 80358ec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80358ee:	6013      	str	r3, [r2, #0]
 80358f0:	4638      	mov	r0, r7
 80358f2:	b011      	add	sp, #68	@ 0x44
 80358f4:	ecbd 8b02 	vpop	{d8}
 80358f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80358fc:	9b07      	ldr	r3, [sp, #28]
 80358fe:	2b01      	cmp	r3, #1
 8035900:	f77f ae2c 	ble.w	803555c <_dtoa_r+0x6d4>
 8035904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8035908:	2001      	movs	r0, #1
 803590a:	e64c      	b.n	80355a6 <_dtoa_r+0x71e>
 803590c:	f1bb 0f00 	cmp.w	fp, #0
 8035910:	f77f aed8 	ble.w	80356c4 <_dtoa_r+0x83c>
 8035914:	463e      	mov	r6, r7
 8035916:	9801      	ldr	r0, [sp, #4]
 8035918:	4621      	mov	r1, r4
 803591a:	f7ff fa2a 	bl	8034d72 <quorem>
 803591e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8035922:	f806 ab01 	strb.w	sl, [r6], #1
 8035926:	1bf2      	subs	r2, r6, r7
 8035928:	4593      	cmp	fp, r2
 803592a:	ddb4      	ble.n	8035896 <_dtoa_r+0xa0e>
 803592c:	9901      	ldr	r1, [sp, #4]
 803592e:	2300      	movs	r3, #0
 8035930:	220a      	movs	r2, #10
 8035932:	4648      	mov	r0, r9
 8035934:	f000 f8b2 	bl	8035a9c <__multadd>
 8035938:	9001      	str	r0, [sp, #4]
 803593a:	e7ec      	b.n	8035916 <_dtoa_r+0xa8e>
 803593c:	08059a2c 	.word	0x08059a2c
 8035940:	080599b0 	.word	0x080599b0

08035944 <_free_r>:
 8035944:	b538      	push	{r3, r4, r5, lr}
 8035946:	4605      	mov	r5, r0
 8035948:	2900      	cmp	r1, #0
 803594a:	d041      	beq.n	80359d0 <_free_r+0x8c>
 803594c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8035950:	1f0c      	subs	r4, r1, #4
 8035952:	2b00      	cmp	r3, #0
 8035954:	bfb8      	it	lt
 8035956:	18e4      	addlt	r4, r4, r3
 8035958:	f7fe fb8e 	bl	8034078 <__malloc_lock>
 803595c:	4a1d      	ldr	r2, [pc, #116]	@ (80359d4 <_free_r+0x90>)
 803595e:	6813      	ldr	r3, [r2, #0]
 8035960:	b933      	cbnz	r3, 8035970 <_free_r+0x2c>
 8035962:	6063      	str	r3, [r4, #4]
 8035964:	6014      	str	r4, [r2, #0]
 8035966:	4628      	mov	r0, r5
 8035968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803596c:	f7fe bb8a 	b.w	8034084 <__malloc_unlock>
 8035970:	42a3      	cmp	r3, r4
 8035972:	d908      	bls.n	8035986 <_free_r+0x42>
 8035974:	6820      	ldr	r0, [r4, #0]
 8035976:	1821      	adds	r1, r4, r0
 8035978:	428b      	cmp	r3, r1
 803597a:	bf01      	itttt	eq
 803597c:	6819      	ldreq	r1, [r3, #0]
 803597e:	685b      	ldreq	r3, [r3, #4]
 8035980:	1809      	addeq	r1, r1, r0
 8035982:	6021      	streq	r1, [r4, #0]
 8035984:	e7ed      	b.n	8035962 <_free_r+0x1e>
 8035986:	461a      	mov	r2, r3
 8035988:	685b      	ldr	r3, [r3, #4]
 803598a:	b10b      	cbz	r3, 8035990 <_free_r+0x4c>
 803598c:	42a3      	cmp	r3, r4
 803598e:	d9fa      	bls.n	8035986 <_free_r+0x42>
 8035990:	6811      	ldr	r1, [r2, #0]
 8035992:	1850      	adds	r0, r2, r1
 8035994:	42a0      	cmp	r0, r4
 8035996:	d10b      	bne.n	80359b0 <_free_r+0x6c>
 8035998:	6820      	ldr	r0, [r4, #0]
 803599a:	4401      	add	r1, r0
 803599c:	1850      	adds	r0, r2, r1
 803599e:	4283      	cmp	r3, r0
 80359a0:	6011      	str	r1, [r2, #0]
 80359a2:	d1e0      	bne.n	8035966 <_free_r+0x22>
 80359a4:	6818      	ldr	r0, [r3, #0]
 80359a6:	685b      	ldr	r3, [r3, #4]
 80359a8:	6053      	str	r3, [r2, #4]
 80359aa:	4408      	add	r0, r1
 80359ac:	6010      	str	r0, [r2, #0]
 80359ae:	e7da      	b.n	8035966 <_free_r+0x22>
 80359b0:	d902      	bls.n	80359b8 <_free_r+0x74>
 80359b2:	230c      	movs	r3, #12
 80359b4:	602b      	str	r3, [r5, #0]
 80359b6:	e7d6      	b.n	8035966 <_free_r+0x22>
 80359b8:	6820      	ldr	r0, [r4, #0]
 80359ba:	1821      	adds	r1, r4, r0
 80359bc:	428b      	cmp	r3, r1
 80359be:	bf04      	itt	eq
 80359c0:	6819      	ldreq	r1, [r3, #0]
 80359c2:	685b      	ldreq	r3, [r3, #4]
 80359c4:	6063      	str	r3, [r4, #4]
 80359c6:	bf04      	itt	eq
 80359c8:	1809      	addeq	r1, r1, r0
 80359ca:	6021      	streq	r1, [r4, #0]
 80359cc:	6054      	str	r4, [r2, #4]
 80359ce:	e7ca      	b.n	8035966 <_free_r+0x22>
 80359d0:	bd38      	pop	{r3, r4, r5, pc}
 80359d2:	bf00      	nop
 80359d4:	24009a7c 	.word	0x24009a7c

080359d8 <_Balloc>:
 80359d8:	b570      	push	{r4, r5, r6, lr}
 80359da:	69c6      	ldr	r6, [r0, #28]
 80359dc:	4604      	mov	r4, r0
 80359de:	460d      	mov	r5, r1
 80359e0:	b976      	cbnz	r6, 8035a00 <_Balloc+0x28>
 80359e2:	2010      	movs	r0, #16
 80359e4:	f7fe fa9e 	bl	8033f24 <malloc>
 80359e8:	4602      	mov	r2, r0
 80359ea:	61e0      	str	r0, [r4, #28]
 80359ec:	b920      	cbnz	r0, 80359f8 <_Balloc+0x20>
 80359ee:	4b18      	ldr	r3, [pc, #96]	@ (8035a50 <_Balloc+0x78>)
 80359f0:	4818      	ldr	r0, [pc, #96]	@ (8035a54 <_Balloc+0x7c>)
 80359f2:	216b      	movs	r1, #107	@ 0x6b
 80359f4:	f000 fd76 	bl	80364e4 <__assert_func>
 80359f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80359fc:	6006      	str	r6, [r0, #0]
 80359fe:	60c6      	str	r6, [r0, #12]
 8035a00:	69e6      	ldr	r6, [r4, #28]
 8035a02:	68f3      	ldr	r3, [r6, #12]
 8035a04:	b183      	cbz	r3, 8035a28 <_Balloc+0x50>
 8035a06:	69e3      	ldr	r3, [r4, #28]
 8035a08:	68db      	ldr	r3, [r3, #12]
 8035a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8035a0e:	b9b8      	cbnz	r0, 8035a40 <_Balloc+0x68>
 8035a10:	2101      	movs	r1, #1
 8035a12:	fa01 f605 	lsl.w	r6, r1, r5
 8035a16:	1d72      	adds	r2, r6, #5
 8035a18:	0092      	lsls	r2, r2, #2
 8035a1a:	4620      	mov	r0, r4
 8035a1c:	f000 fd80 	bl	8036520 <_calloc_r>
 8035a20:	b160      	cbz	r0, 8035a3c <_Balloc+0x64>
 8035a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8035a26:	e00e      	b.n	8035a46 <_Balloc+0x6e>
 8035a28:	2221      	movs	r2, #33	@ 0x21
 8035a2a:	2104      	movs	r1, #4
 8035a2c:	4620      	mov	r0, r4
 8035a2e:	f000 fd77 	bl	8036520 <_calloc_r>
 8035a32:	69e3      	ldr	r3, [r4, #28]
 8035a34:	60f0      	str	r0, [r6, #12]
 8035a36:	68db      	ldr	r3, [r3, #12]
 8035a38:	2b00      	cmp	r3, #0
 8035a3a:	d1e4      	bne.n	8035a06 <_Balloc+0x2e>
 8035a3c:	2000      	movs	r0, #0
 8035a3e:	bd70      	pop	{r4, r5, r6, pc}
 8035a40:	6802      	ldr	r2, [r0, #0]
 8035a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8035a46:	2300      	movs	r3, #0
 8035a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8035a4c:	e7f7      	b.n	8035a3e <_Balloc+0x66>
 8035a4e:	bf00      	nop
 8035a50:	080599bd 	.word	0x080599bd
 8035a54:	08059a3d 	.word	0x08059a3d

08035a58 <_Bfree>:
 8035a58:	b570      	push	{r4, r5, r6, lr}
 8035a5a:	69c6      	ldr	r6, [r0, #28]
 8035a5c:	4605      	mov	r5, r0
 8035a5e:	460c      	mov	r4, r1
 8035a60:	b976      	cbnz	r6, 8035a80 <_Bfree+0x28>
 8035a62:	2010      	movs	r0, #16
 8035a64:	f7fe fa5e 	bl	8033f24 <malloc>
 8035a68:	4602      	mov	r2, r0
 8035a6a:	61e8      	str	r0, [r5, #28]
 8035a6c:	b920      	cbnz	r0, 8035a78 <_Bfree+0x20>
 8035a6e:	4b09      	ldr	r3, [pc, #36]	@ (8035a94 <_Bfree+0x3c>)
 8035a70:	4809      	ldr	r0, [pc, #36]	@ (8035a98 <_Bfree+0x40>)
 8035a72:	218f      	movs	r1, #143	@ 0x8f
 8035a74:	f000 fd36 	bl	80364e4 <__assert_func>
 8035a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8035a7c:	6006      	str	r6, [r0, #0]
 8035a7e:	60c6      	str	r6, [r0, #12]
 8035a80:	b13c      	cbz	r4, 8035a92 <_Bfree+0x3a>
 8035a82:	69eb      	ldr	r3, [r5, #28]
 8035a84:	6862      	ldr	r2, [r4, #4]
 8035a86:	68db      	ldr	r3, [r3, #12]
 8035a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8035a8c:	6021      	str	r1, [r4, #0]
 8035a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8035a92:	bd70      	pop	{r4, r5, r6, pc}
 8035a94:	080599bd 	.word	0x080599bd
 8035a98:	08059a3d 	.word	0x08059a3d

08035a9c <__multadd>:
 8035a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035aa0:	690d      	ldr	r5, [r1, #16]
 8035aa2:	4607      	mov	r7, r0
 8035aa4:	460c      	mov	r4, r1
 8035aa6:	461e      	mov	r6, r3
 8035aa8:	f101 0c14 	add.w	ip, r1, #20
 8035aac:	2000      	movs	r0, #0
 8035aae:	f8dc 3000 	ldr.w	r3, [ip]
 8035ab2:	b299      	uxth	r1, r3
 8035ab4:	fb02 6101 	mla	r1, r2, r1, r6
 8035ab8:	0c1e      	lsrs	r6, r3, #16
 8035aba:	0c0b      	lsrs	r3, r1, #16
 8035abc:	fb02 3306 	mla	r3, r2, r6, r3
 8035ac0:	b289      	uxth	r1, r1
 8035ac2:	3001      	adds	r0, #1
 8035ac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8035ac8:	4285      	cmp	r5, r0
 8035aca:	f84c 1b04 	str.w	r1, [ip], #4
 8035ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8035ad2:	dcec      	bgt.n	8035aae <__multadd+0x12>
 8035ad4:	b30e      	cbz	r6, 8035b1a <__multadd+0x7e>
 8035ad6:	68a3      	ldr	r3, [r4, #8]
 8035ad8:	42ab      	cmp	r3, r5
 8035ada:	dc19      	bgt.n	8035b10 <__multadd+0x74>
 8035adc:	6861      	ldr	r1, [r4, #4]
 8035ade:	4638      	mov	r0, r7
 8035ae0:	3101      	adds	r1, #1
 8035ae2:	f7ff ff79 	bl	80359d8 <_Balloc>
 8035ae6:	4680      	mov	r8, r0
 8035ae8:	b928      	cbnz	r0, 8035af6 <__multadd+0x5a>
 8035aea:	4602      	mov	r2, r0
 8035aec:	4b0c      	ldr	r3, [pc, #48]	@ (8035b20 <__multadd+0x84>)
 8035aee:	480d      	ldr	r0, [pc, #52]	@ (8035b24 <__multadd+0x88>)
 8035af0:	21ba      	movs	r1, #186	@ 0xba
 8035af2:	f000 fcf7 	bl	80364e4 <__assert_func>
 8035af6:	6922      	ldr	r2, [r4, #16]
 8035af8:	3202      	adds	r2, #2
 8035afa:	f104 010c 	add.w	r1, r4, #12
 8035afe:	0092      	lsls	r2, r2, #2
 8035b00:	300c      	adds	r0, #12
 8035b02:	f7ff f928 	bl	8034d56 <memcpy>
 8035b06:	4621      	mov	r1, r4
 8035b08:	4638      	mov	r0, r7
 8035b0a:	f7ff ffa5 	bl	8035a58 <_Bfree>
 8035b0e:	4644      	mov	r4, r8
 8035b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8035b14:	3501      	adds	r5, #1
 8035b16:	615e      	str	r6, [r3, #20]
 8035b18:	6125      	str	r5, [r4, #16]
 8035b1a:	4620      	mov	r0, r4
 8035b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035b20:	08059a2c 	.word	0x08059a2c
 8035b24:	08059a3d 	.word	0x08059a3d

08035b28 <__hi0bits>:
 8035b28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8035b2c:	4603      	mov	r3, r0
 8035b2e:	bf36      	itet	cc
 8035b30:	0403      	lslcc	r3, r0, #16
 8035b32:	2000      	movcs	r0, #0
 8035b34:	2010      	movcc	r0, #16
 8035b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8035b3a:	bf3c      	itt	cc
 8035b3c:	021b      	lslcc	r3, r3, #8
 8035b3e:	3008      	addcc	r0, #8
 8035b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8035b44:	bf3c      	itt	cc
 8035b46:	011b      	lslcc	r3, r3, #4
 8035b48:	3004      	addcc	r0, #4
 8035b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8035b4e:	bf3c      	itt	cc
 8035b50:	009b      	lslcc	r3, r3, #2
 8035b52:	3002      	addcc	r0, #2
 8035b54:	2b00      	cmp	r3, #0
 8035b56:	db05      	blt.n	8035b64 <__hi0bits+0x3c>
 8035b58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8035b5c:	f100 0001 	add.w	r0, r0, #1
 8035b60:	bf08      	it	eq
 8035b62:	2020      	moveq	r0, #32
 8035b64:	4770      	bx	lr

08035b66 <__lo0bits>:
 8035b66:	6803      	ldr	r3, [r0, #0]
 8035b68:	4602      	mov	r2, r0
 8035b6a:	f013 0007 	ands.w	r0, r3, #7
 8035b6e:	d00b      	beq.n	8035b88 <__lo0bits+0x22>
 8035b70:	07d9      	lsls	r1, r3, #31
 8035b72:	d421      	bmi.n	8035bb8 <__lo0bits+0x52>
 8035b74:	0798      	lsls	r0, r3, #30
 8035b76:	bf49      	itett	mi
 8035b78:	085b      	lsrmi	r3, r3, #1
 8035b7a:	089b      	lsrpl	r3, r3, #2
 8035b7c:	2001      	movmi	r0, #1
 8035b7e:	6013      	strmi	r3, [r2, #0]
 8035b80:	bf5c      	itt	pl
 8035b82:	6013      	strpl	r3, [r2, #0]
 8035b84:	2002      	movpl	r0, #2
 8035b86:	4770      	bx	lr
 8035b88:	b299      	uxth	r1, r3
 8035b8a:	b909      	cbnz	r1, 8035b90 <__lo0bits+0x2a>
 8035b8c:	0c1b      	lsrs	r3, r3, #16
 8035b8e:	2010      	movs	r0, #16
 8035b90:	b2d9      	uxtb	r1, r3
 8035b92:	b909      	cbnz	r1, 8035b98 <__lo0bits+0x32>
 8035b94:	3008      	adds	r0, #8
 8035b96:	0a1b      	lsrs	r3, r3, #8
 8035b98:	0719      	lsls	r1, r3, #28
 8035b9a:	bf04      	itt	eq
 8035b9c:	091b      	lsreq	r3, r3, #4
 8035b9e:	3004      	addeq	r0, #4
 8035ba0:	0799      	lsls	r1, r3, #30
 8035ba2:	bf04      	itt	eq
 8035ba4:	089b      	lsreq	r3, r3, #2
 8035ba6:	3002      	addeq	r0, #2
 8035ba8:	07d9      	lsls	r1, r3, #31
 8035baa:	d403      	bmi.n	8035bb4 <__lo0bits+0x4e>
 8035bac:	085b      	lsrs	r3, r3, #1
 8035bae:	f100 0001 	add.w	r0, r0, #1
 8035bb2:	d003      	beq.n	8035bbc <__lo0bits+0x56>
 8035bb4:	6013      	str	r3, [r2, #0]
 8035bb6:	4770      	bx	lr
 8035bb8:	2000      	movs	r0, #0
 8035bba:	4770      	bx	lr
 8035bbc:	2020      	movs	r0, #32
 8035bbe:	4770      	bx	lr

08035bc0 <__i2b>:
 8035bc0:	b510      	push	{r4, lr}
 8035bc2:	460c      	mov	r4, r1
 8035bc4:	2101      	movs	r1, #1
 8035bc6:	f7ff ff07 	bl	80359d8 <_Balloc>
 8035bca:	4602      	mov	r2, r0
 8035bcc:	b928      	cbnz	r0, 8035bda <__i2b+0x1a>
 8035bce:	4b05      	ldr	r3, [pc, #20]	@ (8035be4 <__i2b+0x24>)
 8035bd0:	4805      	ldr	r0, [pc, #20]	@ (8035be8 <__i2b+0x28>)
 8035bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8035bd6:	f000 fc85 	bl	80364e4 <__assert_func>
 8035bda:	2301      	movs	r3, #1
 8035bdc:	6144      	str	r4, [r0, #20]
 8035bde:	6103      	str	r3, [r0, #16]
 8035be0:	bd10      	pop	{r4, pc}
 8035be2:	bf00      	nop
 8035be4:	08059a2c 	.word	0x08059a2c
 8035be8:	08059a3d 	.word	0x08059a3d

08035bec <__multiply>:
 8035bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035bf0:	4617      	mov	r7, r2
 8035bf2:	690a      	ldr	r2, [r1, #16]
 8035bf4:	693b      	ldr	r3, [r7, #16]
 8035bf6:	429a      	cmp	r2, r3
 8035bf8:	bfa8      	it	ge
 8035bfa:	463b      	movge	r3, r7
 8035bfc:	4689      	mov	r9, r1
 8035bfe:	bfa4      	itt	ge
 8035c00:	460f      	movge	r7, r1
 8035c02:	4699      	movge	r9, r3
 8035c04:	693d      	ldr	r5, [r7, #16]
 8035c06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8035c0a:	68bb      	ldr	r3, [r7, #8]
 8035c0c:	6879      	ldr	r1, [r7, #4]
 8035c0e:	eb05 060a 	add.w	r6, r5, sl
 8035c12:	42b3      	cmp	r3, r6
 8035c14:	b085      	sub	sp, #20
 8035c16:	bfb8      	it	lt
 8035c18:	3101      	addlt	r1, #1
 8035c1a:	f7ff fedd 	bl	80359d8 <_Balloc>
 8035c1e:	b930      	cbnz	r0, 8035c2e <__multiply+0x42>
 8035c20:	4602      	mov	r2, r0
 8035c22:	4b41      	ldr	r3, [pc, #260]	@ (8035d28 <__multiply+0x13c>)
 8035c24:	4841      	ldr	r0, [pc, #260]	@ (8035d2c <__multiply+0x140>)
 8035c26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8035c2a:	f000 fc5b 	bl	80364e4 <__assert_func>
 8035c2e:	f100 0414 	add.w	r4, r0, #20
 8035c32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8035c36:	4623      	mov	r3, r4
 8035c38:	2200      	movs	r2, #0
 8035c3a:	4573      	cmp	r3, lr
 8035c3c:	d320      	bcc.n	8035c80 <__multiply+0x94>
 8035c3e:	f107 0814 	add.w	r8, r7, #20
 8035c42:	f109 0114 	add.w	r1, r9, #20
 8035c46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8035c4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8035c4e:	9302      	str	r3, [sp, #8]
 8035c50:	1beb      	subs	r3, r5, r7
 8035c52:	3b15      	subs	r3, #21
 8035c54:	f023 0303 	bic.w	r3, r3, #3
 8035c58:	3304      	adds	r3, #4
 8035c5a:	3715      	adds	r7, #21
 8035c5c:	42bd      	cmp	r5, r7
 8035c5e:	bf38      	it	cc
 8035c60:	2304      	movcc	r3, #4
 8035c62:	9301      	str	r3, [sp, #4]
 8035c64:	9b02      	ldr	r3, [sp, #8]
 8035c66:	9103      	str	r1, [sp, #12]
 8035c68:	428b      	cmp	r3, r1
 8035c6a:	d80c      	bhi.n	8035c86 <__multiply+0x9a>
 8035c6c:	2e00      	cmp	r6, #0
 8035c6e:	dd03      	ble.n	8035c78 <__multiply+0x8c>
 8035c70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8035c74:	2b00      	cmp	r3, #0
 8035c76:	d055      	beq.n	8035d24 <__multiply+0x138>
 8035c78:	6106      	str	r6, [r0, #16]
 8035c7a:	b005      	add	sp, #20
 8035c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035c80:	f843 2b04 	str.w	r2, [r3], #4
 8035c84:	e7d9      	b.n	8035c3a <__multiply+0x4e>
 8035c86:	f8b1 a000 	ldrh.w	sl, [r1]
 8035c8a:	f1ba 0f00 	cmp.w	sl, #0
 8035c8e:	d01f      	beq.n	8035cd0 <__multiply+0xe4>
 8035c90:	46c4      	mov	ip, r8
 8035c92:	46a1      	mov	r9, r4
 8035c94:	2700      	movs	r7, #0
 8035c96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8035c9a:	f8d9 3000 	ldr.w	r3, [r9]
 8035c9e:	fa1f fb82 	uxth.w	fp, r2
 8035ca2:	b29b      	uxth	r3, r3
 8035ca4:	fb0a 330b 	mla	r3, sl, fp, r3
 8035ca8:	443b      	add	r3, r7
 8035caa:	f8d9 7000 	ldr.w	r7, [r9]
 8035cae:	0c12      	lsrs	r2, r2, #16
 8035cb0:	0c3f      	lsrs	r7, r7, #16
 8035cb2:	fb0a 7202 	mla	r2, sl, r2, r7
 8035cb6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8035cba:	b29b      	uxth	r3, r3
 8035cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035cc0:	4565      	cmp	r5, ip
 8035cc2:	f849 3b04 	str.w	r3, [r9], #4
 8035cc6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8035cca:	d8e4      	bhi.n	8035c96 <__multiply+0xaa>
 8035ccc:	9b01      	ldr	r3, [sp, #4]
 8035cce:	50e7      	str	r7, [r4, r3]
 8035cd0:	9b03      	ldr	r3, [sp, #12]
 8035cd2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8035cd6:	3104      	adds	r1, #4
 8035cd8:	f1b9 0f00 	cmp.w	r9, #0
 8035cdc:	d020      	beq.n	8035d20 <__multiply+0x134>
 8035cde:	6823      	ldr	r3, [r4, #0]
 8035ce0:	4647      	mov	r7, r8
 8035ce2:	46a4      	mov	ip, r4
 8035ce4:	f04f 0a00 	mov.w	sl, #0
 8035ce8:	f8b7 b000 	ldrh.w	fp, [r7]
 8035cec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8035cf0:	fb09 220b 	mla	r2, r9, fp, r2
 8035cf4:	4452      	add	r2, sl
 8035cf6:	b29b      	uxth	r3, r3
 8035cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8035cfc:	f84c 3b04 	str.w	r3, [ip], #4
 8035d00:	f857 3b04 	ldr.w	r3, [r7], #4
 8035d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8035d08:	f8bc 3000 	ldrh.w	r3, [ip]
 8035d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8035d10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8035d14:	42bd      	cmp	r5, r7
 8035d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8035d1a:	d8e5      	bhi.n	8035ce8 <__multiply+0xfc>
 8035d1c:	9a01      	ldr	r2, [sp, #4]
 8035d1e:	50a3      	str	r3, [r4, r2]
 8035d20:	3404      	adds	r4, #4
 8035d22:	e79f      	b.n	8035c64 <__multiply+0x78>
 8035d24:	3e01      	subs	r6, #1
 8035d26:	e7a1      	b.n	8035c6c <__multiply+0x80>
 8035d28:	08059a2c 	.word	0x08059a2c
 8035d2c:	08059a3d 	.word	0x08059a3d

08035d30 <__pow5mult>:
 8035d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035d34:	4615      	mov	r5, r2
 8035d36:	f012 0203 	ands.w	r2, r2, #3
 8035d3a:	4607      	mov	r7, r0
 8035d3c:	460e      	mov	r6, r1
 8035d3e:	d007      	beq.n	8035d50 <__pow5mult+0x20>
 8035d40:	4c25      	ldr	r4, [pc, #148]	@ (8035dd8 <__pow5mult+0xa8>)
 8035d42:	3a01      	subs	r2, #1
 8035d44:	2300      	movs	r3, #0
 8035d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8035d4a:	f7ff fea7 	bl	8035a9c <__multadd>
 8035d4e:	4606      	mov	r6, r0
 8035d50:	10ad      	asrs	r5, r5, #2
 8035d52:	d03d      	beq.n	8035dd0 <__pow5mult+0xa0>
 8035d54:	69fc      	ldr	r4, [r7, #28]
 8035d56:	b97c      	cbnz	r4, 8035d78 <__pow5mult+0x48>
 8035d58:	2010      	movs	r0, #16
 8035d5a:	f7fe f8e3 	bl	8033f24 <malloc>
 8035d5e:	4602      	mov	r2, r0
 8035d60:	61f8      	str	r0, [r7, #28]
 8035d62:	b928      	cbnz	r0, 8035d70 <__pow5mult+0x40>
 8035d64:	4b1d      	ldr	r3, [pc, #116]	@ (8035ddc <__pow5mult+0xac>)
 8035d66:	481e      	ldr	r0, [pc, #120]	@ (8035de0 <__pow5mult+0xb0>)
 8035d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8035d6c:	f000 fbba 	bl	80364e4 <__assert_func>
 8035d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8035d74:	6004      	str	r4, [r0, #0]
 8035d76:	60c4      	str	r4, [r0, #12]
 8035d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8035d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8035d80:	b94c      	cbnz	r4, 8035d96 <__pow5mult+0x66>
 8035d82:	f240 2171 	movw	r1, #625	@ 0x271
 8035d86:	4638      	mov	r0, r7
 8035d88:	f7ff ff1a 	bl	8035bc0 <__i2b>
 8035d8c:	2300      	movs	r3, #0
 8035d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8035d92:	4604      	mov	r4, r0
 8035d94:	6003      	str	r3, [r0, #0]
 8035d96:	f04f 0900 	mov.w	r9, #0
 8035d9a:	07eb      	lsls	r3, r5, #31
 8035d9c:	d50a      	bpl.n	8035db4 <__pow5mult+0x84>
 8035d9e:	4631      	mov	r1, r6
 8035da0:	4622      	mov	r2, r4
 8035da2:	4638      	mov	r0, r7
 8035da4:	f7ff ff22 	bl	8035bec <__multiply>
 8035da8:	4631      	mov	r1, r6
 8035daa:	4680      	mov	r8, r0
 8035dac:	4638      	mov	r0, r7
 8035dae:	f7ff fe53 	bl	8035a58 <_Bfree>
 8035db2:	4646      	mov	r6, r8
 8035db4:	106d      	asrs	r5, r5, #1
 8035db6:	d00b      	beq.n	8035dd0 <__pow5mult+0xa0>
 8035db8:	6820      	ldr	r0, [r4, #0]
 8035dba:	b938      	cbnz	r0, 8035dcc <__pow5mult+0x9c>
 8035dbc:	4622      	mov	r2, r4
 8035dbe:	4621      	mov	r1, r4
 8035dc0:	4638      	mov	r0, r7
 8035dc2:	f7ff ff13 	bl	8035bec <__multiply>
 8035dc6:	6020      	str	r0, [r4, #0]
 8035dc8:	f8c0 9000 	str.w	r9, [r0]
 8035dcc:	4604      	mov	r4, r0
 8035dce:	e7e4      	b.n	8035d9a <__pow5mult+0x6a>
 8035dd0:	4630      	mov	r0, r6
 8035dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035dd6:	bf00      	nop
 8035dd8:	08059af0 	.word	0x08059af0
 8035ddc:	080599bd 	.word	0x080599bd
 8035de0:	08059a3d 	.word	0x08059a3d

08035de4 <__lshift>:
 8035de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035de8:	460c      	mov	r4, r1
 8035dea:	6849      	ldr	r1, [r1, #4]
 8035dec:	6923      	ldr	r3, [r4, #16]
 8035dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8035df2:	68a3      	ldr	r3, [r4, #8]
 8035df4:	4607      	mov	r7, r0
 8035df6:	4691      	mov	r9, r2
 8035df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8035dfc:	f108 0601 	add.w	r6, r8, #1
 8035e00:	42b3      	cmp	r3, r6
 8035e02:	db0b      	blt.n	8035e1c <__lshift+0x38>
 8035e04:	4638      	mov	r0, r7
 8035e06:	f7ff fde7 	bl	80359d8 <_Balloc>
 8035e0a:	4605      	mov	r5, r0
 8035e0c:	b948      	cbnz	r0, 8035e22 <__lshift+0x3e>
 8035e0e:	4602      	mov	r2, r0
 8035e10:	4b28      	ldr	r3, [pc, #160]	@ (8035eb4 <__lshift+0xd0>)
 8035e12:	4829      	ldr	r0, [pc, #164]	@ (8035eb8 <__lshift+0xd4>)
 8035e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8035e18:	f000 fb64 	bl	80364e4 <__assert_func>
 8035e1c:	3101      	adds	r1, #1
 8035e1e:	005b      	lsls	r3, r3, #1
 8035e20:	e7ee      	b.n	8035e00 <__lshift+0x1c>
 8035e22:	2300      	movs	r3, #0
 8035e24:	f100 0114 	add.w	r1, r0, #20
 8035e28:	f100 0210 	add.w	r2, r0, #16
 8035e2c:	4618      	mov	r0, r3
 8035e2e:	4553      	cmp	r3, sl
 8035e30:	db33      	blt.n	8035e9a <__lshift+0xb6>
 8035e32:	6920      	ldr	r0, [r4, #16]
 8035e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8035e38:	f104 0314 	add.w	r3, r4, #20
 8035e3c:	f019 091f 	ands.w	r9, r9, #31
 8035e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8035e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8035e48:	d02b      	beq.n	8035ea2 <__lshift+0xbe>
 8035e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8035e4e:	468a      	mov	sl, r1
 8035e50:	2200      	movs	r2, #0
 8035e52:	6818      	ldr	r0, [r3, #0]
 8035e54:	fa00 f009 	lsl.w	r0, r0, r9
 8035e58:	4310      	orrs	r0, r2
 8035e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8035e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8035e62:	459c      	cmp	ip, r3
 8035e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8035e68:	d8f3      	bhi.n	8035e52 <__lshift+0x6e>
 8035e6a:	ebac 0304 	sub.w	r3, ip, r4
 8035e6e:	3b15      	subs	r3, #21
 8035e70:	f023 0303 	bic.w	r3, r3, #3
 8035e74:	3304      	adds	r3, #4
 8035e76:	f104 0015 	add.w	r0, r4, #21
 8035e7a:	4560      	cmp	r0, ip
 8035e7c:	bf88      	it	hi
 8035e7e:	2304      	movhi	r3, #4
 8035e80:	50ca      	str	r2, [r1, r3]
 8035e82:	b10a      	cbz	r2, 8035e88 <__lshift+0xa4>
 8035e84:	f108 0602 	add.w	r6, r8, #2
 8035e88:	3e01      	subs	r6, #1
 8035e8a:	4638      	mov	r0, r7
 8035e8c:	612e      	str	r6, [r5, #16]
 8035e8e:	4621      	mov	r1, r4
 8035e90:	f7ff fde2 	bl	8035a58 <_Bfree>
 8035e94:	4628      	mov	r0, r5
 8035e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8035e9e:	3301      	adds	r3, #1
 8035ea0:	e7c5      	b.n	8035e2e <__lshift+0x4a>
 8035ea2:	3904      	subs	r1, #4
 8035ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8035ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8035eac:	459c      	cmp	ip, r3
 8035eae:	d8f9      	bhi.n	8035ea4 <__lshift+0xc0>
 8035eb0:	e7ea      	b.n	8035e88 <__lshift+0xa4>
 8035eb2:	bf00      	nop
 8035eb4:	08059a2c 	.word	0x08059a2c
 8035eb8:	08059a3d 	.word	0x08059a3d

08035ebc <__mcmp>:
 8035ebc:	690a      	ldr	r2, [r1, #16]
 8035ebe:	4603      	mov	r3, r0
 8035ec0:	6900      	ldr	r0, [r0, #16]
 8035ec2:	1a80      	subs	r0, r0, r2
 8035ec4:	b530      	push	{r4, r5, lr}
 8035ec6:	d10e      	bne.n	8035ee6 <__mcmp+0x2a>
 8035ec8:	3314      	adds	r3, #20
 8035eca:	3114      	adds	r1, #20
 8035ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8035ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8035ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8035ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8035edc:	4295      	cmp	r5, r2
 8035ede:	d003      	beq.n	8035ee8 <__mcmp+0x2c>
 8035ee0:	d205      	bcs.n	8035eee <__mcmp+0x32>
 8035ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8035ee6:	bd30      	pop	{r4, r5, pc}
 8035ee8:	42a3      	cmp	r3, r4
 8035eea:	d3f3      	bcc.n	8035ed4 <__mcmp+0x18>
 8035eec:	e7fb      	b.n	8035ee6 <__mcmp+0x2a>
 8035eee:	2001      	movs	r0, #1
 8035ef0:	e7f9      	b.n	8035ee6 <__mcmp+0x2a>
	...

08035ef4 <__mdiff>:
 8035ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035ef8:	4689      	mov	r9, r1
 8035efa:	4606      	mov	r6, r0
 8035efc:	4611      	mov	r1, r2
 8035efe:	4648      	mov	r0, r9
 8035f00:	4614      	mov	r4, r2
 8035f02:	f7ff ffdb 	bl	8035ebc <__mcmp>
 8035f06:	1e05      	subs	r5, r0, #0
 8035f08:	d112      	bne.n	8035f30 <__mdiff+0x3c>
 8035f0a:	4629      	mov	r1, r5
 8035f0c:	4630      	mov	r0, r6
 8035f0e:	f7ff fd63 	bl	80359d8 <_Balloc>
 8035f12:	4602      	mov	r2, r0
 8035f14:	b928      	cbnz	r0, 8035f22 <__mdiff+0x2e>
 8035f16:	4b3f      	ldr	r3, [pc, #252]	@ (8036014 <__mdiff+0x120>)
 8035f18:	f240 2137 	movw	r1, #567	@ 0x237
 8035f1c:	483e      	ldr	r0, [pc, #248]	@ (8036018 <__mdiff+0x124>)
 8035f1e:	f000 fae1 	bl	80364e4 <__assert_func>
 8035f22:	2301      	movs	r3, #1
 8035f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8035f28:	4610      	mov	r0, r2
 8035f2a:	b003      	add	sp, #12
 8035f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035f30:	bfbc      	itt	lt
 8035f32:	464b      	movlt	r3, r9
 8035f34:	46a1      	movlt	r9, r4
 8035f36:	4630      	mov	r0, r6
 8035f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8035f3c:	bfba      	itte	lt
 8035f3e:	461c      	movlt	r4, r3
 8035f40:	2501      	movlt	r5, #1
 8035f42:	2500      	movge	r5, #0
 8035f44:	f7ff fd48 	bl	80359d8 <_Balloc>
 8035f48:	4602      	mov	r2, r0
 8035f4a:	b918      	cbnz	r0, 8035f54 <__mdiff+0x60>
 8035f4c:	4b31      	ldr	r3, [pc, #196]	@ (8036014 <__mdiff+0x120>)
 8035f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8035f52:	e7e3      	b.n	8035f1c <__mdiff+0x28>
 8035f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8035f58:	6926      	ldr	r6, [r4, #16]
 8035f5a:	60c5      	str	r5, [r0, #12]
 8035f5c:	f109 0310 	add.w	r3, r9, #16
 8035f60:	f109 0514 	add.w	r5, r9, #20
 8035f64:	f104 0e14 	add.w	lr, r4, #20
 8035f68:	f100 0b14 	add.w	fp, r0, #20
 8035f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8035f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8035f74:	9301      	str	r3, [sp, #4]
 8035f76:	46d9      	mov	r9, fp
 8035f78:	f04f 0c00 	mov.w	ip, #0
 8035f7c:	9b01      	ldr	r3, [sp, #4]
 8035f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8035f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8035f86:	9301      	str	r3, [sp, #4]
 8035f88:	fa1f f38a 	uxth.w	r3, sl
 8035f8c:	4619      	mov	r1, r3
 8035f8e:	b283      	uxth	r3, r0
 8035f90:	1acb      	subs	r3, r1, r3
 8035f92:	0c00      	lsrs	r0, r0, #16
 8035f94:	4463      	add	r3, ip
 8035f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8035f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8035f9e:	b29b      	uxth	r3, r3
 8035fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8035fa4:	4576      	cmp	r6, lr
 8035fa6:	f849 3b04 	str.w	r3, [r9], #4
 8035faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8035fae:	d8e5      	bhi.n	8035f7c <__mdiff+0x88>
 8035fb0:	1b33      	subs	r3, r6, r4
 8035fb2:	3b15      	subs	r3, #21
 8035fb4:	f023 0303 	bic.w	r3, r3, #3
 8035fb8:	3415      	adds	r4, #21
 8035fba:	3304      	adds	r3, #4
 8035fbc:	42a6      	cmp	r6, r4
 8035fbe:	bf38      	it	cc
 8035fc0:	2304      	movcc	r3, #4
 8035fc2:	441d      	add	r5, r3
 8035fc4:	445b      	add	r3, fp
 8035fc6:	461e      	mov	r6, r3
 8035fc8:	462c      	mov	r4, r5
 8035fca:	4544      	cmp	r4, r8
 8035fcc:	d30e      	bcc.n	8035fec <__mdiff+0xf8>
 8035fce:	f108 0103 	add.w	r1, r8, #3
 8035fd2:	1b49      	subs	r1, r1, r5
 8035fd4:	f021 0103 	bic.w	r1, r1, #3
 8035fd8:	3d03      	subs	r5, #3
 8035fda:	45a8      	cmp	r8, r5
 8035fdc:	bf38      	it	cc
 8035fde:	2100      	movcc	r1, #0
 8035fe0:	440b      	add	r3, r1
 8035fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8035fe6:	b191      	cbz	r1, 803600e <__mdiff+0x11a>
 8035fe8:	6117      	str	r7, [r2, #16]
 8035fea:	e79d      	b.n	8035f28 <__mdiff+0x34>
 8035fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8035ff0:	46e6      	mov	lr, ip
 8035ff2:	0c08      	lsrs	r0, r1, #16
 8035ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8035ff8:	4471      	add	r1, lr
 8035ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8035ffe:	b289      	uxth	r1, r1
 8036000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8036004:	f846 1b04 	str.w	r1, [r6], #4
 8036008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803600c:	e7dd      	b.n	8035fca <__mdiff+0xd6>
 803600e:	3f01      	subs	r7, #1
 8036010:	e7e7      	b.n	8035fe2 <__mdiff+0xee>
 8036012:	bf00      	nop
 8036014:	08059a2c 	.word	0x08059a2c
 8036018:	08059a3d 	.word	0x08059a3d

0803601c <__d2b>:
 803601c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8036020:	460f      	mov	r7, r1
 8036022:	2101      	movs	r1, #1
 8036024:	ec59 8b10 	vmov	r8, r9, d0
 8036028:	4616      	mov	r6, r2
 803602a:	f7ff fcd5 	bl	80359d8 <_Balloc>
 803602e:	4604      	mov	r4, r0
 8036030:	b930      	cbnz	r0, 8036040 <__d2b+0x24>
 8036032:	4602      	mov	r2, r0
 8036034:	4b23      	ldr	r3, [pc, #140]	@ (80360c4 <__d2b+0xa8>)
 8036036:	4824      	ldr	r0, [pc, #144]	@ (80360c8 <__d2b+0xac>)
 8036038:	f240 310f 	movw	r1, #783	@ 0x30f
 803603c:	f000 fa52 	bl	80364e4 <__assert_func>
 8036040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8036044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036048:	b10d      	cbz	r5, 803604e <__d2b+0x32>
 803604a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803604e:	9301      	str	r3, [sp, #4]
 8036050:	f1b8 0300 	subs.w	r3, r8, #0
 8036054:	d023      	beq.n	803609e <__d2b+0x82>
 8036056:	4668      	mov	r0, sp
 8036058:	9300      	str	r3, [sp, #0]
 803605a:	f7ff fd84 	bl	8035b66 <__lo0bits>
 803605e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8036062:	b1d0      	cbz	r0, 803609a <__d2b+0x7e>
 8036064:	f1c0 0320 	rsb	r3, r0, #32
 8036068:	fa02 f303 	lsl.w	r3, r2, r3
 803606c:	430b      	orrs	r3, r1
 803606e:	40c2      	lsrs	r2, r0
 8036070:	6163      	str	r3, [r4, #20]
 8036072:	9201      	str	r2, [sp, #4]
 8036074:	9b01      	ldr	r3, [sp, #4]
 8036076:	61a3      	str	r3, [r4, #24]
 8036078:	2b00      	cmp	r3, #0
 803607a:	bf0c      	ite	eq
 803607c:	2201      	moveq	r2, #1
 803607e:	2202      	movne	r2, #2
 8036080:	6122      	str	r2, [r4, #16]
 8036082:	b1a5      	cbz	r5, 80360ae <__d2b+0x92>
 8036084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8036088:	4405      	add	r5, r0
 803608a:	603d      	str	r5, [r7, #0]
 803608c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8036090:	6030      	str	r0, [r6, #0]
 8036092:	4620      	mov	r0, r4
 8036094:	b003      	add	sp, #12
 8036096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803609a:	6161      	str	r1, [r4, #20]
 803609c:	e7ea      	b.n	8036074 <__d2b+0x58>
 803609e:	a801      	add	r0, sp, #4
 80360a0:	f7ff fd61 	bl	8035b66 <__lo0bits>
 80360a4:	9b01      	ldr	r3, [sp, #4]
 80360a6:	6163      	str	r3, [r4, #20]
 80360a8:	3020      	adds	r0, #32
 80360aa:	2201      	movs	r2, #1
 80360ac:	e7e8      	b.n	8036080 <__d2b+0x64>
 80360ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80360b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80360b6:	6038      	str	r0, [r7, #0]
 80360b8:	6918      	ldr	r0, [r3, #16]
 80360ba:	f7ff fd35 	bl	8035b28 <__hi0bits>
 80360be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80360c2:	e7e5      	b.n	8036090 <__d2b+0x74>
 80360c4:	08059a2c 	.word	0x08059a2c
 80360c8:	08059a3d 	.word	0x08059a3d

080360cc <_malloc_usable_size_r>:
 80360cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80360d0:	1f18      	subs	r0, r3, #4
 80360d2:	2b00      	cmp	r3, #0
 80360d4:	bfbc      	itt	lt
 80360d6:	580b      	ldrlt	r3, [r1, r0]
 80360d8:	18c0      	addlt	r0, r0, r3
 80360da:	4770      	bx	lr

080360dc <__ssputs_r>:
 80360dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80360e0:	688e      	ldr	r6, [r1, #8]
 80360e2:	461f      	mov	r7, r3
 80360e4:	42be      	cmp	r6, r7
 80360e6:	680b      	ldr	r3, [r1, #0]
 80360e8:	4682      	mov	sl, r0
 80360ea:	460c      	mov	r4, r1
 80360ec:	4690      	mov	r8, r2
 80360ee:	d82d      	bhi.n	803614c <__ssputs_r+0x70>
 80360f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80360f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80360f8:	d026      	beq.n	8036148 <__ssputs_r+0x6c>
 80360fa:	6965      	ldr	r5, [r4, #20]
 80360fc:	6909      	ldr	r1, [r1, #16]
 80360fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8036102:	eba3 0901 	sub.w	r9, r3, r1
 8036106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803610a:	1c7b      	adds	r3, r7, #1
 803610c:	444b      	add	r3, r9
 803610e:	106d      	asrs	r5, r5, #1
 8036110:	429d      	cmp	r5, r3
 8036112:	bf38      	it	cc
 8036114:	461d      	movcc	r5, r3
 8036116:	0553      	lsls	r3, r2, #21
 8036118:	d527      	bpl.n	803616a <__ssputs_r+0x8e>
 803611a:	4629      	mov	r1, r5
 803611c:	f7fd ff2c 	bl	8033f78 <_malloc_r>
 8036120:	4606      	mov	r6, r0
 8036122:	b360      	cbz	r0, 803617e <__ssputs_r+0xa2>
 8036124:	6921      	ldr	r1, [r4, #16]
 8036126:	464a      	mov	r2, r9
 8036128:	f7fe fe15 	bl	8034d56 <memcpy>
 803612c:	89a3      	ldrh	r3, [r4, #12]
 803612e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8036132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8036136:	81a3      	strh	r3, [r4, #12]
 8036138:	6126      	str	r6, [r4, #16]
 803613a:	6165      	str	r5, [r4, #20]
 803613c:	444e      	add	r6, r9
 803613e:	eba5 0509 	sub.w	r5, r5, r9
 8036142:	6026      	str	r6, [r4, #0]
 8036144:	60a5      	str	r5, [r4, #8]
 8036146:	463e      	mov	r6, r7
 8036148:	42be      	cmp	r6, r7
 803614a:	d900      	bls.n	803614e <__ssputs_r+0x72>
 803614c:	463e      	mov	r6, r7
 803614e:	6820      	ldr	r0, [r4, #0]
 8036150:	4632      	mov	r2, r6
 8036152:	4641      	mov	r1, r8
 8036154:	f7fe fd5b 	bl	8034c0e <memmove>
 8036158:	68a3      	ldr	r3, [r4, #8]
 803615a:	1b9b      	subs	r3, r3, r6
 803615c:	60a3      	str	r3, [r4, #8]
 803615e:	6823      	ldr	r3, [r4, #0]
 8036160:	4433      	add	r3, r6
 8036162:	6023      	str	r3, [r4, #0]
 8036164:	2000      	movs	r0, #0
 8036166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803616a:	462a      	mov	r2, r5
 803616c:	f7fd ff90 	bl	8034090 <_realloc_r>
 8036170:	4606      	mov	r6, r0
 8036172:	2800      	cmp	r0, #0
 8036174:	d1e0      	bne.n	8036138 <__ssputs_r+0x5c>
 8036176:	6921      	ldr	r1, [r4, #16]
 8036178:	4650      	mov	r0, sl
 803617a:	f7ff fbe3 	bl	8035944 <_free_r>
 803617e:	230c      	movs	r3, #12
 8036180:	f8ca 3000 	str.w	r3, [sl]
 8036184:	89a3      	ldrh	r3, [r4, #12]
 8036186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803618a:	81a3      	strh	r3, [r4, #12]
 803618c:	f04f 30ff 	mov.w	r0, #4294967295
 8036190:	e7e9      	b.n	8036166 <__ssputs_r+0x8a>
	...

08036194 <_svfiprintf_r>:
 8036194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036198:	4698      	mov	r8, r3
 803619a:	898b      	ldrh	r3, [r1, #12]
 803619c:	061b      	lsls	r3, r3, #24
 803619e:	b09d      	sub	sp, #116	@ 0x74
 80361a0:	4607      	mov	r7, r0
 80361a2:	460d      	mov	r5, r1
 80361a4:	4614      	mov	r4, r2
 80361a6:	d510      	bpl.n	80361ca <_svfiprintf_r+0x36>
 80361a8:	690b      	ldr	r3, [r1, #16]
 80361aa:	b973      	cbnz	r3, 80361ca <_svfiprintf_r+0x36>
 80361ac:	2140      	movs	r1, #64	@ 0x40
 80361ae:	f7fd fee3 	bl	8033f78 <_malloc_r>
 80361b2:	6028      	str	r0, [r5, #0]
 80361b4:	6128      	str	r0, [r5, #16]
 80361b6:	b930      	cbnz	r0, 80361c6 <_svfiprintf_r+0x32>
 80361b8:	230c      	movs	r3, #12
 80361ba:	603b      	str	r3, [r7, #0]
 80361bc:	f04f 30ff 	mov.w	r0, #4294967295
 80361c0:	b01d      	add	sp, #116	@ 0x74
 80361c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80361c6:	2340      	movs	r3, #64	@ 0x40
 80361c8:	616b      	str	r3, [r5, #20]
 80361ca:	2300      	movs	r3, #0
 80361cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80361ce:	2320      	movs	r3, #32
 80361d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80361d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80361d8:	2330      	movs	r3, #48	@ 0x30
 80361da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8036378 <_svfiprintf_r+0x1e4>
 80361de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80361e2:	f04f 0901 	mov.w	r9, #1
 80361e6:	4623      	mov	r3, r4
 80361e8:	469a      	mov	sl, r3
 80361ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80361ee:	b10a      	cbz	r2, 80361f4 <_svfiprintf_r+0x60>
 80361f0:	2a25      	cmp	r2, #37	@ 0x25
 80361f2:	d1f9      	bne.n	80361e8 <_svfiprintf_r+0x54>
 80361f4:	ebba 0b04 	subs.w	fp, sl, r4
 80361f8:	d00b      	beq.n	8036212 <_svfiprintf_r+0x7e>
 80361fa:	465b      	mov	r3, fp
 80361fc:	4622      	mov	r2, r4
 80361fe:	4629      	mov	r1, r5
 8036200:	4638      	mov	r0, r7
 8036202:	f7ff ff6b 	bl	80360dc <__ssputs_r>
 8036206:	3001      	adds	r0, #1
 8036208:	f000 80a7 	beq.w	803635a <_svfiprintf_r+0x1c6>
 803620c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803620e:	445a      	add	r2, fp
 8036210:	9209      	str	r2, [sp, #36]	@ 0x24
 8036212:	f89a 3000 	ldrb.w	r3, [sl]
 8036216:	2b00      	cmp	r3, #0
 8036218:	f000 809f 	beq.w	803635a <_svfiprintf_r+0x1c6>
 803621c:	2300      	movs	r3, #0
 803621e:	f04f 32ff 	mov.w	r2, #4294967295
 8036222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8036226:	f10a 0a01 	add.w	sl, sl, #1
 803622a:	9304      	str	r3, [sp, #16]
 803622c:	9307      	str	r3, [sp, #28]
 803622e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8036232:	931a      	str	r3, [sp, #104]	@ 0x68
 8036234:	4654      	mov	r4, sl
 8036236:	2205      	movs	r2, #5
 8036238:	f814 1b01 	ldrb.w	r1, [r4], #1
 803623c:	484e      	ldr	r0, [pc, #312]	@ (8036378 <_svfiprintf_r+0x1e4>)
 803623e:	f7d9 feff 	bl	8010040 <memchr>
 8036242:	9a04      	ldr	r2, [sp, #16]
 8036244:	b9d8      	cbnz	r0, 803627e <_svfiprintf_r+0xea>
 8036246:	06d0      	lsls	r0, r2, #27
 8036248:	bf44      	itt	mi
 803624a:	2320      	movmi	r3, #32
 803624c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8036250:	0711      	lsls	r1, r2, #28
 8036252:	bf44      	itt	mi
 8036254:	232b      	movmi	r3, #43	@ 0x2b
 8036256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803625a:	f89a 3000 	ldrb.w	r3, [sl]
 803625e:	2b2a      	cmp	r3, #42	@ 0x2a
 8036260:	d015      	beq.n	803628e <_svfiprintf_r+0xfa>
 8036262:	9a07      	ldr	r2, [sp, #28]
 8036264:	4654      	mov	r4, sl
 8036266:	2000      	movs	r0, #0
 8036268:	f04f 0c0a 	mov.w	ip, #10
 803626c:	4621      	mov	r1, r4
 803626e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036272:	3b30      	subs	r3, #48	@ 0x30
 8036274:	2b09      	cmp	r3, #9
 8036276:	d94b      	bls.n	8036310 <_svfiprintf_r+0x17c>
 8036278:	b1b0      	cbz	r0, 80362a8 <_svfiprintf_r+0x114>
 803627a:	9207      	str	r2, [sp, #28]
 803627c:	e014      	b.n	80362a8 <_svfiprintf_r+0x114>
 803627e:	eba0 0308 	sub.w	r3, r0, r8
 8036282:	fa09 f303 	lsl.w	r3, r9, r3
 8036286:	4313      	orrs	r3, r2
 8036288:	9304      	str	r3, [sp, #16]
 803628a:	46a2      	mov	sl, r4
 803628c:	e7d2      	b.n	8036234 <_svfiprintf_r+0xa0>
 803628e:	9b03      	ldr	r3, [sp, #12]
 8036290:	1d19      	adds	r1, r3, #4
 8036292:	681b      	ldr	r3, [r3, #0]
 8036294:	9103      	str	r1, [sp, #12]
 8036296:	2b00      	cmp	r3, #0
 8036298:	bfbb      	ittet	lt
 803629a:	425b      	neglt	r3, r3
 803629c:	f042 0202 	orrlt.w	r2, r2, #2
 80362a0:	9307      	strge	r3, [sp, #28]
 80362a2:	9307      	strlt	r3, [sp, #28]
 80362a4:	bfb8      	it	lt
 80362a6:	9204      	strlt	r2, [sp, #16]
 80362a8:	7823      	ldrb	r3, [r4, #0]
 80362aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80362ac:	d10a      	bne.n	80362c4 <_svfiprintf_r+0x130>
 80362ae:	7863      	ldrb	r3, [r4, #1]
 80362b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80362b2:	d132      	bne.n	803631a <_svfiprintf_r+0x186>
 80362b4:	9b03      	ldr	r3, [sp, #12]
 80362b6:	1d1a      	adds	r2, r3, #4
 80362b8:	681b      	ldr	r3, [r3, #0]
 80362ba:	9203      	str	r2, [sp, #12]
 80362bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80362c0:	3402      	adds	r4, #2
 80362c2:	9305      	str	r3, [sp, #20]
 80362c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8036388 <_svfiprintf_r+0x1f4>
 80362c8:	7821      	ldrb	r1, [r4, #0]
 80362ca:	2203      	movs	r2, #3
 80362cc:	4650      	mov	r0, sl
 80362ce:	f7d9 feb7 	bl	8010040 <memchr>
 80362d2:	b138      	cbz	r0, 80362e4 <_svfiprintf_r+0x150>
 80362d4:	9b04      	ldr	r3, [sp, #16]
 80362d6:	eba0 000a 	sub.w	r0, r0, sl
 80362da:	2240      	movs	r2, #64	@ 0x40
 80362dc:	4082      	lsls	r2, r0
 80362de:	4313      	orrs	r3, r2
 80362e0:	3401      	adds	r4, #1
 80362e2:	9304      	str	r3, [sp, #16]
 80362e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80362e8:	4824      	ldr	r0, [pc, #144]	@ (803637c <_svfiprintf_r+0x1e8>)
 80362ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80362ee:	2206      	movs	r2, #6
 80362f0:	f7d9 fea6 	bl	8010040 <memchr>
 80362f4:	2800      	cmp	r0, #0
 80362f6:	d036      	beq.n	8036366 <_svfiprintf_r+0x1d2>
 80362f8:	4b21      	ldr	r3, [pc, #132]	@ (8036380 <_svfiprintf_r+0x1ec>)
 80362fa:	bb1b      	cbnz	r3, 8036344 <_svfiprintf_r+0x1b0>
 80362fc:	9b03      	ldr	r3, [sp, #12]
 80362fe:	3307      	adds	r3, #7
 8036300:	f023 0307 	bic.w	r3, r3, #7
 8036304:	3308      	adds	r3, #8
 8036306:	9303      	str	r3, [sp, #12]
 8036308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803630a:	4433      	add	r3, r6
 803630c:	9309      	str	r3, [sp, #36]	@ 0x24
 803630e:	e76a      	b.n	80361e6 <_svfiprintf_r+0x52>
 8036310:	fb0c 3202 	mla	r2, ip, r2, r3
 8036314:	460c      	mov	r4, r1
 8036316:	2001      	movs	r0, #1
 8036318:	e7a8      	b.n	803626c <_svfiprintf_r+0xd8>
 803631a:	2300      	movs	r3, #0
 803631c:	3401      	adds	r4, #1
 803631e:	9305      	str	r3, [sp, #20]
 8036320:	4619      	mov	r1, r3
 8036322:	f04f 0c0a 	mov.w	ip, #10
 8036326:	4620      	mov	r0, r4
 8036328:	f810 2b01 	ldrb.w	r2, [r0], #1
 803632c:	3a30      	subs	r2, #48	@ 0x30
 803632e:	2a09      	cmp	r2, #9
 8036330:	d903      	bls.n	803633a <_svfiprintf_r+0x1a6>
 8036332:	2b00      	cmp	r3, #0
 8036334:	d0c6      	beq.n	80362c4 <_svfiprintf_r+0x130>
 8036336:	9105      	str	r1, [sp, #20]
 8036338:	e7c4      	b.n	80362c4 <_svfiprintf_r+0x130>
 803633a:	fb0c 2101 	mla	r1, ip, r1, r2
 803633e:	4604      	mov	r4, r0
 8036340:	2301      	movs	r3, #1
 8036342:	e7f0      	b.n	8036326 <_svfiprintf_r+0x192>
 8036344:	ab03      	add	r3, sp, #12
 8036346:	9300      	str	r3, [sp, #0]
 8036348:	462a      	mov	r2, r5
 803634a:	4b0e      	ldr	r3, [pc, #56]	@ (8036384 <_svfiprintf_r+0x1f0>)
 803634c:	a904      	add	r1, sp, #16
 803634e:	4638      	mov	r0, r7
 8036350:	f7fd ff5a 	bl	8034208 <_printf_float>
 8036354:	1c42      	adds	r2, r0, #1
 8036356:	4606      	mov	r6, r0
 8036358:	d1d6      	bne.n	8036308 <_svfiprintf_r+0x174>
 803635a:	89ab      	ldrh	r3, [r5, #12]
 803635c:	065b      	lsls	r3, r3, #25
 803635e:	f53f af2d 	bmi.w	80361bc <_svfiprintf_r+0x28>
 8036362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8036364:	e72c      	b.n	80361c0 <_svfiprintf_r+0x2c>
 8036366:	ab03      	add	r3, sp, #12
 8036368:	9300      	str	r3, [sp, #0]
 803636a:	462a      	mov	r2, r5
 803636c:	4b05      	ldr	r3, [pc, #20]	@ (8036384 <_svfiprintf_r+0x1f0>)
 803636e:	a904      	add	r1, sp, #16
 8036370:	4638      	mov	r0, r7
 8036372:	f7fe f9d1 	bl	8034718 <_printf_i>
 8036376:	e7ed      	b.n	8036354 <_svfiprintf_r+0x1c0>
 8036378:	08059a96 	.word	0x08059a96
 803637c:	08059aa0 	.word	0x08059aa0
 8036380:	08034209 	.word	0x08034209
 8036384:	080360dd 	.word	0x080360dd
 8036388:	08059a9c 	.word	0x08059a9c

0803638c <__sflush_r>:
 803638c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8036390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036394:	0716      	lsls	r6, r2, #28
 8036396:	4605      	mov	r5, r0
 8036398:	460c      	mov	r4, r1
 803639a:	d454      	bmi.n	8036446 <__sflush_r+0xba>
 803639c:	684b      	ldr	r3, [r1, #4]
 803639e:	2b00      	cmp	r3, #0
 80363a0:	dc02      	bgt.n	80363a8 <__sflush_r+0x1c>
 80363a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80363a4:	2b00      	cmp	r3, #0
 80363a6:	dd48      	ble.n	803643a <__sflush_r+0xae>
 80363a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80363aa:	2e00      	cmp	r6, #0
 80363ac:	d045      	beq.n	803643a <__sflush_r+0xae>
 80363ae:	2300      	movs	r3, #0
 80363b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80363b4:	682f      	ldr	r7, [r5, #0]
 80363b6:	6a21      	ldr	r1, [r4, #32]
 80363b8:	602b      	str	r3, [r5, #0]
 80363ba:	d030      	beq.n	803641e <__sflush_r+0x92>
 80363bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80363be:	89a3      	ldrh	r3, [r4, #12]
 80363c0:	0759      	lsls	r1, r3, #29
 80363c2:	d505      	bpl.n	80363d0 <__sflush_r+0x44>
 80363c4:	6863      	ldr	r3, [r4, #4]
 80363c6:	1ad2      	subs	r2, r2, r3
 80363c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80363ca:	b10b      	cbz	r3, 80363d0 <__sflush_r+0x44>
 80363cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80363ce:	1ad2      	subs	r2, r2, r3
 80363d0:	2300      	movs	r3, #0
 80363d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80363d4:	6a21      	ldr	r1, [r4, #32]
 80363d6:	4628      	mov	r0, r5
 80363d8:	47b0      	blx	r6
 80363da:	1c43      	adds	r3, r0, #1
 80363dc:	89a3      	ldrh	r3, [r4, #12]
 80363de:	d106      	bne.n	80363ee <__sflush_r+0x62>
 80363e0:	6829      	ldr	r1, [r5, #0]
 80363e2:	291d      	cmp	r1, #29
 80363e4:	d82b      	bhi.n	803643e <__sflush_r+0xb2>
 80363e6:	4a2a      	ldr	r2, [pc, #168]	@ (8036490 <__sflush_r+0x104>)
 80363e8:	40ca      	lsrs	r2, r1
 80363ea:	07d6      	lsls	r6, r2, #31
 80363ec:	d527      	bpl.n	803643e <__sflush_r+0xb2>
 80363ee:	2200      	movs	r2, #0
 80363f0:	6062      	str	r2, [r4, #4]
 80363f2:	04d9      	lsls	r1, r3, #19
 80363f4:	6922      	ldr	r2, [r4, #16]
 80363f6:	6022      	str	r2, [r4, #0]
 80363f8:	d504      	bpl.n	8036404 <__sflush_r+0x78>
 80363fa:	1c42      	adds	r2, r0, #1
 80363fc:	d101      	bne.n	8036402 <__sflush_r+0x76>
 80363fe:	682b      	ldr	r3, [r5, #0]
 8036400:	b903      	cbnz	r3, 8036404 <__sflush_r+0x78>
 8036402:	6560      	str	r0, [r4, #84]	@ 0x54
 8036404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8036406:	602f      	str	r7, [r5, #0]
 8036408:	b1b9      	cbz	r1, 803643a <__sflush_r+0xae>
 803640a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 803640e:	4299      	cmp	r1, r3
 8036410:	d002      	beq.n	8036418 <__sflush_r+0x8c>
 8036412:	4628      	mov	r0, r5
 8036414:	f7ff fa96 	bl	8035944 <_free_r>
 8036418:	2300      	movs	r3, #0
 803641a:	6363      	str	r3, [r4, #52]	@ 0x34
 803641c:	e00d      	b.n	803643a <__sflush_r+0xae>
 803641e:	2301      	movs	r3, #1
 8036420:	4628      	mov	r0, r5
 8036422:	47b0      	blx	r6
 8036424:	4602      	mov	r2, r0
 8036426:	1c50      	adds	r0, r2, #1
 8036428:	d1c9      	bne.n	80363be <__sflush_r+0x32>
 803642a:	682b      	ldr	r3, [r5, #0]
 803642c:	2b00      	cmp	r3, #0
 803642e:	d0c6      	beq.n	80363be <__sflush_r+0x32>
 8036430:	2b1d      	cmp	r3, #29
 8036432:	d001      	beq.n	8036438 <__sflush_r+0xac>
 8036434:	2b16      	cmp	r3, #22
 8036436:	d11e      	bne.n	8036476 <__sflush_r+0xea>
 8036438:	602f      	str	r7, [r5, #0]
 803643a:	2000      	movs	r0, #0
 803643c:	e022      	b.n	8036484 <__sflush_r+0xf8>
 803643e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8036442:	b21b      	sxth	r3, r3
 8036444:	e01b      	b.n	803647e <__sflush_r+0xf2>
 8036446:	690f      	ldr	r7, [r1, #16]
 8036448:	2f00      	cmp	r7, #0
 803644a:	d0f6      	beq.n	803643a <__sflush_r+0xae>
 803644c:	0793      	lsls	r3, r2, #30
 803644e:	680e      	ldr	r6, [r1, #0]
 8036450:	bf08      	it	eq
 8036452:	694b      	ldreq	r3, [r1, #20]
 8036454:	600f      	str	r7, [r1, #0]
 8036456:	bf18      	it	ne
 8036458:	2300      	movne	r3, #0
 803645a:	eba6 0807 	sub.w	r8, r6, r7
 803645e:	608b      	str	r3, [r1, #8]
 8036460:	f1b8 0f00 	cmp.w	r8, #0
 8036464:	dde9      	ble.n	803643a <__sflush_r+0xae>
 8036466:	6a21      	ldr	r1, [r4, #32]
 8036468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 803646a:	4643      	mov	r3, r8
 803646c:	463a      	mov	r2, r7
 803646e:	4628      	mov	r0, r5
 8036470:	47b0      	blx	r6
 8036472:	2800      	cmp	r0, #0
 8036474:	dc08      	bgt.n	8036488 <__sflush_r+0xfc>
 8036476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803647a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803647e:	81a3      	strh	r3, [r4, #12]
 8036480:	f04f 30ff 	mov.w	r0, #4294967295
 8036484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036488:	4407      	add	r7, r0
 803648a:	eba8 0800 	sub.w	r8, r8, r0
 803648e:	e7e7      	b.n	8036460 <__sflush_r+0xd4>
 8036490:	20400001 	.word	0x20400001

08036494 <_fflush_r>:
 8036494:	b538      	push	{r3, r4, r5, lr}
 8036496:	690b      	ldr	r3, [r1, #16]
 8036498:	4605      	mov	r5, r0
 803649a:	460c      	mov	r4, r1
 803649c:	b913      	cbnz	r3, 80364a4 <_fflush_r+0x10>
 803649e:	2500      	movs	r5, #0
 80364a0:	4628      	mov	r0, r5
 80364a2:	bd38      	pop	{r3, r4, r5, pc}
 80364a4:	b118      	cbz	r0, 80364ae <_fflush_r+0x1a>
 80364a6:	6a03      	ldr	r3, [r0, #32]
 80364a8:	b90b      	cbnz	r3, 80364ae <_fflush_r+0x1a>
 80364aa:	f7fe fadf 	bl	8034a6c <__sinit>
 80364ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80364b2:	2b00      	cmp	r3, #0
 80364b4:	d0f3      	beq.n	803649e <_fflush_r+0xa>
 80364b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80364b8:	07d0      	lsls	r0, r2, #31
 80364ba:	d404      	bmi.n	80364c6 <_fflush_r+0x32>
 80364bc:	0599      	lsls	r1, r3, #22
 80364be:	d402      	bmi.n	80364c6 <_fflush_r+0x32>
 80364c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80364c2:	f7fe fc46 	bl	8034d52 <__retarget_lock_acquire_recursive>
 80364c6:	4628      	mov	r0, r5
 80364c8:	4621      	mov	r1, r4
 80364ca:	f7ff ff5f 	bl	803638c <__sflush_r>
 80364ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80364d0:	07da      	lsls	r2, r3, #31
 80364d2:	4605      	mov	r5, r0
 80364d4:	d4e4      	bmi.n	80364a0 <_fflush_r+0xc>
 80364d6:	89a3      	ldrh	r3, [r4, #12]
 80364d8:	059b      	lsls	r3, r3, #22
 80364da:	d4e1      	bmi.n	80364a0 <_fflush_r+0xc>
 80364dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80364de:	f7fe fc39 	bl	8034d54 <__retarget_lock_release_recursive>
 80364e2:	e7dd      	b.n	80364a0 <_fflush_r+0xc>

080364e4 <__assert_func>:
 80364e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80364e6:	4614      	mov	r4, r2
 80364e8:	461a      	mov	r2, r3
 80364ea:	4b09      	ldr	r3, [pc, #36]	@ (8036510 <__assert_func+0x2c>)
 80364ec:	681b      	ldr	r3, [r3, #0]
 80364ee:	4605      	mov	r5, r0
 80364f0:	68d8      	ldr	r0, [r3, #12]
 80364f2:	b14c      	cbz	r4, 8036508 <__assert_func+0x24>
 80364f4:	4b07      	ldr	r3, [pc, #28]	@ (8036514 <__assert_func+0x30>)
 80364f6:	9100      	str	r1, [sp, #0]
 80364f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80364fc:	4906      	ldr	r1, [pc, #24]	@ (8036518 <__assert_func+0x34>)
 80364fe:	462b      	mov	r3, r5
 8036500:	f000 f842 	bl	8036588 <fiprintf>
 8036504:	f000 f852 	bl	80365ac <abort>
 8036508:	4b04      	ldr	r3, [pc, #16]	@ (803651c <__assert_func+0x38>)
 803650a:	461c      	mov	r4, r3
 803650c:	e7f3      	b.n	80364f6 <__assert_func+0x12>
 803650e:	bf00      	nop
 8036510:	240082f8 	.word	0x240082f8
 8036514:	08059ab1 	.word	0x08059ab1
 8036518:	08059abe 	.word	0x08059abe
 803651c:	08059aec 	.word	0x08059aec

08036520 <_calloc_r>:
 8036520:	b570      	push	{r4, r5, r6, lr}
 8036522:	fba1 5402 	umull	r5, r4, r1, r2
 8036526:	b934      	cbnz	r4, 8036536 <_calloc_r+0x16>
 8036528:	4629      	mov	r1, r5
 803652a:	f7fd fd25 	bl	8033f78 <_malloc_r>
 803652e:	4606      	mov	r6, r0
 8036530:	b928      	cbnz	r0, 803653e <_calloc_r+0x1e>
 8036532:	4630      	mov	r0, r6
 8036534:	bd70      	pop	{r4, r5, r6, pc}
 8036536:	220c      	movs	r2, #12
 8036538:	6002      	str	r2, [r0, #0]
 803653a:	2600      	movs	r6, #0
 803653c:	e7f9      	b.n	8036532 <_calloc_r+0x12>
 803653e:	462a      	mov	r2, r5
 8036540:	4621      	mov	r1, r4
 8036542:	f7fe fb7e 	bl	8034c42 <memset>
 8036546:	e7f4      	b.n	8036532 <_calloc_r+0x12>

08036548 <__ascii_mbtowc>:
 8036548:	b082      	sub	sp, #8
 803654a:	b901      	cbnz	r1, 803654e <__ascii_mbtowc+0x6>
 803654c:	a901      	add	r1, sp, #4
 803654e:	b142      	cbz	r2, 8036562 <__ascii_mbtowc+0x1a>
 8036550:	b14b      	cbz	r3, 8036566 <__ascii_mbtowc+0x1e>
 8036552:	7813      	ldrb	r3, [r2, #0]
 8036554:	600b      	str	r3, [r1, #0]
 8036556:	7812      	ldrb	r2, [r2, #0]
 8036558:	1e10      	subs	r0, r2, #0
 803655a:	bf18      	it	ne
 803655c:	2001      	movne	r0, #1
 803655e:	b002      	add	sp, #8
 8036560:	4770      	bx	lr
 8036562:	4610      	mov	r0, r2
 8036564:	e7fb      	b.n	803655e <__ascii_mbtowc+0x16>
 8036566:	f06f 0001 	mvn.w	r0, #1
 803656a:	e7f8      	b.n	803655e <__ascii_mbtowc+0x16>

0803656c <__ascii_wctomb>:
 803656c:	4603      	mov	r3, r0
 803656e:	4608      	mov	r0, r1
 8036570:	b141      	cbz	r1, 8036584 <__ascii_wctomb+0x18>
 8036572:	2aff      	cmp	r2, #255	@ 0xff
 8036574:	d904      	bls.n	8036580 <__ascii_wctomb+0x14>
 8036576:	228a      	movs	r2, #138	@ 0x8a
 8036578:	601a      	str	r2, [r3, #0]
 803657a:	f04f 30ff 	mov.w	r0, #4294967295
 803657e:	4770      	bx	lr
 8036580:	700a      	strb	r2, [r1, #0]
 8036582:	2001      	movs	r0, #1
 8036584:	4770      	bx	lr
	...

08036588 <fiprintf>:
 8036588:	b40e      	push	{r1, r2, r3}
 803658a:	b503      	push	{r0, r1, lr}
 803658c:	4601      	mov	r1, r0
 803658e:	ab03      	add	r3, sp, #12
 8036590:	4805      	ldr	r0, [pc, #20]	@ (80365a8 <fiprintf+0x20>)
 8036592:	f853 2b04 	ldr.w	r2, [r3], #4
 8036596:	6800      	ldr	r0, [r0, #0]
 8036598:	9301      	str	r3, [sp, #4]
 803659a:	f000 f837 	bl	803660c <_vfiprintf_r>
 803659e:	b002      	add	sp, #8
 80365a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80365a4:	b003      	add	sp, #12
 80365a6:	4770      	bx	lr
 80365a8:	240082f8 	.word	0x240082f8

080365ac <abort>:
 80365ac:	b508      	push	{r3, lr}
 80365ae:	2006      	movs	r0, #6
 80365b0:	f000 fa00 	bl	80369b4 <raise>
 80365b4:	2001      	movs	r0, #1
 80365b6:	f000 fcb9 	bl	8036f2c <_exit>

080365ba <__sfputc_r>:
 80365ba:	6893      	ldr	r3, [r2, #8]
 80365bc:	3b01      	subs	r3, #1
 80365be:	2b00      	cmp	r3, #0
 80365c0:	b410      	push	{r4}
 80365c2:	6093      	str	r3, [r2, #8]
 80365c4:	da08      	bge.n	80365d8 <__sfputc_r+0x1e>
 80365c6:	6994      	ldr	r4, [r2, #24]
 80365c8:	42a3      	cmp	r3, r4
 80365ca:	db01      	blt.n	80365d0 <__sfputc_r+0x16>
 80365cc:	290a      	cmp	r1, #10
 80365ce:	d103      	bne.n	80365d8 <__sfputc_r+0x1e>
 80365d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80365d4:	f000 b932 	b.w	803683c <__swbuf_r>
 80365d8:	6813      	ldr	r3, [r2, #0]
 80365da:	1c58      	adds	r0, r3, #1
 80365dc:	6010      	str	r0, [r2, #0]
 80365de:	7019      	strb	r1, [r3, #0]
 80365e0:	4608      	mov	r0, r1
 80365e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80365e6:	4770      	bx	lr

080365e8 <__sfputs_r>:
 80365e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80365ea:	4606      	mov	r6, r0
 80365ec:	460f      	mov	r7, r1
 80365ee:	4614      	mov	r4, r2
 80365f0:	18d5      	adds	r5, r2, r3
 80365f2:	42ac      	cmp	r4, r5
 80365f4:	d101      	bne.n	80365fa <__sfputs_r+0x12>
 80365f6:	2000      	movs	r0, #0
 80365f8:	e007      	b.n	803660a <__sfputs_r+0x22>
 80365fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80365fe:	463a      	mov	r2, r7
 8036600:	4630      	mov	r0, r6
 8036602:	f7ff ffda 	bl	80365ba <__sfputc_r>
 8036606:	1c43      	adds	r3, r0, #1
 8036608:	d1f3      	bne.n	80365f2 <__sfputs_r+0xa>
 803660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0803660c <_vfiprintf_r>:
 803660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036610:	460d      	mov	r5, r1
 8036612:	b09d      	sub	sp, #116	@ 0x74
 8036614:	4614      	mov	r4, r2
 8036616:	4698      	mov	r8, r3
 8036618:	4606      	mov	r6, r0
 803661a:	b118      	cbz	r0, 8036624 <_vfiprintf_r+0x18>
 803661c:	6a03      	ldr	r3, [r0, #32]
 803661e:	b90b      	cbnz	r3, 8036624 <_vfiprintf_r+0x18>
 8036620:	f7fe fa24 	bl	8034a6c <__sinit>
 8036624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8036626:	07d9      	lsls	r1, r3, #31
 8036628:	d405      	bmi.n	8036636 <_vfiprintf_r+0x2a>
 803662a:	89ab      	ldrh	r3, [r5, #12]
 803662c:	059a      	lsls	r2, r3, #22
 803662e:	d402      	bmi.n	8036636 <_vfiprintf_r+0x2a>
 8036630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036632:	f7fe fb8e 	bl	8034d52 <__retarget_lock_acquire_recursive>
 8036636:	89ab      	ldrh	r3, [r5, #12]
 8036638:	071b      	lsls	r3, r3, #28
 803663a:	d501      	bpl.n	8036640 <_vfiprintf_r+0x34>
 803663c:	692b      	ldr	r3, [r5, #16]
 803663e:	b99b      	cbnz	r3, 8036668 <_vfiprintf_r+0x5c>
 8036640:	4629      	mov	r1, r5
 8036642:	4630      	mov	r0, r6
 8036644:	f000 f938 	bl	80368b8 <__swsetup_r>
 8036648:	b170      	cbz	r0, 8036668 <_vfiprintf_r+0x5c>
 803664a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803664c:	07dc      	lsls	r4, r3, #31
 803664e:	d504      	bpl.n	803665a <_vfiprintf_r+0x4e>
 8036650:	f04f 30ff 	mov.w	r0, #4294967295
 8036654:	b01d      	add	sp, #116	@ 0x74
 8036656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803665a:	89ab      	ldrh	r3, [r5, #12]
 803665c:	0598      	lsls	r0, r3, #22
 803665e:	d4f7      	bmi.n	8036650 <_vfiprintf_r+0x44>
 8036660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036662:	f7fe fb77 	bl	8034d54 <__retarget_lock_release_recursive>
 8036666:	e7f3      	b.n	8036650 <_vfiprintf_r+0x44>
 8036668:	2300      	movs	r3, #0
 803666a:	9309      	str	r3, [sp, #36]	@ 0x24
 803666c:	2320      	movs	r3, #32
 803666e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8036672:	f8cd 800c 	str.w	r8, [sp, #12]
 8036676:	2330      	movs	r3, #48	@ 0x30
 8036678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8036828 <_vfiprintf_r+0x21c>
 803667c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8036680:	f04f 0901 	mov.w	r9, #1
 8036684:	4623      	mov	r3, r4
 8036686:	469a      	mov	sl, r3
 8036688:	f813 2b01 	ldrb.w	r2, [r3], #1
 803668c:	b10a      	cbz	r2, 8036692 <_vfiprintf_r+0x86>
 803668e:	2a25      	cmp	r2, #37	@ 0x25
 8036690:	d1f9      	bne.n	8036686 <_vfiprintf_r+0x7a>
 8036692:	ebba 0b04 	subs.w	fp, sl, r4
 8036696:	d00b      	beq.n	80366b0 <_vfiprintf_r+0xa4>
 8036698:	465b      	mov	r3, fp
 803669a:	4622      	mov	r2, r4
 803669c:	4629      	mov	r1, r5
 803669e:	4630      	mov	r0, r6
 80366a0:	f7ff ffa2 	bl	80365e8 <__sfputs_r>
 80366a4:	3001      	adds	r0, #1
 80366a6:	f000 80a7 	beq.w	80367f8 <_vfiprintf_r+0x1ec>
 80366aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80366ac:	445a      	add	r2, fp
 80366ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80366b0:	f89a 3000 	ldrb.w	r3, [sl]
 80366b4:	2b00      	cmp	r3, #0
 80366b6:	f000 809f 	beq.w	80367f8 <_vfiprintf_r+0x1ec>
 80366ba:	2300      	movs	r3, #0
 80366bc:	f04f 32ff 	mov.w	r2, #4294967295
 80366c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80366c4:	f10a 0a01 	add.w	sl, sl, #1
 80366c8:	9304      	str	r3, [sp, #16]
 80366ca:	9307      	str	r3, [sp, #28]
 80366cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80366d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80366d2:	4654      	mov	r4, sl
 80366d4:	2205      	movs	r2, #5
 80366d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80366da:	4853      	ldr	r0, [pc, #332]	@ (8036828 <_vfiprintf_r+0x21c>)
 80366dc:	f7d9 fcb0 	bl	8010040 <memchr>
 80366e0:	9a04      	ldr	r2, [sp, #16]
 80366e2:	b9d8      	cbnz	r0, 803671c <_vfiprintf_r+0x110>
 80366e4:	06d1      	lsls	r1, r2, #27
 80366e6:	bf44      	itt	mi
 80366e8:	2320      	movmi	r3, #32
 80366ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80366ee:	0713      	lsls	r3, r2, #28
 80366f0:	bf44      	itt	mi
 80366f2:	232b      	movmi	r3, #43	@ 0x2b
 80366f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80366f8:	f89a 3000 	ldrb.w	r3, [sl]
 80366fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80366fe:	d015      	beq.n	803672c <_vfiprintf_r+0x120>
 8036700:	9a07      	ldr	r2, [sp, #28]
 8036702:	4654      	mov	r4, sl
 8036704:	2000      	movs	r0, #0
 8036706:	f04f 0c0a 	mov.w	ip, #10
 803670a:	4621      	mov	r1, r4
 803670c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036710:	3b30      	subs	r3, #48	@ 0x30
 8036712:	2b09      	cmp	r3, #9
 8036714:	d94b      	bls.n	80367ae <_vfiprintf_r+0x1a2>
 8036716:	b1b0      	cbz	r0, 8036746 <_vfiprintf_r+0x13a>
 8036718:	9207      	str	r2, [sp, #28]
 803671a:	e014      	b.n	8036746 <_vfiprintf_r+0x13a>
 803671c:	eba0 0308 	sub.w	r3, r0, r8
 8036720:	fa09 f303 	lsl.w	r3, r9, r3
 8036724:	4313      	orrs	r3, r2
 8036726:	9304      	str	r3, [sp, #16]
 8036728:	46a2      	mov	sl, r4
 803672a:	e7d2      	b.n	80366d2 <_vfiprintf_r+0xc6>
 803672c:	9b03      	ldr	r3, [sp, #12]
 803672e:	1d19      	adds	r1, r3, #4
 8036730:	681b      	ldr	r3, [r3, #0]
 8036732:	9103      	str	r1, [sp, #12]
 8036734:	2b00      	cmp	r3, #0
 8036736:	bfbb      	ittet	lt
 8036738:	425b      	neglt	r3, r3
 803673a:	f042 0202 	orrlt.w	r2, r2, #2
 803673e:	9307      	strge	r3, [sp, #28]
 8036740:	9307      	strlt	r3, [sp, #28]
 8036742:	bfb8      	it	lt
 8036744:	9204      	strlt	r2, [sp, #16]
 8036746:	7823      	ldrb	r3, [r4, #0]
 8036748:	2b2e      	cmp	r3, #46	@ 0x2e
 803674a:	d10a      	bne.n	8036762 <_vfiprintf_r+0x156>
 803674c:	7863      	ldrb	r3, [r4, #1]
 803674e:	2b2a      	cmp	r3, #42	@ 0x2a
 8036750:	d132      	bne.n	80367b8 <_vfiprintf_r+0x1ac>
 8036752:	9b03      	ldr	r3, [sp, #12]
 8036754:	1d1a      	adds	r2, r3, #4
 8036756:	681b      	ldr	r3, [r3, #0]
 8036758:	9203      	str	r2, [sp, #12]
 803675a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803675e:	3402      	adds	r4, #2
 8036760:	9305      	str	r3, [sp, #20]
 8036762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8036838 <_vfiprintf_r+0x22c>
 8036766:	7821      	ldrb	r1, [r4, #0]
 8036768:	2203      	movs	r2, #3
 803676a:	4650      	mov	r0, sl
 803676c:	f7d9 fc68 	bl	8010040 <memchr>
 8036770:	b138      	cbz	r0, 8036782 <_vfiprintf_r+0x176>
 8036772:	9b04      	ldr	r3, [sp, #16]
 8036774:	eba0 000a 	sub.w	r0, r0, sl
 8036778:	2240      	movs	r2, #64	@ 0x40
 803677a:	4082      	lsls	r2, r0
 803677c:	4313      	orrs	r3, r2
 803677e:	3401      	adds	r4, #1
 8036780:	9304      	str	r3, [sp, #16]
 8036782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036786:	4829      	ldr	r0, [pc, #164]	@ (803682c <_vfiprintf_r+0x220>)
 8036788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803678c:	2206      	movs	r2, #6
 803678e:	f7d9 fc57 	bl	8010040 <memchr>
 8036792:	2800      	cmp	r0, #0
 8036794:	d03f      	beq.n	8036816 <_vfiprintf_r+0x20a>
 8036796:	4b26      	ldr	r3, [pc, #152]	@ (8036830 <_vfiprintf_r+0x224>)
 8036798:	bb1b      	cbnz	r3, 80367e2 <_vfiprintf_r+0x1d6>
 803679a:	9b03      	ldr	r3, [sp, #12]
 803679c:	3307      	adds	r3, #7
 803679e:	f023 0307 	bic.w	r3, r3, #7
 80367a2:	3308      	adds	r3, #8
 80367a4:	9303      	str	r3, [sp, #12]
 80367a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80367a8:	443b      	add	r3, r7
 80367aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80367ac:	e76a      	b.n	8036684 <_vfiprintf_r+0x78>
 80367ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80367b2:	460c      	mov	r4, r1
 80367b4:	2001      	movs	r0, #1
 80367b6:	e7a8      	b.n	803670a <_vfiprintf_r+0xfe>
 80367b8:	2300      	movs	r3, #0
 80367ba:	3401      	adds	r4, #1
 80367bc:	9305      	str	r3, [sp, #20]
 80367be:	4619      	mov	r1, r3
 80367c0:	f04f 0c0a 	mov.w	ip, #10
 80367c4:	4620      	mov	r0, r4
 80367c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80367ca:	3a30      	subs	r2, #48	@ 0x30
 80367cc:	2a09      	cmp	r2, #9
 80367ce:	d903      	bls.n	80367d8 <_vfiprintf_r+0x1cc>
 80367d0:	2b00      	cmp	r3, #0
 80367d2:	d0c6      	beq.n	8036762 <_vfiprintf_r+0x156>
 80367d4:	9105      	str	r1, [sp, #20]
 80367d6:	e7c4      	b.n	8036762 <_vfiprintf_r+0x156>
 80367d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80367dc:	4604      	mov	r4, r0
 80367de:	2301      	movs	r3, #1
 80367e0:	e7f0      	b.n	80367c4 <_vfiprintf_r+0x1b8>
 80367e2:	ab03      	add	r3, sp, #12
 80367e4:	9300      	str	r3, [sp, #0]
 80367e6:	462a      	mov	r2, r5
 80367e8:	4b12      	ldr	r3, [pc, #72]	@ (8036834 <_vfiprintf_r+0x228>)
 80367ea:	a904      	add	r1, sp, #16
 80367ec:	4630      	mov	r0, r6
 80367ee:	f7fd fd0b 	bl	8034208 <_printf_float>
 80367f2:	4607      	mov	r7, r0
 80367f4:	1c78      	adds	r0, r7, #1
 80367f6:	d1d6      	bne.n	80367a6 <_vfiprintf_r+0x19a>
 80367f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80367fa:	07d9      	lsls	r1, r3, #31
 80367fc:	d405      	bmi.n	803680a <_vfiprintf_r+0x1fe>
 80367fe:	89ab      	ldrh	r3, [r5, #12]
 8036800:	059a      	lsls	r2, r3, #22
 8036802:	d402      	bmi.n	803680a <_vfiprintf_r+0x1fe>
 8036804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036806:	f7fe faa5 	bl	8034d54 <__retarget_lock_release_recursive>
 803680a:	89ab      	ldrh	r3, [r5, #12]
 803680c:	065b      	lsls	r3, r3, #25
 803680e:	f53f af1f 	bmi.w	8036650 <_vfiprintf_r+0x44>
 8036812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8036814:	e71e      	b.n	8036654 <_vfiprintf_r+0x48>
 8036816:	ab03      	add	r3, sp, #12
 8036818:	9300      	str	r3, [sp, #0]
 803681a:	462a      	mov	r2, r5
 803681c:	4b05      	ldr	r3, [pc, #20]	@ (8036834 <_vfiprintf_r+0x228>)
 803681e:	a904      	add	r1, sp, #16
 8036820:	4630      	mov	r0, r6
 8036822:	f7fd ff79 	bl	8034718 <_printf_i>
 8036826:	e7e4      	b.n	80367f2 <_vfiprintf_r+0x1e6>
 8036828:	08059a96 	.word	0x08059a96
 803682c:	08059aa0 	.word	0x08059aa0
 8036830:	08034209 	.word	0x08034209
 8036834:	080365e9 	.word	0x080365e9
 8036838:	08059a9c 	.word	0x08059a9c

0803683c <__swbuf_r>:
 803683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803683e:	460e      	mov	r6, r1
 8036840:	4614      	mov	r4, r2
 8036842:	4605      	mov	r5, r0
 8036844:	b118      	cbz	r0, 803684e <__swbuf_r+0x12>
 8036846:	6a03      	ldr	r3, [r0, #32]
 8036848:	b90b      	cbnz	r3, 803684e <__swbuf_r+0x12>
 803684a:	f7fe f90f 	bl	8034a6c <__sinit>
 803684e:	69a3      	ldr	r3, [r4, #24]
 8036850:	60a3      	str	r3, [r4, #8]
 8036852:	89a3      	ldrh	r3, [r4, #12]
 8036854:	071a      	lsls	r2, r3, #28
 8036856:	d501      	bpl.n	803685c <__swbuf_r+0x20>
 8036858:	6923      	ldr	r3, [r4, #16]
 803685a:	b943      	cbnz	r3, 803686e <__swbuf_r+0x32>
 803685c:	4621      	mov	r1, r4
 803685e:	4628      	mov	r0, r5
 8036860:	f000 f82a 	bl	80368b8 <__swsetup_r>
 8036864:	b118      	cbz	r0, 803686e <__swbuf_r+0x32>
 8036866:	f04f 37ff 	mov.w	r7, #4294967295
 803686a:	4638      	mov	r0, r7
 803686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803686e:	6823      	ldr	r3, [r4, #0]
 8036870:	6922      	ldr	r2, [r4, #16]
 8036872:	1a98      	subs	r0, r3, r2
 8036874:	6963      	ldr	r3, [r4, #20]
 8036876:	b2f6      	uxtb	r6, r6
 8036878:	4283      	cmp	r3, r0
 803687a:	4637      	mov	r7, r6
 803687c:	dc05      	bgt.n	803688a <__swbuf_r+0x4e>
 803687e:	4621      	mov	r1, r4
 8036880:	4628      	mov	r0, r5
 8036882:	f7ff fe07 	bl	8036494 <_fflush_r>
 8036886:	2800      	cmp	r0, #0
 8036888:	d1ed      	bne.n	8036866 <__swbuf_r+0x2a>
 803688a:	68a3      	ldr	r3, [r4, #8]
 803688c:	3b01      	subs	r3, #1
 803688e:	60a3      	str	r3, [r4, #8]
 8036890:	6823      	ldr	r3, [r4, #0]
 8036892:	1c5a      	adds	r2, r3, #1
 8036894:	6022      	str	r2, [r4, #0]
 8036896:	701e      	strb	r6, [r3, #0]
 8036898:	6962      	ldr	r2, [r4, #20]
 803689a:	1c43      	adds	r3, r0, #1
 803689c:	429a      	cmp	r2, r3
 803689e:	d004      	beq.n	80368aa <__swbuf_r+0x6e>
 80368a0:	89a3      	ldrh	r3, [r4, #12]
 80368a2:	07db      	lsls	r3, r3, #31
 80368a4:	d5e1      	bpl.n	803686a <__swbuf_r+0x2e>
 80368a6:	2e0a      	cmp	r6, #10
 80368a8:	d1df      	bne.n	803686a <__swbuf_r+0x2e>
 80368aa:	4621      	mov	r1, r4
 80368ac:	4628      	mov	r0, r5
 80368ae:	f7ff fdf1 	bl	8036494 <_fflush_r>
 80368b2:	2800      	cmp	r0, #0
 80368b4:	d0d9      	beq.n	803686a <__swbuf_r+0x2e>
 80368b6:	e7d6      	b.n	8036866 <__swbuf_r+0x2a>

080368b8 <__swsetup_r>:
 80368b8:	b538      	push	{r3, r4, r5, lr}
 80368ba:	4b29      	ldr	r3, [pc, #164]	@ (8036960 <__swsetup_r+0xa8>)
 80368bc:	4605      	mov	r5, r0
 80368be:	6818      	ldr	r0, [r3, #0]
 80368c0:	460c      	mov	r4, r1
 80368c2:	b118      	cbz	r0, 80368cc <__swsetup_r+0x14>
 80368c4:	6a03      	ldr	r3, [r0, #32]
 80368c6:	b90b      	cbnz	r3, 80368cc <__swsetup_r+0x14>
 80368c8:	f7fe f8d0 	bl	8034a6c <__sinit>
 80368cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80368d0:	0719      	lsls	r1, r3, #28
 80368d2:	d422      	bmi.n	803691a <__swsetup_r+0x62>
 80368d4:	06da      	lsls	r2, r3, #27
 80368d6:	d407      	bmi.n	80368e8 <__swsetup_r+0x30>
 80368d8:	2209      	movs	r2, #9
 80368da:	602a      	str	r2, [r5, #0]
 80368dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80368e0:	81a3      	strh	r3, [r4, #12]
 80368e2:	f04f 30ff 	mov.w	r0, #4294967295
 80368e6:	e033      	b.n	8036950 <__swsetup_r+0x98>
 80368e8:	0758      	lsls	r0, r3, #29
 80368ea:	d512      	bpl.n	8036912 <__swsetup_r+0x5a>
 80368ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80368ee:	b141      	cbz	r1, 8036902 <__swsetup_r+0x4a>
 80368f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80368f4:	4299      	cmp	r1, r3
 80368f6:	d002      	beq.n	80368fe <__swsetup_r+0x46>
 80368f8:	4628      	mov	r0, r5
 80368fa:	f7ff f823 	bl	8035944 <_free_r>
 80368fe:	2300      	movs	r3, #0
 8036900:	6363      	str	r3, [r4, #52]	@ 0x34
 8036902:	89a3      	ldrh	r3, [r4, #12]
 8036904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8036908:	81a3      	strh	r3, [r4, #12]
 803690a:	2300      	movs	r3, #0
 803690c:	6063      	str	r3, [r4, #4]
 803690e:	6923      	ldr	r3, [r4, #16]
 8036910:	6023      	str	r3, [r4, #0]
 8036912:	89a3      	ldrh	r3, [r4, #12]
 8036914:	f043 0308 	orr.w	r3, r3, #8
 8036918:	81a3      	strh	r3, [r4, #12]
 803691a:	6923      	ldr	r3, [r4, #16]
 803691c:	b94b      	cbnz	r3, 8036932 <__swsetup_r+0x7a>
 803691e:	89a3      	ldrh	r3, [r4, #12]
 8036920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8036924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8036928:	d003      	beq.n	8036932 <__swsetup_r+0x7a>
 803692a:	4621      	mov	r1, r4
 803692c:	4628      	mov	r0, r5
 803692e:	f000 f883 	bl	8036a38 <__smakebuf_r>
 8036932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036936:	f013 0201 	ands.w	r2, r3, #1
 803693a:	d00a      	beq.n	8036952 <__swsetup_r+0x9a>
 803693c:	2200      	movs	r2, #0
 803693e:	60a2      	str	r2, [r4, #8]
 8036940:	6962      	ldr	r2, [r4, #20]
 8036942:	4252      	negs	r2, r2
 8036944:	61a2      	str	r2, [r4, #24]
 8036946:	6922      	ldr	r2, [r4, #16]
 8036948:	b942      	cbnz	r2, 803695c <__swsetup_r+0xa4>
 803694a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 803694e:	d1c5      	bne.n	80368dc <__swsetup_r+0x24>
 8036950:	bd38      	pop	{r3, r4, r5, pc}
 8036952:	0799      	lsls	r1, r3, #30
 8036954:	bf58      	it	pl
 8036956:	6962      	ldrpl	r2, [r4, #20]
 8036958:	60a2      	str	r2, [r4, #8]
 803695a:	e7f4      	b.n	8036946 <__swsetup_r+0x8e>
 803695c:	2000      	movs	r0, #0
 803695e:	e7f7      	b.n	8036950 <__swsetup_r+0x98>
 8036960:	240082f8 	.word	0x240082f8

08036964 <_raise_r>:
 8036964:	291f      	cmp	r1, #31
 8036966:	b538      	push	{r3, r4, r5, lr}
 8036968:	4605      	mov	r5, r0
 803696a:	460c      	mov	r4, r1
 803696c:	d904      	bls.n	8036978 <_raise_r+0x14>
 803696e:	2316      	movs	r3, #22
 8036970:	6003      	str	r3, [r0, #0]
 8036972:	f04f 30ff 	mov.w	r0, #4294967295
 8036976:	bd38      	pop	{r3, r4, r5, pc}
 8036978:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 803697a:	b112      	cbz	r2, 8036982 <_raise_r+0x1e>
 803697c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8036980:	b94b      	cbnz	r3, 8036996 <_raise_r+0x32>
 8036982:	4628      	mov	r0, r5
 8036984:	f000 f830 	bl	80369e8 <_getpid_r>
 8036988:	4622      	mov	r2, r4
 803698a:	4601      	mov	r1, r0
 803698c:	4628      	mov	r0, r5
 803698e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8036992:	f000 b817 	b.w	80369c4 <_kill_r>
 8036996:	2b01      	cmp	r3, #1
 8036998:	d00a      	beq.n	80369b0 <_raise_r+0x4c>
 803699a:	1c59      	adds	r1, r3, #1
 803699c:	d103      	bne.n	80369a6 <_raise_r+0x42>
 803699e:	2316      	movs	r3, #22
 80369a0:	6003      	str	r3, [r0, #0]
 80369a2:	2001      	movs	r0, #1
 80369a4:	e7e7      	b.n	8036976 <_raise_r+0x12>
 80369a6:	2100      	movs	r1, #0
 80369a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80369ac:	4620      	mov	r0, r4
 80369ae:	4798      	blx	r3
 80369b0:	2000      	movs	r0, #0
 80369b2:	e7e0      	b.n	8036976 <_raise_r+0x12>

080369b4 <raise>:
 80369b4:	4b02      	ldr	r3, [pc, #8]	@ (80369c0 <raise+0xc>)
 80369b6:	4601      	mov	r1, r0
 80369b8:	6818      	ldr	r0, [r3, #0]
 80369ba:	f7ff bfd3 	b.w	8036964 <_raise_r>
 80369be:	bf00      	nop
 80369c0:	240082f8 	.word	0x240082f8

080369c4 <_kill_r>:
 80369c4:	b538      	push	{r3, r4, r5, lr}
 80369c6:	4d07      	ldr	r5, [pc, #28]	@ (80369e4 <_kill_r+0x20>)
 80369c8:	2300      	movs	r3, #0
 80369ca:	4604      	mov	r4, r0
 80369cc:	4608      	mov	r0, r1
 80369ce:	4611      	mov	r1, r2
 80369d0:	602b      	str	r3, [r5, #0]
 80369d2:	f000 fa7d 	bl	8036ed0 <_kill>
 80369d6:	1c43      	adds	r3, r0, #1
 80369d8:	d102      	bne.n	80369e0 <_kill_r+0x1c>
 80369da:	682b      	ldr	r3, [r5, #0]
 80369dc:	b103      	cbz	r3, 80369e0 <_kill_r+0x1c>
 80369de:	6023      	str	r3, [r4, #0]
 80369e0:	bd38      	pop	{r3, r4, r5, pc}
 80369e2:	bf00      	nop
 80369e4:	24009bbc 	.word	0x24009bbc

080369e8 <_getpid_r>:
 80369e8:	f000 ba62 	b.w	8036eb0 <_getpid>

080369ec <__swhatbuf_r>:
 80369ec:	b570      	push	{r4, r5, r6, lr}
 80369ee:	460c      	mov	r4, r1
 80369f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80369f4:	2900      	cmp	r1, #0
 80369f6:	b096      	sub	sp, #88	@ 0x58
 80369f8:	4615      	mov	r5, r2
 80369fa:	461e      	mov	r6, r3
 80369fc:	da0d      	bge.n	8036a1a <__swhatbuf_r+0x2e>
 80369fe:	89a3      	ldrh	r3, [r4, #12]
 8036a00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8036a04:	f04f 0100 	mov.w	r1, #0
 8036a08:	bf14      	ite	ne
 8036a0a:	2340      	movne	r3, #64	@ 0x40
 8036a0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8036a10:	2000      	movs	r0, #0
 8036a12:	6031      	str	r1, [r6, #0]
 8036a14:	602b      	str	r3, [r5, #0]
 8036a16:	b016      	add	sp, #88	@ 0x58
 8036a18:	bd70      	pop	{r4, r5, r6, pc}
 8036a1a:	466a      	mov	r2, sp
 8036a1c:	f000 f848 	bl	8036ab0 <_fstat_r>
 8036a20:	2800      	cmp	r0, #0
 8036a22:	dbec      	blt.n	80369fe <__swhatbuf_r+0x12>
 8036a24:	9901      	ldr	r1, [sp, #4]
 8036a26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8036a2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8036a2e:	4259      	negs	r1, r3
 8036a30:	4159      	adcs	r1, r3
 8036a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8036a36:	e7eb      	b.n	8036a10 <__swhatbuf_r+0x24>

08036a38 <__smakebuf_r>:
 8036a38:	898b      	ldrh	r3, [r1, #12]
 8036a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8036a3c:	079d      	lsls	r5, r3, #30
 8036a3e:	4606      	mov	r6, r0
 8036a40:	460c      	mov	r4, r1
 8036a42:	d507      	bpl.n	8036a54 <__smakebuf_r+0x1c>
 8036a44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8036a48:	6023      	str	r3, [r4, #0]
 8036a4a:	6123      	str	r3, [r4, #16]
 8036a4c:	2301      	movs	r3, #1
 8036a4e:	6163      	str	r3, [r4, #20]
 8036a50:	b003      	add	sp, #12
 8036a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8036a54:	ab01      	add	r3, sp, #4
 8036a56:	466a      	mov	r2, sp
 8036a58:	f7ff ffc8 	bl	80369ec <__swhatbuf_r>
 8036a5c:	9f00      	ldr	r7, [sp, #0]
 8036a5e:	4605      	mov	r5, r0
 8036a60:	4639      	mov	r1, r7
 8036a62:	4630      	mov	r0, r6
 8036a64:	f7fd fa88 	bl	8033f78 <_malloc_r>
 8036a68:	b948      	cbnz	r0, 8036a7e <__smakebuf_r+0x46>
 8036a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036a6e:	059a      	lsls	r2, r3, #22
 8036a70:	d4ee      	bmi.n	8036a50 <__smakebuf_r+0x18>
 8036a72:	f023 0303 	bic.w	r3, r3, #3
 8036a76:	f043 0302 	orr.w	r3, r3, #2
 8036a7a:	81a3      	strh	r3, [r4, #12]
 8036a7c:	e7e2      	b.n	8036a44 <__smakebuf_r+0xc>
 8036a7e:	89a3      	ldrh	r3, [r4, #12]
 8036a80:	6020      	str	r0, [r4, #0]
 8036a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8036a86:	81a3      	strh	r3, [r4, #12]
 8036a88:	9b01      	ldr	r3, [sp, #4]
 8036a8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8036a8e:	b15b      	cbz	r3, 8036aa8 <__smakebuf_r+0x70>
 8036a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8036a94:	4630      	mov	r0, r6
 8036a96:	f000 f81d 	bl	8036ad4 <_isatty_r>
 8036a9a:	b128      	cbz	r0, 8036aa8 <__smakebuf_r+0x70>
 8036a9c:	89a3      	ldrh	r3, [r4, #12]
 8036a9e:	f023 0303 	bic.w	r3, r3, #3
 8036aa2:	f043 0301 	orr.w	r3, r3, #1
 8036aa6:	81a3      	strh	r3, [r4, #12]
 8036aa8:	89a3      	ldrh	r3, [r4, #12]
 8036aaa:	431d      	orrs	r5, r3
 8036aac:	81a5      	strh	r5, [r4, #12]
 8036aae:	e7cf      	b.n	8036a50 <__smakebuf_r+0x18>

08036ab0 <_fstat_r>:
 8036ab0:	b538      	push	{r3, r4, r5, lr}
 8036ab2:	4d07      	ldr	r5, [pc, #28]	@ (8036ad0 <_fstat_r+0x20>)
 8036ab4:	2300      	movs	r3, #0
 8036ab6:	4604      	mov	r4, r0
 8036ab8:	4608      	mov	r0, r1
 8036aba:	4611      	mov	r1, r2
 8036abc:	602b      	str	r3, [r5, #0]
 8036abe:	f000 f9ef 	bl	8036ea0 <_fstat>
 8036ac2:	1c43      	adds	r3, r0, #1
 8036ac4:	d102      	bne.n	8036acc <_fstat_r+0x1c>
 8036ac6:	682b      	ldr	r3, [r5, #0]
 8036ac8:	b103      	cbz	r3, 8036acc <_fstat_r+0x1c>
 8036aca:	6023      	str	r3, [r4, #0]
 8036acc:	bd38      	pop	{r3, r4, r5, pc}
 8036ace:	bf00      	nop
 8036ad0:	24009bbc 	.word	0x24009bbc

08036ad4 <_isatty_r>:
 8036ad4:	b538      	push	{r3, r4, r5, lr}
 8036ad6:	4d06      	ldr	r5, [pc, #24]	@ (8036af0 <_isatty_r+0x1c>)
 8036ad8:	2300      	movs	r3, #0
 8036ada:	4604      	mov	r4, r0
 8036adc:	4608      	mov	r0, r1
 8036ade:	602b      	str	r3, [r5, #0]
 8036ae0:	f000 f9ee 	bl	8036ec0 <_isatty>
 8036ae4:	1c43      	adds	r3, r0, #1
 8036ae6:	d102      	bne.n	8036aee <_isatty_r+0x1a>
 8036ae8:	682b      	ldr	r3, [r5, #0]
 8036aea:	b103      	cbz	r3, 8036aee <_isatty_r+0x1a>
 8036aec:	6023      	str	r3, [r4, #0]
 8036aee:	bd38      	pop	{r3, r4, r5, pc}
 8036af0:	24009bbc 	.word	0x24009bbc

08036af4 <checkint>:
 8036af4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8036af8:	2b7e      	cmp	r3, #126	@ 0x7e
 8036afa:	d910      	bls.n	8036b1e <checkint+0x2a>
 8036afc:	2b96      	cmp	r3, #150	@ 0x96
 8036afe:	d80c      	bhi.n	8036b1a <checkint+0x26>
 8036b00:	2201      	movs	r2, #1
 8036b02:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8036b06:	fa02 f303 	lsl.w	r3, r2, r3
 8036b0a:	1e5a      	subs	r2, r3, #1
 8036b0c:	4202      	tst	r2, r0
 8036b0e:	d106      	bne.n	8036b1e <checkint+0x2a>
 8036b10:	4203      	tst	r3, r0
 8036b12:	bf14      	ite	ne
 8036b14:	2001      	movne	r0, #1
 8036b16:	2002      	moveq	r0, #2
 8036b18:	4770      	bx	lr
 8036b1a:	2002      	movs	r0, #2
 8036b1c:	4770      	bx	lr
 8036b1e:	2000      	movs	r0, #0
 8036b20:	4770      	bx	lr
 8036b22:	0000      	movs	r0, r0
 8036b24:	0000      	movs	r0, r0
	...

08036b28 <powf>:
 8036b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8036b2a:	ee10 1a10 	vmov	r1, s0
 8036b2e:	ee10 4a90 	vmov	r4, s1
 8036b32:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8036b36:	0063      	lsls	r3, r4, #1
 8036b38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8036b3c:	eef0 7a40 	vmov.f32	s15, s0
 8036b40:	eeb0 7a60 	vmov.f32	s14, s1
 8036b44:	f103 30ff 	add.w	r0, r3, #4294967295
 8036b48:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8036b4c:	d252      	bcs.n	8036bf4 <powf+0xcc>
 8036b4e:	4290      	cmp	r0, r2
 8036b50:	d258      	bcs.n	8036c04 <powf+0xdc>
 8036b52:	2000      	movs	r0, #0
 8036b54:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8036b58:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8036b5c:	4a9e      	ldr	r2, [pc, #632]	@ (8036dd8 <powf+0x2b0>)
 8036b5e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8036b62:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8036b66:	f36f 0316 	bfc	r3, #0, #23
 8036b6a:	1ac9      	subs	r1, r1, r3
 8036b6c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8036b70:	ee07 1a90 	vmov	s15, r1
 8036b74:	ed94 5b02 	vldr	d5, [r4, #8]
 8036b78:	ed94 4b00 	vldr	d4, [r4]
 8036b7c:	15db      	asrs	r3, r3, #23
 8036b7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8036b82:	ee07 3a90 	vmov	s15, r3
 8036b86:	eea4 2b06 	vfma.f64	d2, d4, d6
 8036b8a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8036b8e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8036b92:	ee24 0b04 	vmul.f64	d0, d4, d4
 8036b96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8036b9a:	ee36 6b05 	vadd.f64	d6, d6, d5
 8036b9e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8036ba2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8036ba6:	eea2 1b05 	vfma.f64	d1, d2, d5
 8036baa:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8036bae:	eea2 5b03 	vfma.f64	d5, d2, d3
 8036bb2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8036bb6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8036bba:	eea2 6b03 	vfma.f64	d6, d2, d3
 8036bbe:	eea4 6b05 	vfma.f64	d6, d4, d5
 8036bc2:	eea1 6b00 	vfma.f64	d6, d1, d0
 8036bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8036bca:	ee17 3a90 	vmov	r3, s15
 8036bce:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8036bd2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8036bd6:	429a      	cmp	r2, r3
 8036bd8:	f0c0 8098 	bcc.w	8036d0c <powf+0x1e4>
 8036bdc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8036db8 <powf+0x290>
 8036be0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8036be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036be8:	dd79      	ble.n	8036cde <powf+0x1b6>
 8036bea:	b003      	add	sp, #12
 8036bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036bf0:	f000 b920 	b.w	8036e34 <__math_oflowf>
 8036bf4:	4290      	cmp	r0, r2
 8036bf6:	d330      	bcc.n	8036c5a <powf+0x132>
 8036bf8:	b12b      	cbz	r3, 8036c06 <powf+0xde>
 8036bfa:	0049      	lsls	r1, r1, #1
 8036bfc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8036c00:	d808      	bhi.n	8036c14 <powf+0xec>
 8036c02:	e015      	b.n	8036c30 <powf+0x108>
 8036c04:	b953      	cbnz	r3, 8036c1c <powf+0xf4>
 8036c06:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8036c0a:	0049      	lsls	r1, r1, #1
 8036c0c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8036c10:	f240 80ca 	bls.w	8036da8 <powf+0x280>
 8036c14:	ee37 0a87 	vadd.f32	s0, s15, s14
 8036c18:	b003      	add	sp, #12
 8036c1a:	bd30      	pop	{r4, r5, pc}
 8036c1c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8036c20:	d105      	bne.n	8036c2e <powf+0x106>
 8036c22:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8036c26:	0064      	lsls	r4, r4, #1
 8036c28:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8036c2c:	e7f0      	b.n	8036c10 <powf+0xe8>
 8036c2e:	0049      	lsls	r1, r1, #1
 8036c30:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8036c34:	d1ee      	bne.n	8036c14 <powf+0xec>
 8036c36:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8036c3a:	f000 80b5 	beq.w	8036da8 <powf+0x280>
 8036c3e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8036c42:	ea6f 0404 	mvn.w	r4, r4
 8036c46:	bf34      	ite	cc
 8036c48:	2100      	movcc	r1, #0
 8036c4a:	2101      	movcs	r1, #1
 8036c4c:	0fe4      	lsrs	r4, r4, #31
 8036c4e:	42a1      	cmp	r1, r4
 8036c50:	f040 80ad 	bne.w	8036dae <powf+0x286>
 8036c54:	ee27 0a07 	vmul.f32	s0, s14, s14
 8036c58:	e7de      	b.n	8036c18 <powf+0xf0>
 8036c5a:	004d      	lsls	r5, r1, #1
 8036c5c:	1e6b      	subs	r3, r5, #1
 8036c5e:	4293      	cmp	r3, r2
 8036c60:	d31b      	bcc.n	8036c9a <powf+0x172>
 8036c62:	2900      	cmp	r1, #0
 8036c64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8036c68:	da0e      	bge.n	8036c88 <powf+0x160>
 8036c6a:	4620      	mov	r0, r4
 8036c6c:	f7ff ff42 	bl	8036af4 <checkint>
 8036c70:	2801      	cmp	r0, #1
 8036c72:	d109      	bne.n	8036c88 <powf+0x160>
 8036c74:	eeb1 0a40 	vneg.f32	s0, s0
 8036c78:	b945      	cbnz	r5, 8036c8c <powf+0x164>
 8036c7a:	2c00      	cmp	r4, #0
 8036c7c:	dacc      	bge.n	8036c18 <powf+0xf0>
 8036c7e:	b003      	add	sp, #12
 8036c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036c84:	f000 b8dc 	b.w	8036e40 <__math_divzerof>
 8036c88:	2000      	movs	r0, #0
 8036c8a:	e7f5      	b.n	8036c78 <powf+0x150>
 8036c8c:	2c00      	cmp	r4, #0
 8036c8e:	dac3      	bge.n	8036c18 <powf+0xf0>
 8036c90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8036c94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8036c98:	e7be      	b.n	8036c18 <powf+0xf0>
 8036c9a:	2900      	cmp	r1, #0
 8036c9c:	da1d      	bge.n	8036cda <powf+0x1b2>
 8036c9e:	4620      	mov	r0, r4
 8036ca0:	f7ff ff28 	bl	8036af4 <checkint>
 8036ca4:	b920      	cbnz	r0, 8036cb0 <powf+0x188>
 8036ca6:	b003      	add	sp, #12
 8036ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036cac:	f000 b8da 	b.w	8036e64 <__math_invalidf>
 8036cb0:	1e43      	subs	r3, r0, #1
 8036cb2:	4258      	negs	r0, r3
 8036cb4:	4158      	adcs	r0, r3
 8036cb6:	0400      	lsls	r0, r0, #16
 8036cb8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8036cbc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8036cc0:	f4bf af48 	bcs.w	8036b54 <powf+0x2c>
 8036cc4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8036ddc <powf+0x2b4>
 8036cc8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8036ccc:	ee10 3a10 	vmov	r3, s0
 8036cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8036cd4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8036cd8:	e73c      	b.n	8036b54 <powf+0x2c>
 8036cda:	2000      	movs	r0, #0
 8036cdc:	e7ee      	b.n	8036cbc <powf+0x194>
 8036cde:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8036dc0 <powf+0x298>
 8036ce2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8036ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036cea:	dd45      	ble.n	8036d78 <powf+0x250>
 8036cec:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8036cf0:	b3d0      	cbz	r0, 8036d68 <powf+0x240>
 8036cf2:	9301      	str	r3, [sp, #4]
 8036cf4:	eddd 6a01 	vldr	s13, [sp, #4]
 8036cf8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8036cfc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8036d00:	eef4 6a46 	vcmp.f32	s13, s12
 8036d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036d08:	f47f af6f 	bne.w	8036bea <powf+0xc2>
 8036d0c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8036d10:	4b33      	ldr	r3, [pc, #204]	@ (8036de0 <powf+0x2b8>)
 8036d12:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8036d16:	ee37 6b05 	vadd.f64	d6, d7, d5
 8036d1a:	ee16 2a10 	vmov	r2, s12
 8036d1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8036d22:	f002 011f 	and.w	r1, r2, #31
 8036d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8036d2a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8036d2e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8036d32:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8036d36:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8036d3a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8036d3e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8036d42:	686d      	ldr	r5, [r5, #4]
 8036d44:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8036d48:	1880      	adds	r0, r0, r2
 8036d4a:	2100      	movs	r1, #0
 8036d4c:	190a      	adds	r2, r1, r4
 8036d4e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8036d52:	eea7 0b05 	vfma.f64	d0, d7, d5
 8036d56:	ec43 2b17 	vmov	d7, r2, r3
 8036d5a:	eea6 0b04 	vfma.f64	d0, d6, d4
 8036d5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8036d62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8036d66:	e757      	b.n	8036c18 <powf+0xf0>
 8036d68:	9300      	str	r3, [sp, #0]
 8036d6a:	eddd 6a00 	vldr	s13, [sp]
 8036d6e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8036d72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8036d76:	e7c3      	b.n	8036d00 <powf+0x1d8>
 8036d78:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8036dc8 <powf+0x2a0>
 8036d7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8036d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036d84:	d804      	bhi.n	8036d90 <powf+0x268>
 8036d86:	b003      	add	sp, #12
 8036d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036d8c:	f000 b846 	b.w	8036e1c <__math_uflowf>
 8036d90:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8036dd0 <powf+0x2a8>
 8036d94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8036d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036d9c:	d5b6      	bpl.n	8036d0c <powf+0x1e4>
 8036d9e:	b003      	add	sp, #12
 8036da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036da4:	f000 b840 	b.w	8036e28 <__math_may_uflowf>
 8036da8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8036dac:	e734      	b.n	8036c18 <powf+0xf0>
 8036dae:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8036de4 <powf+0x2bc>
 8036db2:	e731      	b.n	8036c18 <powf+0xf0>
 8036db4:	f3af 8000 	nop.w
 8036db8:	ffd1d571 	.word	0xffd1d571
 8036dbc:	405fffff 	.word	0x405fffff
 8036dc0:	ffa3aae2 	.word	0xffa3aae2
 8036dc4:	405fffff 	.word	0x405fffff
 8036dc8:	00000000 	.word	0x00000000
 8036dcc:	c062c000 	.word	0xc062c000
 8036dd0:	00000000 	.word	0x00000000
 8036dd4:	c062a000 	.word	0xc062a000
 8036dd8:	08059e40 	.word	0x08059e40
 8036ddc:	4b000000 	.word	0x4b000000
 8036de0:	08059cf8 	.word	0x08059cf8
 8036de4:	00000000 	.word	0x00000000

08036de8 <with_errnof>:
 8036de8:	b510      	push	{r4, lr}
 8036dea:	ed2d 8b02 	vpush	{d8}
 8036dee:	eeb0 8a40 	vmov.f32	s16, s0
 8036df2:	4604      	mov	r4, r0
 8036df4:	f000 f846 	bl	8036e84 <__errno>
 8036df8:	eeb0 0a48 	vmov.f32	s0, s16
 8036dfc:	ecbd 8b02 	vpop	{d8}
 8036e00:	6004      	str	r4, [r0, #0]
 8036e02:	bd10      	pop	{r4, pc}

08036e04 <xflowf>:
 8036e04:	b130      	cbz	r0, 8036e14 <xflowf+0x10>
 8036e06:	eef1 7a40 	vneg.f32	s15, s0
 8036e0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8036e0e:	2022      	movs	r0, #34	@ 0x22
 8036e10:	f7ff bfea 	b.w	8036de8 <with_errnof>
 8036e14:	eef0 7a40 	vmov.f32	s15, s0
 8036e18:	e7f7      	b.n	8036e0a <xflowf+0x6>
	...

08036e1c <__math_uflowf>:
 8036e1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8036e24 <__math_uflowf+0x8>
 8036e20:	f7ff bff0 	b.w	8036e04 <xflowf>
 8036e24:	10000000 	.word	0x10000000

08036e28 <__math_may_uflowf>:
 8036e28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8036e30 <__math_may_uflowf+0x8>
 8036e2c:	f7ff bfea 	b.w	8036e04 <xflowf>
 8036e30:	1a200000 	.word	0x1a200000

08036e34 <__math_oflowf>:
 8036e34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8036e3c <__math_oflowf+0x8>
 8036e38:	f7ff bfe4 	b.w	8036e04 <xflowf>
 8036e3c:	70000000 	.word	0x70000000

08036e40 <__math_divzerof>:
 8036e40:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8036e60 <__math_divzerof+0x20>
 8036e44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8036e48:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8036e4c:	2800      	cmp	r0, #0
 8036e4e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8036e52:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8036e56:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8036e5a:	f7ff bfc5 	b.w	8036de8 <with_errnof>
 8036e5e:	bf00      	nop
 8036e60:	00000000 	.word	0x00000000

08036e64 <__math_invalidf>:
 8036e64:	eef0 7a40 	vmov.f32	s15, s0
 8036e68:	ee30 7a40 	vsub.f32	s14, s0, s0
 8036e6c:	eef4 7a67 	vcmp.f32	s15, s15
 8036e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8036e74:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8036e78:	d602      	bvs.n	8036e80 <__math_invalidf+0x1c>
 8036e7a:	2021      	movs	r0, #33	@ 0x21
 8036e7c:	f7ff bfb4 	b.w	8036de8 <with_errnof>
 8036e80:	4770      	bx	lr
	...

08036e84 <__errno>:
 8036e84:	4b01      	ldr	r3, [pc, #4]	@ (8036e8c <__errno+0x8>)
 8036e86:	6818      	ldr	r0, [r3, #0]
 8036e88:	4770      	bx	lr
 8036e8a:	bf00      	nop
 8036e8c:	240082f8 	.word	0x240082f8

08036e90 <_close>:
 8036e90:	4b02      	ldr	r3, [pc, #8]	@ (8036e9c <_close+0xc>)
 8036e92:	2258      	movs	r2, #88	@ 0x58
 8036e94:	601a      	str	r2, [r3, #0]
 8036e96:	f04f 30ff 	mov.w	r0, #4294967295
 8036e9a:	4770      	bx	lr
 8036e9c:	24009bbc 	.word	0x24009bbc

08036ea0 <_fstat>:
 8036ea0:	4b02      	ldr	r3, [pc, #8]	@ (8036eac <_fstat+0xc>)
 8036ea2:	2258      	movs	r2, #88	@ 0x58
 8036ea4:	601a      	str	r2, [r3, #0]
 8036ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8036eaa:	4770      	bx	lr
 8036eac:	24009bbc 	.word	0x24009bbc

08036eb0 <_getpid>:
 8036eb0:	4b02      	ldr	r3, [pc, #8]	@ (8036ebc <_getpid+0xc>)
 8036eb2:	2258      	movs	r2, #88	@ 0x58
 8036eb4:	601a      	str	r2, [r3, #0]
 8036eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8036eba:	4770      	bx	lr
 8036ebc:	24009bbc 	.word	0x24009bbc

08036ec0 <_isatty>:
 8036ec0:	4b02      	ldr	r3, [pc, #8]	@ (8036ecc <_isatty+0xc>)
 8036ec2:	2258      	movs	r2, #88	@ 0x58
 8036ec4:	601a      	str	r2, [r3, #0]
 8036ec6:	2000      	movs	r0, #0
 8036ec8:	4770      	bx	lr
 8036eca:	bf00      	nop
 8036ecc:	24009bbc 	.word	0x24009bbc

08036ed0 <_kill>:
 8036ed0:	4b02      	ldr	r3, [pc, #8]	@ (8036edc <_kill+0xc>)
 8036ed2:	2258      	movs	r2, #88	@ 0x58
 8036ed4:	601a      	str	r2, [r3, #0]
 8036ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8036eda:	4770      	bx	lr
 8036edc:	24009bbc 	.word	0x24009bbc

08036ee0 <_lseek>:
 8036ee0:	4b02      	ldr	r3, [pc, #8]	@ (8036eec <_lseek+0xc>)
 8036ee2:	2258      	movs	r2, #88	@ 0x58
 8036ee4:	601a      	str	r2, [r3, #0]
 8036ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8036eea:	4770      	bx	lr
 8036eec:	24009bbc 	.word	0x24009bbc

08036ef0 <_read>:
 8036ef0:	4b02      	ldr	r3, [pc, #8]	@ (8036efc <_read+0xc>)
 8036ef2:	2258      	movs	r2, #88	@ 0x58
 8036ef4:	601a      	str	r2, [r3, #0]
 8036ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8036efa:	4770      	bx	lr
 8036efc:	24009bbc 	.word	0x24009bbc

08036f00 <_sbrk>:
 8036f00:	4a04      	ldr	r2, [pc, #16]	@ (8036f14 <_sbrk+0x14>)
 8036f02:	6811      	ldr	r1, [r2, #0]
 8036f04:	4603      	mov	r3, r0
 8036f06:	b909      	cbnz	r1, 8036f0c <_sbrk+0xc>
 8036f08:	4903      	ldr	r1, [pc, #12]	@ (8036f18 <_sbrk+0x18>)
 8036f0a:	6011      	str	r1, [r2, #0]
 8036f0c:	6810      	ldr	r0, [r2, #0]
 8036f0e:	4403      	add	r3, r0
 8036f10:	6013      	str	r3, [r2, #0]
 8036f12:	4770      	bx	lr
 8036f14:	24009bc4 	.word	0x24009bc4
 8036f18:	20000000 	.word	0x20000000

08036f1c <_write>:
 8036f1c:	4b02      	ldr	r3, [pc, #8]	@ (8036f28 <_write+0xc>)
 8036f1e:	2258      	movs	r2, #88	@ 0x58
 8036f20:	601a      	str	r2, [r3, #0]
 8036f22:	f04f 30ff 	mov.w	r0, #4294967295
 8036f26:	4770      	bx	lr
 8036f28:	24009bbc 	.word	0x24009bbc

08036f2c <_exit>:
 8036f2c:	e7fe      	b.n	8036f2c <_exit>
	...

08036f30 <_init>:
 8036f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036f32:	bf00      	nop
 8036f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8036f36:	bc08      	pop	{r3}
 8036f38:	469e      	mov	lr, r3
 8036f3a:	4770      	bx	lr

08036f3c <_fini>:
 8036f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036f3e:	bf00      	nop
 8036f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8036f42:	bc08      	pop	{r3}
 8036f44:	469e      	mov	lr, r3
 8036f46:	4770      	bx	lr
